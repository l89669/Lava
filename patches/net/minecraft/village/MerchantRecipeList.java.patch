--- ../src-base/minecraft/net/minecraft/village/MerchantRecipeList.java
+++ ../src-work/minecraft/net/minecraft/village/MerchantRecipeList.java
@@ -1,8 +1,5 @@
 package net.minecraft.village;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import javax.annotation.Nullable;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
@@ -11,33 +8,28 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class MerchantRecipeList extends ArrayList<MerchantRecipe>
-{
-    public MerchantRecipeList()
-    {
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class MerchantRecipeList extends ArrayList<MerchantRecipe> {
+    public MerchantRecipeList() {
     }
 
-    public MerchantRecipeList(NBTTagCompound compound)
-    {
+    public MerchantRecipeList(NBTTagCompound compound) {
         this.readRecipiesFromTags(compound);
     }
 
     @Nullable
-    public MerchantRecipe canRecipeBeUsed(ItemStack stack0, ItemStack stack1, int index)
-    {
-        if (index > 0 && index < this.size())
-        {
-            MerchantRecipe merchantrecipe1 = (MerchantRecipe)this.get(index);
+    public MerchantRecipe canRecipeBeUsed(ItemStack stack0, ItemStack stack1, int index) {
+        if (index > 0 && index < this.size()) {
+            MerchantRecipe merchantrecipe1 = (MerchantRecipe) this.get(index);
             return !this.areItemStacksExactlyEqual(stack0, merchantrecipe1.getItemToBuy()) || (!stack1.isEmpty() || merchantrecipe1.hasSecondItemToBuy()) && (!merchantrecipe1.hasSecondItemToBuy() || !this.areItemStacksExactlyEqual(stack1, merchantrecipe1.getSecondItemToBuy())) || stack0.getCount() < merchantrecipe1.getItemToBuy().getCount() || merchantrecipe1.hasSecondItemToBuy() && stack1.getCount() < merchantrecipe1.getSecondItemToBuy().getCount() ? null : merchantrecipe1;
-        }
-        else
-        {
-            for (int i = 0; i < this.size(); ++i)
-            {
-                MerchantRecipe merchantrecipe = (MerchantRecipe)this.get(i);
+        } else {
+            for (int i = 0; i < this.size(); ++i) {
+                MerchantRecipe merchantrecipe = (MerchantRecipe) this.get(i);
 
-                if (this.areItemStacksExactlyEqual(stack0, merchantrecipe.getItemToBuy()) && stack0.getCount() >= merchantrecipe.getItemToBuy().getCount() && (!merchantrecipe.hasSecondItemToBuy() && stack1.isEmpty() || merchantrecipe.hasSecondItemToBuy() && this.areItemStacksExactlyEqual(stack1, merchantrecipe.getSecondItemToBuy()) && stack1.getCount() >= merchantrecipe.getSecondItemToBuy().getCount()))
-                {
+                if (this.areItemStacksExactlyEqual(stack0, merchantrecipe.getItemToBuy()) && stack0.getCount() >= merchantrecipe.getItemToBuy().getCount() && (!merchantrecipe.hasSecondItemToBuy() && stack1.isEmpty() || merchantrecipe.hasSecondItemToBuy() && this.areItemStacksExactlyEqual(stack1, merchantrecipe.getSecondItemToBuy()) && stack1.getCount() >= merchantrecipe.getSecondItemToBuy().getCount())) {
                     return merchantrecipe;
                 }
             }
@@ -46,25 +38,21 @@
         }
     }
 
-    private boolean areItemStacksExactlyEqual(ItemStack stack1, ItemStack stack2)
-    {
+    private boolean areItemStacksExactlyEqual(ItemStack stack1, ItemStack stack2) {
         return ItemStack.areItemsEqual(stack1, stack2) && (!stack2.hasTagCompound() || stack1.hasTagCompound() && NBTUtil.areNBTEquals(stack2.getTagCompound(), stack1.getTagCompound(), false));
     }
 
-    public void writeToBuf(PacketBuffer buffer)
-    {
-        buffer.writeByte((byte)(this.size() & 255));
+    public void writeToBuf(PacketBuffer buffer) {
+        buffer.writeByte((byte) (this.size() & 255));
 
-        for (int i = 0; i < this.size(); ++i)
-        {
-            MerchantRecipe merchantrecipe = (MerchantRecipe)this.get(i);
+        for (int i = 0; i < this.size(); ++i) {
+            MerchantRecipe merchantrecipe = (MerchantRecipe) this.get(i);
             buffer.writeItemStack(merchantrecipe.getItemToBuy());
             buffer.writeItemStack(merchantrecipe.getItemToSell());
             ItemStack itemstack = merchantrecipe.getSecondItemToBuy();
             buffer.writeBoolean(!itemstack.isEmpty());
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 buffer.writeItemStack(itemstack);
             }
 
@@ -74,25 +62,21 @@
         }
     }
 
-    public void readRecipiesFromTags(NBTTagCompound compound)
-    {
+    public void readRecipiesFromTags(NBTTagCompound compound) {
         NBTTagList nbttaglist = compound.getTagList("Recipes", 10);
 
-        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-        {
+        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
             NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
             this.add(new MerchantRecipe(nbttagcompound));
         }
     }
 
-    public NBTTagCompound getRecipiesAsTags()
-    {
+    public NBTTagCompound getRecipiesAsTags() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.size(); ++i)
-        {
-            MerchantRecipe merchantrecipe = (MerchantRecipe)this.get(i);
+        for (int i = 0; i < this.size(); ++i) {
+            MerchantRecipe merchantrecipe = (MerchantRecipe) this.get(i);
             nbttaglist.appendTag(merchantrecipe.writeToTags());
         }
 
@@ -101,19 +85,16 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public static MerchantRecipeList readFromBuf(PacketBuffer buffer) throws IOException
-    {
+    public static MerchantRecipeList readFromBuf(PacketBuffer buffer) throws IOException {
         MerchantRecipeList merchantrecipelist = new MerchantRecipeList();
         int i = buffer.readByte() & 255;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             ItemStack itemstack = buffer.readItemStack();
             ItemStack itemstack1 = buffer.readItemStack();
             ItemStack itemstack2 = ItemStack.EMPTY;
 
-            if (buffer.readBoolean())
-            {
+            if (buffer.readBoolean()) {
                 itemstack2 = buffer.readItemStack();
             }
 
@@ -122,8 +103,7 @@
             int l = buffer.readInt();
             MerchantRecipe merchantrecipe = new MerchantRecipe(itemstack, itemstack2, itemstack1, k, l);
 
-            if (flag)
-            {
+            if (flag) {
                 merchantrecipe.compensateToolUses();
             }
 
