--- ../src-base/minecraft/net/minecraft/scoreboard/ScorePlayerTeam.java
+++ ../src-work/minecraft/net/minecraft/scoreboard/ScorePlayerTeam.java
@@ -1,15 +1,15 @@
 package net.minecraft.scoreboard;
 
 import com.google.common.collect.Sets;
-import java.util.Collection;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ScorePlayerTeam extends Team
-{
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.Set;
+
+public class ScorePlayerTeam extends Team {
     private final Scoreboard scoreboard;
     private final String name;
     private final Set<String> membershipSet = Sets.<String>newHashSet();
@@ -23,146 +23,116 @@
     private TextFormatting color = TextFormatting.RESET;
     private Team.CollisionRule collisionRule = Team.CollisionRule.ALWAYS;
 
-    public ScorePlayerTeam(Scoreboard scoreboardIn, String name)
-    {
+    public ScorePlayerTeam(Scoreboard scoreboardIn, String name) {
         this.scoreboard = scoreboardIn;
         this.name = name;
         this.displayName = name;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.name;
     }
 
-    public String getDisplayName()
-    {
+    public String getDisplayName() {
         return this.displayName;
     }
 
-    public void setDisplayName(String name)
-    {
-        if (name == null)
-        {
+    public void setDisplayName(String name) {
+        if (name == null) {
             throw new IllegalArgumentException("Name cannot be null");
-        }
-        else
-        {
+        } else {
             this.displayName = name;
             this.scoreboard.broadcastTeamInfoUpdate(this);
         }
     }
 
-    public Collection<String> getMembershipCollection()
-    {
+    public Collection<String> getMembershipCollection() {
         return this.membershipSet;
     }
 
-    public String getPrefix()
-    {
+    public String getPrefix() {
         return this.prefix;
     }
 
-    public void setPrefix(String prefix)
-    {
-        if (prefix == null)
-        {
+    public void setPrefix(String prefix) {
+        if (prefix == null) {
             throw new IllegalArgumentException("Prefix cannot be null");
-        }
-        else
-        {
+        } else {
             this.prefix = prefix;
             this.scoreboard.broadcastTeamInfoUpdate(this);
         }
     }
 
-    public String getSuffix()
-    {
+    public String getSuffix() {
         return this.suffix;
     }
 
-    public void setSuffix(String suffix)
-    {
+    public void setSuffix(String suffix) {
         this.suffix = suffix;
         this.scoreboard.broadcastTeamInfoUpdate(this);
     }
 
-    public String formatString(String input)
-    {
+    public String formatString(String input) {
         return this.getPrefix() + input + this.getSuffix();
     }
 
-    public static String formatPlayerName(@Nullable Team teamIn, String string)
-    {
+    public static String formatPlayerName(@Nullable Team teamIn, String string) {
         return teamIn == null ? string : teamIn.formatString(string);
     }
 
-    public boolean getAllowFriendlyFire()
-    {
+    public boolean getAllowFriendlyFire() {
         return this.allowFriendlyFire;
     }
 
-    public void setAllowFriendlyFire(boolean friendlyFire)
-    {
+    public void setAllowFriendlyFire(boolean friendlyFire) {
         this.allowFriendlyFire = friendlyFire;
         this.scoreboard.broadcastTeamInfoUpdate(this);
     }
 
-    public boolean getSeeFriendlyInvisiblesEnabled()
-    {
+    public boolean getSeeFriendlyInvisiblesEnabled() {
         return this.canSeeFriendlyInvisibles;
     }
 
-    public void setSeeFriendlyInvisiblesEnabled(boolean friendlyInvisibles)
-    {
+    public void setSeeFriendlyInvisiblesEnabled(boolean friendlyInvisibles) {
         this.canSeeFriendlyInvisibles = friendlyInvisibles;
         this.scoreboard.broadcastTeamInfoUpdate(this);
     }
 
-    public Team.EnumVisible getNameTagVisibility()
-    {
+    public Team.EnumVisible getNameTagVisibility() {
         return this.nameTagVisibility;
     }
 
-    public Team.EnumVisible getDeathMessageVisibility()
-    {
+    public Team.EnumVisible getDeathMessageVisibility() {
         return this.deathMessageVisibility;
     }
 
-    public void setNameTagVisibility(Team.EnumVisible visibility)
-    {
+    public void setNameTagVisibility(Team.EnumVisible visibility) {
         this.nameTagVisibility = visibility;
         this.scoreboard.broadcastTeamInfoUpdate(this);
     }
 
-    public void setDeathMessageVisibility(Team.EnumVisible visibility)
-    {
+    public void setDeathMessageVisibility(Team.EnumVisible visibility) {
         this.deathMessageVisibility = visibility;
         this.scoreboard.broadcastTeamInfoUpdate(this);
     }
 
-    public Team.CollisionRule getCollisionRule()
-    {
+    public Team.CollisionRule getCollisionRule() {
         return this.collisionRule;
     }
 
-    public void setCollisionRule(Team.CollisionRule rule)
-    {
+    public void setCollisionRule(Team.CollisionRule rule) {
         this.collisionRule = rule;
         this.scoreboard.broadcastTeamInfoUpdate(this);
     }
 
-    public int getFriendlyFlags()
-    {
+    public int getFriendlyFlags() {
         int i = 0;
 
-        if (this.getAllowFriendlyFire())
-        {
+        if (this.getAllowFriendlyFire()) {
             i |= 1;
         }
 
-        if (this.getSeeFriendlyInvisiblesEnabled())
-        {
+        if (this.getSeeFriendlyInvisiblesEnabled()) {
             i |= 2;
         }
 
@@ -170,19 +140,16 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void setFriendlyFlags(int flags)
-    {
+    public void setFriendlyFlags(int flags) {
         this.setAllowFriendlyFire((flags & 1) > 0);
         this.setSeeFriendlyInvisiblesEnabled((flags & 2) > 0);
     }
 
-    public void setColor(TextFormatting color)
-    {
+    public void setColor(TextFormatting color) {
         this.color = color;
     }
 
-    public TextFormatting getColor()
-    {
+    public TextFormatting getColor() {
         return this.color;
     }
 }
