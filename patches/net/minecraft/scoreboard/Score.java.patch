--- ../src-base/minecraft/net/minecraft/scoreboard/Score.java
+++ ../src-work/minecraft/net/minecraft/scoreboard/Score.java
@@ -2,18 +2,12 @@
 
 import java.util.Comparator;
 
-public class Score
-{
-    public static final Comparator<Score> SCORE_COMPARATOR = new Comparator<Score>()
-    {
-        public int compare(Score p_compare_1_, Score p_compare_2_)
-        {
-            if (p_compare_1_.getScorePoints() > p_compare_2_.getScorePoints())
-            {
+public class Score {
+    public static final Comparator<Score> SCORE_COMPARATOR = new Comparator<Score>() {
+        public int compare(Score p_compare_1_, Score p_compare_2_) {
+            if (p_compare_1_.getScorePoints() > p_compare_2_.getScorePoints()) {
                 return 1;
-            }
-            else
-            {
+            } else {
                 return p_compare_1_.getScorePoints() < p_compare_2_.getScorePoints() ? -1 : p_compare_2_.getPlayerName().compareToIgnoreCase(p_compare_1_.getPlayerName());
             }
         }
@@ -25,89 +19,68 @@
     private boolean locked;
     private boolean forceUpdate;
 
-    public Score(Scoreboard scoreboard, ScoreObjective objective, String playerName)
-    {
+    public Score(Scoreboard scoreboard, ScoreObjective objective, String playerName) {
         this.scoreboard = scoreboard;
         this.objective = objective;
         this.scorePlayerName = playerName;
         this.forceUpdate = true;
     }
 
-    public void increaseScore(int amount)
-    {
-        if (this.objective.getCriteria().isReadOnly())
-        {
+    public void increaseScore(int amount) {
+        if (this.objective.getCriteria().isReadOnly()) {
             throw new IllegalStateException("Cannot modify read-only score");
-        }
-        else
-        {
+        } else {
             this.setScorePoints(this.getScorePoints() + amount);
         }
     }
 
-    public void decreaseScore(int amount)
-    {
-        if (this.objective.getCriteria().isReadOnly())
-        {
+    public void decreaseScore(int amount) {
+        if (this.objective.getCriteria().isReadOnly()) {
             throw new IllegalStateException("Cannot modify read-only score");
-        }
-        else
-        {
+        } else {
             this.setScorePoints(this.getScorePoints() - amount);
         }
     }
 
-    public void incrementScore()
-    {
-        if (this.objective.getCriteria().isReadOnly())
-        {
+    public void incrementScore() {
+        if (this.objective.getCriteria().isReadOnly()) {
             throw new IllegalStateException("Cannot modify read-only score");
-        }
-        else
-        {
+        } else {
             this.increaseScore(1);
         }
     }
 
-    public int getScorePoints()
-    {
+    public int getScorePoints() {
         return this.scorePoints;
     }
 
-    public void setScorePoints(int points)
-    {
+    public void setScorePoints(int points) {
         int i = this.scorePoints;
         this.scorePoints = points;
 
-        if (i != points || this.forceUpdate)
-        {
+        if (i != points || this.forceUpdate) {
             this.forceUpdate = false;
             this.getScoreScoreboard().onScoreUpdated(this);
         }
     }
 
-    public ScoreObjective getObjective()
-    {
+    public ScoreObjective getObjective() {
         return this.objective;
     }
 
-    public String getPlayerName()
-    {
+    public String getPlayerName() {
         return this.scorePlayerName;
     }
 
-    public Scoreboard getScoreScoreboard()
-    {
+    public Scoreboard getScoreScoreboard() {
         return this.scoreboard;
     }
 
-    public boolean isLocked()
-    {
+    public boolean isLocked() {
         return this.locked;
     }
 
-    public void setLocked(boolean locked)
-    {
+    public void setLocked(boolean locked) {
         this.locked = locked;
     }
 }
