--- ../src-base/minecraft/net/minecraft/scoreboard/Team.java
+++ ../src-work/minecraft/net/minecraft/scoreboard/Team.java
@@ -1,23 +1,19 @@
 package net.minecraft.scoreboard;
 
 import com.google.common.collect.Maps;
-import java.util.Collection;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class Team
-{
-    public boolean isSameTeam(@Nullable Team other)
-    {
-        if (other == null)
-        {
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.Map;
+
+public abstract class Team {
+    public boolean isSameTeam(@Nullable Team other) {
+        if (other == null) {
             return false;
-        }
-        else
-        {
+        } else {
             return this == other;
         }
     }
@@ -42,8 +38,7 @@
 
     public abstract Team.CollisionRule getCollisionRule();
 
-    public static enum CollisionRule
-    {
+    public static enum CollisionRule {
         ALWAYS("always", 0),
         NEVER("never", 1),
         HIDE_FOR_OTHER_TEAMS("pushOtherTeams", 2),
@@ -53,34 +48,28 @@
         public final String name;
         public final int id;
 
-        public static String[] getNames()
-        {
-            return (String[])nameMap.keySet().toArray(new String[nameMap.size()]);
+        public static String[] getNames() {
+            return (String[]) nameMap.keySet().toArray(new String[nameMap.size()]);
         }
 
         @Nullable
-        public static Team.CollisionRule getByName(String nameIn)
-        {
+        public static Team.CollisionRule getByName(String nameIn) {
             return nameMap.get(nameIn);
         }
 
-        private CollisionRule(String nameIn, int idIn)
-        {
+        private CollisionRule(String nameIn, int idIn) {
             this.name = nameIn;
             this.id = idIn;
         }
 
-        static
-        {
-            for (Team.CollisionRule team$collisionrule : values())
-            {
+        static {
+            for (Team.CollisionRule team$collisionrule : values()) {
                 nameMap.put(team$collisionrule.name, team$collisionrule);
             }
         }
     }
 
-    public static enum EnumVisible
-    {
+    public static enum EnumVisible {
         ALWAYS("always", 0),
         NEVER("never", 1),
         HIDE_FOR_OTHER_TEAMS("hideForOtherTeams", 2),
@@ -90,27 +79,22 @@
         public final String internalName;
         public final int id;
 
-        public static String[] getNames()
-        {
-            return (String[])nameMap.keySet().toArray(new String[nameMap.size()]);
+        public static String[] getNames() {
+            return (String[]) nameMap.keySet().toArray(new String[nameMap.size()]);
         }
 
         @Nullable
-        public static Team.EnumVisible getByName(String nameIn)
-        {
+        public static Team.EnumVisible getByName(String nameIn) {
             return nameMap.get(nameIn);
         }
 
-        private EnumVisible(String nameIn, int idIn)
-        {
+        private EnumVisible(String nameIn, int idIn) {
             this.internalName = nameIn;
             this.id = idIn;
         }
 
-        static
-        {
-            for (Team.EnumVisible team$enumvisible : values())
-            {
+        static {
+            for (Team.EnumVisible team$enumvisible : values()) {
                 nameMap.put(team$enumvisible.internalName, team$enumvisible);
             }
         }
