--- ../src-base/minecraft/net/minecraft/network/datasync/EntityDataManager.java
+++ ../src-work/minecraft/net/minecraft/network/datasync/EntityDataManager.java
@@ -4,12 +4,7 @@
 import com.google.common.collect.Maps;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
@@ -21,60 +16,56 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class EntityDataManager
-{
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+public class EntityDataManager {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map < Class <? extends Entity > , Integer > NEXT_ID_MAP = Maps. < Class <? extends Entity > , Integer > newHashMap();
+    private static final Map<Class<? extends Entity>, Integer> NEXT_ID_MAP = Maps.<Class<? extends Entity>, Integer>newHashMap();
     private final Entity entity;
-    private final Map < Integer, EntityDataManager.DataEntry<? >> entries = Maps. < Integer, EntityDataManager.DataEntry<? >> newHashMap();
+    private final Map<Integer, EntityDataManager.DataEntry<?>> entries = new Int2ObjectOpenHashMap<>(); // Paper
     private final ReadWriteLock lock = new ReentrantReadWriteLock();
     private boolean empty = true;
     private boolean dirty;
 
-    public EntityDataManager(Entity entityIn)
-    {
+    public EntityDataManager(Entity entityIn) {
         this.entity = entityIn;
     }
 
-    public static <T> DataParameter<T> createKey(Class <? extends Entity > clazz, DataSerializer<T> serializer)
-    {
+    public static <T> DataParameter<T> createKey(Class<? extends Entity> clazz, DataSerializer<T> serializer) {
         if (true || LOGGER.isDebugEnabled()) //Forge: This is very useful for mods that register keys on classes that are not their own
         {
-            try
-            {
+            try {
                 Class<?> oclass = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
 
-                if (!oclass.equals(clazz))
-                {
+                if (!oclass.equals(clazz)) {
                     //Forge: log at warn, mods should not add to classes that they don't own, and only add stacktrace when in debug is enabled as it is mostly not needed and consumes time
-                    if (LOGGER.isDebugEnabled()) LOGGER.warn("defineId called for: {} from {}", clazz, oclass, new RuntimeException());
+                    if (LOGGER.isDebugEnabled())
+                        LOGGER.warn("defineId called for: {} from {}", clazz, oclass, new RuntimeException());
                     else LOGGER.warn("defineId called for: {} from {}", clazz, oclass);
                 }
-            }
-            catch (ClassNotFoundException var5)
-            {
+            } catch (ClassNotFoundException var5) {
                 ;
             }
         }
 
         int j;
 
-        if (NEXT_ID_MAP.containsKey(clazz))
-        {
-            j = ((Integer)NEXT_ID_MAP.get(clazz)).intValue() + 1;
-        }
-        else
-        {
+        if (NEXT_ID_MAP.containsKey(clazz)) {
+            j = ((Integer) NEXT_ID_MAP.get(clazz)).intValue() + 1;
+        } else {
             int i = 0;
             Class<?> oclass1 = clazz;
 
-            while (oclass1 != Entity.class)
-            {
+            while (oclass1 != Entity.class) {
                 oclass1 = oclass1.getSuperclass();
 
-                if (NEXT_ID_MAP.containsKey(oclass1))
-                {
-                    i = ((Integer)NEXT_ID_MAP.get(oclass1)).intValue() + 1;
+                if (NEXT_ID_MAP.containsKey(oclass1)) {
+                    i = ((Integer) NEXT_ID_MAP.get(oclass1)).intValue() + 1;
                     break;
                 }
             }
@@ -82,41 +73,29 @@
             j = i;
         }
 
-        if (j > 254)
-        {
+        if (j > 254) {
             throw new IllegalArgumentException("Data value id is too big with " + j + "! (Max is " + 254 + ")");
-        }
-        else
-        {
+        } else {
             NEXT_ID_MAP.put(clazz, Integer.valueOf(j));
             return serializer.createKey(j);
         }
     }
 
-    public <T> void register(DataParameter<T> key, T value)
-    {
+    public <T> void register(DataParameter<T> key, T value) {
         int i = key.getId();
 
-        if (i > 254)
-        {
+        if (i > 254) {
             throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 254 + ")");
-        }
-        else if (this.entries.containsKey(Integer.valueOf(i)))
-        {
+        } else if (this.entries.containsKey(Integer.valueOf(i))) {
             throw new IllegalArgumentException("Duplicate id value for " + i + "!");
-        }
-        else if (DataSerializers.getSerializerId(key.getSerializer()) < 0)
-        {
+        } else if (DataSerializers.getSerializerId(key.getSerializer()) < 0) {
             throw new IllegalArgumentException("Unregistered serializer " + key.getSerializer() + " for " + i + "!");
-        }
-        else
-        {
+        } else {
             this.setEntry(key, value);
         }
     }
 
-    private <T> void setEntry(DataParameter<T> key, T value)
-    {
+    private <T> void setEntry(DataParameter<T> key, T value) {
         EntityDataManager.DataEntry<T> dataentry = new EntityDataManager.DataEntry<T>(key, value);
         this.lock.writeLock().lock();
         this.entries.put(Integer.valueOf(key.getId()), dataentry);
@@ -124,17 +103,13 @@
         this.lock.writeLock().unlock();
     }
 
-    private <T> EntityDataManager.DataEntry<T> getEntry(DataParameter<T> key)
-    {
+    private <T> EntityDataManager.DataEntry<T> getEntry(DataParameter<T> key) {
         this.lock.readLock().lock();
         EntityDataManager.DataEntry<T> dataentry;
 
-        try
-        {
-            dataentry = (EntityDataManager.DataEntry)this.entries.get(Integer.valueOf(key.getId()));
-        }
-        catch (Throwable throwable)
-        {
+        try {
+            dataentry = (EntityDataManager.DataEntry) this.entries.get(Integer.valueOf(key.getId()));
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Getting synched entity data");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Synched entity data");
             crashreportcategory.addCrashSection("Data ID", key);
@@ -145,17 +120,14 @@
         return dataentry;
     }
 
-    public <T> T get(DataParameter<T> key)
-    {
-        return (T)this.getEntry(key).getValue();
+    public <T> T get(DataParameter<T> key) {
+        return (T) this.getEntry(key).getValue();
     }
 
-    public <T> void set(DataParameter<T> key, T value)
-    {
+    public <T> void set(DataParameter<T> key, T value) {
         EntityDataManager.DataEntry<T> dataentry = this.<T>getEntry(key);
 
-        if (ObjectUtils.notEqual(value, dataentry.getValue()))
-        {
+        if (ObjectUtils.notEqual(value, dataentry.getValue())) {
             dataentry.setValue(value);
             this.entity.notifyDataManagerChange(key);
             dataentry.setDirty(true);
@@ -163,26 +135,21 @@
         }
     }
 
-    public <T> void setDirty(DataParameter<T> key)
-    {
+    public <T> void setDirty(DataParameter<T> key) {
         this.getEntry(key).dirty = true;
         this.dirty = true;
     }
 
-    public boolean isDirty()
-    {
+    public boolean isDirty() {
         return this.dirty;
     }
 
-    public static void writeEntries(List < EntityDataManager.DataEntry<? >> entriesIn, PacketBuffer buf) throws IOException
-    {
-        if (entriesIn != null)
-        {
+    public static void writeEntries(List<EntityDataManager.DataEntry<?>> entriesIn, PacketBuffer buf) throws IOException {
+        if (entriesIn != null) {
             int i = 0;
 
-            for (int j = entriesIn.size(); i < j; ++i)
-            {
-                EntityDataManager.DataEntry<?> dataentry = (EntityDataManager.DataEntry)entriesIn.get(i);
+            for (int j = entriesIn.size(); i < j; ++i) {
+                EntityDataManager.DataEntry<?> dataentry = (EntityDataManager.DataEntry) entriesIn.get(i);
                 writeEntry(buf, dataentry);
             }
         }
@@ -191,23 +158,18 @@
     }
 
     @Nullable
-    public List < EntityDataManager.DataEntry<? >> getDirty()
-    {
-        List < EntityDataManager.DataEntry<? >> list = null;
+    public List<EntityDataManager.DataEntry<?>> getDirty() {
+        List<EntityDataManager.DataEntry<?>> list = null;
 
-        if (this.dirty)
-        {
+        if (this.dirty) {
             this.lock.readLock().lock();
 
-            for (EntityDataManager.DataEntry<?> dataentry : this.entries.values())
-            {
-                if (dataentry.isDirty())
-                {
+            for (EntityDataManager.DataEntry<?> dataentry : this.entries.values()) {
+                if (dataentry.isDirty()) {
                     dataentry.setDirty(false);
 
-                    if (list == null)
-                    {
-                        list = Lists. < EntityDataManager.DataEntry<? >> newArrayList();
+                    if (list == null) {
+                        list = Lists.<EntityDataManager.DataEntry<?>>newArrayList();
                     }
 
                     list.add(dataentry.copy());
@@ -221,12 +183,10 @@
         return list;
     }
 
-    public void writeEntries(PacketBuffer buf) throws IOException
-    {
+    public void writeEntries(PacketBuffer buf) throws IOException {
         this.lock.readLock().lock();
 
-        for (EntityDataManager.DataEntry<?> dataentry : this.entries.values())
-        {
+        for (EntityDataManager.DataEntry<?> dataentry : this.entries.values()) {
             writeEntry(buf, dataentry);
         }
 
@@ -235,16 +195,13 @@
     }
 
     @Nullable
-    public List < EntityDataManager.DataEntry<? >> getAll()
-    {
-        List < EntityDataManager.DataEntry<? >> list = null;
+    public List<EntityDataManager.DataEntry<?>> getAll() {
+        List<EntityDataManager.DataEntry<?>> list = null;
         this.lock.readLock().lock();
 
-        for (EntityDataManager.DataEntry<?> dataentry : this.entries.values())
-        {
-            if (list == null)
-            {
-                list = Lists. < EntityDataManager.DataEntry<? >> newArrayList();
+        for (EntityDataManager.DataEntry<?> dataentry : this.entries.values()) {
+            if (list == null) {
+                list = Lists.<EntityDataManager.DataEntry<?>>newArrayList();
             }
 
             list.add(dataentry.copy());
@@ -254,17 +211,13 @@
         return list;
     }
 
-    private static <T> void writeEntry(PacketBuffer buf, EntityDataManager.DataEntry<T> entry) throws IOException
-    {
+    private static <T> void writeEntry(PacketBuffer buf, EntityDataManager.DataEntry<T> entry) throws IOException {
         DataParameter<T> dataparameter = entry.getKey();
         int i = DataSerializers.getSerializerId(dataparameter.getSerializer());
 
-        if (i < 0)
-        {
+        if (i < 0) {
             throw new EncoderException("Unknown serializer type " + dataparameter.getSerializer());
-        }
-        else
-        {
+        } else {
             buf.writeByte(dataparameter.getId());
             buf.writeVarInt(i);
             dataparameter.getSerializer().write(buf, entry.getValue());
@@ -272,23 +225,19 @@
     }
 
     @Nullable
-    public static List < EntityDataManager.DataEntry<? >> readEntries(PacketBuffer buf) throws IOException
-    {
-        List < EntityDataManager.DataEntry<? >> list = null;
+    public static List<EntityDataManager.DataEntry<?>> readEntries(PacketBuffer buf) throws IOException {
+        List<EntityDataManager.DataEntry<?>> list = null;
         int i;
 
-        while ((i = buf.readUnsignedByte()) != 255)
-        {
-            if (list == null)
-            {
-                list = Lists. < EntityDataManager.DataEntry<? >> newArrayList();
+        while ((i = buf.readUnsignedByte()) != 255) {
+            if (list == null) {
+                list = Lists.<EntityDataManager.DataEntry<?>>newArrayList();
             }
 
             int j = buf.readVarInt();
             DataSerializer<?> dataserializer = DataSerializers.getSerializer(j);
 
-            if (dataserializer == null)
-            {
+            if (dataserializer == null) {
                 throw new DecoderException("Unknown serializer type " + j);
             }
 
@@ -299,16 +248,13 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void setEntryValues(List < EntityDataManager.DataEntry<? >> entriesIn)
-    {
+    public void setEntryValues(List<EntityDataManager.DataEntry<?>> entriesIn) {
         this.lock.writeLock().lock();
 
-        for (EntityDataManager.DataEntry<?> dataentry : entriesIn)
-        {
-            EntityDataManager.DataEntry<?> dataentry1 = (EntityDataManager.DataEntry)this.entries.get(Integer.valueOf(dataentry.getKey().getId()));
+        for (EntityDataManager.DataEntry<?> dataentry : entriesIn) {
+            EntityDataManager.DataEntry<?> dataentry1 = (EntityDataManager.DataEntry) this.entries.get(Integer.valueOf(dataentry.getKey().getId()));
 
-            if (dataentry1 != null)
-            {
+            if (dataentry1 != null) {
                 this.setEntryValue(dataentry1, dataentry);
                 this.entity.notifyDataManagerChange(dataentry.getKey());
             }
@@ -319,70 +265,58 @@
     }
 
     @SideOnly(Side.CLIENT)
-    protected <T> void setEntryValue(EntityDataManager.DataEntry<T> target, EntityDataManager.DataEntry<?> source)
-    {
-        target.setValue((T)source.getValue());
+    protected <T> void setEntryValue(EntityDataManager.DataEntry<T> target, EntityDataManager.DataEntry<?> source) {
+        target.setValue((T) source.getValue());
     }
 
-    public boolean isEmpty()
-    {
+    public boolean isEmpty() {
         return this.empty;
     }
 
-    public void setClean()
-    {
+    public void setClean() {
         this.dirty = false;
         this.lock.readLock().lock();
 
-        for (EntityDataManager.DataEntry<?> dataentry : this.entries.values())
-        {
+        for (EntityDataManager.DataEntry<?> dataentry : this.entries.values()) {
             dataentry.setDirty(false);
         }
 
         this.lock.readLock().unlock();
     }
 
-    public static class DataEntry<T>
-        {
-            private final DataParameter<T> key;
-            private T value;
-            private boolean dirty;
+    public static class DataEntry<T> {
+        private final DataParameter<T> key;
+        private T value;
+        private boolean dirty;
 
-            public DataEntry(DataParameter<T> keyIn, T valueIn)
-            {
-                this.key = keyIn;
-                this.value = valueIn;
-                this.dirty = true;
-            }
+        public DataEntry(DataParameter<T> keyIn, T valueIn) {
+            this.key = keyIn;
+            this.value = valueIn;
+            this.dirty = true;
+        }
 
-            public DataParameter<T> getKey()
-            {
-                return this.key;
-            }
+        public DataParameter<T> getKey() {
+            return this.key;
+        }
 
-            public void setValue(T valueIn)
-            {
-                this.value = valueIn;
-            }
+        public void setValue(T valueIn) {
+            this.value = valueIn;
+        }
 
-            public T getValue()
-            {
-                return this.value;
-            }
+        public T getValue() {
+            return this.value;
+        }
 
-            public boolean isDirty()
-            {
-                return this.dirty;
-            }
+        public boolean isDirty() {
+            return this.dirty;
+        }
 
-            public void setDirty(boolean dirtyIn)
-            {
-                this.dirty = dirtyIn;
-            }
+        public void setDirty(boolean dirtyIn) {
+            this.dirty = dirtyIn;
+        }
 
-            public EntityDataManager.DataEntry<T> copy()
-            {
-                return new EntityDataManager.DataEntry<T>(this.key, this.key.getSerializer().copyValue(this.value));
-            }
+        public EntityDataManager.DataEntry<T> copy() {
+            return new EntityDataManager.DataEntry<T>(this.key, this.key.getSerializer().copyValue(this.value));
         }
+    }
 }
