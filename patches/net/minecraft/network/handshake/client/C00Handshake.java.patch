--- ../src-base/minecraft/net/minecraft/network/handshake/client/C00Handshake.java
+++ ../src-work/minecraft/net/minecraft/network/handshake/client/C00Handshake.java
@@ -1,6 +1,7 @@
 package net.minecraft.network.handshake.client;
 
 import java.io.IOException;
+
 import net.minecraft.network.EnumConnectionState;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
@@ -8,68 +9,62 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class C00Handshake implements Packet<INetHandlerHandshakeServer>
-{
+public class C00Handshake implements Packet<INetHandlerHandshakeServer> {
     private int protocolVersion;
-    private String ip;
-    private int port;
+    public String ip;
+    public int port;
     private EnumConnectionState requestedState;
     private boolean hasFMLMarker = false;
 
-    public C00Handshake()
-    {
+    public C00Handshake() {
     }
 
     @SideOnly(Side.CLIENT)
-    public C00Handshake(String p_i47613_1_, int p_i47613_2_, EnumConnectionState p_i47613_3_)
-    {
+    public C00Handshake(String p_i47613_1_, int p_i47613_2_, EnumConnectionState p_i47613_3_) {
         this.protocolVersion = 340;
         this.ip = p_i47613_1_;
         this.port = p_i47613_2_;
         this.requestedState = p_i47613_3_;
     }
 
-    public C00Handshake(String address, int port, EnumConnectionState state, boolean addFMLMarker)
-    {
+    public C00Handshake(String address, int port, EnumConnectionState state, boolean addFMLMarker) {
         this(address, port, state);
         this.hasFMLMarker = addFMLMarker;
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.protocolVersion = buf.readVarInt();
-        this.ip = buf.readString(255);
+        this.ip = buf.readString(Short.MAX_VALUE); // Spigot
         this.port = buf.readUnsignedShort();
         this.requestedState = EnumConnectionState.getById(buf.readVarInt());
         this.hasFMLMarker = this.ip.contains("\0FML\0");
-        this.ip = this.ip.split("\0")[0];
+        if (this.hasFMLMarker) {
+            this.ip = this.ip.replace("\0FML\0", "");
+        } else if (this.ip.split("\0").length > 2) {
+            this.hasFMLMarker = true; // Lava - Bungee and other forks support
+        }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeVarInt(this.protocolVersion);
         buf.writeString(this.ip + "\0FML\0");
         buf.writeShort(this.port);
         buf.writeVarInt(this.requestedState.getId());
     }
 
-    public void processPacket(INetHandlerHandshakeServer handler)
-    {
+    public void processPacket(INetHandlerHandshakeServer handler) {
         handler.processHandshake(this);
     }
 
-    public EnumConnectionState getRequestedState()
-    {
+    public EnumConnectionState getRequestedState() {
         return this.requestedState;
     }
 
-    public int getProtocolVersion()
-    {
+    public int getProtocolVersion() {
         return this.protocolVersion;
     }
 
-    public boolean hasFMLMarker()
-    {
+    public boolean hasFMLMarker() {
         return this.hasFMLMarker;
     }
 }
