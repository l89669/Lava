--- ../src-base/minecraft/net/minecraft/network/play/server/SPacketBlockBreakAnim.java
+++ ../src-work/minecraft/net/minecraft/network/play/server/SPacketBlockBreakAnim.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.play.server;
 
-import java.io.IOException;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
@@ -8,57 +7,50 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketBlockBreakAnim implements Packet<INetHandlerPlayClient>
-{
+import java.io.IOException;
+
+public class SPacketBlockBreakAnim implements Packet<INetHandlerPlayClient> {
     private int breakerId;
     private BlockPos position;
     private int progress;
 
-    public SPacketBlockBreakAnim()
-    {
+    public SPacketBlockBreakAnim() {
     }
 
-    public SPacketBlockBreakAnim(int breakerIdIn, BlockPos positionIn, int progressIn)
-    {
+    public SPacketBlockBreakAnim(int breakerIdIn, BlockPos positionIn, int progressIn) {
         this.breakerId = breakerIdIn;
         this.position = positionIn;
         this.progress = progressIn;
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.breakerId = buf.readVarInt();
         this.position = buf.readBlockPos();
         this.progress = buf.readUnsignedByte();
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeVarInt(this.breakerId);
         buf.writeBlockPos(this.position);
         buf.writeByte(this.progress);
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleBlockBreakAnim(this);
     }
 
     @SideOnly(Side.CLIENT)
-    public int getBreakerId()
-    {
+    public int getBreakerId() {
         return this.breakerId;
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockPos getPosition()
-    {
+    public BlockPos getPosition() {
         return this.position;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getProgress()
-    {
+    public int getProgress() {
         return this.progress;
     }
 }
