--- ../src-base/minecraft/net/minecraft/network/play/server/SPacketTeams.java
+++ ../src-work/minecraft/net/minecraft/network/play/server/SPacketTeams.java
@@ -1,8 +1,6 @@
 package net.minecraft.network.play.server;
 
 import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.Collection;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
@@ -11,8 +9,10 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketTeams implements Packet<INetHandlerPlayClient>
-{
+import java.io.IOException;
+import java.util.Collection;
+
+public class SPacketTeams implements Packet<INetHandlerPlayClient> {
     private String name = "";
     private String displayName = "";
     private String prefix = "";
@@ -24,16 +24,14 @@
     private int action;
     private int friendlyFlags;
 
-    public SPacketTeams()
-    {
+    public SPacketTeams() {
         this.nameTagVisibility = Team.EnumVisible.ALWAYS.internalName;
         this.collisionRule = Team.CollisionRule.ALWAYS.name;
         this.color = -1;
         this.players = Lists.<String>newArrayList();
     }
 
-    public SPacketTeams(ScorePlayerTeam teamIn, int actionIn)
-    {
+    public SPacketTeams(ScorePlayerTeam teamIn, int actionIn) {
         this.nameTagVisibility = Team.EnumVisible.ALWAYS.internalName;
         this.collisionRule = Team.CollisionRule.ALWAYS.name;
         this.color = -1;
@@ -41,8 +39,7 @@
         this.name = teamIn.getName();
         this.action = actionIn;
 
-        if (actionIn == 0 || actionIn == 2)
-        {
+        if (actionIn == 0 || actionIn == 2) {
             this.displayName = teamIn.getDisplayName();
             this.prefix = teamIn.getPrefix();
             this.suffix = teamIn.getSuffix();
@@ -52,42 +49,33 @@
             this.color = teamIn.getColor().getColorIndex();
         }
 
-        if (actionIn == 0)
-        {
+        if (actionIn == 0) {
             this.players.addAll(teamIn.getMembershipCollection());
         }
     }
 
-    public SPacketTeams(ScorePlayerTeam teamIn, Collection<String> playersIn, int actionIn)
-    {
+    public SPacketTeams(ScorePlayerTeam teamIn, Collection<String> playersIn, int actionIn) {
         this.nameTagVisibility = Team.EnumVisible.ALWAYS.internalName;
         this.collisionRule = Team.CollisionRule.ALWAYS.name;
         this.color = -1;
         this.players = Lists.<String>newArrayList();
 
-        if (actionIn != 3 && actionIn != 4)
-        {
+        if (actionIn != 3 && actionIn != 4) {
             throw new IllegalArgumentException("Method must be join or leave for player constructor");
-        }
-        else if (playersIn != null && !playersIn.isEmpty())
-        {
+        } else if (playersIn != null && !playersIn.isEmpty()) {
             this.action = actionIn;
             this.name = teamIn.getName();
             this.players.addAll(playersIn);
-        }
-        else
-        {
+        } else {
             throw new IllegalArgumentException("Players cannot be null/empty");
         }
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.name = buf.readString(16);
         this.action = buf.readByte();
 
-        if (this.action == 0 || this.action == 2)
-        {
+        if (this.action == 0 || this.action == 2) {
             this.displayName = buf.readString(32);
             this.prefix = buf.readString(16);
             this.suffix = buf.readString(16);
@@ -97,24 +85,20 @@
             this.color = buf.readByte();
         }
 
-        if (this.action == 0 || this.action == 3 || this.action == 4)
-        {
+        if (this.action == 0 || this.action == 3 || this.action == 4) {
             int i = buf.readVarInt();
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 this.players.add(buf.readString(40));
             }
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeString(this.name);
         buf.writeByte(this.action);
 
-        if (this.action == 0 || this.action == 2)
-        {
+        if (this.action == 0 || this.action == 2) {
             buf.writeString(this.displayName);
             buf.writeString(this.prefix);
             buf.writeString(this.suffix);
@@ -124,79 +108,66 @@
             buf.writeByte(this.color);
         }
 
-        if (this.action == 0 || this.action == 3 || this.action == 4)
-        {
+        if (this.action == 0 || this.action == 3 || this.action == 4) {
             buf.writeVarInt(this.players.size());
 
-            for (String s : this.players)
-            {
+            for (String s : this.players) {
                 buf.writeString(s);
             }
         }
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleTeams(this);
     }
 
     @SideOnly(Side.CLIENT)
-    public String getName()
-    {
+    public String getName() {
         return this.name;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getDisplayName()
-    {
+    public String getDisplayName() {
         return this.displayName;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getPrefix()
-    {
+    public String getPrefix() {
         return this.prefix;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getSuffix()
-    {
+    public String getSuffix() {
         return this.suffix;
     }
 
     @SideOnly(Side.CLIENT)
-    public Collection<String> getPlayers()
-    {
+    public Collection<String> getPlayers() {
         return this.players;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getAction()
-    {
+    public int getAction() {
         return this.action;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getFriendlyFlags()
-    {
+    public int getFriendlyFlags() {
         return this.friendlyFlags;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getColor()
-    {
+    public int getColor() {
         return this.color;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getNameTagVisibility()
-    {
+    public String getNameTagVisibility() {
         return this.nameTagVisibility;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getCollisionRule()
-    {
+    public String getCollisionRule() {
         return this.collisionRule;
     }
 }
