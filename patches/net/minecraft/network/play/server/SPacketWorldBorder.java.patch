--- ../src-base/minecraft/net/minecraft/network/play/server/SPacketWorldBorder.java
+++ ../src-work/minecraft/net/minecraft/network/play/server/SPacketWorldBorder.java
@@ -1,16 +1,17 @@
 package net.minecraft.network.play.server;
 
-import java.io.IOException;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
+import net.minecraft.world.WorldProviderHell;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketWorldBorder implements Packet<INetHandlerPlayClient>
-{
-    private SPacketWorldBorder.Action action;
+import java.io.IOException;
+
+public class SPacketWorldBorder implements Packet<INetHandlerPlayClient> {
+    private Action action;
     private int size;
     private double centerX;
     private double centerZ;
@@ -20,15 +21,17 @@
     private int warningTime;
     private int warningDistance;
 
-    public SPacketWorldBorder()
-    {
+    public SPacketWorldBorder() {
     }
 
-    public SPacketWorldBorder(WorldBorder border, SPacketWorldBorder.Action actionIn)
-    {
+    public SPacketWorldBorder(WorldBorder border, Action actionIn) {
         this.action = actionIn;
-        this.centerX = border.getCenterX();
-        this.centerZ = border.getCenterZ();
+        // CraftBukkit start - multiply out nether border
+        // this.centerX = border.getCenterX();
+        // this.centerZ = border.getCenterZ();
+        this.centerX = border.getCenterX() * (border.world.provider instanceof WorldProviderHell ? 8 : 1);
+        this.centerZ = border.getCenterZ() * (border.world.provider instanceof WorldProviderHell ? 8 : 1);
+        // CraftBukkit end
         this.diameter = border.getDiameter();
         this.targetSize = border.getTargetSize();
         this.timeUntilTarget = border.getTimeUntilTarget();
@@ -37,12 +40,10 @@
         this.warningTime = border.getWarningTime();
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
-        this.action = (SPacketWorldBorder.Action)buf.readEnumValue(SPacketWorldBorder.Action.class);
+    public void readPacketData(PacketBuffer buf) throws IOException {
+        this.action = (Action) buf.readEnumValue(Action.class);
 
-        switch (this.action)
-        {
+        switch (this.action) {
             case SET_SIZE:
                 this.targetSize = buf.readDouble();
                 break;
@@ -73,12 +74,10 @@
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeEnumValue(this.action);
 
-        switch (this.action)
-        {
+        switch (this.action) {
             case SET_SIZE:
                 buf.writeDouble(this.targetSize);
                 break;
@@ -109,16 +108,13 @@
         }
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleWorldBorder(this);
     }
 
     @SideOnly(Side.CLIENT)
-    public void apply(WorldBorder border)
-    {
-        switch (this.action)
-        {
+    public void apply(WorldBorder border) {
+        switch (this.action) {
             case SET_SIZE:
                 border.setTransition(this.targetSize);
                 break;
@@ -137,12 +133,9 @@
             case INITIALIZE:
                 border.setCenter(this.centerX, this.centerZ);
 
-                if (this.timeUntilTarget > 0L)
-                {
+                if (this.timeUntilTarget > 0L) {
                     border.setTransition(this.diameter, this.targetSize, this.timeUntilTarget);
-                }
-                else
-                {
+                } else {
                     border.setTransition(this.targetSize);
                 }
 
@@ -152,8 +145,7 @@
         }
     }
 
-    public static enum Action
-    {
+    public static enum Action {
         SET_SIZE,
         LERP_SIZE,
         SET_CENTER,
