--- ../src-base/minecraft/net/minecraft/network/play/server/SPacketParticles.java
+++ ../src-work/minecraft/net/minecraft/network/play/server/SPacketParticles.java
@@ -1,6 +1,5 @@
 package net.minecraft.network.play.server;
 
-import java.io.IOException;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
@@ -8,8 +7,9 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketParticles implements Packet<INetHandlerPlayClient>
-{
+import java.io.IOException;
+
+public class SPacketParticles implements Packet<INetHandlerPlayClient> {
     private EnumParticleTypes particleType;
     private float xCoord;
     private float yCoord;
@@ -22,12 +22,10 @@
     private boolean longDistance;
     private int[] particleArguments;
 
-    public SPacketParticles()
-    {
+    public SPacketParticles() {
     }
 
-    public SPacketParticles(EnumParticleTypes particleIn, boolean longDistanceIn, float xIn, float yIn, float zIn, float xOffsetIn, float yOffsetIn, float zOffsetIn, float speedIn, int countIn, int... argumentsIn)
-    {
+    public SPacketParticles(EnumParticleTypes particleIn, boolean longDistanceIn, float xIn, float yIn, float zIn, float xOffsetIn, float yOffsetIn, float zOffsetIn, float speedIn, int countIn, int... argumentsIn) {
         this.particleType = particleIn;
         this.longDistance = longDistanceIn;
         this.xCoord = xIn;
@@ -41,12 +39,10 @@
         this.particleArguments = argumentsIn;
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.particleType = EnumParticleTypes.getParticleFromId(buf.readInt());
 
-        if (this.particleType == null)
-        {
+        if (this.particleType == null) {
             this.particleType = EnumParticleTypes.BARRIER;
         }
 
@@ -62,14 +58,12 @@
         int i = this.particleType.getArgumentCount();
         this.particleArguments = new int[i];
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             this.particleArguments[j] = buf.readVarInt();
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeInt(this.particleType.getParticleID());
         buf.writeBoolean(this.longDistance);
         buf.writeFloat(this.xCoord);
@@ -82,80 +76,67 @@
         buf.writeInt(this.particleCount);
         int i = this.particleType.getArgumentCount();
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             buf.writeVarInt(this.particleArguments[j]);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public EnumParticleTypes getParticleType()
-    {
+    public EnumParticleTypes getParticleType() {
         return this.particleType;
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleParticles(this);
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isLongDistance()
-    {
+    public boolean isLongDistance() {
         return this.longDistance;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getXCoordinate()
-    {
-        return (double)this.xCoord;
+    public double getXCoordinate() {
+        return (double) this.xCoord;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getYCoordinate()
-    {
-        return (double)this.yCoord;
+    public double getYCoordinate() {
+        return (double) this.yCoord;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getZCoordinate()
-    {
-        return (double)this.zCoord;
+    public double getZCoordinate() {
+        return (double) this.zCoord;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getXOffset()
-    {
+    public float getXOffset() {
         return this.xOffset;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getYOffset()
-    {
+    public float getYOffset() {
         return this.yOffset;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getZOffset()
-    {
+    public float getZOffset() {
         return this.zOffset;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getParticleSpeed()
-    {
+    public float getParticleSpeed() {
         return this.particleSpeed;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getParticleCount()
-    {
+    public int getParticleCount() {
         return this.particleCount;
     }
 
     @SideOnly(Side.CLIENT)
-    public int[] getParticleArgs()
-    {
+    public int[] getParticleArgs() {
         return this.particleArguments;
     }
 }
