--- ../src-base/minecraft/net/minecraft/network/play/server/SPacketStatistics.java
+++ ../src-work/minecraft/net/minecraft/network/play/server/SPacketStatistics.java
@@ -1,9 +1,6 @@
 package net.minecraft.network.play.server;
 
 import com.google.common.collect.Maps;
-import java.io.IOException;
-import java.util.Map;
-import java.util.Map.Entry;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
@@ -12,55 +9,49 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketStatistics implements Packet<INetHandlerPlayClient>
-{
+import java.io.IOException;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class SPacketStatistics implements Packet<INetHandlerPlayClient> {
     private Map<StatBase, Integer> statisticMap;
 
-    public SPacketStatistics()
-    {
+    public SPacketStatistics() {
     }
 
-    public SPacketStatistics(Map<StatBase, Integer> statisticMapIn)
-    {
+    public SPacketStatistics(Map<StatBase, Integer> statisticMapIn) {
         this.statisticMap = statisticMapIn;
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleStatistics(this);
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         int i = buf.readVarInt();
         this.statisticMap = Maps.<StatBase, Integer>newHashMap();
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             StatBase statbase = StatList.getOneShotStat(buf.readString(32767));
             int k = buf.readVarInt();
 
-            if (statbase != null)
-            {
+            if (statbase != null) {
                 this.statisticMap.put(statbase, Integer.valueOf(k));
             }
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeVarInt(this.statisticMap.size());
 
-        for (Entry<StatBase, Integer> entry : this.statisticMap.entrySet())
-        {
+        for (Entry<StatBase, Integer> entry : this.statisticMap.entrySet()) {
             buf.writeString((entry.getKey()).statId);
-            buf.writeVarInt(((Integer)entry.getValue()).intValue());
+            buf.writeVarInt(((Integer) entry.getValue()).intValue());
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public Map<StatBase, Integer> getStatisticMap()
-    {
+    public Map<StatBase, Integer> getStatisticMap() {
         return this.statisticMap;
     }
 }
