--- ../src-base/minecraft/net/minecraft/network/play/server/SPacketExplosion.java
+++ ../src-work/minecraft/net/minecraft/network/play/server/SPacketExplosion.java
@@ -1,8 +1,6 @@
 package net.minecraft.network.play.server;
 
 import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.List;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayClient;
@@ -11,8 +9,10 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketExplosion implements Packet<INetHandlerPlayClient>
-{
+import java.io.IOException;
+import java.util.List;
+
+public class SPacketExplosion implements Packet<INetHandlerPlayClient> {
     private double posX;
     private double posY;
     private double posZ;
@@ -22,40 +22,35 @@
     private float motionY;
     private float motionZ;
 
-    public SPacketExplosion()
-    {
+    public SPacketExplosion() {
     }
 
-    public SPacketExplosion(double xIn, double yIn, double zIn, float strengthIn, List<BlockPos> affectedBlockPositionsIn, Vec3d motion)
-    {
+    public SPacketExplosion(double xIn, double yIn, double zIn, float strengthIn, List<BlockPos> affectedBlockPositionsIn, Vec3d motion) {
         this.posX = xIn;
         this.posY = yIn;
         this.posZ = zIn;
         this.strength = strengthIn;
         this.affectedBlockPositions = Lists.newArrayList(affectedBlockPositionsIn);
 
-        if (motion != null)
-        {
-            this.motionX = (float)motion.x;
-            this.motionY = (float)motion.y;
-            this.motionZ = (float)motion.z;
+        if (motion != null) {
+            this.motionX = (float) motion.x;
+            this.motionY = (float) motion.y;
+            this.motionZ = (float) motion.z;
         }
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
-        this.posX = (double)buf.readFloat();
-        this.posY = (double)buf.readFloat();
-        this.posZ = (double)buf.readFloat();
+    public void readPacketData(PacketBuffer buf) throws IOException {
+        this.posX = (double) buf.readFloat();
+        this.posY = (double) buf.readFloat();
+        this.posZ = (double) buf.readFloat();
         this.strength = buf.readFloat();
         int i = buf.readInt();
         this.affectedBlockPositions = Lists.<BlockPos>newArrayListWithCapacity(i);
-        int j = (int)this.posX;
-        int k = (int)this.posY;
-        int l = (int)this.posZ;
+        int j = (int) this.posX;
+        int k = (int) this.posY;
+        int l = (int) this.posZ;
 
-        for (int i1 = 0; i1 < i; ++i1)
-        {
+        for (int i1 = 0; i1 < i; ++i1) {
             int j1 = buf.readByte() + j;
             int k1 = buf.readByte() + k;
             int l1 = buf.readByte() + l;
@@ -67,19 +62,17 @@
         this.motionZ = buf.readFloat();
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
-        buf.writeFloat((float)this.posX);
-        buf.writeFloat((float)this.posY);
-        buf.writeFloat((float)this.posZ);
+    public void writePacketData(PacketBuffer buf) throws IOException {
+        buf.writeFloat((float) this.posX);
+        buf.writeFloat((float) this.posY);
+        buf.writeFloat((float) this.posZ);
         buf.writeFloat(this.strength);
         buf.writeInt(this.affectedBlockPositions.size());
-        int i = (int)this.posX;
-        int j = (int)this.posY;
-        int k = (int)this.posZ;
+        int i = (int) this.posX;
+        int j = (int) this.posY;
+        int k = (int) this.posZ;
 
-        for (BlockPos blockpos : this.affectedBlockPositions)
-        {
+        for (BlockPos blockpos : this.affectedBlockPositions) {
             int l = blockpos.getX() - i;
             int i1 = blockpos.getY() - j;
             int j1 = blockpos.getZ() - k;
@@ -93,56 +86,47 @@
         buf.writeFloat(this.motionZ);
     }
 
-    public void processPacket(INetHandlerPlayClient handler)
-    {
+    public void processPacket(INetHandlerPlayClient handler) {
         handler.handleExplosion(this);
     }
 
     @SideOnly(Side.CLIENT)
-    public float getMotionX()
-    {
+    public float getMotionX() {
         return this.motionX;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getMotionY()
-    {
+    public float getMotionY() {
         return this.motionY;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getMotionZ()
-    {
+    public float getMotionZ() {
         return this.motionZ;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getX()
-    {
+    public double getX() {
         return this.posX;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getY()
-    {
+    public double getY() {
         return this.posY;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getZ()
-    {
+    public double getZ() {
         return this.posZ;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getStrength()
-    {
+    public float getStrength() {
         return this.strength;
     }
 
     @SideOnly(Side.CLIENT)
-    public List<BlockPos> getAffectedBlockPositions()
-    {
+    public List<BlockPos> getAffectedBlockPositions() {
         return this.affectedBlockPositions;
     }
 }
