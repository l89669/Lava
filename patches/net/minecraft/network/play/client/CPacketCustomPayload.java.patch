--- ../src-base/minecraft/net/minecraft/network/play/client/CPacketCustomPayload.java
+++ ../src-work/minecraft/net/minecraft/network/play/client/CPacketCustomPayload.java
@@ -1,76 +1,64 @@
 package net.minecraft.network.play.client;
 
 import io.netty.buffer.ByteBuf;
-import java.io.IOException;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.INetHandlerPlayServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class CPacketCustomPayload implements Packet<INetHandlerPlayServer>
-{
+import java.io.IOException;
+
+public class CPacketCustomPayload implements Packet<INetHandlerPlayServer> {
     private String channel;
     private PacketBuffer data;
 
-    public CPacketCustomPayload()
-    {
+    public CPacketCustomPayload() {
     }
 
     @SideOnly(Side.CLIENT)
-    public CPacketCustomPayload(String channelIn, PacketBuffer bufIn)
-    {
+    public CPacketCustomPayload(String channelIn, PacketBuffer bufIn) {
         this.channel = channelIn;
         this.data = bufIn;
 
-        if (bufIn.writerIndex() > 32767)
-        {
+        if (bufIn.writerIndex() > 32767) {
             throw new IllegalArgumentException("Payload may not be larger than 32767 bytes");
         }
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.channel = buf.readString(20);
         int i = buf.readableBytes();
 
-        if (i >= 0 && i <= 32767)
-        {
+        if (i >= 0 && i <= 32767) {
             this.data = new PacketBuffer(buf.readBytes(i));
-        }
-        else
-        {
+        } else {
             throw new IOException("Payload may not be larger than 32767 bytes");
         }
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeString(this.channel);
-        synchronized(this.data) { //This may be access multiple times, from multiple threads, lets be safe.
-        this.data.markReaderIndex();
-        buf.writeBytes((ByteBuf)this.data);
-        this.data.resetReaderIndex();
+        synchronized (this.data) { //This may be access multiple times, from multiple threads, lets be safe.
+            this.data.markReaderIndex();
+            buf.writeBytes((ByteBuf) this.data);
+            this.data.resetReaderIndex();
         }
     }
 
-    public void processPacket(INetHandlerPlayServer handler)
-    {
+    public void processPacket(INetHandlerPlayServer handler) {
         handler.processCustomPayload(this);
 
-        if (this.data != null)
-        {
+        if (this.data != null) {
             this.data.release();
         }
     }
 
-    public String getChannelName()
-    {
+    public String getChannelName() {
         return this.channel;
     }
 
-    public PacketBuffer getBufferData()
-    {
+    public PacketBuffer getBufferData() {
         return this.data;
     }
 }
