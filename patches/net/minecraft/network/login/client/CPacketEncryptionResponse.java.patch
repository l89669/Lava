--- ../src-base/minecraft/net/minecraft/network/login/client/CPacketEncryptionResponse.java
+++ ../src-work/minecraft/net/minecraft/network/login/client/CPacketEncryptionResponse.java
@@ -1,9 +1,5 @@
 package net.minecraft.network.login.client;
 
-import java.io.IOException;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import javax.crypto.SecretKey;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.login.INetHandlerLoginServer;
@@ -11,46 +7,43 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class CPacketEncryptionResponse implements Packet<INetHandlerLoginServer>
-{
+import javax.crypto.SecretKey;
+import java.io.IOException;
+import java.security.PrivateKey;
+import java.security.PublicKey;
+
+public class CPacketEncryptionResponse implements Packet<INetHandlerLoginServer> {
     private byte[] secretKeyEncrypted = new byte[0];
     private byte[] verifyTokenEncrypted = new byte[0];
 
-    public CPacketEncryptionResponse()
-    {
+    public CPacketEncryptionResponse() {
     }
 
     @SideOnly(Side.CLIENT)
-    public CPacketEncryptionResponse(SecretKey secret, PublicKey key, byte[] verifyToken)
-    {
+    public CPacketEncryptionResponse(SecretKey secret, PublicKey key, byte[] verifyToken) {
         this.secretKeyEncrypted = CryptManager.encryptData(key, secret.getEncoded());
         this.verifyTokenEncrypted = CryptManager.encryptData(key, verifyToken);
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.secretKeyEncrypted = buf.readByteArray();
         this.verifyTokenEncrypted = buf.readByteArray();
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeByteArray(this.secretKeyEncrypted);
         buf.writeByteArray(this.verifyTokenEncrypted);
     }
 
-    public void processPacket(INetHandlerLoginServer handler)
-    {
+    public void processPacket(INetHandlerLoginServer handler) {
         handler.processEncryptionResponse(this);
     }
 
-    public SecretKey getSecretKey(PrivateKey key)
-    {
+    public SecretKey getSecretKey(PrivateKey key) {
         return CryptManager.decryptSharedKey(key, this.secretKeyEncrypted);
     }
 
-    public byte[] getVerifyToken(PrivateKey key)
-    {
+    public byte[] getVerifyToken(PrivateKey key) {
         return key == null ? this.verifyTokenEncrypted : CryptManager.decryptData(key, this.verifyTokenEncrypted);
     }
 }
