--- ../src-base/minecraft/net/minecraft/network/login/server/SPacketEncryptionRequest.java
+++ ../src-work/minecraft/net/minecraft/network/login/server/SPacketEncryptionRequest.java
@@ -1,7 +1,5 @@
 package net.minecraft.network.login.server;
 
-import java.io.IOException;
-import java.security.PublicKey;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.login.INetHandlerLoginClient;
@@ -9,57 +7,51 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class SPacketEncryptionRequest implements Packet<INetHandlerLoginClient>
-{
+import java.io.IOException;
+import java.security.PublicKey;
+
+public class SPacketEncryptionRequest implements Packet<INetHandlerLoginClient> {
     private String hashedServerId;
     private PublicKey publicKey;
     private byte[] verifyToken;
 
-    public SPacketEncryptionRequest()
-    {
+    public SPacketEncryptionRequest() {
     }
 
-    public SPacketEncryptionRequest(String serverIdIn, PublicKey publicKeyIn, byte[] verifyTokenIn)
-    {
+    public SPacketEncryptionRequest(String serverIdIn, PublicKey publicKeyIn, byte[] verifyTokenIn) {
         this.hashedServerId = serverIdIn;
         this.publicKey = publicKeyIn;
         this.verifyToken = verifyTokenIn;
     }
 
-    public void readPacketData(PacketBuffer buf) throws IOException
-    {
+    public void readPacketData(PacketBuffer buf) throws IOException {
         this.hashedServerId = buf.readString(20);
         this.publicKey = CryptManager.decodePublicKey(buf.readByteArray());
         this.verifyToken = buf.readByteArray();
     }
 
-    public void writePacketData(PacketBuffer buf) throws IOException
-    {
+    public void writePacketData(PacketBuffer buf) throws IOException {
         buf.writeString(this.hashedServerId);
         buf.writeByteArray(this.publicKey.getEncoded());
         buf.writeByteArray(this.verifyToken);
     }
 
-    public void processPacket(INetHandlerLoginClient handler)
-    {
+    public void processPacket(INetHandlerLoginClient handler) {
         handler.handleEncryptionRequest(this);
     }
 
     @SideOnly(Side.CLIENT)
-    public String getServerId()
-    {
+    public String getServerId() {
         return this.hashedServerId;
     }
 
     @SideOnly(Side.CLIENT)
-    public PublicKey getPublicKey()
-    {
+    public PublicKey getPublicKey() {
         return this.publicKey;
     }
 
     @SideOnly(Side.CLIENT)
-    public byte[] getVerifyToken()
-    {
+    public byte[] getVerifyToken() {
         return this.verifyToken;
     }
 }
