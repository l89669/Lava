--- ../src-base/minecraft/net/minecraft/world/biome/BiomeProviderSingle.java
+++ ../src-work/minecraft/net/minecraft/world/biome/BiomeProviderSingle.java
@@ -1,29 +1,25 @@
 package net.minecraft.world.biome;
 
+import net.minecraft.util.math.BlockPos;
+
+import javax.annotation.Nullable;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
-import javax.annotation.Nullable;
-import net.minecraft.util.math.BlockPos;
 
-public class BiomeProviderSingle extends BiomeProvider
-{
+public class BiomeProviderSingle extends BiomeProvider {
     private final Biome biome;
 
-    public BiomeProviderSingle(Biome biomeIn)
-    {
+    public BiomeProviderSingle(Biome biomeIn) {
         this.biome = biomeIn;
     }
 
-    public Biome getBiome(BlockPos pos)
-    {
+    public Biome getBiome(BlockPos pos) {
         return this.biome;
     }
 
-    public Biome[] getBiomesForGeneration(Biome[] biomes, int x, int z, int width, int height)
-    {
-        if (biomes == null || biomes.length < width * height)
-        {
+    public Biome[] getBiomesForGeneration(Biome[] biomes, int x, int z, int width, int height) {
+        if (biomes == null || biomes.length < width * height) {
             biomes = new Biome[width * height];
         }
 
@@ -31,10 +27,8 @@
         return biomes;
     }
 
-    public Biome[] getBiomes(@Nullable Biome[] oldBiomeList, int x, int z, int width, int depth)
-    {
-        if (oldBiomeList == null || oldBiomeList.length < width * depth)
-        {
+    public Biome[] getBiomes(@Nullable Biome[] oldBiomeList, int x, int z, int width, int depth) {
+        if (oldBiomeList == null || oldBiomeList.length < width * depth) {
             oldBiomeList = new Biome[width * depth];
         }
 
@@ -42,29 +36,24 @@
         return oldBiomeList;
     }
 
-    public Biome[] getBiomes(@Nullable Biome[] listToReuse, int x, int z, int width, int length, boolean cacheFlag)
-    {
+    public Biome[] getBiomes(@Nullable Biome[] listToReuse, int x, int z, int width, int length, boolean cacheFlag) {
         return this.getBiomes(listToReuse, x, z, width, length);
     }
 
     @Nullable
-    public BlockPos findBiomePosition(int x, int z, int range, List<Biome> biomes, Random random)
-    {
+    public BlockPos findBiomePosition(int x, int z, int range, List<Biome> biomes, Random random) {
         return biomes.contains(this.biome) ? new BlockPos(x - range + random.nextInt(range * 2 + 1), 0, z - range + random.nextInt(range * 2 + 1)) : null;
     }
 
-    public boolean areBiomesViable(int x, int z, int radius, List<Biome> allowed)
-    {
+    public boolean areBiomesViable(int x, int z, int radius, List<Biome> allowed) {
         return allowed.contains(this.biome);
     }
 
-    public boolean isFixedBiome()
-    {
+    public boolean isFixedBiome() {
         return true;
     }
 
-    public Biome getFixedBiome()
-    {
+    public Biome getFixedBiome() {
         return this.biome;
     }
 }
