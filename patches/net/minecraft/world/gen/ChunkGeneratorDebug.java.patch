--- ../src-base/minecraft/net/minecraft/world/gen/ChunkGeneratorDebug.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkGeneratorDebug.java
@@ -1,8 +1,6 @@
 package net.minecraft.world.gen;
 
 import com.google.common.collect.Lists;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EnumCreatureType;
@@ -14,8 +12,10 @@
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.ChunkPrimer;
 
-public class ChunkGeneratorDebug implements IChunkGenerator
-{
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class ChunkGeneratorDebug implements IChunkGenerator {
     private static final List<IBlockState> ALL_VALID_STATES = Lists.<IBlockState>newArrayList();
     private static final int GRID_WIDTH;
     private static final int GRID_HEIGHT;
@@ -23,26 +23,21 @@
     protected static final IBlockState BARRIER = Blocks.BARRIER.getDefaultState();
     private final World world;
 
-    public ChunkGeneratorDebug(World worldIn)
-    {
+    public ChunkGeneratorDebug(World worldIn) {
         this.world = worldIn;
     }
 
-    public Chunk generateChunk(int x, int z)
-    {
+    public Chunk generateChunk(int x, int z) {
         ChunkPrimer chunkprimer = new ChunkPrimer();
 
-        for (int i = 0; i < 16; ++i)
-        {
-            for (int j = 0; j < 16; ++j)
-            {
+        for (int i = 0; i < 16; ++i) {
+            for (int j = 0; j < 16; ++j) {
                 int k = x * 16 + i;
                 int l = z * 16 + j;
                 chunkprimer.setBlockState(i, 60, j, BARRIER);
                 IBlockState iblockstate = getBlockStateFor(k, l);
 
-                if (iblockstate != null)
-                {
+                if (iblockstate != null) {
                     chunkprimer.setBlockState(i, 70, j, iblockstate);
                 }
             }
@@ -50,33 +45,28 @@
 
         Chunk chunk = new Chunk(this.world, chunkprimer, x, z);
         chunk.generateSkylightMap();
-        Biome[] abiome = this.world.getBiomeProvider().getBiomes((Biome[])null, x * 16, z * 16, 16, 16);
+        Biome[] abiome = this.world.getBiomeProvider().getBiomes((Biome[]) null, x * 16, z * 16, 16, 16);
         byte[] abyte = chunk.getBiomeArray();
 
-        for (int i1 = 0; i1 < abyte.length; ++i1)
-        {
-            abyte[i1] = (byte)Biome.getIdForBiome(abiome[i1]);
+        for (int i1 = 0; i1 < abyte.length; ++i1) {
+            abyte[i1] = (byte) Biome.getIdForBiome(abiome[i1]);
         }
 
         chunk.generateSkylightMap();
         return chunk;
     }
 
-    public static IBlockState getBlockStateFor(int p_177461_0_, int p_177461_1_)
-    {
+    public static IBlockState getBlockStateFor(int p_177461_0_, int p_177461_1_) {
         IBlockState iblockstate = AIR;
 
-        if (p_177461_0_ > 0 && p_177461_1_ > 0 && p_177461_0_ % 2 != 0 && p_177461_1_ % 2 != 0)
-        {
+        if (p_177461_0_ > 0 && p_177461_1_ > 0 && p_177461_0_ % 2 != 0 && p_177461_1_ % 2 != 0) {
             p_177461_0_ = p_177461_0_ / 2;
             p_177461_1_ = p_177461_1_ / 2;
 
-            if (p_177461_0_ <= GRID_WIDTH && p_177461_1_ <= GRID_HEIGHT)
-            {
+            if (p_177461_0_ <= GRID_WIDTH && p_177461_1_ <= GRID_HEIGHT) {
                 int i = MathHelper.abs(p_177461_0_ * GRID_WIDTH + p_177461_1_);
 
-                if (i < ALL_VALID_STATES.size())
-                {
+                if (i < ALL_VALID_STATES.size()) {
                     iblockstate = ALL_VALID_STATES.get(i);
                 }
             }
@@ -85,44 +75,36 @@
         return iblockstate;
     }
 
-    public void populate(int x, int z)
-    {
+    public void populate(int x, int z) {
     }
 
-    public boolean generateStructures(Chunk chunkIn, int x, int z)
-    {
+    public boolean generateStructures(Chunk chunkIn, int x, int z) {
         return false;
     }
 
-    public List<Biome.SpawnListEntry> getPossibleCreatures(EnumCreatureType creatureType, BlockPos pos)
-    {
+    public List<Biome.SpawnListEntry> getPossibleCreatures(EnumCreatureType creatureType, BlockPos pos) {
         Biome biome = this.world.getBiome(pos);
         return biome.getSpawnableList(creatureType);
     }
 
     @Nullable
-    public BlockPos getNearestStructurePos(World worldIn, String structureName, BlockPos position, boolean findUnexplored)
-    {
+    public BlockPos getNearestStructurePos(World worldIn, String structureName, BlockPos position, boolean findUnexplored) {
         return null;
     }
 
-    public boolean isInsideStructure(World worldIn, String structureName, BlockPos pos)
-    {
+    public boolean isInsideStructure(World worldIn, String structureName, BlockPos pos) {
         return false;
     }
 
-    public void recreateStructures(Chunk chunkIn, int x, int z)
-    {
+    public void recreateStructures(Chunk chunkIn, int x, int z) {
     }
 
-    static
-    {
-        for (Block block : Block.REGISTRY)
-        {
+    static {
+        for (Block block : Block.REGISTRY) {
             ALL_VALID_STATES.addAll(block.getBlockState().getValidStates());
         }
 
-        GRID_WIDTH = MathHelper.ceil(MathHelper.sqrt((float)ALL_VALID_STATES.size()));
-        GRID_HEIGHT = MathHelper.ceil((float)ALL_VALID_STATES.size() / (float)GRID_WIDTH);
+        GRID_WIDTH = MathHelper.ceil(MathHelper.sqrt((float) ALL_VALID_STATES.size()));
+        GRID_HEIGHT = MathHelper.ceil((float) ALL_VALID_STATES.size() / (float) GRID_WIDTH);
     }
 }
