--- ../src-base/minecraft/net/minecraft/world/gen/structure/template/PlacementSettings.java
+++ ../src-work/minecraft/net/minecraft/world/gen/structure/template/PlacementSettings.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.gen.structure.template;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.util.Mirror;
 import net.minecraft.util.Rotation;
@@ -9,8 +7,10 @@
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.world.gen.structure.StructureBoundingBox;
 
-public class PlacementSettings
-{
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public class PlacementSettings {
     private Mirror mirror = Mirror.NONE;
     private Rotation rotation = Rotation.NONE;
     private boolean ignoreEntities;
@@ -27,8 +27,7 @@
     @Nullable
     private Long setSeed;
 
-    public PlacementSettings copy()
-    {
+    public PlacementSettings copy() {
         PlacementSettings placementsettings = new PlacementSettings();
         placementsettings.mirror = this.mirror;
         placementsettings.rotation = this.rotation;
@@ -43,144 +42,113 @@
         return placementsettings;
     }
 
-    public PlacementSettings setMirror(Mirror mirrorIn)
-    {
+    public PlacementSettings setMirror(Mirror mirrorIn) {
         this.mirror = mirrorIn;
         return this;
     }
 
-    public PlacementSettings setRotation(Rotation rotationIn)
-    {
+    public PlacementSettings setRotation(Rotation rotationIn) {
         this.rotation = rotationIn;
         return this;
     }
 
-    public PlacementSettings setIgnoreEntities(boolean ignoreEntitiesIn)
-    {
+    public PlacementSettings setIgnoreEntities(boolean ignoreEntitiesIn) {
         this.ignoreEntities = ignoreEntitiesIn;
         return this;
     }
 
-    public PlacementSettings setReplacedBlock(Block replacedBlockIn)
-    {
+    public PlacementSettings setReplacedBlock(Block replacedBlockIn) {
         this.replacedBlock = replacedBlockIn;
         return this;
     }
 
-    public PlacementSettings setChunk(ChunkPos chunkPosIn)
-    {
+    public PlacementSettings setChunk(ChunkPos chunkPosIn) {
         this.chunk = chunkPosIn;
         return this;
     }
 
-    public PlacementSettings setBoundingBox(StructureBoundingBox boundingBoxIn)
-    {
+    public PlacementSettings setBoundingBox(StructureBoundingBox boundingBoxIn) {
         this.boundingBox = boundingBoxIn;
         return this;
     }
 
-    public PlacementSettings setSeed(@Nullable Long seedIn)
-    {
+    public PlacementSettings setSeed(@Nullable Long seedIn) {
         this.setSeed = seedIn;
         return this;
     }
 
-    public PlacementSettings setRandom(@Nullable Random randomIn)
-    {
+    public PlacementSettings setRandom(@Nullable Random randomIn) {
         this.random = randomIn;
         return this;
     }
 
-    public PlacementSettings setIntegrity(float integrityIn)
-    {
+    public PlacementSettings setIntegrity(float integrityIn) {
         this.integrity = integrityIn;
         return this;
     }
 
-    public Mirror getMirror()
-    {
+    public Mirror getMirror() {
         return this.mirror;
     }
 
-    public PlacementSettings setIgnoreStructureBlock(boolean ignoreStructureBlockIn)
-    {
+    public PlacementSettings setIgnoreStructureBlock(boolean ignoreStructureBlockIn) {
         this.ignoreStructureBlock = ignoreStructureBlockIn;
         return this;
     }
 
-    public Rotation getRotation()
-    {
+    public Rotation getRotation() {
         return this.rotation;
     }
 
-    public Random getRandom(@Nullable BlockPos seed)
-    {
-        if (this.random != null)
-        {
+    public Random getRandom(@Nullable BlockPos seed) {
+        if (this.random != null) {
             return this.random;
-        }
-        else if (this.setSeed != null)
-        {
+        } else if (this.setSeed != null) {
             return this.setSeed.longValue() == 0L ? new Random(System.currentTimeMillis()) : new Random(this.setSeed.longValue());
-        }
-        else if (seed == null)
-        {
+        } else if (seed == null) {
             return new Random(System.currentTimeMillis());
-        }
-        else
-        {
+        } else {
             int i = seed.getX();
             int j = seed.getZ();
-            return new Random((long)(i * i * 4987142 + i * 5947611) + (long)(j * j) * 4392871L + (long)(j * 389711) ^ 987234911L);
+            return new Random((long) (i * i * 4987142 + i * 5947611) + (long) (j * j) * 4392871L + (long) (j * 389711) ^ 987234911L);
         }
     }
 
-    public float getIntegrity()
-    {
+    public float getIntegrity() {
         return this.integrity;
     }
 
-    public boolean getIgnoreEntities()
-    {
+    public boolean getIgnoreEntities() {
         return this.ignoreEntities;
     }
 
     @Nullable
-    public Block getReplacedBlock()
-    {
+    public Block getReplacedBlock() {
         return this.replacedBlock;
     }
 
     @Nullable
-    public StructureBoundingBox getBoundingBox()
-    {
-        if (this.boundingBox == null && this.chunk != null)
-        {
+    public StructureBoundingBox getBoundingBox() {
+        if (this.boundingBox == null && this.chunk != null) {
             this.setBoundingBoxFromChunk();
         }
 
         return this.boundingBox;
     }
 
-    public boolean getIgnoreStructureBlock()
-    {
+    public boolean getIgnoreStructureBlock() {
         return this.ignoreStructureBlock;
     }
 
-    void setBoundingBoxFromChunk()
-    {
+    void setBoundingBoxFromChunk() {
         this.boundingBox = this.getBoundingBoxFromChunk(this.chunk);
     }
 
     @Nullable
-    private StructureBoundingBox getBoundingBoxFromChunk(@Nullable ChunkPos pos)
-    {
-        if (pos == null)
-        {
+    private StructureBoundingBox getBoundingBoxFromChunk(@Nullable ChunkPos pos) {
+        if (pos == null) {
             return null;
-        }
-        else
-        {
+        } else {
             int i = pos.x * 16;
             int j = pos.z * 16;
             return new StructureBoundingBox(i, 0, j, i + 16 - 1, 255, j + 16 - 1);
