--- ../src-base/minecraft/net/minecraft/world/gen/structure/MapGenStructureIO.java
+++ ../src-work/minecraft/net/minecraft/world/gen/structure/MapGenStructureIO.java
@@ -1,108 +1,87 @@
 package net.minecraft.world.gen.structure;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.World;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class MapGenStructureIO
-{
+import javax.annotation.Nullable;
+import java.util.Map;
+
+public class MapGenStructureIO {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map < String, Class <? extends StructureStart >> startNameToClassMap = Maps. < String, Class <? extends StructureStart >> newHashMap();
-    private static final Map < Class <? extends StructureStart > , String > startClassToNameMap = Maps. < Class <? extends StructureStart > , String > newHashMap();
-    private static final Map < String, Class <? extends StructureComponent >> componentNameToClassMap = Maps. < String, Class <? extends StructureComponent >> newHashMap();
-    private static final Map < Class <? extends StructureComponent > , String > componentClassToNameMap = Maps. < Class <? extends StructureComponent > , String > newHashMap();
+    private static final Map<String, Class<? extends StructureStart>> startNameToClassMap = Maps.<String, Class<? extends StructureStart>>newHashMap();
+    private static final Map<Class<? extends StructureStart>, String> startClassToNameMap = Maps.<Class<? extends StructureStart>, String>newHashMap();
+    private static final Map<String, Class<? extends StructureComponent>> componentNameToClassMap = Maps.<String, Class<? extends StructureComponent>>newHashMap();
+    private static final Map<Class<? extends StructureComponent>, String> componentClassToNameMap = Maps.<Class<? extends StructureComponent>, String>newHashMap();
 
-    public static void registerStructure(Class <? extends StructureStart > startClass, String structureName)
-    {
+    public static void registerStructure(Class<? extends StructureStart> startClass, String structureName) {
         startNameToClassMap.put(structureName, startClass);
         startClassToNameMap.put(startClass, structureName);
     }
 
-    public static void registerStructureComponent(Class <? extends StructureComponent > componentClass, String componentName)
-    {
+    public static void registerStructureComponent(Class<? extends StructureComponent> componentClass, String componentName) {
         componentNameToClassMap.put(componentName, componentClass);
         componentClassToNameMap.put(componentClass, componentName);
     }
 
-    public static String getStructureStartName(StructureStart start)
-    {
+    public static String getStructureStartName(StructureStart start) {
         return startClassToNameMap.get(start.getClass());
     }
 
-    public static String getStructureComponentName(StructureComponent component)
-    {
+    public static String getStructureComponentName(StructureComponent component) {
         return componentClassToNameMap.get(component.getClass());
     }
 
     @Nullable
-    public static StructureStart getStructureStart(NBTTagCompound tagCompound, World worldIn)
-    {
+    public static StructureStart getStructureStart(NBTTagCompound tagCompound, World worldIn) {
         StructureStart structurestart = null;
 
-        try
-        {
-            Class <? extends StructureStart > oclass = (Class)startNameToClassMap.get(tagCompound.getString("id"));
+        try {
+            Class<? extends StructureStart> oclass = (Class) startNameToClassMap.get(tagCompound.getString("id"));
 
-            if (oclass != null)
-            {
+            if (oclass != null) {
                 structurestart = oclass.newInstance();
             }
-        }
-        catch (Exception exception)
-        {
-            LOGGER.warn("Failed Start with id {}", (Object)tagCompound.getString("id"));
+        } catch (Exception exception) {
+            LOGGER.warn("Failed Start with id {}", (Object) tagCompound.getString("id"));
             exception.printStackTrace();
         }
 
-        if (structurestart != null)
-        {
+        if (structurestart != null) {
             structurestart.readStructureComponentsFromNBT(worldIn, tagCompound);
+        } else {
+            LOGGER.warn("Skipping Structure with id {}", (Object) tagCompound.getString("id"));
         }
-        else
-        {
-            LOGGER.warn("Skipping Structure with id {}", (Object)tagCompound.getString("id"));
-        }
 
         return structurestart;
     }
 
-    public static StructureComponent getStructureComponent(NBTTagCompound tagCompound, World worldIn)
-    {
+    public static StructureComponent getStructureComponent(NBTTagCompound tagCompound, World worldIn) {
         StructureComponent structurecomponent = null;
 
-        try
-        {
-            Class <? extends StructureComponent > oclass = (Class)componentNameToClassMap.get(tagCompound.getString("id"));
+        try {
+            Class<? extends StructureComponent> oclass = (Class) componentNameToClassMap.get(tagCompound.getString("id"));
 
-            if (oclass != null)
-            {
+            if (oclass != null) {
                 structurecomponent = oclass.newInstance();
             }
-        }
-        catch (Exception exception)
-        {
-            LOGGER.warn("Failed Piece with id {}", (Object)tagCompound.getString("id"));
+        } catch (Exception exception) {
+            LOGGER.warn("Failed Piece with id {}", (Object) tagCompound.getString("id"));
             exception.printStackTrace();
         }
 
-        if (structurecomponent != null)
-        {
+        if (structurecomponent != null) {
             structurecomponent.readStructureBaseNBT(worldIn, tagCompound);
+        } else {
+            LOGGER.warn("Skipping Piece with id {}", (Object) tagCompound.getString("id"));
         }
-        else
-        {
-            LOGGER.warn("Skipping Piece with id {}", (Object)tagCompound.getString("id"));
-        }
 
         return structurecomponent;
     }
 
-    static
-    {
+    static {
         registerStructure(StructureMineshaftStart.class, "Mineshaft");
         registerStructure(MapGenVillage.Start.class, "Village");
         registerStructure(MapGenNetherBridge.Start.class, "Fortress");
