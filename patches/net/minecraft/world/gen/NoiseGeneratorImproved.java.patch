--- ../src-base/minecraft/net/minecraft/world/gen/NoiseGeneratorImproved.java
+++ ../src-work/minecraft/net/minecraft/world/gen/NoiseGeneratorImproved.java
@@ -2,37 +2,32 @@
 
 import java.util.Random;
 
-public class NoiseGeneratorImproved extends NoiseGenerator
-{
+public class NoiseGeneratorImproved extends NoiseGenerator {
     private final int[] permutations;
     public double xCoord;
     public double yCoord;
     public double zCoord;
-    private static final double[] GRAD_X = new double[] {1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D};
-    private static final double[] GRAD_Y = new double[] {1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D};
-    private static final double[] GRAD_Z = new double[] {0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, -1.0D, -1.0D, 1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, -1.0D};
-    private static final double[] GRAD_2X = new double[] {1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D};
-    private static final double[] GRAD_2Z = new double[] {0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, -1.0D, -1.0D, 1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, -1.0D};
+    private static final double[] GRAD_X = new double[]{1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D};
+    private static final double[] GRAD_Y = new double[]{1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D};
+    private static final double[] GRAD_Z = new double[]{0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, -1.0D, -1.0D, 1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, -1.0D};
+    private static final double[] GRAD_2X = new double[]{1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D};
+    private static final double[] GRAD_2Z = new double[]{0.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, -1.0D, -1.0D, 1.0D, 1.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, -1.0D};
 
-    public NoiseGeneratorImproved()
-    {
+    public NoiseGeneratorImproved() {
         this(new Random());
     }
 
-    public NoiseGeneratorImproved(Random p_i45469_1_)
-    {
+    public NoiseGeneratorImproved(Random p_i45469_1_) {
         this.permutations = new int[512];
         this.xCoord = p_i45469_1_.nextDouble() * 256.0D;
         this.yCoord = p_i45469_1_.nextDouble() * 256.0D;
         this.zCoord = p_i45469_1_.nextDouble() * 256.0D;
 
-        for (int i = 0; i < 256; this.permutations[i] = i++)
-        {
+        for (int i = 0; i < 256; this.permutations[i] = i++) {
             ;
         }
 
-        for (int l = 0; l < 256; ++l)
-        {
+        for (int l = 0; l < 256; ++l) {
             int j = p_i45469_1_.nextInt(256 - l) + l;
             int k = this.permutations[l];
             this.permutations[l] = this.permutations[j];
@@ -41,27 +36,22 @@
         }
     }
 
-    public final double lerp(double p_76311_1_, double p_76311_3_, double p_76311_5_)
-    {
+    public final double lerp(double p_76311_1_, double p_76311_3_, double p_76311_5_) {
         return p_76311_3_ + p_76311_1_ * (p_76311_5_ - p_76311_3_);
     }
 
-    public final double grad2(int p_76309_1_, double p_76309_2_, double p_76309_4_)
-    {
+    public final double grad2(int p_76309_1_, double p_76309_2_, double p_76309_4_) {
         int i = p_76309_1_ & 15;
         return GRAD_2X[i] * p_76309_2_ + GRAD_2Z[i] * p_76309_4_;
     }
 
-    public final double grad(int p_76310_1_, double p_76310_2_, double p_76310_4_, double p_76310_6_)
-    {
+    public final double grad(int p_76310_1_, double p_76310_2_, double p_76310_4_, double p_76310_6_) {
         int i = p_76310_1_ & 15;
         return GRAD_X[i] * p_76310_2_ + GRAD_Y[i] * p_76310_4_ + GRAD_Z[i] * p_76310_6_;
     }
 
-    public void populateNoiseArray(double[] noiseArray, double xOffset, double yOffset, double zOffset, int xSize, int ySize, int zSize, double xScale, double yScale, double zScale, double noiseScale)
-    {
-        if (ySize == 1)
-        {
+    public void populateNoiseArray(double[] noiseArray, double xOffset, double yOffset, double zOffset, int xSize, int ySize, int zSize, double xScale, double yScale, double zScale, double noiseScale) {
+        if (ySize == 1) {
             int i5 = 0;
             int j5 = 0;
             int j = 0;
@@ -71,32 +61,28 @@
             int l5 = 0;
             double d16 = 1.0D / noiseScale;
 
-            for (int j2 = 0; j2 < xSize; ++j2)
-            {
-                double d17 = xOffset + (double)j2 * xScale + this.xCoord;
-                int i6 = (int)d17;
+            for (int j2 = 0; j2 < xSize; ++j2) {
+                double d17 = xOffset + (double) j2 * xScale + this.xCoord;
+                int i6 = (int) d17;
 
-                if (d17 < (double)i6)
-                {
+                if (d17 < (double) i6) {
                     --i6;
                 }
 
                 int k2 = i6 & 255;
-                d17 = d17 - (double)i6;
+                d17 = d17 - (double) i6;
                 double d18 = d17 * d17 * d17 * (d17 * (d17 * 6.0D - 15.0D) + 10.0D);
 
-                for (int j6 = 0; j6 < zSize; ++j6)
-                {
-                    double d19 = zOffset + (double)j6 * zScale + this.zCoord;
-                    int k6 = (int)d19;
+                for (int j6 = 0; j6 < zSize; ++j6) {
+                    double d19 = zOffset + (double) j6 * zScale + this.zCoord;
+                    int k6 = (int) d19;
 
-                    if (d19 < (double)k6)
-                    {
+                    if (d19 < (double) k6) {
                         --k6;
                     }
 
                     int l6 = k6 & 255;
-                    d19 = d19 - (double)k6;
+                    d19 = d19 - (double) k6;
                     double d20 = d19 * d19 * d19 * (d19 * (d19 * 6.0D - 15.0D) + 10.0D);
                     i5 = this.permutations[k2] + 0;
                     j5 = this.permutations[i5] + l6;
@@ -109,9 +95,7 @@
                     noiseArray[i7] += d21 * d16;
                 }
             }
-        }
-        else
-        {
+        } else {
             int i = 0;
             double d0 = 1.0D / noiseScale;
             int k = -1;
@@ -126,50 +110,43 @@
             double d3 = 0.0D;
             double d4 = 0.0D;
 
-            for (int l2 = 0; l2 < xSize; ++l2)
-            {
-                double d5 = xOffset + (double)l2 * xScale + this.xCoord;
-                int i3 = (int)d5;
+            for (int l2 = 0; l2 < xSize; ++l2) {
+                double d5 = xOffset + (double) l2 * xScale + this.xCoord;
+                int i3 = (int) d5;
 
-                if (d5 < (double)i3)
-                {
+                if (d5 < (double) i3) {
                     --i3;
                 }
 
                 int j3 = i3 & 255;
-                d5 = d5 - (double)i3;
+                d5 = d5 - (double) i3;
                 double d6 = d5 * d5 * d5 * (d5 * (d5 * 6.0D - 15.0D) + 10.0D);
 
-                for (int k3 = 0; k3 < zSize; ++k3)
-                {
-                    double d7 = zOffset + (double)k3 * zScale + this.zCoord;
-                    int l3 = (int)d7;
+                for (int k3 = 0; k3 < zSize; ++k3) {
+                    double d7 = zOffset + (double) k3 * zScale + this.zCoord;
+                    int l3 = (int) d7;
 
-                    if (d7 < (double)l3)
-                    {
+                    if (d7 < (double) l3) {
                         --l3;
                     }
 
                     int i4 = l3 & 255;
-                    d7 = d7 - (double)l3;
+                    d7 = d7 - (double) l3;
                     double d8 = d7 * d7 * d7 * (d7 * (d7 * 6.0D - 15.0D) + 10.0D);
 
-                    for (int j4 = 0; j4 < ySize; ++j4)
-                    {
-                        double d9 = yOffset + (double)j4 * yScale + this.yCoord;
-                        int k4 = (int)d9;
+                    for (int j4 = 0; j4 < ySize; ++j4) {
+                        double d9 = yOffset + (double) j4 * yScale + this.yCoord;
+                        int k4 = (int) d9;
 
-                        if (d9 < (double)k4)
-                        {
+                        if (d9 < (double) k4) {
                             --k4;
                         }
 
                         int l4 = k4 & 255;
-                        d9 = d9 - (double)k4;
+                        d9 = d9 - (double) k4;
                         double d10 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
 
-                        if (j4 == 0 || l4 != k)
-                        {
+                        if (j4 == 0 || l4 != k) {
                             k = l4;
                             l = this.permutations[j3] + l4;
                             i1 = this.permutations[l] + i4;
