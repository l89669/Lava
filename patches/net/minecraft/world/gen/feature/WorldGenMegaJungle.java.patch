--- ../src-base/minecraft/net/minecraft/world/gen/feature/WorldGenMegaJungle.java
+++ ../src-work/minecraft/net/minecraft/world/gen/feature/WorldGenMegaJungle.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.gen.feature;
 
-import java.util.Random;
 import net.minecraft.block.BlockVine;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.state.IBlockState;
@@ -9,73 +8,60 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
 
-public class WorldGenMegaJungle extends WorldGenHugeTrees
-{
-    public WorldGenMegaJungle(boolean notify, int baseHeightIn, int extraRandomHeightIn, IBlockState woodMetadataIn, IBlockState p_i46448_5_)
-    {
+import java.util.Random;
+
+public class WorldGenMegaJungle extends WorldGenHugeTrees {
+    public WorldGenMegaJungle(boolean notify, int baseHeightIn, int extraRandomHeightIn, IBlockState woodMetadataIn, IBlockState p_i46448_5_) {
         super(notify, baseHeightIn, extraRandomHeightIn, woodMetadataIn, p_i46448_5_);
     }
 
-    public boolean generate(World worldIn, Random rand, BlockPos position)
-    {
+    public boolean generate(World worldIn, Random rand, BlockPos position) {
         int i = this.getHeight(rand);
 
-        if (!this.ensureGrowable(worldIn, rand, position, i))
-        {
+        if (!this.ensureGrowable(worldIn, rand, position, i)) {
             return false;
-        }
-        else
-        {
+        } else {
             this.createCrown(worldIn, position.up(i), 2);
 
-            for (int j = position.getY() + i - 2 - rand.nextInt(4); j > position.getY() + i / 2; j -= 2 + rand.nextInt(4))
-            {
-                float f = rand.nextFloat() * ((float)Math.PI * 2F);
-                int k = position.getX() + (int)(0.5F + MathHelper.cos(f) * 4.0F);
-                int l = position.getZ() + (int)(0.5F + MathHelper.sin(f) * 4.0F);
+            for (int j = position.getY() + i - 2 - rand.nextInt(4); j > position.getY() + i / 2; j -= 2 + rand.nextInt(4)) {
+                float f = rand.nextFloat() * ((float) Math.PI * 2F);
+                int k = position.getX() + (int) (0.5F + MathHelper.cos(f) * 4.0F);
+                int l = position.getZ() + (int) (0.5F + MathHelper.sin(f) * 4.0F);
 
-                for (int i1 = 0; i1 < 5; ++i1)
-                {
-                    k = position.getX() + (int)(1.5F + MathHelper.cos(f) * (float)i1);
-                    l = position.getZ() + (int)(1.5F + MathHelper.sin(f) * (float)i1);
+                for (int i1 = 0; i1 < 5; ++i1) {
+                    k = position.getX() + (int) (1.5F + MathHelper.cos(f) * (float) i1);
+                    l = position.getZ() + (int) (1.5F + MathHelper.sin(f) * (float) i1);
                     this.setBlockAndNotifyAdequately(worldIn, new BlockPos(k, j - 3 + i1 / 2, l), this.woodMetadata);
                 }
 
                 int j2 = 1 + rand.nextInt(2);
                 int j1 = j;
 
-                for (int k1 = j - j2; k1 <= j1; ++k1)
-                {
+                for (int k1 = j - j2; k1 <= j1; ++k1) {
                     int l1 = k1 - j1;
                     this.growLeavesLayer(worldIn, new BlockPos(k, k1, l), 1 - l1);
                 }
             }
 
-            for (int i2 = 0; i2 < i; ++i2)
-            {
+            for (int i2 = 0; i2 < i; ++i2) {
                 BlockPos blockpos = position.up(i2);
 
-                if (this.isAirLeaves(worldIn,blockpos))
-                {
+                if (this.isAirLeaves(worldIn, blockpos)) {
                     this.setBlockAndNotifyAdequately(worldIn, blockpos, this.woodMetadata);
 
-                    if (i2 > 0)
-                    {
+                    if (i2 > 0) {
                         this.placeVine(worldIn, rand, blockpos.west(), BlockVine.EAST);
                         this.placeVine(worldIn, rand, blockpos.north(), BlockVine.SOUTH);
                     }
                 }
 
-                if (i2 < i - 1)
-                {
+                if (i2 < i - 1) {
                     BlockPos blockpos1 = blockpos.east();
 
-                    if (this.isAirLeaves(worldIn,blockpos1))
-                    {
+                    if (this.isAirLeaves(worldIn, blockpos1)) {
                         this.setBlockAndNotifyAdequately(worldIn, blockpos1, this.woodMetadata);
 
-                        if (i2 > 0)
-                        {
+                        if (i2 > 0) {
                             this.placeVine(worldIn, rand, blockpos1.east(), BlockVine.WEST);
                             this.placeVine(worldIn, rand, blockpos1.north(), BlockVine.SOUTH);
                         }
@@ -83,12 +69,10 @@
 
                     BlockPos blockpos2 = blockpos.south().east();
 
-                    if (this.isAirLeaves(worldIn,blockpos2))
-                    {
+                    if (this.isAirLeaves(worldIn, blockpos2)) {
                         this.setBlockAndNotifyAdequately(worldIn, blockpos2, this.woodMetadata);
 
-                        if (i2 > 0)
-                        {
+                        if (i2 > 0) {
                             this.placeVine(worldIn, rand, blockpos2.east(), BlockVine.WEST);
                             this.placeVine(worldIn, rand, blockpos2.south(), BlockVine.NORTH);
                         }
@@ -96,12 +80,10 @@
 
                     BlockPos blockpos3 = blockpos.south();
 
-                    if (this.isAirLeaves(worldIn,blockpos3))
-                    {
+                    if (this.isAirLeaves(worldIn, blockpos3)) {
                         this.setBlockAndNotifyAdequately(worldIn, blockpos3, this.woodMetadata);
 
-                        if (i2 > 0)
-                        {
+                        if (i2 > 0) {
                             this.placeVine(worldIn, rand, blockpos3.west(), BlockVine.EAST);
                             this.placeVine(worldIn, rand, blockpos3.south(), BlockVine.NORTH);
                         }
@@ -113,27 +95,22 @@
         }
     }
 
-    private void placeVine(World p_181632_1_, Random p_181632_2_, BlockPos p_181632_3_, PropertyBool p_181632_4_)
-    {
-        if (p_181632_2_.nextInt(3) > 0 && p_181632_1_.isAirBlock(p_181632_3_))
-        {
+    private void placeVine(World p_181632_1_, Random p_181632_2_, BlockPos p_181632_3_, PropertyBool p_181632_4_) {
+        if (p_181632_2_.nextInt(3) > 0 && p_181632_1_.isAirBlock(p_181632_3_)) {
             this.setBlockAndNotifyAdequately(p_181632_1_, p_181632_3_, Blocks.VINE.getDefaultState().withProperty(p_181632_4_, Boolean.valueOf(true)));
         }
     }
 
-    private void createCrown(World worldIn, BlockPos p_175930_2_, int p_175930_3_)
-    {
+    private void createCrown(World worldIn, BlockPos p_175930_2_, int p_175930_3_) {
         int i = 2;
 
-        for (int j = -2; j <= 0; ++j)
-        {
+        for (int j = -2; j <= 0; ++j) {
             this.growLeavesLayerStrict(worldIn, p_175930_2_.up(j), p_175930_3_ + 1 - j);
         }
     }
 
     //Helper macro
-    private boolean isAirLeaves(World world, BlockPos pos)
-    {
+    private boolean isAirLeaves(World world, BlockPos pos) {
         IBlockState state = world.getBlockState(pos);
         return state.getBlock().isAir(state, world, pos) || state.getBlock().isLeaves(state, world, pos);
     }
