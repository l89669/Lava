--- ../src-base/minecraft/net/minecraft/world/WorldProviderEnd.java
+++ ../src-work/minecraft/net/minecraft/world/WorldProviderEnd.java
@@ -1,6 +1,5 @@
 package net.minecraft.world;
 
-import javax.annotation.Nullable;
 import net.minecraft.init.Biomes;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.math.BlockPos;
@@ -13,39 +12,35 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class WorldProviderEnd extends WorldProvider
-{
+import javax.annotation.Nullable;
+
+public class WorldProviderEnd extends WorldProvider {
     private DragonFightManager dragonFightManager;
 
-    public void init()
-    {
+    public void init() {
         this.biomeProvider = new BiomeProviderSingle(Biomes.SKY);
         NBTTagCompound nbttagcompound = this.world.getWorldInfo().getDimensionData(this.world.provider.getDimension());
-        this.dragonFightManager = this.world instanceof WorldServer ? new DragonFightManager((WorldServer)this.world, nbttagcompound.getCompoundTag("DragonFight")) : null;
+        this.dragonFightManager = this.world instanceof WorldServer ? new DragonFightManager((WorldServer) this.world, nbttagcompound.getCompoundTag("DragonFight")) : null;
     }
 
-    public IChunkGenerator createChunkGenerator()
-    {
+    public IChunkGenerator createChunkGenerator() {
         return new ChunkGeneratorEnd(this.world, this.world.getWorldInfo().isMapFeaturesEnabled(), this.world.getSeed(), this.getSpawnCoordinate());
     }
 
-    public float calculateCelestialAngle(long worldTime, float partialTicks)
-    {
+    public float calculateCelestialAngle(long worldTime, float partialTicks) {
         return 0.0F;
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
-    public float[] calcSunriseSunsetColors(float celestialAngle, float partialTicks)
-    {
+    public float[] calcSunriseSunsetColors(float celestialAngle, float partialTicks) {
         return null;
     }
 
     @SideOnly(Side.CLIENT)
-    public Vec3d getFogColor(float p_76562_1_, float p_76562_2_)
-    {
+    public Vec3d getFogColor(float p_76562_1_, float p_76562_2_) {
         int i = 10518688;
-        float f = MathHelper.cos(p_76562_1_ * ((float)Math.PI * 2F)) * 2.0F + 0.5F;
+        float f = MathHelper.cos(p_76562_1_ * ((float) Math.PI * 2F)) * 2.0F + 0.5F;
         f = MathHelper.clamp(f, 0.0F, 1.0F);
         float f1 = 0.627451F;
         float f2 = 0.5019608F;
@@ -53,97 +48,79 @@
         f1 = f1 * (f * 0.0F + 0.15F);
         f2 = f2 * (f * 0.0F + 0.15F);
         f3 = f3 * (f * 0.0F + 0.15F);
-        return new Vec3d((double)f1, (double)f2, (double)f3);
+        return new Vec3d((double) f1, (double) f2, (double) f3);
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isSkyColored()
-    {
+    public boolean isSkyColored() {
         return false;
     }
 
-    public boolean canRespawnHere()
-    {
+    public boolean canRespawnHere() {
         return false;
     }
 
-    public boolean isSurfaceWorld()
-    {
+    public boolean isSurfaceWorld() {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getCloudHeight()
-    {
+    public float getCloudHeight() {
         return 8.0F;
     }
 
-    public boolean canCoordinateBeSpawn(int x, int z)
-    {
+    public boolean canCoordinateBeSpawn(int x, int z) {
         return this.world.getGroundAboveSeaLevel(new BlockPos(x, 0, z)).getMaterial().blocksMovement();
     }
 
-    public BlockPos getSpawnCoordinate()
-    {
+    public BlockPos getSpawnCoordinate() {
         return new BlockPos(100, 50, 0);
     }
 
-    public int getAverageGroundLevel()
-    {
+    public int getAverageGroundLevel() {
         return 50;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean doesXZShowFog(int x, int z)
-    {
+    public boolean doesXZShowFog(int x, int z) {
         return false;
     }
 
-    public DimensionType getDimensionType()
-    {
+    public DimensionType getDimensionType() {
         return DimensionType.THE_END;
     }
 
-    public void onWorldSave()
-    {
+    public void onWorldSave() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
-        if (this.dragonFightManager != null)
-        {
+        if (this.dragonFightManager != null) {
             nbttagcompound.setTag("DragonFight", this.dragonFightManager.getCompound());
         }
 
         this.world.getWorldInfo().setDimensionData(this.world.provider.getDimension(), nbttagcompound);
     }
 
-    public void onWorldUpdateEntities()
-    {
-        if (this.dragonFightManager != null)
-        {
+    public void onWorldUpdateEntities() {
+        if (this.dragonFightManager != null) {
             this.dragonFightManager.tick();
         }
     }
 
     @Nullable
-    public DragonFightManager getDragonFightManager()
-    {
+    public DragonFightManager getDragonFightManager() {
         return this.dragonFightManager;
     }
 
     @Override
-    public void onPlayerAdded(net.minecraft.entity.player.EntityPlayerMP player)
-    {
-        if (this.dragonFightManager != null)
-        {
+    public void onPlayerAdded(net.minecraft.entity.player.EntityPlayerMP player) {
+        if (this.dragonFightManager != null) {
             this.dragonFightManager.addPlayer(player);
         }
     }
 
     @Override
-    public void onPlayerRemoved(net.minecraft.entity.player.EntityPlayerMP player)
-    {
-        if (this.dragonFightManager != null)
-        {
+    public void onPlayerRemoved(net.minecraft.entity.player.EntityPlayerMP player) {
+        if (this.dragonFightManager != null) {
             this.dragonFightManager.removePlayer(player);
         }
     }
