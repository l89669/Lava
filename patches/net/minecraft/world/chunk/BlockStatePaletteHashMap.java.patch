--- ../src-base/minecraft/net/minecraft/world/chunk/BlockStatePaletteHashMap.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/BlockStatePaletteHashMap.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.chunk;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.network.PacketBuffer;
@@ -8,29 +7,26 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockStatePaletteHashMap implements IBlockStatePalette
-{
+import javax.annotation.Nullable;
+
+public class BlockStatePaletteHashMap implements IBlockStatePalette {
     private final IntIdentityHashBiMap<IBlockState> statePaletteMap;
     private final IBlockStatePaletteResizer paletteResizer;
     private final int bits;
 
-    public BlockStatePaletteHashMap(int bitsIn, IBlockStatePaletteResizer paletteResizerIn)
-    {
+    public BlockStatePaletteHashMap(int bitsIn, IBlockStatePaletteResizer paletteResizerIn) {
         this.bits = bitsIn;
         this.paletteResizer = paletteResizerIn;
         this.statePaletteMap = new IntIdentityHashBiMap<IBlockState>(1 << bitsIn);
     }
 
-    public int idFor(IBlockState state)
-    {
+    public int idFor(IBlockState state) {
         int i = this.statePaletteMap.getId(state);
 
-        if (i == -1)
-        {
+        if (i == -1) {
             i = this.statePaletteMap.add(state);
 
-            if (i >= 1 << this.bits)
-            {
+            if (i >= 1 << this.bits) {
                 i = this.paletteResizer.onResize(this.bits + 1, state);
             }
         }
@@ -39,40 +35,33 @@
     }
 
     @Nullable
-    public IBlockState getBlockState(int indexKey)
-    {
+    public IBlockState getBlockState(int indexKey) {
         return this.statePaletteMap.get(indexKey);
     }
 
     @SideOnly(Side.CLIENT)
-    public void read(PacketBuffer buf)
-    {
+    public void read(PacketBuffer buf) {
         this.statePaletteMap.clear();
         int i = buf.readVarInt();
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             this.statePaletteMap.add(Block.BLOCK_STATE_IDS.getByValue(buf.readVarInt()));
         }
     }
 
-    public void write(PacketBuffer buf)
-    {
+    public void write(PacketBuffer buf) {
         int i = this.statePaletteMap.size();
         buf.writeVarInt(i);
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             buf.writeVarInt(Block.BLOCK_STATE_IDS.get(this.statePaletteMap.get(j)));
         }
     }
 
-    public int getSerializedSize()
-    {
+    public int getSerializedSize() {
         int i = PacketBuffer.getVarIntSize(this.statePaletteMap.size());
 
-        for (int j = 0; j < this.statePaletteMap.size(); ++j)
-        {
+        for (int j = 0; j < this.statePaletteMap.size(); ++j) {
             i += PacketBuffer.getVarIntSize(Block.BLOCK_STATE_IDS.get(this.statePaletteMap.get(j)));
         }
 
