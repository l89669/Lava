--- ../src-base/minecraft/net/minecraft/world/storage/SaveFormatOld.java
+++ ../src-work/minecraft/net/minecraft/world/storage/SaveFormatOld.java
@@ -1,11 +1,6 @@
 package net.minecraft.world.storage;
 
 import com.google.common.collect.Lists;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.client.AnvilConverterException;
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
@@ -17,18 +12,21 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class SaveFormatOld implements ISaveFormat
-{
+import javax.annotation.Nullable;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.util.List;
+
+public class SaveFormatOld implements ISaveFormat {
     private static final Logger LOGGER = LogManager.getLogger();
     public final File savesDirectory;
     protected final DataFixer dataFixer;
 
-    public SaveFormatOld(File savesDirectoryIn, DataFixer dataFixerIn)
-    {
+    public SaveFormatOld(File savesDirectoryIn, DataFixer dataFixerIn) {
         this.dataFixer = dataFixerIn;
 
-        if (!savesDirectoryIn.exists())
-        {
+        if (!savesDirectoryIn.exists()) {
             savesDirectoryIn.mkdirs();
         }
 
@@ -36,23 +34,19 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public String getName()
-    {
+    public String getName() {
         return "Old Format";
     }
 
     @SideOnly(Side.CLIENT)
-    public List<WorldSummary> getSaveList() throws AnvilConverterException
-    {
+    public List<WorldSummary> getSaveList() throws AnvilConverterException {
         List<WorldSummary> list = Lists.<WorldSummary>newArrayList();
 
-        for (int i = 0; i < 5; ++i)
-        {
+        for (int i = 0; i < 5; ++i) {
             String s = "World" + (i + 1);
             WorldInfo worldinfo = this.getWorldInfo(s);
 
-            if (worldinfo != null)
-            {
+            if (worldinfo != null) {
                 list.add(new WorldSummary(worldinfo, s, "", worldinfo.getSizeOnDisk(), false));
             }
         }
@@ -61,29 +55,22 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void flushCache()
-    {
+    public void flushCache() {
     }
 
     @Nullable
-    public WorldInfo getWorldInfo(String saveName)
-    {
+    public WorldInfo getWorldInfo(String saveName) {
         File file1 = new File(this.savesDirectory, saveName);
 
-        if (!file1.exists())
-        {
+        if (!file1.exists()) {
             return null;
-        }
-        else
-        {
+        } else {
             File file2 = new File(file1, "level.dat");
 
-            if (file2.exists())
-            {
+            if (file2.exists()) {
                 WorldInfo worldinfo = getWorldData(file2, this.dataFixer);
 
-                if (worldinfo != null)
-                {
+                if (worldinfo != null) {
                     return worldinfo;
                 }
             }
@@ -94,89 +81,68 @@
     }
 
     @Nullable
-    public static WorldInfo getWorldData(File p_186353_0_, DataFixer dataFixerIn)
-    {
-        try
-        {
+    public static WorldInfo getWorldData(File p_186353_0_, DataFixer dataFixerIn) {
+        try {
             NBTTagCompound nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(p_186353_0_));
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
             return new WorldInfo(dataFixerIn.process(FixTypes.LEVEL, nbttagcompound1));
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             LOGGER.error("Exception reading {}", p_186353_0_, exception);
             return null;
         }
     }
 
     //Forge: Special version of the above that runs during actual world loading and not metadata gathering.
-    public static WorldInfo loadAndFix(File file, DataFixer fixer, SaveHandler save)
-    {
-        try
-        {
+    public static WorldInfo loadAndFix(File file, DataFixer fixer, SaveHandler save) {
+        try {
             NBTTagCompound nbt = CompressedStreamTools.readCompressed(new FileInputStream(file));
             WorldInfo info = new WorldInfo(fixer.process(FixTypes.LEVEL, nbt.getCompoundTag("Data")));
             net.minecraftforge.fml.common.FMLCommonHandler.instance().handleWorldDataLoad(save, info, nbt);
             return info;
-        }
-        catch (net.minecraftforge.fml.common.StartupQuery.AbortedException e) { throw e; }
-        catch (Exception exception)
-        {
-            LOGGER.error((String)("Exception reading " + file), (Throwable)exception);
+        } catch (net.minecraftforge.fml.common.StartupQuery.AbortedException e) {
+            throw e;
+        } catch (Exception exception) {
+            LOGGER.error((String) ("Exception reading " + file), (Throwable) exception);
             return null;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void renameWorld(String dirName, String newName)
-    {
+    public void renameWorld(String dirName, String newName) {
         File file1 = new File(this.savesDirectory, dirName);
 
-        if (file1.exists())
-        {
+        if (file1.exists()) {
             File file2 = new File(file1, "level.dat");
 
-            if (file2.exists())
-            {
-                try
-                {
+            if (file2.exists()) {
+                try {
                     NBTTagCompound nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file2));
                     NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
                     nbttagcompound1.setString("LevelName", newName);
                     CompressedStreamTools.writeCompressed(nbttagcompound, new FileOutputStream(file2));
-                }
-                catch (Exception exception)
-                {
+                } catch (Exception exception) {
                     exception.printStackTrace();
                 }
             }
         }
     }
 
-    public ISaveHandler getSaveLoader(String saveName, boolean storePlayerdata)
-    {
+    public ISaveHandler getSaveLoader(String saveName, boolean storePlayerdata) {
         return new SaveHandler(this.savesDirectory, saveName, storePlayerdata, this.dataFixer);
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isNewLevelIdAcceptable(String saveName)
-    {
+    public boolean isNewLevelIdAcceptable(String saveName) {
         File file1 = new File(this.savesDirectory, saveName);
 
-        if (file1.exists())
-        {
+        if (file1.exists()) {
             return false;
-        }
-        else
-        {
-            try
-            {
+        } else {
+            try {
                 file1.mkdir();
                 file1.delete();
                 return true;
-            }
-            catch (Throwable throwable)
-            {
+            } catch (Throwable throwable) {
                 LOGGER.warn("Couldn't make new level", throwable);
                 return false;
             }
@@ -184,37 +150,27 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean deleteWorldDirectory(String saveName)
-    {
+    public boolean deleteWorldDirectory(String saveName) {
         File file1 = new File(this.savesDirectory, saveName);
 
-        if (!file1.exists())
-        {
+        if (!file1.exists()) {
             return true;
-        }
-        else
-        {
-            LOGGER.info("Deleting level {}", (Object)saveName);
+        } else {
+            LOGGER.info("Deleting level {}", (Object) saveName);
 
-            for (int i = 1; i <= 5; ++i)
-            {
-                LOGGER.info("Attempt {}...", (int)i);
+            for (int i = 1; i <= 5; ++i) {
+                LOGGER.info("Attempt {}...", (int) i);
 
-                if (deleteFiles(file1.listFiles()))
-                {
+                if (deleteFiles(file1.listFiles())) {
                     break;
                 }
 
                 LOGGER.warn("Unsuccessful in deleting contents.");
 
-                if (i < 5)
-                {
-                    try
-                    {
+                if (i < 5) {
+                    try {
                         Thread.sleep(500L);
-                    }
-                    catch (InterruptedException var5)
-                    {
+                    } catch (InterruptedException var5) {
                         ;
                     }
                 }
@@ -225,21 +181,17 @@
     }
 
     @SideOnly(Side.CLIENT)
-    protected static boolean deleteFiles(File[] files)
-    {
-        for (File file1 : files)
-        {
-            LOGGER.debug("Deleting {}", (Object)file1);
+    protected static boolean deleteFiles(File[] files) {
+        for (File file1 : files) {
+            LOGGER.debug("Deleting {}", (Object) file1);
 
-            if (file1.isDirectory() && !deleteFiles(file1.listFiles()))
-            {
-                LOGGER.warn("Couldn't delete directory {}", (Object)file1);
+            if (file1.isDirectory() && !deleteFiles(file1.listFiles())) {
+                LOGGER.warn("Couldn't delete directory {}", (Object) file1);
                 return false;
             }
 
-            if (!file1.delete())
-            {
-                LOGGER.warn("Couldn't delete file {}", (Object)file1);
+            if (!file1.delete()) {
+                LOGGER.warn("Couldn't delete file {}", (Object) file1);
                 return false;
             }
         }
@@ -248,30 +200,25 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isConvertible(String saveName)
-    {
+    public boolean isConvertible(String saveName) {
         return false;
     }
 
-    public boolean isOldMapFormat(String saveName)
-    {
+    public boolean isOldMapFormat(String saveName) {
         return false;
     }
 
-    public boolean convertMapFormat(String filename, IProgressUpdate progressCallback)
-    {
+    public boolean convertMapFormat(String filename, IProgressUpdate progressCallback) {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean canLoadWorld(String saveName)
-    {
+    public boolean canLoadWorld(String saveName) {
         File file1 = new File(this.savesDirectory, saveName);
         return file1.isDirectory();
     }
 
-    public File getFile(String p_186352_1_, String p_186352_2_)
-    {
+    public File getFile(String p_186352_1_, String p_186352_2_) {
         return new File(new File(this.savesDirectory, p_186352_1_), p_186352_2_);
     }
 }
