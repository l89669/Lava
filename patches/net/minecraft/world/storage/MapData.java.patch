--- ../src-base/minecraft/net/minecraft/world/storage/MapData.java
+++ ../src-work/minecraft/net/minecraft/world/storage/MapData.java
@@ -2,9 +2,6 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.entity.item.EntityItemFrame;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
@@ -15,9 +12,16 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapView;
 
-public class MapData extends WorldSavedData
-{
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
+public class MapData extends WorldSavedData {
     public int xCenter;
     public int zCenter;
     public int dimension; //FML byte -> int
@@ -25,38 +29,62 @@
     public boolean unlimitedTracking;
     public byte scale;
     public byte[] colors = new byte[16384];
-    public List<MapData.MapInfo> playersArrayList = Lists.<MapData.MapInfo>newArrayList();
-    private final Map<EntityPlayer, MapData.MapInfo> playersHashMap = Maps.<EntityPlayer, MapData.MapInfo>newHashMap();
+    public List<MapInfo> playersArrayList = Lists.<MapInfo>newArrayList();
+    private final Map<EntityPlayer, MapInfo> playersHashMap = Maps.<EntityPlayer, MapInfo>newHashMap();
     public Map<String, MapDecoration> mapDecorations = Maps.<String, MapDecoration>newLinkedHashMap();
 
-    public MapData(String mapname)
-    {
+    public final CraftMapView mapView;
+    private CraftServer server;
+    private UUID uniqueId = null;
+
+    public MapData(String mapname) {
         super(mapname);
+        mapView = new CraftMapView(this);
+        server = (CraftServer) org.bukkit.Bukkit.getServer();
     }
 
-    public void calculateMapCenter(double x, double z, int mapScale)
-    {
+    public void calculateMapCenter(double x, double z, int mapScale) {
         int i = 128 * (1 << mapScale);
-        int j = MathHelper.floor((x + 64.0D) / (double)i);
-        int k = MathHelper.floor((z + 64.0D) / (double)i);
+        int j = MathHelper.floor((x + 64.0D) / (double) i);
+        int k = MathHelper.floor((z + 64.0D) / (double) i);
         this.xCenter = j * i + i / 2 - 64;
         this.zCenter = k * i + i / 2 - 64;
     }
 
-    public void readFromNBT(NBTTagCompound nbt)
-    {
-        this.dimension = nbt.getInteger("dimension");
+    public void readFromNBT(NBTTagCompound nbt) {
+        // this.dimension = nbt.getInteger("dimension");
+        // CraftBukkit start
+        int dimension = nbt.getInteger("dimension");
+
+        if (dimension >= 10) {
+            long least = nbt.getLong("UUIDLeast");
+            long most = nbt.getLong("UUIDMost");
+
+            if (least != 0L && most != 0L) {
+                this.uniqueId = new UUID(most, least);
+
+                CraftWorld world = (CraftWorld) server.getWorld(this.uniqueId);
+                // Check if the stored world details are correct.
+                if (world == null) {
+                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                       This is to prevent them being corrupted with the wrong map data. */
+                    dimension = 127;
+                } else {
+                    dimension = (byte) world.getHandle().dimension;
+                }
+            }
+        }
+
+        this.dimension = dimension;
+        // CraftBukkit end
         this.xCenter = nbt.getInteger("xCenter");
         this.zCenter = nbt.getInteger("zCenter");
         this.scale = nbt.getByte("scale");
-        this.scale = (byte)MathHelper.clamp(this.scale, 0, 4);
+        this.scale = (byte) MathHelper.clamp(this.scale, 0, 4);
 
-        if (nbt.hasKey("trackingPosition", 1))
-        {
+        if (nbt.hasKey("trackingPosition", 1)) {
             this.trackingPosition = nbt.getBoolean("trackingPosition");
-        }
-        else
-        {
+        } else {
             this.trackingPosition = true;
         }
 
@@ -64,29 +92,22 @@
         int i = nbt.getShort("width");
         int j = nbt.getShort("height");
 
-        if (i == 128 && j == 128)
-        {
+        if (i == 128 && j == 128) {
             this.colors = nbt.getByteArray("colors");
-        }
-        else
-        {
+        } else {
             byte[] abyte = nbt.getByteArray("colors");
             this.colors = new byte[16384];
             int k = (128 - i) / 2;
             int l = (128 - j) / 2;
 
-            for (int i1 = 0; i1 < j; ++i1)
-            {
+            for (int i1 = 0; i1 < j; ++i1) {
                 int j1 = i1 + l;
 
-                if (j1 >= 0 || j1 < 128)
-                {
-                    for (int k1 = 0; k1 < i; ++k1)
-                    {
+                if (j1 >= 0 || j1 < 128) {
+                    for (int k1 = 0; k1 < i; ++k1) {
                         int l1 = k1 + k;
 
-                        if (l1 >= 0 || l1 < 128)
-                        {
+                        if (l1 >= 0 || l1 < 128) {
                             this.colors[l1 + j1 * 128] = abyte[k1 + i1 * i];
                         }
                     }
@@ -95,85 +116,87 @@
         }
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound compound)
-    {
+    public NBTTagCompound writeToNBT(NBTTagCompound compound) {
+        // CraftBukkit start
+        if (this.dimension >= 10) {
+            if (this.uniqueId == null) {
+                for (org.bukkit.World world : server.getWorlds()) {
+                    CraftWorld cWorld = (CraftWorld) world;
+                    if (cWorld.getHandle().dimension == this.dimension) {
+                        this.uniqueId = cWorld.getUID();
+                        break;
+                    }
+                }
+            }
+            /* Perform a second check to see if a matching world was found, this is a necessary
+               change incase Maps are forcefully unlinked from a World and lack a UID.*/
+            if (this.uniqueId != null) {
+                compound.setLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+                compound.setLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+            }
+        }
+        // CraftBukkit end
         compound.setInteger("dimension", this.dimension);
         compound.setInteger("xCenter", this.xCenter);
         compound.setInteger("zCenter", this.zCenter);
         compound.setByte("scale", this.scale);
-        compound.setShort("width", (short)128);
-        compound.setShort("height", (short)128);
+        compound.setShort("width", (short) 128);
+        compound.setShort("height", (short) 128);
         compound.setByteArray("colors", this.colors);
         compound.setBoolean("trackingPosition", this.trackingPosition);
         compound.setBoolean("unlimitedTracking", this.unlimitedTracking);
         return compound;
     }
 
-    public void updateVisiblePlayers(EntityPlayer player, ItemStack mapStack)
-    {
-        if (!this.playersHashMap.containsKey(player))
-        {
-            MapData.MapInfo mapdata$mapinfo = new MapData.MapInfo(player);
+    public void updateVisiblePlayers(EntityPlayer player, ItemStack mapStack) {
+        if (!this.playersHashMap.containsKey(player)) {
+            MapInfo mapdata$mapinfo = new MapInfo(player);
             this.playersHashMap.put(player, mapdata$mapinfo);
             this.playersArrayList.add(mapdata$mapinfo);
         }
 
-        if (!player.inventory.hasItemStack(mapStack))
-        {
+        if (!player.inventory.hasItemStack(mapStack)) {
             this.mapDecorations.remove(player.getName());
         }
 
-        for (int i = 0; i < this.playersArrayList.size(); ++i)
-        {
-            MapData.MapInfo mapdata$mapinfo1 = this.playersArrayList.get(i);
+        for (int i = 0; i < this.playersArrayList.size(); ++i) {
+            MapInfo mapdata$mapinfo1 = this.playersArrayList.get(i);
 
-            if (!mapdata$mapinfo1.player.isDead && (mapdata$mapinfo1.player.inventory.hasItemStack(mapStack) || mapStack.isOnItemFrame()))
-            {
-                if (!mapStack.isOnItemFrame() && mapdata$mapinfo1.player.dimension == this.dimension && this.trackingPosition)
-                {
-                    this.updateDecorations(MapDecoration.Type.PLAYER, mapdata$mapinfo1.player.world, mapdata$mapinfo1.player.getName(), mapdata$mapinfo1.player.posX, mapdata$mapinfo1.player.posZ, (double)mapdata$mapinfo1.player.rotationYaw);
+            if (!mapdata$mapinfo1.player.isDead && (mapdata$mapinfo1.player.inventory.hasItemStack(mapStack) || mapStack.isOnItemFrame())) {
+                if (!mapStack.isOnItemFrame() && mapdata$mapinfo1.player.dimension == this.dimension && this.trackingPosition) {
+                    this.updateDecorations(MapDecoration.Type.PLAYER, mapdata$mapinfo1.player.world, mapdata$mapinfo1.player.getName(), mapdata$mapinfo1.player.posX, mapdata$mapinfo1.player.posZ, (double) mapdata$mapinfo1.player.rotationYaw);
                 }
-            }
-            else
-            {
+            } else {
                 this.playersHashMap.remove(mapdata$mapinfo1.player);
                 this.playersArrayList.remove(mapdata$mapinfo1);
             }
         }
 
-        if (mapStack.isOnItemFrame() && this.trackingPosition)
-        {
+        if (mapStack.isOnItemFrame() && this.trackingPosition) {
             EntityItemFrame entityitemframe = mapStack.getItemFrame();
             BlockPos blockpos = entityitemframe.getHangingPosition();
-            this.updateDecorations(MapDecoration.Type.FRAME, player.world, "frame-" + entityitemframe.getEntityId(), (double)blockpos.getX(), (double)blockpos.getZ(), (double)(entityitemframe.facingDirection.getHorizontalIndex() * 90));
+            this.updateDecorations(MapDecoration.Type.FRAME, player.world, "frame-" + entityitemframe.getEntityId(), (double) blockpos.getX(), (double) blockpos.getZ(), (double) (entityitemframe.facingDirection.getHorizontalIndex() * 90));
         }
 
-        if (mapStack.hasTagCompound() && mapStack.getTagCompound().hasKey("Decorations", 9))
-        {
+        if (mapStack.hasTagCompound() && mapStack.getTagCompound().hasKey("Decorations", 9)) {
             NBTTagList nbttaglist = mapStack.getTagCompound().getTagList("Decorations", 10);
 
-            for (int j = 0; j < nbttaglist.tagCount(); ++j)
-            {
+            for (int j = 0; j < nbttaglist.tagCount(); ++j) {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(j);
 
-                if (!this.mapDecorations.containsKey(nbttagcompound.getString("id")))
-                {
+                if (!this.mapDecorations.containsKey(nbttagcompound.getString("id"))) {
                     this.updateDecorations(MapDecoration.Type.byIcon(nbttagcompound.getByte("type")), player.world, nbttagcompound.getString("id"), nbttagcompound.getDouble("x"), nbttagcompound.getDouble("z"), nbttagcompound.getDouble("rot"));
                 }
             }
         }
     }
 
-    public static void addTargetDecoration(ItemStack map, BlockPos target, String decorationName, MapDecoration.Type type)
-    {
+    public static void addTargetDecoration(ItemStack map, BlockPos target, String decorationName, MapDecoration.Type type) {
         NBTTagList nbttaglist;
 
-        if (map.hasTagCompound() && map.getTagCompound().hasKey("Decorations", 9))
-        {
+        if (map.hasTagCompound() && map.getTagCompound().hasKey("Decorations", 9)) {
             nbttaglist = map.getTagCompound().getTagList("Decorations", 10);
-        }
-        else
-        {
+        } else {
             nbttaglist = new NBTTagList();
             map.setTagInfo("Decorations", nbttaglist);
         }
@@ -181,57 +204,46 @@
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         nbttagcompound.setByte("type", type.getIcon());
         nbttagcompound.setString("id", decorationName);
-        nbttagcompound.setDouble("x", (double)target.getX());
-        nbttagcompound.setDouble("z", (double)target.getZ());
+        nbttagcompound.setDouble("x", (double) target.getX());
+        nbttagcompound.setDouble("z", (double) target.getZ());
         nbttagcompound.setDouble("rot", 180.0D);
         nbttaglist.appendTag(nbttagcompound);
 
-        if (type.hasMapColor())
-        {
+        if (type.hasMapColor()) {
             NBTTagCompound nbttagcompound1 = map.getOrCreateSubCompound("display");
             nbttagcompound1.setInteger("MapColor", type.getMapColor());
         }
     }
 
-    private void updateDecorations(MapDecoration.Type type, World worldIn, String decorationName, double worldX, double worldZ, double rotationIn)
-    {
+    private void updateDecorations(MapDecoration.Type type, World worldIn, String decorationName, double worldX, double worldZ, double rotationIn) {
         int i = 1 << this.scale;
-        float f = (float)(worldX - (double)this.xCenter) / (float)i;
-        float f1 = (float)(worldZ - (double)this.zCenter) / (float)i;
-        byte b0 = (byte)((int)((double)(f * 2.0F) + 0.5D));
-        byte b1 = (byte)((int)((double)(f1 * 2.0F) + 0.5D));
+        float f = (float) (worldX - (double) this.xCenter) / (float) i;
+        float f1 = (float) (worldZ - (double) this.zCenter) / (float) i;
+        byte b0 = (byte) ((int) ((double) (f * 2.0F) + 0.5D));
+        byte b1 = (byte) ((int) ((double) (f1 * 2.0F) + 0.5D));
         int j = 63;
         byte b2;
 
-        if (f >= -63.0F && f1 >= -63.0F && f <= 63.0F && f1 <= 63.0F)
-        {
+        if (f >= -63.0F && f1 >= -63.0F && f <= 63.0F && f1 <= 63.0F) {
             rotationIn = rotationIn + (rotationIn < 0.0D ? -8.0D : 8.0D);
-            b2 = (byte)((int)(rotationIn * 16.0D / 360.0D));
+            b2 = (byte) ((int) (rotationIn * 16.0D / 360.0D));
 
-            if (worldIn.provider.shouldMapSpin(decorationName, worldX, worldZ, rotationIn))
-            {
-                int l = (int)(worldIn.getWorldTime() / 10L);
-                b2 = (byte)(l * l * 34187121 + l * 121 >> 15 & 15);
+            if (worldIn.provider.shouldMapSpin(decorationName, worldX, worldZ, rotationIn)) {
+                int l = (int) (worldIn.getWorldTime() / 10L);
+                b2 = (byte) (l * l * 34187121 + l * 121 >> 15 & 15);
             }
-        }
-        else
-        {
-            if (type != MapDecoration.Type.PLAYER)
-            {
+        } else {
+            if (type != MapDecoration.Type.PLAYER) {
                 this.mapDecorations.remove(decorationName);
                 return;
             }
 
             int k = 320;
 
-            if (Math.abs(f) < 320.0F && Math.abs(f1) < 320.0F)
-            {
+            if (Math.abs(f) < 320.0F && Math.abs(f1) < 320.0F) {
                 type = MapDecoration.Type.PLAYER_OFF_MAP;
-            }
-            else
-            {
-                if (!this.unlimitedTracking)
-                {
+            } else {
+                if (!this.unlimitedTracking) {
                     this.mapDecorations.remove(decorationName);
                     return;
                 }
@@ -241,23 +253,19 @@
 
             b2 = 0;
 
-            if (f <= -63.0F)
-            {
+            if (f <= -63.0F) {
                 b0 = -128;
             }
 
-            if (f1 <= -63.0F)
-            {
+            if (f1 <= -63.0F) {
                 b1 = -128;
             }
 
-            if (f >= 63.0F)
-            {
+            if (f >= 63.0F) {
                 b0 = 127;
             }
 
-            if (f1 >= 63.0F)
-            {
+            if (f1 >= 63.0F) {
                 b1 = 127;
             }
         }
@@ -266,29 +274,24 @@
     }
 
     @Nullable
-    public Packet<?> getMapPacket(ItemStack mapStack, World worldIn, EntityPlayer player)
-    {
-        MapData.MapInfo mapdata$mapinfo = this.playersHashMap.get(player);
+    public Packet<?> getMapPacket(ItemStack mapStack, World worldIn, EntityPlayer player) {
+        MapInfo mapdata$mapinfo = this.playersHashMap.get(player);
         return mapdata$mapinfo == null ? null : mapdata$mapinfo.getPacket(mapStack);
     }
 
-    public void updateMapData(int x, int y)
-    {
+    public void updateMapData(int x, int y) {
         super.markDirty();
 
-        for (MapData.MapInfo mapdata$mapinfo : this.playersArrayList)
-        {
+        for (MapInfo mapdata$mapinfo : this.playersArrayList) {
             mapdata$mapinfo.update(x, y);
         }
     }
 
-    public MapData.MapInfo getMapInfo(EntityPlayer player)
-    {
-        MapData.MapInfo mapdata$mapinfo = this.playersHashMap.get(player);
+    public MapInfo getMapInfo(EntityPlayer player) {
+        MapInfo mapdata$mapinfo = this.playersHashMap.get(player);
 
-        if (mapdata$mapinfo == null)
-        {
-            mapdata$mapinfo = new MapData.MapInfo(player);
+        if (mapdata$mapinfo == null) {
+            mapdata$mapinfo = new MapInfo(player);
             this.playersHashMap.put(player, mapdata$mapinfo);
             this.playersArrayList.add(mapdata$mapinfo);
         }
@@ -296,8 +299,7 @@
         return mapdata$mapinfo;
     }
 
-    public class MapInfo
-    {
+    public class MapInfo {
         public final EntityPlayer player;
         private boolean isDirty = true;
         private int minX;
@@ -307,36 +309,38 @@
         private int tick;
         public int step;
 
-        public MapInfo(EntityPlayer player)
-        {
+        public MapInfo(EntityPlayer player) {
             this.player = player;
         }
 
         @Nullable
-        public Packet<?> getPacket(ItemStack stack)
-        {
-            if (this.isDirty)
-            {
+        public Packet<?> getPacket(ItemStack stack) {
+            org.bukkit.craftbukkit.map.RenderData render = MapData.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.player.getBukkitEntity());
+
+            java.util.Collection<MapDecoration> icons = new java.util.ArrayList<>();
+
+            for (org.bukkit.map.MapCursor cursor : render.cursors) {
+
+                if (cursor.isVisible()) {
+                    icons.add(new MapDecoration(MapDecoration.Type.byIcon(cursor.getRawType()), cursor.getX(), cursor.getY(), cursor.getDirection()));
+                }
+            }
+
+            if (this.isDirty) {
                 this.isDirty = false;
-                return new SPacketMaps(stack.getMetadata(), MapData.this.scale, MapData.this.trackingPosition, MapData.this.mapDecorations.values(), MapData.this.colors, this.minX, this.minY, this.maxX + 1 - this.minX, this.maxY + 1 - this.minY);
+                return new SPacketMaps(stack.getMetadata(), MapData.this.scale, MapData.this.trackingPosition, icons, render.buffer, this.minX, this.minY, this.maxX + 1 - this.minX, this.maxY + 1 - this.minY);
+            } else {
+                return this.tick++ % 5 == 0 ? new SPacketMaps(stack.getMetadata(), MapData.this.scale, MapData.this.trackingPosition, icons, render.buffer, 0, 0, 0, 0) : null;
             }
-            else
-            {
-                return this.tick++ % 5 == 0 ? new SPacketMaps(stack.getMetadata(), MapData.this.scale, MapData.this.trackingPosition, MapData.this.mapDecorations.values(), MapData.this.colors, 0, 0, 0, 0) : null;
-            }
         }
 
-        public void update(int x, int y)
-        {
-            if (this.isDirty)
-            {
+        public void update(int x, int y) {
+            if (this.isDirty) {
                 this.minX = Math.min(this.minX, x);
                 this.minY = Math.min(this.minY, y);
                 this.maxX = Math.max(this.maxX, x);
                 this.maxY = Math.max(this.maxY, y);
-            }
-            else
-            {
+            } else {
                 this.isDirty = true;
                 this.minX = x;
                 this.minY = y;
