--- ../src-base/minecraft/net/minecraft/world/storage/loot/LootTableManager.java
+++ ../src-work/minecraft/net/minecraft/world/storage/loot/LootTableManager.java
@@ -8,12 +8,6 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonParseException;
-import java.io.File;
-import java.io.IOException;
-import java.net.URL;
-import java.nio.charset.StandardCharsets;
-import javax.annotation.Nullable;
-import net.minecraft.util.JsonUtils;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.storage.loot.conditions.LootCondition;
 import net.minecraft.world.storage.loot.conditions.LootConditionManager;
@@ -22,60 +16,53 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class LootTableManager
-{
+import javax.annotation.Nullable;
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+
+public class LootTableManager {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Gson GSON_INSTANCE = (new GsonBuilder()).registerTypeAdapter(RandomValueRange.class, new RandomValueRange.Serializer()).registerTypeAdapter(LootPool.class, new LootPool.Serializer()).registerTypeAdapter(LootTable.class, new LootTable.Serializer()).registerTypeHierarchyAdapter(LootEntry.class, new LootEntry.Serializer()).registerTypeHierarchyAdapter(LootFunction.class, new LootFunctionManager.Serializer()).registerTypeHierarchyAdapter(LootCondition.class, new LootConditionManager.Serializer()).registerTypeHierarchyAdapter(LootContext.EntityTarget.class, new LootContext.EntityTarget.Serializer()).create();
     private final LoadingCache<ResourceLocation, LootTable> registeredLootTables = CacheBuilder.newBuilder().<ResourceLocation, LootTable>build(new LootTableManager.Loader());
     private final File baseFolder;
 
-    public LootTableManager(@Nullable File folder)
-    {
+    public LootTableManager(@Nullable File folder) {
         this.baseFolder = folder;
         this.reloadLootTables();
     }
 
-    public LootTable getLootTableFromLocation(ResourceLocation ressources)
-    {
+    public LootTable getLootTableFromLocation(ResourceLocation ressources) {
         return this.registeredLootTables.getUnchecked(ressources);
     }
 
-    public void reloadLootTables()
-    {
+    public void reloadLootTables() {
         this.registeredLootTables.invalidateAll();
 
-        for (ResourceLocation resourcelocation : LootTableList.getAll())
-        {
+        for (ResourceLocation resourcelocation : LootTableList.getAll()) {
             this.getLootTableFromLocation(resourcelocation);
         }
     }
 
-    class Loader extends CacheLoader<ResourceLocation, LootTable>
-    {
-        private Loader()
-        {
+    class Loader extends CacheLoader<ResourceLocation, LootTable> {
+        private Loader() {
         }
 
-        public LootTable load(ResourceLocation p_load_1_) throws Exception
-        {
-            if (p_load_1_.getResourcePath().contains("."))
-            {
-                LootTableManager.LOGGER.debug("Invalid loot table name '{}' (can't contain periods)", (Object)p_load_1_);
+        public LootTable load(ResourceLocation p_load_1_) throws Exception {
+            if (p_load_1_.getResourcePath().contains(".")) {
+                LootTableManager.LOGGER.debug("Invalid loot table name '{}' (can't contain periods)", (Object) p_load_1_);
                 return LootTable.EMPTY_LOOT_TABLE;
-            }
-            else
-            {
+            } else {
                 LootTable loottable = this.loadLootTable(p_load_1_);
 
-                if (loottable == null)
-                {
+                if (loottable == null) {
                     loottable = this.loadBuiltinLootTable(p_load_1_);
                 }
 
-                if (loottable == null)
-                {
+                if (loottable == null) {
                     loottable = LootTable.EMPTY_LOOT_TABLE;
-                    LootTableManager.LOGGER.warn("Couldn't find resource table {}", (Object)p_load_1_);
+                    LootTableManager.LOGGER.warn("Couldn't find resource table {}", (Object) p_load_1_);
                 }
 
                 return loottable;
@@ -83,86 +70,60 @@
         }
 
         @Nullable
-        private LootTable loadLootTable(ResourceLocation resource)
-        {
-            if (LootTableManager.this.baseFolder == null)
-            {
+        private LootTable loadLootTable(ResourceLocation resource) {
+            if (LootTableManager.this.baseFolder == null) {
                 return null;
-            }
-            else
-            {
+            } else {
                 File file1 = new File(new File(LootTableManager.this.baseFolder, resource.getResourceDomain()), resource.getResourcePath() + ".json");
 
-                if (file1.exists())
-                {
-                    if (file1.isFile())
-                    {
+                if (file1.exists()) {
+                    if (file1.isFile()) {
                         String s;
 
-                        try
-                        {
+                        try {
                             s = Files.toString(file1, StandardCharsets.UTF_8);
-                        }
-                        catch (IOException ioexception)
-                        {
+                        } catch (IOException ioexception) {
                             LootTableManager.LOGGER.warn("Couldn't load loot table {} from {}", resource, file1, ioexception);
                             return LootTable.EMPTY_LOOT_TABLE;
                         }
 
-                        try
-                        {
+                        try {
                             return net.minecraftforge.common.ForgeHooks.loadLootTable(LootTableManager.GSON_INSTANCE, resource, s, true, LootTableManager.this);
-                        }
-                        catch (IllegalArgumentException | JsonParseException jsonparseexception)
-                        {
+                        } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
                             LootTableManager.LOGGER.error("Couldn't load loot table {} from {}", resource, file1, jsonparseexception);
                             return LootTable.EMPTY_LOOT_TABLE;
                         }
-                    }
-                    else
-                    {
+                    } else {
                         LootTableManager.LOGGER.warn("Expected to find loot table {} at {} but it was a folder.", resource, file1);
                         return LootTable.EMPTY_LOOT_TABLE;
                     }
-                }
-                else
-                {
+                } else {
                     return null;
                 }
             }
         }
 
         @Nullable
-        private LootTable loadBuiltinLootTable(ResourceLocation resource)
-        {
+        private LootTable loadBuiltinLootTable(ResourceLocation resource) {
             URL url = LootTableManager.class.getResource("/assets/" + resource.getResourceDomain() + "/loot_tables/" + resource.getResourcePath() + ".json");
 
-            if (url != null)
-            {
+            if (url != null) {
                 String s;
 
-                try
-                {
+                try {
                     s = Resources.toString(url, StandardCharsets.UTF_8);
-                }
-                catch (IOException ioexception)
-                {
+                } catch (IOException ioexception) {
                     LootTableManager.LOGGER.warn("Couldn't load loot table {} from {}", resource, url, ioexception);
                     return LootTable.EMPTY_LOOT_TABLE;
                 }
 
-                try
-                {
+                try {
                     return net.minecraftforge.common.ForgeHooks.loadLootTable(LootTableManager.GSON_INSTANCE, resource, s, false, LootTableManager.this);
-                }
-                catch (JsonParseException jsonparseexception)
-                {
+                } catch (JsonParseException jsonparseexception) {
                     LootTableManager.LOGGER.error("Couldn't load loot table {} from {}", resource, url, jsonparseexception);
                     return LootTable.EMPTY_LOOT_TABLE;
                 }
-            }
-            else
-            {
+            } else {
                 return null;
             }
         }
