--- ../src-base/minecraft/net/minecraft/world/storage/loot/LootEntryItem.java
+++ ../src-work/minecraft/net/minecraft/world/storage/loot/LootEntryItem.java
@@ -3,8 +3,6 @@
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
-import java.util.Collection;
-import java.util.Random;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.JsonUtils;
@@ -13,42 +11,35 @@
 import net.minecraft.world.storage.loot.conditions.LootConditionManager;
 import net.minecraft.world.storage.loot.functions.LootFunction;
 
-public class LootEntryItem extends LootEntry
-{
+import java.util.Collection;
+import java.util.Random;
+
+public class LootEntryItem extends LootEntry {
     protected final Item item;
     protected final LootFunction[] functions;
 
-    public LootEntryItem(Item itemIn, int weightIn, int qualityIn, LootFunction[] functionsIn, LootCondition[] conditionsIn, String entryName)
-    {
+    public LootEntryItem(Item itemIn, int weightIn, int qualityIn, LootFunction[] functionsIn, LootCondition[] conditionsIn, String entryName) {
         super(weightIn, qualityIn, conditionsIn, entryName);
         this.item = itemIn;
         this.functions = functionsIn;
     }
 
-    public void addLoot(Collection<ItemStack> stacks, Random rand, LootContext context)
-    {
+    public void addLoot(Collection<ItemStack> stacks, Random rand, LootContext context) {
         ItemStack itemstack = new ItemStack(this.item);
 
-        for (LootFunction lootfunction : this.functions)
-        {
-            if (LootConditionManager.testAllConditions(lootfunction.getConditions(), rand, context))
-            {
+        for (LootFunction lootfunction : this.functions) {
+            if (LootConditionManager.testAllConditions(lootfunction.getConditions(), rand, context)) {
                 itemstack = lootfunction.apply(itemstack, rand, context);
             }
         }
 
-        if (!itemstack.isEmpty())
-        {
-            if (itemstack.getCount() < this.item.getItemStackLimit(itemstack))
-            {
+        if (!itemstack.isEmpty()) {
+            if (itemstack.getCount() < this.item.getItemStackLimit(itemstack)) {
                 stacks.add(itemstack);
-            }
-            else
-            {
+            } else {
                 int i = itemstack.getCount();
 
-                while (i > 0)
-                {
+                while (i > 0) {
                     ItemStack itemstack1 = itemstack.copy();
                     itemstack1.setCount(Math.min(itemstack.getMaxStackSize(), i));
                     i -= itemstack1.getCount();
@@ -58,37 +49,28 @@
         }
     }
 
-    protected void serialize(JsonObject json, JsonSerializationContext context)
-    {
-        if (this.functions != null && this.functions.length > 0)
-        {
+    protected void serialize(JsonObject json, JsonSerializationContext context) {
+        if (this.functions != null && this.functions.length > 0) {
             json.add("functions", context.serialize(this.functions));
         }
 
         ResourceLocation resourcelocation = Item.REGISTRY.getNameForObject(this.item);
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             throw new IllegalArgumentException("Can't serialize unknown item " + this.item);
-        }
-        else
-        {
+        } else {
             json.addProperty("name", resourcelocation.toString());
         }
     }
 
-    public static LootEntryItem deserialize(JsonObject object, JsonDeserializationContext deserializationContext, int weightIn, int qualityIn, LootCondition[] conditionsIn)
-    {
+    public static LootEntryItem deserialize(JsonObject object, JsonDeserializationContext deserializationContext, int weightIn, int qualityIn, LootCondition[] conditionsIn) {
         String name = net.minecraftforge.common.ForgeHooks.readLootEntryName(object, "item");
         Item item = JsonUtils.getItem(object, "name");
         LootFunction[] alootfunction;
 
-        if (object.has("functions"))
-        {
-            alootfunction = (LootFunction[])JsonUtils.deserializeClass(object, "functions", deserializationContext, LootFunction[].class);
-        }
-        else
-        {
+        if (object.has("functions")) {
+            alootfunction = (LootFunction[]) JsonUtils.deserializeClass(object, "functions", deserializationContext, LootFunction[].class);
+        } else {
             alootfunction = new LootFunction[0];
         }
 
