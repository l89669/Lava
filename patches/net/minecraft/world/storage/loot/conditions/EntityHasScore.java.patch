--- ../src-base/minecraft/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
+++ ../src-work/minecraft/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
@@ -5,10 +5,6 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-import java.util.Map.Entry;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.scoreboard.ScoreObjective;
@@ -18,33 +14,30 @@
 import net.minecraft.world.storage.loot.LootContext;
 import net.minecraft.world.storage.loot.RandomValueRange;
 
-public class EntityHasScore implements LootCondition
-{
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Random;
+import java.util.Set;
+
+public class EntityHasScore implements LootCondition {
     private final Map<String, RandomValueRange> scores;
     private final LootContext.EntityTarget target;
 
-    public EntityHasScore(Map<String, RandomValueRange> scoreIn, LootContext.EntityTarget targetIn)
-    {
+    public EntityHasScore(Map<String, RandomValueRange> scoreIn, LootContext.EntityTarget targetIn) {
         this.scores = scoreIn;
         this.target = targetIn;
     }
 
-    public boolean testCondition(Random rand, LootContext context)
-    {
+    public boolean testCondition(Random rand, LootContext context) {
         Entity entity = context.getEntity(this.target);
 
-        if (entity == null)
-        {
+        if (entity == null) {
             return false;
-        }
-        else
-        {
+        } else {
             Scoreboard scoreboard = entity.world.getScoreboard();
 
-            for (Entry<String, RandomValueRange> entry : this.scores.entrySet())
-            {
-                if (!this.entityScoreMatch(entity, scoreboard, entry.getKey(), entry.getValue()))
-                {
+            for (Entry<String, RandomValueRange> entry : this.scores.entrySet()) {
+                if (!this.entityScoreMatch(entity, scoreboard, entry.getKey(), entry.getValue())) {
                     return false;
                 }
             }
@@ -53,52 +46,42 @@
         }
     }
 
-    protected boolean entityScoreMatch(Entity entityIn, Scoreboard scoreboardIn, String objectiveStr, RandomValueRange rand)
-    {
+    protected boolean entityScoreMatch(Entity entityIn, Scoreboard scoreboardIn, String objectiveStr, RandomValueRange rand) {
         ScoreObjective scoreobjective = scoreboardIn.getObjective(objectiveStr);
 
-        if (scoreobjective == null)
-        {
+        if (scoreobjective == null) {
             return false;
-        }
-        else
-        {
+        } else {
             String s = entityIn instanceof EntityPlayerMP ? entityIn.getName() : entityIn.getCachedUniqueIdString();
             return !scoreboardIn.entityHasObjective(s, scoreobjective) ? false : rand.isInRange(scoreboardIn.getOrCreateScore(s, scoreobjective).getScorePoints());
         }
     }
 
-    public static class Serializer extends LootCondition.Serializer<EntityHasScore>
-        {
-            protected Serializer()
-            {
-                super(new ResourceLocation("entity_scores"), EntityHasScore.class);
-            }
+    public static class Serializer extends LootCondition.Serializer<EntityHasScore> {
+        protected Serializer() {
+            super(new ResourceLocation("entity_scores"), EntityHasScore.class);
+        }
 
-            public void serialize(JsonObject json, EntityHasScore value, JsonSerializationContext context)
-            {
-                JsonObject jsonobject = new JsonObject();
+        public void serialize(JsonObject json, EntityHasScore value, JsonSerializationContext context) {
+            JsonObject jsonobject = new JsonObject();
 
-                for (Entry<String, RandomValueRange> entry : value.scores.entrySet())
-                {
-                    jsonobject.add(entry.getKey(), context.serialize(entry.getValue()));
-                }
-
-                json.add("scores", jsonobject);
-                json.add("entity", context.serialize(value.target));
+            for (Entry<String, RandomValueRange> entry : value.scores.entrySet()) {
+                jsonobject.add(entry.getKey(), context.serialize(entry.getValue()));
             }
 
-            public EntityHasScore deserialize(JsonObject json, JsonDeserializationContext context)
-            {
-                Set<Entry<String, JsonElement>> set = JsonUtils.getJsonObject(json, "scores").entrySet();
-                Map<String, RandomValueRange> map = Maps.<String, RandomValueRange>newLinkedHashMap();
+            json.add("scores", jsonobject);
+            json.add("entity", context.serialize(value.target));
+        }
 
-                for (Entry<String, JsonElement> entry : set)
-                {
-                    map.put(entry.getKey(), JsonUtils.deserializeClass(entry.getValue(), "score", context, RandomValueRange.class));
-                }
+        public EntityHasScore deserialize(JsonObject json, JsonDeserializationContext context) {
+            Set<Entry<String, JsonElement>> set = JsonUtils.getJsonObject(json, "scores").entrySet();
+            Map<String, RandomValueRange> map = Maps.<String, RandomValueRange>newLinkedHashMap();
 
-                return new EntityHasScore(map, (LootContext.EntityTarget)JsonUtils.deserializeClass(json, "entity", context, LootContext.EntityTarget.class));
+            for (Entry<String, JsonElement> entry : set) {
+                map.put(entry.getKey(), JsonUtils.deserializeClass(entry.getValue(), "score", context, RandomValueRange.class));
             }
+
+            return new EntityHasScore(map, (LootContext.EntityTarget) JsonUtils.deserializeClass(json, "entity", context, LootContext.EntityTarget.class));
         }
+    }
 }
