--- ../src-base/minecraft/net/minecraft/inventory/InventoryEnderChest.java
+++ ../src-work/minecraft/net/minecraft/inventory/InventoryEnderChest.java
@@ -5,52 +5,47 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.tileentity.TileEntityEnderChest;
+import org.bukkit.Location;
+import org.bukkit.inventory.InventoryHolder;
 
-public class InventoryEnderChest extends InventoryBasic
-{
+public class InventoryEnderChest extends InventoryBasic {
     private TileEntityEnderChest associatedChest;
 
-    public InventoryEnderChest()
-    {
+    private final EntityPlayer owner;
+
+    public InventoryEnderChest(EntityPlayer owner) {
         super("container.enderchest", false, 27);
+        this.owner = owner;
     }
 
-    public void setChestTileEntity(TileEntityEnderChest chestTileEntity)
-    {
+    public void setChestTileEntity(TileEntityEnderChest chestTileEntity) {
         this.associatedChest = chestTileEntity;
     }
 
-    public void loadInventoryFromNBT(NBTTagList p_70486_1_)
-    {
-        for (int i = 0; i < this.getSizeInventory(); ++i)
-        {
+    public void loadInventoryFromNBT(NBTTagList p_70486_1_) {
+        for (int i = 0; i < this.getSizeInventory(); ++i) {
             this.setInventorySlotContents(i, ItemStack.EMPTY);
         }
 
-        for (int k = 0; k < p_70486_1_.tagCount(); ++k)
-        {
+        for (int k = 0; k < p_70486_1_.tagCount(); ++k) {
             NBTTagCompound nbttagcompound = p_70486_1_.getCompoundTagAt(k);
             int j = nbttagcompound.getByte("Slot") & 255;
 
-            if (j >= 0 && j < this.getSizeInventory())
-            {
+            if (j >= 0 && j < this.getSizeInventory()) {
                 this.setInventorySlotContents(j, new ItemStack(nbttagcompound));
             }
         }
     }
 
-    public NBTTagList saveInventoryToNBT()
-    {
+    public NBTTagList saveInventoryToNBT() {
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < this.getSizeInventory(); ++i) {
             ItemStack itemstack = this.getStackInSlot(i);
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
-                nbttagcompound.setByte("Slot", (byte)i);
+                nbttagcompound.setByte("Slot", (byte) i);
                 itemstack.writeToNBT(nbttagcompound);
                 nbttaglist.appendTag(nbttagcompound);
             }
@@ -59,29 +54,34 @@
         return nbttaglist;
     }
 
-    public boolean isUsableByPlayer(EntityPlayer player)
-    {
+    public boolean isUsableByPlayer(EntityPlayer player) {
         return this.associatedChest != null && !this.associatedChest.canBeUsed(player) ? false : super.isUsableByPlayer(player);
     }
 
-    public void openInventory(EntityPlayer player)
-    {
-        if (this.associatedChest != null)
-        {
+    public void openInventory(EntityPlayer player) {
+        if (this.associatedChest != null) {
             this.associatedChest.openChest();
         }
 
         super.openInventory(player);
     }
 
-    public void closeInventory(EntityPlayer player)
-    {
-        if (this.associatedChest != null)
-        {
+    public void closeInventory(EntityPlayer player) {
+        if (this.associatedChest != null) {
             this.associatedChest.closeChest();
         }
 
         super.closeInventory(player);
         this.associatedChest = null;
     }
+
+    public InventoryHolder getBukkitOwner() {
+        return owner.getBukkitEntity();
+    }
+
+    @Override
+    public Location getLocation() {
+        return new Location(this.associatedChest.getWorld().getWorld(), this.associatedChest.getPos().getX(), this.associatedChest.getPos().getY(), this.associatedChest.getPos().getZ());
+    }
+
 }
