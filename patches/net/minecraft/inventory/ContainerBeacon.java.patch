--- ../src-base/minecraft/net/minecraft/inventory/ContainerBeacon.java
+++ ../src-work/minecraft/net/minecraft/inventory/ContainerBeacon.java
@@ -1,129 +1,106 @@
 package net.minecraft.inventory;
 
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Items;
-import net.minecraft.item.Item;
+import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.ItemStack;
+import net.minecraft.tileentity.TileEntityBeacon;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
-public class ContainerBeacon extends Container
-{
+public class ContainerBeacon extends Container {
     private final IInventory tileBeacon;
-    private final ContainerBeacon.BeaconSlot beaconSlot;
+    private final BeaconSlot beaconSlot;
 
-    public ContainerBeacon(IInventory playerInventory, IInventory tileBeaconIn)
-    {
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+
+    public ContainerBeacon(IInventory playerInventory, IInventory tileBeaconIn) {
+        player = (InventoryPlayer) playerInventory; // CraftBukkit - TODO: check this
         this.tileBeacon = tileBeaconIn;
-        this.beaconSlot = new ContainerBeacon.BeaconSlot(tileBeaconIn, 0, 136, 110);
+        this.beaconSlot = new BeaconSlot(tileBeaconIn, 0, 136, 110);
         this.addSlotToContainer(this.beaconSlot);
         int i = 36;
         int j = 137;
 
-        for (int k = 0; k < 3; ++k)
-        {
-            for (int l = 0; l < 9; ++l)
-            {
+        for (int k = 0; k < 3; ++k) {
+            for (int l = 0; l < 9; ++l) {
                 this.addSlotToContainer(new Slot(playerInventory, l + k * 9 + 9, 36 + l * 18, 137 + k * 18));
             }
         }
 
-        for (int i1 = 0; i1 < 9; ++i1)
-        {
+        for (int i1 = 0; i1 < 9; ++i1) {
             this.addSlotToContainer(new Slot(playerInventory, i1, 36 + i1 * 18, 195));
         }
     }
 
-    public void addListener(IContainerListener listener)
-    {
+    public void addListener(IContainerListener listener) {
         super.addListener(listener);
         listener.sendAllWindowProperties(this, this.tileBeacon);
     }
 
     @SideOnly(Side.CLIENT)
-    public void updateProgressBar(int id, int data)
-    {
+    public void updateProgressBar(int id, int data) {
         this.tileBeacon.setField(id, data);
     }
 
-    public IInventory getTileEntity()
-    {
+    public IInventory getTileEntity() {
         return this.tileBeacon;
     }
 
-    public void onContainerClosed(EntityPlayer playerIn)
-    {
+    public void onContainerClosed(EntityPlayer playerIn) {
         super.onContainerClosed(playerIn);
 
-        if (!playerIn.world.isRemote)
-        {
+        if (!playerIn.world.isRemote) {
             ItemStack itemstack = this.beaconSlot.decrStackSize(this.beaconSlot.getSlotStackLimit());
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 playerIn.dropItem(itemstack, false);
             }
         }
     }
 
-    public boolean canInteractWith(EntityPlayer playerIn)
-    {
+    public boolean canInteractWith(EntityPlayer playerIn) {
+        if (!this.checkReachable) return true;
         return this.tileBeacon.isUsableByPlayer(playerIn);
     }
 
-    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
-    {
+    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
         ItemStack itemstack = ItemStack.EMPTY;
         Slot slot = this.inventorySlots.get(index);
 
-        if (slot != null && slot.getHasStack())
-        {
+        if (slot != null && slot.getHasStack()) {
             ItemStack itemstack1 = slot.getStack();
             itemstack = itemstack1.copy();
 
-            if (index == 0)
-            {
-                if (!this.mergeItemStack(itemstack1, 1, 37, true))
-                {
+            if (index == 0) {
+                if (!this.mergeItemStack(itemstack1, 1, 37, true)) {
                     return ItemStack.EMPTY;
                 }
 
                 slot.onSlotChange(itemstack1, itemstack);
-            }
-            else if (this.mergeItemStack(itemstack1, 0, 1, false)) //Forge Fix Shift Clicking in beacons with stacks larger then 1.
+            } else if (this.mergeItemStack(itemstack1, 0, 1, false)) //Forge Fix Shift Clicking in beacons with stacks larger then 1.
             {
                 return ItemStack.EMPTY;
-            }
-            else if (index >= 1 && index < 28)
-            {
-                if (!this.mergeItemStack(itemstack1, 28, 37, false))
-                {
+            } else if (index >= 1 && index < 28) {
+                if (!this.mergeItemStack(itemstack1, 28, 37, false)) {
                     return ItemStack.EMPTY;
                 }
-            }
-            else if (index >= 28 && index < 37)
-            {
-                if (!this.mergeItemStack(itemstack1, 1, 28, false))
-                {
+            } else if (index >= 28 && index < 37) {
+                if (!this.mergeItemStack(itemstack1, 1, 28, false)) {
                     return ItemStack.EMPTY;
                 }
-            }
-            else if (!this.mergeItemStack(itemstack1, 1, 37, false))
-            {
+            } else if (!this.mergeItemStack(itemstack1, 1, 37, false)) {
                 return ItemStack.EMPTY;
             }
 
-            if (itemstack1.isEmpty())
-            {
+            if (itemstack1.isEmpty()) {
                 slot.putStack(ItemStack.EMPTY);
-            }
-            else
-            {
+            } else {
                 slot.onSlotChanged();
             }
 
-            if (itemstack1.getCount() == itemstack.getCount())
-            {
+            if (itemstack1.getCount() == itemstack.getCount()) {
                 return ItemStack.EMPTY;
             }
 
@@ -133,21 +110,28 @@
         return itemstack;
     }
 
-    class BeaconSlot extends Slot
-    {
-        public BeaconSlot(IInventory inventoryIn, int index, int xIn, int yIn)
-        {
+    class BeaconSlot extends Slot {
+        public BeaconSlot(IInventory inventoryIn, int index, int xIn, int yIn) {
             super(inventoryIn, index, xIn, yIn);
         }
 
-        public boolean isItemValid(ItemStack stack)
-        {
+        public boolean isItemValid(ItemStack stack) {
             return stack.getItem().isBeaconPayment(stack);
         }
 
-        public int getSlotStackLimit()
-        {
+        public int getSlotStackLimit() {
             return 1;
         }
     }
+
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryBeacon((TileEntityBeacon) this.tileBeacon); // TODO - check this
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
 }
