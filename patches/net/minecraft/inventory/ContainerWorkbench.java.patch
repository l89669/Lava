--- ../src-base/minecraft/net/minecraft/inventory/ContainerWorkbench.java
+++ ../src-work/minecraft/net/minecraft/inventory/ContainerWorkbench.java
@@ -6,129 +6,110 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
-public class ContainerWorkbench extends Container
-{
-    public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
-    public InventoryCraftResult craftResult = new InventoryCraftResult();
+public class ContainerWorkbench extends Container {
+    public InventoryCrafting craftMatrix; // CraftBukkit - move initialization into constructor
+    public InventoryCraftResult craftResult; // CraftBukkit - move initialization into constructor
     private final World world;
     private final BlockPos pos;
     private final EntityPlayer player;
 
-    public ContainerWorkbench(InventoryPlayer playerInventory, World worldIn, BlockPos posIn)
-    {
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer playerInventory;
+
+    public ContainerWorkbench(InventoryPlayer playerInventory, World worldIn, BlockPos posIn) {
+        // CraftBukkit start - Switched order of IInventory construction and stored player
+        this.craftResult = new InventoryCraftResult();
+        this.craftMatrix = new InventoryCrafting(this, 3, 3, playerInventory.player); // CraftBukkit - pass player
+        this.craftMatrix.resultInventory = this.craftResult;
+        this.playerInventory = playerInventory;
+        // CraftBukkit end
         this.world = worldIn;
         this.pos = posIn;
         this.player = playerInventory.player;
         this.addSlotToContainer(new SlotCrafting(playerInventory.player, this.craftMatrix, this.craftResult, 0, 124, 35));
 
-        for (int i = 0; i < 3; ++i)
-        {
-            for (int j = 0; j < 3; ++j)
-            {
+        for (int i = 0; i < 3; ++i) {
+            for (int j = 0; j < 3; ++j) {
                 this.addSlotToContainer(new Slot(this.craftMatrix, j + i * 3, 30 + j * 18, 17 + i * 18));
             }
         }
 
-        for (int k = 0; k < 3; ++k)
-        {
-            for (int i1 = 0; i1 < 9; ++i1)
-            {
+        for (int k = 0; k < 3; ++k) {
+            for (int i1 = 0; i1 < 9; ++i1) {
                 this.addSlotToContainer(new Slot(playerInventory, i1 + k * 9 + 9, 8 + i1 * 18, 84 + k * 18));
             }
         }
 
-        for (int l = 0; l < 9; ++l)
-        {
+        for (int l = 0; l < 9; ++l) {
             this.addSlotToContainer(new Slot(playerInventory, l, 8 + l * 18, 142));
         }
     }
 
-    public void onCraftMatrixChanged(IInventory inventoryIn)
-    {
+    public void onCraftMatrixChanged(IInventory inventoryIn) {
         this.slotChangedCraftingGrid(this.world, this.player, this.craftMatrix, this.craftResult);
     }
 
-    public void onContainerClosed(EntityPlayer playerIn)
-    {
+    public void onContainerClosed(EntityPlayer playerIn) {
         super.onContainerClosed(playerIn);
 
-        if (!this.world.isRemote)
-        {
+        if (!this.world.isRemote) {
             this.clearContainer(playerIn, this.world, this.craftMatrix);
         }
     }
 
-    public boolean canInteractWith(EntityPlayer playerIn)
-    {
-        if (this.world.getBlockState(this.pos).getBlock() != Blocks.CRAFTING_TABLE)
-        {
+    public boolean canInteractWith(EntityPlayer playerIn) {
+        if (!this.checkReachable) return true;
+        if (this.world.getBlockState(this.pos).getBlock() != Blocks.CRAFTING_TABLE) {
             return false;
+        } else {
+            return playerIn.getDistanceSq((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.5D, (double) this.pos.getZ() + 0.5D) <= 64.0D;
         }
-        else
-        {
-            return playerIn.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
-        }
     }
 
-    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
-    {
+    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
         ItemStack itemstack = ItemStack.EMPTY;
         Slot slot = this.inventorySlots.get(index);
 
-        if (slot != null && slot.getHasStack())
-        {
+        if (slot != null && slot.getHasStack()) {
             ItemStack itemstack1 = slot.getStack();
             itemstack = itemstack1.copy();
 
-            if (index == 0)
-            {
+            if (index == 0) {
                 itemstack1.getItem().onCreated(itemstack1, this.world, playerIn);
 
-                if (!this.mergeItemStack(itemstack1, 10, 46, true))
-                {
+                if (!this.mergeItemStack(itemstack1, 10, 46, true)) {
                     return ItemStack.EMPTY;
                 }
 
                 slot.onSlotChange(itemstack1, itemstack);
-            }
-            else if (index >= 10 && index < 37)
-            {
-                if (!this.mergeItemStack(itemstack1, 37, 46, false))
-                {
+            } else if (index >= 10 && index < 37) {
+                if (!this.mergeItemStack(itemstack1, 37, 46, false)) {
                     return ItemStack.EMPTY;
                 }
-            }
-            else if (index >= 37 && index < 46)
-            {
-                if (!this.mergeItemStack(itemstack1, 10, 37, false))
-                {
+            } else if (index >= 37 && index < 46) {
+                if (!this.mergeItemStack(itemstack1, 10, 37, false)) {
                     return ItemStack.EMPTY;
                 }
-            }
-            else if (!this.mergeItemStack(itemstack1, 10, 46, false))
-            {
+            } else if (!this.mergeItemStack(itemstack1, 10, 46, false)) {
                 return ItemStack.EMPTY;
             }
 
-            if (itemstack1.isEmpty())
-            {
+            if (itemstack1.isEmpty()) {
                 slot.putStack(ItemStack.EMPTY);
-            }
-            else
-            {
+            } else {
                 slot.onSlotChanged();
             }
 
-            if (itemstack1.getCount() == itemstack.getCount())
-            {
+            if (itemstack1.getCount() == itemstack.getCount()) {
                 return ItemStack.EMPTY;
             }
 
             ItemStack itemstack2 = slot.onTake(playerIn, itemstack1);
 
-            if (index == 0)
-            {
+            if (index == 0) {
                 playerIn.dropItem(itemstack2, false);
             }
         }
@@ -136,8 +117,18 @@
         return itemstack;
     }
 
-    public boolean canMergeSlot(ItemStack stack, Slot slotIn)
-    {
+    public boolean canMergeSlot(ItemStack stack, Slot slotIn) {
         return slotIn.inventory != this.craftResult && super.canMergeSlot(stack, slotIn);
     }
+
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftMatrix, this.craftResult);
+        bukkitEntity = new CraftInventoryView(this.playerInventory.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
 }
