--- ../src-base/minecraft/net/minecraft/profiler/Snooper.java
+++ ../src-work/minecraft/net/minecraft/profiler/Snooper.java
@@ -1,23 +1,19 @@
 package net.minecraft.profiler;
 
 import com.google.common.collect.Maps;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.HttpUtil;
+import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.fml.relauncher.SideOnly;
+
 import java.lang.management.ManagementFactory;
 import java.lang.management.RuntimeMXBean;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.List;
-import java.util.Map;
-import java.util.Timer;
-import java.util.TimerTask;
-import java.util.UUID;
+import java.util.*;
 import java.util.Map.Entry;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.HttpUtil;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class Snooper
-{
+public class Snooper {
     private final Map<String, Object> snooperStats = Maps.<String, Object>newHashMap();
     private final Map<String, Object> clientStats = Maps.<String, Object>newHashMap();
     private final String uniqueID = UUID.randomUUID().toString();
@@ -29,14 +25,10 @@
     private boolean isRunning;
     private int selfCounter;
 
-    public Snooper(String side, ISnooperInfo playerStatCollector, long startTime)
-    {
-        try
-        {
+    public Snooper(String side, ISnooperInfo playerStatCollector, long startTime) {
+        try {
             this.serverUrl = new URL("http://snoop.minecraft.net/" + side + "?version=" + 2);
-        }
-        catch (MalformedURLException var6)
-        {
+        } catch (MalformedURLException var6) {
             throw new IllegalArgumentException();
         }
 
@@ -44,26 +36,19 @@
         this.minecraftStartTimeMilis = startTime;
     }
 
-    public void startSnooper()
-    {
-        if (!this.isRunning)
-        {
+    public void startSnooper() {
+        if (!this.isRunning) {
             this.isRunning = true;
             this.addOSData();
-            this.threadTrigger.schedule(new TimerTask()
-            {
-                public void run()
-                {
-                    if (Snooper.this.playerStatsCollector.isSnooperEnabled())
-                    {
+            this.threadTrigger.schedule(new TimerTask() {
+                public void run() {
+                    if (Snooper.this.playerStatsCollector.isSnooperEnabled()) {
                         Map<String, Object> map;
 
-                        synchronized (Snooper.this.syncLock)
-                        {
+                        synchronized (Snooper.this.syncLock) {
                             map = Maps.<String, Object>newHashMap(Snooper.this.clientStats);
 
-                            if (Snooper.this.selfCounter == 0)
-                            {
+                            if (Snooper.this.selfCounter == 0) {
                                 map.putAll(Snooper.this.snooperStats);
                             }
 
@@ -71,7 +56,7 @@
                             map.put("snooper_token", Snooper.this.uniqueID);
                         }
 
-                        MinecraftServer minecraftserver = Snooper.this.playerStatsCollector instanceof MinecraftServer ? (MinecraftServer)Snooper.this.playerStatsCollector : null;
+                        MinecraftServer minecraftserver = Snooper.this.playerStatsCollector instanceof MinecraftServer ? (MinecraftServer) Snooper.this.playerStatsCollector : null;
                         HttpUtil.postMap(Snooper.this.serverUrl, map, true, minecraftserver == null ? null : minecraftserver.getServerProxy());
                     }
                 }
@@ -79,8 +64,7 @@
         }
     }
 
-    private void addOSData()
-    {
+    private void addOSData() {
         this.addJvmArgsToSnooper();
         this.addClientStat("snooper_token", this.uniqueID);
         this.addStatToSnooper("snooper_token", this.uniqueID);
@@ -92,16 +76,13 @@
         this.playerStatsCollector.addServerTypeToSnooper(this);
     }
 
-    private void addJvmArgsToSnooper()
-    {
+    private void addJvmArgsToSnooper() {
         RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
         List<String> list = runtimemxbean.getInputArguments();
         int i = 0;
 
-        for (String s : list)
-        {
-            if (s.startsWith("-X"))
-            {
+        for (String s : list) {
+            if (s.startsWith("-X")) {
                 this.addClientStat("jvm_arg[" + i++ + "]", s);
             }
         }
@@ -109,8 +90,7 @@
         this.addClientStat("jvm_args", Integer.valueOf(i));
     }
 
-    public void addMemoryStatsToSnooper()
-    {
+    public void addMemoryStatsToSnooper() {
         this.addStatToSnooper("memory_total", Long.valueOf(Runtime.getRuntime().totalMemory()));
         this.addStatToSnooper("memory_max", Long.valueOf(Runtime.getRuntime().maxMemory()));
         this.addStatToSnooper("memory_free", Long.valueOf(Runtime.getRuntime().freeMemory()));
@@ -118,38 +98,30 @@
         this.playerStatsCollector.addServerStatsToSnooper(this);
     }
 
-    public void addClientStat(String statName, Object statValue)
-    {
-        synchronized (this.syncLock)
-        {
+    public void addClientStat(String statName, Object statValue) {
+        synchronized (this.syncLock) {
             this.clientStats.put(statName, statValue);
         }
     }
 
-    public void addStatToSnooper(String statName, Object statValue)
-    {
-        synchronized (this.syncLock)
-        {
+    public void addStatToSnooper(String statName, Object statValue) {
+        synchronized (this.syncLock) {
             this.snooperStats.put(statName, statValue);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public Map<String, String> getCurrentStats()
-    {
+    public Map<String, String> getCurrentStats() {
         Map<String, String> map = Maps.<String, String>newLinkedHashMap();
 
-        synchronized (this.syncLock)
-        {
+        synchronized (this.syncLock) {
             this.addMemoryStatsToSnooper();
 
-            for (Entry<String, Object> entry : this.snooperStats.entrySet())
-            {
+            for (Entry<String, Object> entry : this.snooperStats.entrySet()) {
                 map.put(entry.getKey(), entry.getValue().toString());
             }
 
-            for (Entry<String, Object> entry1 : this.clientStats.entrySet())
-            {
+            for (Entry<String, Object> entry1 : this.clientStats.entrySet()) {
                 map.put(entry1.getKey(), entry1.getValue().toString());
             }
 
@@ -157,24 +129,20 @@
         }
     }
 
-    public boolean isSnooperRunning()
-    {
+    public boolean isSnooperRunning() {
         return this.isRunning;
     }
 
-    public void stopSnooper()
-    {
+    public void stopSnooper() {
         this.threadTrigger.cancel();
     }
 
     @SideOnly(Side.CLIENT)
-    public String getUniqueID()
-    {
+    public String getUniqueID() {
         return this.uniqueID;
     }
 
-    public long getMinecraftStartTimeMillis()
-    {
+    public long getMinecraftStartTimeMillis() {
         return this.minecraftStartTimeMilis;
     }
 }
