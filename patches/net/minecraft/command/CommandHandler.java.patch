--- ../src-base/minecraft/net/minecraft/command/CommandHandler.java
+++ ../src-work/minecraft/net/minecraft/command/CommandHandler.java
@@ -3,12 +3,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.math.BlockPos;
@@ -16,21 +10,28 @@
 import net.minecraft.util.text.TextFormatting;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.command.CraftSimpleCommandMap;
+import org.bukkit.craftbukkit.command.ModCustomCommand;
 
-public abstract class CommandHandler implements ICommandManager
-{
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+public abstract class CommandHandler implements ICommandManager {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Map<String, ICommand> commandMap = Maps.<String, ICommand>newHashMap();
     private final Set<ICommand> commandSet = Sets.<ICommand>newHashSet();
 
-    public int executeCommand(ICommandSender sender, String rawCommand)
-    {
+    public int executeCommand(ICommandSender sender, String rawCommand) {
         rawCommand = rawCommand.trim();
 
-        if (rawCommand.startsWith("/"))
-        {
-            rawCommand = rawCommand.substring(1);
-        }
+//        if (rawCommand.startsWith("/"))
+//        {
+//            rawCommand = rawCommand.substring(1);
+//        }
 
         String[] astring = rawCommand.split(" ");
         String s = astring[0];
@@ -38,71 +39,54 @@
         ICommand icommand = this.commandMap.get(s);
         int i = 0;
 
-        try
-        {
+        try {
             int j = this.getUsernameIndex(icommand, astring);
 
-            if (icommand == null)
-            {
-                TextComponentTranslation textcomponenttranslation1 = new TextComponentTranslation("commands.generic.notFound", new Object[0]);
+            if (icommand == null) {
+                TextComponentTranslation textcomponenttranslation1 = new TextComponentTranslation("commands.generic.notFound");
                 textcomponenttranslation1.getStyle().setColor(TextFormatting.RED);
                 sender.sendMessage(textcomponenttranslation1);
-            }
-            else if (icommand.checkPermission(this.getServer(), sender))
-            {
+            } else if (icommand.checkPermission(this.getServer(), sender)) {
                 net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(icommand, sender, astring);
-                if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event))
-                {
-                    if (event.getException() != null)
-                    {
+                if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+                    if (event.getException() != null) {
                         com.google.common.base.Throwables.throwIfUnchecked(event.getException());
                     }
                     return 1;
                 }
                 if (event.getParameters() != null) astring = event.getParameters();
 
-                if (j > -1)
-                {
-                    List<Entity> list = EntitySelector.<Entity>matchEntities(sender, astring[j], Entity.class);
+                if (j > -1) {
+                    List<Entity> list = EntitySelector.matchEntities(sender, astring[j], Entity.class);
                     String s1 = astring[j];
                     sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, list.size());
 
-                    if (list.isEmpty())
-                    {
-                        throw new PlayerNotFoundException("commands.generic.selector.notFound", new Object[] {astring[j]});
+                    if (list.isEmpty()) {
+                        throw new PlayerNotFoundException("commands.generic.selector.notFound", astring[j]);
                     }
 
-                    for (Entity entity : list)
-                    {
+                    for (Entity entity : list) {
                         astring[j] = entity.getCachedUniqueIdString();
 
-                        if (this.tryExecute(sender, astring, icommand, rawCommand))
-                        {
+                        if (this.tryExecute(sender, astring, icommand, rawCommand)) {
                             ++i;
                         }
                     }
 
                     astring[j] = s1;
-                }
-                else
-                {
+                } else {
                     sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, 1);
 
-                    if (this.tryExecute(sender, astring, icommand, rawCommand))
-                    {
+                    if (this.tryExecute(sender, astring, icommand, rawCommand)) {
                         ++i;
                     }
                 }
-            }
-            else
-            {
-                TextComponentTranslation textcomponenttranslation2 = new TextComponentTranslation("commands.generic.permission", new Object[0]);
+            } else {
+                TextComponentTranslation textcomponenttranslation2 = new TextComponentTranslation("commands.generic.permission");
                 textcomponenttranslation2.getStyle().setColor(TextFormatting.RED);
                 sender.sendMessage(textcomponenttranslation2);
             }
-        }
-        catch (CommandException commandexception)
-        {
+        } catch (CommandException commandexception) {
             TextComponentTranslation textcomponenttranslation = new TextComponentTranslation(commandexception.getMessage(), commandexception.getErrorObjects());
             textcomponenttranslation.getStyle().setColor(TextFormatting.RED);
             sender.sendMessage(textcomponenttranslation);
@@ -112,28 +96,20 @@
         return i;
     }
 
-    protected boolean tryExecute(ICommandSender sender, String[] args, ICommand command, String input)
-    {
-        try
-        {
+    protected boolean tryExecute(ICommandSender sender, String[] args, ICommand command, String input) {
+        try {
             command.execute(this.getServer(), sender, args);
             return true;
-        }
-        catch (WrongUsageException wrongusageexception)
-        {
-            TextComponentTranslation textcomponenttranslation2 = new TextComponentTranslation("commands.generic.usage", new Object[] {new TextComponentTranslation(wrongusageexception.getMessage(), wrongusageexception.getErrorObjects())});
+        } catch (WrongUsageException wrongusageexception) {
+            TextComponentTranslation textcomponenttranslation2 = new TextComponentTranslation("commands.generic.usage", new TextComponentTranslation(wrongusageexception.getMessage(), wrongusageexception.getErrorObjects()));
             textcomponenttranslation2.getStyle().setColor(TextFormatting.RED);
             sender.sendMessage(textcomponenttranslation2);
-        }
-        catch (CommandException commandexception)
-        {
+        } catch (CommandException commandexception) {
             TextComponentTranslation textcomponenttranslation1 = new TextComponentTranslation(commandexception.getMessage(), commandexception.getErrorObjects());
             textcomponenttranslation1.getStyle().setColor(TextFormatting.RED);
             sender.sendMessage(textcomponenttranslation1);
-        }
-        catch (Throwable throwable)
-        {
-            TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("commands.generic.exception", new Object[0]);
+        } catch (Throwable throwable) {
+            TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("commands.generic.exception");
             textcomponenttranslation.getStyle().setColor(TextFormatting.RED);
             sender.sendMessage(textcomponenttranslation);
             LOGGER.warn("Couldn't process command: " + input, throwable);
@@ -144,74 +120,75 @@
 
     protected abstract MinecraftServer getServer();
 
-    public ICommand registerCommand(ICommand command)
-    {
-        this.commandMap.put(command.getName(), command);
-        this.commandSet.add(command);
+    public ICommand registerCommand(ICommand command) {
+        // register commands with permission nodes, defaulting to class name
+        return registerCommand(command, command.getClass().getName());
+    }
 
-        for (String s : command.getAliases())
-        {
-            ICommand icommand = this.commandMap.get(s);
+    private ICommand registerCommand(String permissionGroup, ICommand command) {
+        return registerCommand(command, permissionGroup + "." + command.getName());
+    }
 
-            if (icommand == null || !icommand.getName().equals(s))
-            {
-                this.commandMap.put(s, command);
+    public ICommand registerCommand(ICommand command, String permissionNode) {
+        this.commandMap.put(command.getName(), command);
+        this.commandSet.add(command);
+        // register vanilla commands with Bukkit to support permissions.
+        CraftSimpleCommandMap commandMap = MinecraftServer.getServerInstance().server.getCraftCommandMap();
+        ModCustomCommand customCommand = new ModCustomCommand(command.getName());
+        customCommand.setPermission(permissionNode);
+        List<String> list = command.getAliases();
+        if (list != null) customCommand.setAliases(list);
+        commandMap.register(command.getName(), customCommand);
+        LogManager.getLogger().info("Registered command " + command.getName() + " with permission node " + permissionNode);
+        if (list != null) {
+            for (String s : list) {
+                ICommand icommand = this.commandMap.get(s);
+                if (icommand == null || !icommand.getName().equals(s)) {
+                    this.commandMap.put(s, command);
+                }
             }
         }
-
         return command;
     }
 
-    private static String[] dropFirstString(String[] input)
-    {
+    private static String[] dropFirstString(String[] input) {
         String[] astring = new String[input.length - 1];
-        System.arraycopy((Object)input, 1, (Object)astring, 0, input.length - 1);
+        System.arraycopy(input, 1, astring, 0, input.length - 1);
         return astring;
     }
 
-    public List<String> getTabCompletions(ICommandSender sender, String input, @Nullable BlockPos pos)
-    {
+    public List<String> getTabCompletions(ICommandSender sender, String input, @Nullable BlockPos pos) {
         String[] astring = input.split(" ", -1);
         String s = astring[0];
 
-        if (astring.length == 1)
-        {
+        if (astring.length == 1) {
             List<String> list = Lists.<String>newArrayList();
 
-            for (Entry<String, ICommand> entry : this.commandMap.entrySet())
-            {
-                if (CommandBase.doesStringStartWith(s, entry.getKey()) && ((ICommand)entry.getValue()).checkPermission(this.getServer(), sender))
-                {
+            for (Entry<String, ICommand> entry : this.commandMap.entrySet()) {
+                if (CommandBase.doesStringStartWith(s, entry.getKey()) && entry.getValue().checkPermission(this.getServer(), sender)) {
                     list.add(entry.getKey());
                 }
             }
 
             return list;
-        }
-        else
-        {
-            if (astring.length > 1)
-            {
+        } else {
+            if (astring.length > 1) {
                 ICommand icommand = this.commandMap.get(s);
 
-                if (icommand != null && icommand.checkPermission(this.getServer(), sender))
-                {
+                if (icommand != null && icommand.checkPermission(this.getServer(), sender)) {
                     return icommand.getTabCompletions(this.getServer(), sender, dropFirstString(astring), pos);
                 }
             }
 
-            return Collections.<String>emptyList();
+            return Collections.emptyList();
         }
     }
 
-    public List<ICommand> getPossibleCommands(ICommandSender sender)
-    {
-        List<ICommand> list = Lists.<ICommand>newArrayList();
+    public List<ICommand> getPossibleCommands(ICommandSender sender) {
+        List<ICommand> list = Lists.newArrayList();
 
-        for (ICommand icommand : this.commandSet)
-        {
-            if (icommand.checkPermission(this.getServer(), sender))
-            {
+        for (ICommand icommand : this.commandSet) {
+            if (icommand.checkPermission(this.getServer(), sender)) {
                 list.add(icommand);
             }
         }
@@ -219,23 +196,16 @@
         return list;
     }
 
-    public Map<String, ICommand> getCommands()
-    {
+    public Map<String, ICommand> getCommands() {
         return this.commandMap;
     }
 
-    private int getUsernameIndex(ICommand command, String[] args) throws CommandException
-    {
-        if (command == null)
-        {
+    private int getUsernameIndex(ICommand command, String[] args) throws CommandException {
+        if (command == null) {
             return -1;
-        }
-        else
-        {
-            for (int i = 0; i < args.length; ++i)
-            {
-                if (command.isUsernameIndex(args, i) && EntitySelector.matchesMultiplePlayers(args[i]))
-                {
+        } else {
+            for (int i = 0; i < args.length; ++i) {
+                if (command.isUsernameIndex(args, i) && EntitySelector.matchesMultiplePlayers(args[i])) {
                     return i;
                 }
             }
