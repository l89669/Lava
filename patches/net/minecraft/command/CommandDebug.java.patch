--- ../src-base/minecraft/net/minecraft/command/CommandDebug.java
+++ ../src-work/minecraft/net/minecraft/command/CommandDebug.java
@@ -1,5 +1,14 @@
 package net.minecraft.command;
 
+import net.minecraft.profiler.Profiler;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.text.TextComponentString;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.OutputStreamWriter;
@@ -9,47 +18,38 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
-import javax.annotation.Nullable;
-import net.minecraft.profiler.Profiler;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.math.BlockPos;
-import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
-public class CommandDebug extends CommandBase
-{
+public class CommandDebug extends CommandBase {
     private static final Logger LOGGER = LogManager.getLogger();
     private long profileStartTime;
     private int profileStartTick;
 
-    public String getName()
-    {
+    public String getName() {
         return "debug";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 3;
     }
 
-    public String getUsage(ICommandSender sender)
-    {
+    public String getUsage(ICommandSender sender) {
         return "commands.debug.usage";
     }
 
-    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 1)
-        {
-            throw new WrongUsageException("commands.debug.usage", new Object[0]);
+    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
+        // CraftBukkit start - only allow use when enabled (so that no blank profile results occur)
+        if (!server.profiler.ENABLED) {
+            sender.sendMessage(new TextComponentString("Vanilla debug profiling is disabled."));
+            sender.sendMessage(new TextComponentString("To enable, restart the server with `-DenableDebugMethodProfiler=true' before `-jar'."));
+            sender.sendMessage(new TextComponentString("Use `/timings' for plugin timings."));
+            return;
         }
-        else
-        {
-            if ("start".equals(args[0]))
-            {
-                if (args.length != 1)
-                {
+        // CraftBukkit end
+        if (args.length < 1) {
+            throw new WrongUsageException("commands.debug.usage", new Object[0]);
+        } else {
+            if ("start".equals(args[0])) {
+                if (args.length != 1) {
                     throw new WrongUsageException("commands.debug.usage", new Object[0]);
                 }
 
@@ -57,21 +57,16 @@
                 server.enableProfiling();
                 this.profileStartTime = MinecraftServer.getCurrentTimeMillis();
                 this.profileStartTick = server.getTickCounter();
-            }
-            else
-            {
-                if (!"stop".equals(args[0]))
-                {
+            } else {
+                if (!"stop".equals(args[0])) {
                     throw new WrongUsageException("commands.debug.usage", new Object[0]);
                 }
 
-                if (args.length != 1)
-                {
+                if (args.length != 1) {
                     throw new WrongUsageException("commands.debug.usage", new Object[0]);
                 }
 
-                if (!server.profiler.profilingEnabled)
-                {
+                if (!server.profiler.profilingEnabled) {
                     throw new CommandException("commands.debug.notStarted", new Object[0]);
                 }
 
@@ -81,34 +76,27 @@
                 int l = j - this.profileStartTick;
                 this.saveProfilerResults(k, l, server);
                 server.profiler.profilingEnabled = false;
-                notifyCommandListener(sender, this, "commands.debug.stop", new Object[] {String.format("%.2f", (float)k / 1000.0F), l});
+                notifyCommandListener(sender, this, "commands.debug.stop", new Object[]{String.format("%.2f", (float) k / 1000.0F), l});
             }
         }
     }
 
-    private void saveProfilerResults(long timeSpan, int tickSpan, MinecraftServer server)
-    {
+    private void saveProfilerResults(long timeSpan, int tickSpan, MinecraftServer server) {
         File file1 = new File(server.getFile("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
         file1.getParentFile().mkdirs();
         Writer writer = null;
 
-        try
-        {
+        try {
             writer = new OutputStreamWriter(new FileOutputStream(file1), StandardCharsets.UTF_8);
             writer.write(this.getProfilerResults(timeSpan, tickSpan, server));
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             LOGGER.error("Could not save profiler results to {}", file1, throwable);
-        }
-        finally
-        {
+        } finally {
             IOUtils.closeQuietly(writer);
         }
     }
 
-    private String getProfilerResults(long timeSpan, int tickSpan, MinecraftServer server)
-    {
+    private String getProfilerResults(long timeSpan, int tickSpan, MinecraftServer server) {
         StringBuilder stringbuilder = new StringBuilder();
         stringbuilder.append("---- Minecraft Profiler Results ----\n");
         stringbuilder.append("// ");
@@ -116,62 +104,49 @@
         stringbuilder.append("\n\n");
         stringbuilder.append("Time span: ").append(timeSpan).append(" ms\n");
         stringbuilder.append("Tick span: ").append(tickSpan).append(" ticks\n");
-        stringbuilder.append("// This is approximately ").append(String.format("%.2f", (float)tickSpan / ((float)timeSpan / 1000.0F))).append(" ticks per second. It should be ").append((int)20).append(" ticks per second\n\n");
+        stringbuilder.append("// This is approximately ").append(String.format("%.2f", (float) tickSpan / ((float) timeSpan / 1000.0F))).append(" ticks per second. It should be ").append((int) 20).append(" ticks per second\n\n");
         stringbuilder.append("--- BEGIN PROFILE DUMP ---\n\n");
         this.appendProfilerResults(0, "root", stringbuilder, server);
         stringbuilder.append("--- END PROFILE DUMP ---\n\n");
         return stringbuilder.toString();
     }
 
-    private void appendProfilerResults(int depth, String sectionName, StringBuilder builder, MinecraftServer server)
-    {
+    private void appendProfilerResults(int depth, String sectionName, StringBuilder builder, MinecraftServer server) {
         List<Profiler.Result> list = server.profiler.getProfilingData(sectionName);
 
-        if (list != null && list.size() >= 3)
-        {
-            for (int i = 1; i < list.size(); ++i)
-            {
+        if (list != null && list.size() >= 3) {
+            for (int i = 1; i < list.size(); ++i) {
                 Profiler.Result profiler$result = list.get(i);
                 builder.append(String.format("[%02d] ", depth));
 
-                for (int j = 0; j < depth; ++j)
-                {
+                for (int j = 0; j < depth; ++j) {
                     builder.append("|   ");
                 }
 
                 builder.append(profiler$result.profilerName).append(" - ").append(String.format("%.2f", profiler$result.usePercentage)).append("%/").append(String.format("%.2f", profiler$result.totalUsePercentage)).append("%\n");
 
-                if (!"unspecified".equals(profiler$result.profilerName))
-                {
-                    try
-                    {
+                if (!"unspecified".equals(profiler$result.profilerName)) {
+                    try {
                         this.appendProfilerResults(depth + 1, sectionName + "." + profiler$result.profilerName, builder, server);
+                    } catch (Exception exception) {
+                        builder.append("[[ EXCEPTION ").append((Object) exception).append(" ]]");
                     }
-                    catch (Exception exception)
-                    {
-                        builder.append("[[ EXCEPTION ").append((Object)exception).append(" ]]");
-                    }
                 }
             }
         }
     }
 
-    private static String getWittyComment()
-    {
-        String[] astring = new String[] {"Shiny numbers!", "Am I not running fast enough? :(", "I'm working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it'll have more motivation to work faster! Poor server."};
+    private static String getWittyComment() {
+        String[] astring = new String[]{"Shiny numbers!", "Am I not running fast enough? :(", "I'm working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it'll have more motivation to work faster! Poor server."};
 
-        try
-        {
-            return astring[(int)(System.nanoTime() % (long)astring.length)];
-        }
-        catch (Throwable var2)
-        {
+        try {
+            return astring[(int) (System.nanoTime() % (long) astring.length)];
+        } catch (Throwable var2) {
             return "Witty comment unavailable :(";
         }
     }
 
-    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos)
-    {
-        return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[] {"start", "stop"}) : Collections.emptyList();
+    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos) {
+        return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[]{"start", "stop"}) : Collections.emptyList();
     }
 }
