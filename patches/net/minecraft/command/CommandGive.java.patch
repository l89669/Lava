--- ../src-base/minecraft/net/minecraft/command/CommandGive.java
+++ ../src-work/minecraft/net/minecraft/command/CommandGive.java
@@ -1,8 +1,5 @@
 package net.minecraft.command;
 
-import java.util.Collections;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.SoundEvents;
@@ -14,100 +11,81 @@
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.math.BlockPos;
 
-public class CommandGive extends CommandBase
-{
-    public String getName()
-    {
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.List;
+
+public class CommandGive extends CommandBase {
+    public String getName() {
         return "give";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
-    public String getUsage(ICommandSender sender)
-    {
+    public String getUsage(ICommandSender sender) {
         return "commands.give.usage";
     }
 
-    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 2)
-        {
+    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
+        if (args.length < 2) {
             throw new WrongUsageException("commands.give.usage", new Object[0]);
-        }
-        else
-        {
+        } else {
             EntityPlayer entityplayer = getPlayer(server, sender, args[0]);
             Item item = getItemByText(sender, args[1]);
             int i = args.length >= 3 ? parseInt(args[2], 1, item.getItemStackLimit()) : 1;
             int j = args.length >= 4 ? parseInt(args[3]) : 0;
             ItemStack itemstack = new ItemStack(item, i, j);
 
-            if (args.length >= 5)
-            {
+            if (args.length >= 5) {
                 String s = buildString(args, 4);
 
-                try
-                {
+                try {
                     itemstack.setTagCompound(JsonToNBT.getTagFromJson(s));
+                } catch (NBTException nbtexception) {
+                    throw new CommandException("commands.give.tagError", new Object[]{nbtexception.getMessage()});
                 }
-                catch (NBTException nbtexception)
-                {
-                    throw new CommandException("commands.give.tagError", new Object[] {nbtexception.getMessage()});
-                }
             }
 
             boolean flag = entityplayer.inventory.addItemStackToInventory(itemstack);
 
-            if (flag)
-            {
-                entityplayer.world.playSound((EntityPlayer)null, entityplayer.posX, entityplayer.posY, entityplayer.posZ, SoundEvents.ENTITY_ITEM_PICKUP, SoundCategory.PLAYERS, 0.2F, ((entityplayer.getRNG().nextFloat() - entityplayer.getRNG().nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            if (flag) {
+                entityplayer.world.playSound((EntityPlayer) null, entityplayer.posX, entityplayer.posY, entityplayer.posZ, SoundEvents.ENTITY_ITEM_PICKUP, SoundCategory.PLAYERS, 0.2F, ((entityplayer.getRNG().nextFloat() - entityplayer.getRNG().nextFloat()) * 0.7F + 1.0F) * 2.0F);
                 entityplayer.inventoryContainer.detectAndSendChanges();
             }
 
-            if (flag && itemstack.isEmpty())
-            {
+            if (flag && itemstack.isEmpty()) {
                 itemstack.setCount(1);
                 sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, i);
                 EntityItem entityitem1 = entityplayer.dropItem(itemstack, false);
 
-                if (entityitem1 != null)
-                {
+                if (entityitem1 != null) {
                     entityitem1.makeFakeItem();
                 }
-            }
-            else
-            {
+            } else {
                 sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, i - itemstack.getCount());
                 EntityItem entityitem = entityplayer.dropItem(itemstack, false);
 
-                if (entityitem != null)
-                {
+                if (entityitem != null) {
                     entityitem.setNoPickupDelay();
                     entityitem.setOwner(entityplayer.getName());
                 }
             }
 
-            notifyCommandListener(sender, this, "commands.give.success", new Object[] {itemstack.getTextComponent(), i, entityplayer.getName()});
+            notifyCommandListener(sender, this, "commands.give.success", new Object[]{itemstack.getTextComponent(), i, entityplayer.getName()});
         }
     }
 
-    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos)
-    {
-        if (args.length == 1)
-        {
+    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos) {
+        if (args.length == 1) {
             return getListOfStringsMatchingLastWord(args, server.getOnlinePlayerNames());
-        }
-        else
-        {
+        } else {
             return args.length == 2 ? getListOfStringsMatchingLastWord(args, Item.REGISTRY.getKeys()) : Collections.emptyList();
         }
     }
 
-    public boolean isUsernameIndex(String[] args, int index)
-    {
+    public boolean isUsernameIndex(String[] args, int index) {
         return index == 0;
     }
 }
