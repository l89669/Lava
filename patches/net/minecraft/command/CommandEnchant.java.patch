--- ../src-base/minecraft/net/minecraft/command/CommandEnchant.java
+++ ../src-work/minecraft/net/minecraft/command/CommandEnchant.java
@@ -1,8 +1,5 @@
 package net.minecraft.command;
 
-import java.util.Collections;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.item.ItemStack;
@@ -10,83 +7,63 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.math.BlockPos;
 
-public class CommandEnchant extends CommandBase
-{
-    public String getName()
-    {
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.List;
+
+public class CommandEnchant extends CommandBase {
+    public String getName() {
         return "enchant";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
-    public String getUsage(ICommandSender sender)
-    {
+    public String getUsage(ICommandSender sender) {
         return "commands.enchant.usage";
     }
 
-    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 2)
-        {
+    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
+        if (args.length < 2) {
             throw new WrongUsageException("commands.enchant.usage", new Object[0]);
-        }
-        else
-        {
-            EntityLivingBase entitylivingbase = (EntityLivingBase)getEntity(server, sender, args[0], EntityLivingBase.class);
+        } else {
+            EntityLivingBase entitylivingbase = (EntityLivingBase) getEntity(server, sender, args[0], EntityLivingBase.class);
             sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, 0);
             Enchantment enchantment;
 
-            try
-            {
+            try {
                 enchantment = Enchantment.getEnchantmentByID(parseInt(args[1], 0));
-            }
-            catch (NumberInvalidException var12)
-            {
+            } catch (NumberInvalidException var12) {
                 enchantment = Enchantment.getEnchantmentByLocation(args[1]);
             }
 
-            if (enchantment == null)
-            {
-                throw new NumberInvalidException("commands.enchant.notFound", new Object[] {args[1]});
-            }
-            else
-            {
+            if (enchantment == null) {
+                throw new NumberInvalidException("commands.enchant.notFound", new Object[]{args[1]});
+            } else {
                 int i = 1;
                 ItemStack itemstack = entitylivingbase.getHeldItemMainhand();
 
-                if (itemstack.isEmpty())
-                {
+                if (itemstack.isEmpty()) {
                     throw new CommandException("commands.enchant.noItem", new Object[0]);
-                }
-                else if (!enchantment.canApply(itemstack))
-                {
+                } else if (!enchantment.canApply(itemstack)) {
                     throw new CommandException("commands.enchant.cantEnchant", new Object[0]);
-                }
-                else
-                {
-                    if (args.length >= 3)
-                    {
+                } else {
+                    if (args.length >= 3) {
                         i = parseInt(args[2], enchantment.getMinLevel(), enchantment.getMaxLevel());
                     }
 
-                    if (itemstack.hasTagCompound())
-                    {
+                    if (itemstack.hasTagCompound()) {
                         NBTTagList nbttaglist = itemstack.getEnchantmentTagList();
 
-                        for (int j = 0; j < nbttaglist.tagCount(); ++j)
-                        {
+                        for (int j = 0; j < nbttaglist.tagCount(); ++j) {
                             int k = nbttaglist.getCompoundTagAt(j).getShort("id");
 
-                            if (Enchantment.getEnchantmentByID(k) != null)
-                            {
+                            if (Enchantment.getEnchantmentByID(k) != null) {
                                 Enchantment enchantment1 = Enchantment.getEnchantmentByID(k);
 
-                                if (!enchantment.isCompatibleWith(enchantment1))
-                                {
-                                    throw new CommandException("commands.enchant.cantCombine", new Object[] {enchantment.getTranslatedName(i), enchantment1.getTranslatedName(nbttaglist.getCompoundTagAt(j).getShort("lvl"))});
+                                if (!enchantment.isCompatibleWith(enchantment1)) {
+                                    throw new CommandException("commands.enchant.cantCombine", new Object[]{enchantment.getTranslatedName(i), enchantment1.getTranslatedName(nbttaglist.getCompoundTagAt(j).getShort("lvl"))});
                                 }
                             }
                         }
@@ -100,20 +77,15 @@
         }
     }
 
-    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos)
-    {
-        if (args.length == 1)
-        {
+    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos) {
+        if (args.length == 1) {
             return getListOfStringsMatchingLastWord(args, server.getOnlinePlayerNames());
-        }
-        else
-        {
+        } else {
             return args.length == 2 ? getListOfStringsMatchingLastWord(args, Enchantment.REGISTRY.getKeys()) : Collections.emptyList();
         }
     }
 
-    public boolean isUsernameIndex(String[] args, int index)
-    {
+    public boolean isUsernameIndex(String[] args, int index) {
         return index == 0;
     }
 }
