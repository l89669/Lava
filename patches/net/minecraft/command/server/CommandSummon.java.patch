--- ../src-base/minecraft/net/minecraft/command/server/CommandSummon.java
+++ ../src-work/minecraft/net/minecraft/command/server/CommandSummon.java
@@ -1,8 +1,5 @@
 package net.minecraft.command.server;
 
-import java.util.Collections;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.CommandException;
 import net.minecraft.command.ICommandSender;
@@ -22,31 +19,27 @@
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.storage.AnvilChunkLoader;
 
-public class CommandSummon extends CommandBase
-{
-    public String getName()
-    {
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.List;
+
+public class CommandSummon extends CommandBase {
+    public String getName() {
         return "summon";
     }
 
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
-    public String getUsage(ICommandSender sender)
-    {
+    public String getUsage(ICommandSender sender) {
         return "commands.summon.usage";
     }
 
-    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
-    {
-        if (args.length < 1)
-        {
+    public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
+        if (args.length < 1) {
             throw new WrongUsageException("commands.summon.usage", new Object[0]);
-        }
-        else
-        {
+        } else {
             String s = args[0];
             BlockPos blockpos = sender.getPosition();
             Vec3d vec3d = sender.getPositionVector();
@@ -54,8 +47,7 @@
             double d1 = vec3d.y;
             double d2 = vec3d.z;
 
-            if (args.length >= 4)
-            {
+            if (args.length >= 4) {
                 d0 = parseDouble(d0, args[1], true);
                 d1 = parseDouble(d1, args[2], false);
                 d2 = parseDouble(d2, args[3], true);
@@ -64,49 +56,36 @@
 
             World world = sender.getEntityWorld();
 
-            if (!world.isBlockLoaded(blockpos))
-            {
+            if (!world.isBlockLoaded(blockpos)) {
                 throw new CommandException("commands.summon.outOfWorld", new Object[0]);
-            }
-            else if (EntityList.LIGHTNING_BOLT.equals(new ResourceLocation(s)))
-            {
+            } else if (EntityList.LIGHTNING_BOLT.equals(new ResourceLocation(s))) {
                 world.addWeatherEffect(new EntityLightningBolt(world, d0, d1, d2, false));
                 notifyCommandListener(sender, this, "commands.summon.success", new Object[0]);
-            }
-            else
-            {
+            } else {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
                 boolean flag = false;
 
-                if (args.length >= 5)
-                {
+                if (args.length >= 5) {
                     String s1 = buildString(args, 4);
 
-                    try
-                    {
+                    try {
                         nbttagcompound = JsonToNBT.getTagFromJson(s1);
                         flag = true;
+                    } catch (NBTException nbtexception) {
+                        throw new CommandException("commands.summon.tagError", new Object[]{nbtexception.getMessage()});
                     }
-                    catch (NBTException nbtexception)
-                    {
-                        throw new CommandException("commands.summon.tagError", new Object[] {nbtexception.getMessage()});
-                    }
                 }
 
                 nbttagcompound.setString("id", s);
                 Entity entity = AnvilChunkLoader.readWorldEntityPos(nbttagcompound, world, d0, d1, d2, true);
 
-                if (entity == null)
-                {
+                if (entity == null) {
                     throw new CommandException("commands.summon.failed", new Object[0]);
-                }
-                else
-                {
+                } else {
                     entity.setLocationAndAngles(d0, d1, d2, entity.rotationYaw, entity.rotationPitch);
 
-                    if (!flag && entity instanceof EntityLiving)
-                    {
-                        ((EntityLiving)entity).onInitialSpawn(world.getDifficultyForLocation(new BlockPos(entity)), (IEntityLivingData)null);
+                    if (!flag && entity instanceof EntityLiving) {
+                        ((EntityLiving) entity).onInitialSpawn(world.getDifficultyForLocation(new BlockPos(entity)), (IEntityLivingData) null);
                     }
 
                     notifyCommandListener(sender, this, "commands.summon.success", new Object[0]);
@@ -115,14 +94,10 @@
         }
     }
 
-    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos)
-    {
-        if (args.length == 1)
-        {
+    public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos) {
+        if (args.length == 1) {
             return getListOfStringsMatchingLastWord(args, EntityList.getEntityNameList());
-        }
-        else
-        {
+        } else {
             return args.length > 1 && args.length <= 4 ? getTabCompletionCoordinate(args, 1, targetPos) : Collections.emptyList();
         }
     }
