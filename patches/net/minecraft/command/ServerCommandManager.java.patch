--- ../src-base/minecraft/net/minecraft/command/ServerCommandManager.java
+++ ../src-work/minecraft/net/minecraft/command/ServerCommandManager.java
@@ -1,30 +1,6 @@
 package net.minecraft.command;
 
-import net.minecraft.command.server.CommandBanIp;
-import net.minecraft.command.server.CommandBanPlayer;
-import net.minecraft.command.server.CommandBroadcast;
-import net.minecraft.command.server.CommandDeOp;
-import net.minecraft.command.server.CommandEmote;
-import net.minecraft.command.server.CommandListBans;
-import net.minecraft.command.server.CommandListPlayers;
-import net.minecraft.command.server.CommandMessage;
-import net.minecraft.command.server.CommandMessageRaw;
-import net.minecraft.command.server.CommandOp;
-import net.minecraft.command.server.CommandPardonIp;
-import net.minecraft.command.server.CommandPardonPlayer;
-import net.minecraft.command.server.CommandPublishLocalServer;
-import net.minecraft.command.server.CommandSaveAll;
-import net.minecraft.command.server.CommandSaveOff;
-import net.minecraft.command.server.CommandSaveOn;
-import net.minecraft.command.server.CommandScoreboard;
-import net.minecraft.command.server.CommandSetBlock;
-import net.minecraft.command.server.CommandSetDefaultSpawnpoint;
-import net.minecraft.command.server.CommandStop;
-import net.minecraft.command.server.CommandSummon;
-import net.minecraft.command.server.CommandTeleport;
-import net.minecraft.command.server.CommandTestFor;
-import net.minecraft.command.server.CommandTestForBlock;
-import net.minecraft.command.server.CommandWhitelist;
+import net.minecraft.command.server.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.network.rcon.RConConsoleSource;
 import net.minecraft.server.MinecraftServer;
@@ -33,13 +9,15 @@
 import net.minecraft.util.text.TextComponentTranslation;
 import net.minecraft.util.text.TextFormatting;
 
-public class ServerCommandManager extends CommandHandler implements ICommandListener
-{
+public class ServerCommandManager extends CommandHandler implements ICommandListener {
     private final MinecraftServer server;
 
-    public ServerCommandManager(MinecraftServer serverIn)
-    {
+    public ServerCommandManager(MinecraftServer serverIn) {
         this.server = serverIn;
+        CommandBase.setCommandListener(this);
+    }
+
+    public void registerVanillaCommands() {
         this.registerCommand(new CommandTime());
         this.registerCommand(new CommandGameMode());
         this.registerCommand(new CommandDifficulty());
@@ -89,9 +67,7 @@
         this.registerCommand(new CommandLocate());
         this.registerCommand(new CommandReload());
         this.registerCommand(new CommandFunction());
-
-        if (serverIn.isDedicatedServer())
-        {
+        if (server.isDedicatedServer()) {
             this.registerCommand(new CommandOp());
             this.registerCommand(new CommandDeOp());
             this.registerCommand(new CommandStop());
@@ -107,66 +83,55 @@
             this.registerCommand(new CommandListPlayers());
             this.registerCommand(new CommandWhitelist());
             this.registerCommand(new CommandSetPlayerTimeout());
-        }
-        else
-        {
+        } else {
             this.registerCommand(new CommandPublishLocalServer());
         }
 
         CommandBase.setCommandListener(this);
     }
 
-    public void notifyListener(ICommandSender sender, ICommand command, int flags, String translationKey, Object... translationArgs)
-    {
+    public void notifyListener(ICommandSender sender, ICommand command, int flags, String translationKey, Object... translationArgs) {
         boolean flag = true;
         MinecraftServer minecraftserver = this.server;
 
-        if (!sender.sendCommandFeedback())
-        {
+        if (!sender.sendCommandFeedback()) {
             flag = false;
         }
 
-        ITextComponent itextcomponent = new TextComponentTranslation("chat.type.admin", new Object[] {sender.getName(), new TextComponentTranslation(translationKey, translationArgs)});
+        ITextComponent itextcomponent = new TextComponentTranslation("chat.type.admin", new Object[]{sender.getName(), new TextComponentTranslation(translationKey, translationArgs)});
         itextcomponent.getStyle().setColor(TextFormatting.GRAY);
         itextcomponent.getStyle().setItalic(Boolean.valueOf(true));
 
-        if (flag)
-        {
-            for (EntityPlayer entityplayer : minecraftserver.getPlayerList().getPlayers())
-            {
-                if (entityplayer != sender && minecraftserver.getPlayerList().canSendCommands(entityplayer.getGameProfile()) && command.checkPermission(this.server, sender))
-                {
+        if (flag) {
+            for (EntityPlayer entityplayer : minecraftserver.getPlayerList().getPlayers()) {
+                if (entityplayer != sender && minecraftserver.getPlayerList().canSendCommands(entityplayer.getGameProfile()) && command.checkPermission(this.server, sender)) {
                     boolean flag1 = sender instanceof MinecraftServer && this.server.shouldBroadcastConsoleToOps();
                     boolean flag2 = sender instanceof RConConsoleSource && this.server.shouldBroadcastRconToOps();
 
-                    if (flag1 || flag2 || !(sender instanceof RConConsoleSource) && !(sender instanceof MinecraftServer))
-                    {
+                    if (flag1 || flag2 || !(sender instanceof RConConsoleSource) && !(sender instanceof MinecraftServer)) {
                         entityplayer.sendMessage(itextcomponent);
                     }
                 }
             }
         }
 
-        if (sender != minecraftserver && minecraftserver.worlds[0].getGameRules().getBoolean("logAdminCommands"))
+        if (sender != minecraftserver && minecraftserver.worlds[0].getGameRules().getBoolean("logAdminCommands") && !org.spigotmc.SpigotConfig.silentCommandBlocks) // Spigot
         {
             minecraftserver.sendMessage(itextcomponent);
         }
 
         boolean flag3 = minecraftserver.worlds[0].getGameRules().getBoolean("sendCommandFeedback");
 
-        if (sender instanceof CommandBlockBaseLogic)
-        {
-            flag3 = ((CommandBlockBaseLogic)sender).shouldTrackOutput();
+        if (sender instanceof CommandBlockBaseLogic) {
+            flag3 = ((CommandBlockBaseLogic) sender).shouldTrackOutput();
         }
 
-        if ((flags & 1) != 1 && flag3 || sender instanceof MinecraftServer)
-        {
+        if ((flags & 1) != 1 && flag3 || sender instanceof MinecraftServer) {
             sender.sendMessage(new TextComponentTranslation(translationKey, translationArgs));
         }
     }
 
-    protected MinecraftServer getServer()
-    {
+    protected MinecraftServer getServer() {
         return this.server;
     }
 }
