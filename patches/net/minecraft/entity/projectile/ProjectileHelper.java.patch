--- ../src-base/minecraft/net/minecraft/entity/projectile/ProjectileHelper.java
+++ ../src-work/minecraft/net/minecraft/entity/projectile/ProjectileHelper.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.projectile;
 
-import java.util.List;
 import net.minecraft.entity.Entity;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.MathHelper;
@@ -8,10 +7,10 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.World;
 
-public final class ProjectileHelper
-{
-    public static RayTraceResult forwardsRaycast(Entity projectile, boolean includeEntities, boolean ignoreExcludedEntity, Entity excludedEntity)
-    {
+import java.util.List;
+
+public final class ProjectileHelper {
+    public static RayTraceResult forwardsRaycast(Entity projectile, boolean includeEntities, boolean ignoreExcludedEntity, Entity excludedEntity) {
         double d0 = projectile.posX;
         double d1 = projectile.posY;
         double d2 = projectile.posZ;
@@ -23,10 +22,8 @@
         Vec3d vec3d1 = new Vec3d(d0 + d3, d1 + d4, d2 + d5);
         RayTraceResult raytraceresult = world.rayTraceBlocks(vec3d, vec3d1, false, true, false);
 
-        if (includeEntities)
-        {
-            if (raytraceresult != null)
-            {
+        if (includeEntities) {
+            if (raytraceresult != null) {
                 vec3d1 = new Vec3d(raytraceresult.hitVec.x, raytraceresult.hitVec.y, raytraceresult.hitVec.z);
             }
 
@@ -34,21 +31,17 @@
             List<Entity> list = world.getEntitiesWithinAABBExcludingEntity(projectile, projectile.getEntityBoundingBox().expand(d3, d4, d5).grow(1.0D));
             double d6 = 0.0D;
 
-            for (int i = 0; i < list.size(); ++i)
-            {
+            for (int i = 0; i < list.size(); ++i) {
                 Entity entity1 = list.get(i);
 
-                if (entity1.canBeCollidedWith() && (ignoreExcludedEntity || !entity1.isEntityEqual(excludedEntity)) && !entity1.noClip)
-                {
+                if (entity1.canBeCollidedWith() && (ignoreExcludedEntity || !entity1.isEntityEqual(excludedEntity)) && !entity1.noClip) {
                     AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow(0.30000001192092896D);
                     RayTraceResult raytraceresult1 = axisalignedbb.calculateIntercept(vec3d, vec3d1);
 
-                    if (raytraceresult1 != null)
-                    {
+                    if (raytraceresult1 != null) {
                         double d7 = vec3d.squareDistanceTo(raytraceresult1.hitVec);
 
-                        if (d7 < d6 || d6 == 0.0D)
-                        {
+                        if (d7 < d6 || d6 == 0.0D) {
                             entity = entity1;
                             d6 = d7;
                         }
@@ -56,8 +49,7 @@
                 }
             }
 
-            if (entity != null)
-            {
+            if (entity != null) {
                 raytraceresult = new RayTraceResult(entity);
             }
         }
@@ -65,31 +57,26 @@
         return raytraceresult;
     }
 
-    public static final void rotateTowardsMovement(Entity projectile, float rotationSpeed)
-    {
+    public static final void rotateTowardsMovement(Entity projectile, float rotationSpeed) {
         double d0 = projectile.motionX;
         double d1 = projectile.motionY;
         double d2 = projectile.motionZ;
         float f = MathHelper.sqrt(d0 * d0 + d2 * d2);
-        projectile.rotationYaw = (float)(MathHelper.atan2(d2, d0) * (180D / Math.PI)) + 90.0F;
+        projectile.rotationYaw = (float) (MathHelper.atan2(d2, d0) * (180D / Math.PI)) + 90.0F;
 
-        for (projectile.rotationPitch = (float)(MathHelper.atan2((double)f, d1) * (180D / Math.PI)) - 90.0F; projectile.rotationPitch - projectile.prevRotationPitch < -180.0F; projectile.prevRotationPitch -= 360.0F)
-        {
+        for (projectile.rotationPitch = (float) (MathHelper.atan2((double) f, d1) * (180D / Math.PI)) - 90.0F; projectile.rotationPitch - projectile.prevRotationPitch < -180.0F; projectile.prevRotationPitch -= 360.0F) {
             ;
         }
 
-        while (projectile.rotationPitch - projectile.prevRotationPitch >= 180.0F)
-        {
+        while (projectile.rotationPitch - projectile.prevRotationPitch >= 180.0F) {
             projectile.prevRotationPitch += 360.0F;
         }
 
-        while (projectile.rotationYaw - projectile.prevRotationYaw < -180.0F)
-        {
+        while (projectile.rotationYaw - projectile.prevRotationYaw < -180.0F) {
             projectile.prevRotationYaw -= 360.0F;
         }
 
-        while (projectile.rotationYaw - projectile.prevRotationYaw >= 180.0F)
-        {
+        while (projectile.rotationYaw - projectile.prevRotationYaw >= 180.0F) {
             projectile.prevRotationYaw += 360.0F;
         }
 
