--- ../src-base/minecraft/net/minecraft/entity/projectile/EntityDragonFireball.java
+++ ../src-work/minecraft/net/minecraft/entity/projectile/EntityDragonFireball.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.projectile;
 
-import java.util.List;
 import net.minecraft.entity.EntityAreaEffectCloud;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.init.MobEffects;
@@ -14,55 +13,46 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityDragonFireball extends EntityFireball
-{
-    public EntityDragonFireball(World worldIn)
-    {
+import java.util.List;
+
+public class EntityDragonFireball extends EntityFireball {
+    public EntityDragonFireball(World worldIn) {
         super(worldIn);
         this.setSize(1.0F, 1.0F);
     }
 
     @SideOnly(Side.CLIENT)
-    public EntityDragonFireball(World worldIn, double x, double y, double z, double accelX, double accelY, double accelZ)
-    {
+    public EntityDragonFireball(World worldIn, double x, double y, double z, double accelX, double accelY, double accelZ) {
         super(worldIn, x, y, z, accelX, accelY, accelZ);
         this.setSize(1.0F, 1.0F);
     }
 
-    public EntityDragonFireball(World worldIn, EntityLivingBase shooter, double accelX, double accelY, double accelZ)
-    {
+    public EntityDragonFireball(World worldIn, EntityLivingBase shooter, double accelX, double accelY, double accelZ) {
         super(worldIn, shooter, accelX, accelY, accelZ);
         this.setSize(1.0F, 1.0F);
     }
 
-    public static void registerFixesDragonFireball(DataFixer fixer)
-    {
+    public static void registerFixesDragonFireball(DataFixer fixer) {
         EntityFireball.registerFixesFireball(fixer, "DragonFireball");
     }
 
-    protected void onImpact(RayTraceResult result)
-    {
-        if (result.entityHit == null || !result.entityHit.isEntityEqual(this.shootingEntity))
-        {
-            if (!this.world.isRemote)
-            {
+    protected void onImpact(RayTraceResult result) {
+        if (result.entityHit == null || !result.entityHit.isEntityEqual(this.shootingEntity)) {
+            if (!this.world.isRemote) {
                 List<EntityLivingBase> list = this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D));
                 EntityAreaEffectCloud entityareaeffectcloud = new EntityAreaEffectCloud(this.world, this.posX, this.posY, this.posZ);
                 entityareaeffectcloud.setOwner(this.shootingEntity);
                 entityareaeffectcloud.setParticle(EnumParticleTypes.DRAGON_BREATH);
                 entityareaeffectcloud.setRadius(3.0F);
                 entityareaeffectcloud.setDuration(600);
-                entityareaeffectcloud.setRadiusPerTick((7.0F - entityareaeffectcloud.getRadius()) / (float)entityareaeffectcloud.getDuration());
+                entityareaeffectcloud.setRadiusPerTick((7.0F - entityareaeffectcloud.getRadius()) / (float) entityareaeffectcloud.getDuration());
                 entityareaeffectcloud.addEffect(new PotionEffect(MobEffects.INSTANT_DAMAGE, 1, 1));
 
-                if (!list.isEmpty())
-                {
-                    for (EntityLivingBase entitylivingbase : list)
-                    {
+                if (!list.isEmpty()) {
+                    for (EntityLivingBase entitylivingbase : list) {
                         double d0 = this.getDistanceSq(entitylivingbase);
 
-                        if (d0 < 16.0D)
-                        {
+                        if (d0 < 16.0D) {
                             entityareaeffectcloud.setPosition(entitylivingbase.posX, entitylivingbase.posY, entitylivingbase.posZ);
                             break;
                         }
@@ -76,23 +66,19 @@
         }
     }
 
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return false;
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
         return false;
     }
 
-    protected EnumParticleTypes getParticleType()
-    {
+    protected EnumParticleTypes getParticleType() {
         return EnumParticleTypes.DRAGON_BREATH;
     }
 
-    protected boolean isFireballFiery()
-    {
+    protected boolean isFireballFiery() {
         return false;
     }
 }
