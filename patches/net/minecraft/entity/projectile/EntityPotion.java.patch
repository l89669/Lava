--- ../src-base/minecraft/net/minecraft/entity/projectile/EntityPotion.java
+++ ../src-work/minecraft/net/minecraft/entity/projectile/EntityPotion.java
@@ -1,8 +1,6 @@
 package net.minecraft.entity.projectile;
 
 import com.google.common.base.Predicate;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.entity.EntityAreaEffectCloud;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.monster.EntityBlaze;
@@ -31,107 +29,90 @@
 import net.minecraft.world.World;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.LivingEntity;
 
-public class EntityPotion extends EntityThrowable
-{
+import javax.annotation.Nullable;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class EntityPotion extends EntityThrowable {
     private static final DataParameter<ItemStack> ITEM = EntityDataManager.<ItemStack>createKey(EntityPotion.class, DataSerializers.ITEM_STACK);
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final Predicate<EntityLivingBase> WATER_SENSITIVE = new Predicate<EntityLivingBase>()
-    {
-        public boolean apply(@Nullable EntityLivingBase p_apply_1_)
-        {
+    public static final Predicate<EntityLivingBase> WATER_SENSITIVE = new Predicate<EntityLivingBase>() {
+        public boolean apply(@Nullable EntityLivingBase p_apply_1_) {
             return EntityPotion.isWaterSensitiveEntity(p_apply_1_);
         }
     };
 
-    public EntityPotion(World worldIn)
-    {
+    public EntityPotion(World worldIn) {
         super(worldIn);
     }
 
-    public EntityPotion(World worldIn, EntityLivingBase throwerIn, ItemStack potionDamageIn)
-    {
+    public EntityPotion(World worldIn, EntityLivingBase throwerIn, ItemStack potionDamageIn) {
         super(worldIn, throwerIn);
         this.setItem(potionDamageIn);
     }
 
-    public EntityPotion(World worldIn, double x, double y, double z, ItemStack potionDamageIn)
-    {
+    public EntityPotion(World worldIn, double x, double y, double z, ItemStack potionDamageIn) {
         super(worldIn, x, y, z);
 
-        if (!potionDamageIn.isEmpty())
-        {
+        if (!potionDamageIn.isEmpty()) {
             this.setItem(potionDamageIn);
         }
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         this.getDataManager().register(ITEM, ItemStack.EMPTY);
     }
 
-    public ItemStack getPotion()
-    {
-        ItemStack itemstack = (ItemStack)this.getDataManager().get(ITEM);
+    public ItemStack getPotion() {
+        ItemStack itemstack = (ItemStack) this.getDataManager().get(ITEM);
 
-        if (itemstack.getItem() != Items.SPLASH_POTION && itemstack.getItem() != Items.LINGERING_POTION)
-        {
-            if (this.world != null)
-            {
-                LOGGER.error("ThrownPotion entity {} has no item?!", (int)this.getEntityId());
+        if (itemstack.getItem() != Items.SPLASH_POTION && itemstack.getItem() != Items.LINGERING_POTION) {
+            if (this.world != null) {
+                LOGGER.error("ThrownPotion entity {} has no item?!", (int) this.getEntityId());
             }
 
             return new ItemStack(Items.SPLASH_POTION);
-        }
-        else
-        {
+        } else {
             return itemstack;
         }
     }
 
-    public void setItem(ItemStack stack)
-    {
+    public void setItem(ItemStack stack) {
         this.getDataManager().set(ITEM, stack);
         this.getDataManager().setDirty(ITEM);
     }
 
-    protected float getGravityVelocity()
-    {
+    protected float getGravityVelocity() {
         return 0.05F;
     }
 
-    protected void onImpact(RayTraceResult result)
-    {
-        if (!this.world.isRemote)
-        {
+    protected void onImpact(RayTraceResult result) {
+        if (!this.world.isRemote) {
             ItemStack itemstack = this.getPotion();
             PotionType potiontype = PotionUtils.getPotionFromItem(itemstack);
             List<PotionEffect> list = PotionUtils.getEffectsFromStack(itemstack);
             boolean flag = potiontype == PotionTypes.WATER && list.isEmpty();
 
-            if (result.typeOfHit == RayTraceResult.Type.BLOCK && flag)
-            {
+            if (result.typeOfHit == RayTraceResult.Type.BLOCK && flag) {
                 BlockPos blockpos = result.getBlockPos().offset(result.sideHit);
                 this.extinguishFires(blockpos, result.sideHit);
 
-                for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
-                {
+                for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL) {
                     this.extinguishFires(blockpos.offset(enumfacing), enumfacing);
                 }
             }
 
-            if (flag)
-            {
+            if (flag) {
                 this.applyWater();
-            }
-            else if (!list.isEmpty())
+            } else if (true || !list.isEmpty()) // CraftBukkit - Call event even if no effects to apply
             {
-                if (this.isLingering())
-                {
+                if (this.isLingering()) {
                     this.makeAreaOfEffectCloud(itemstack, potiontype);
-                }
-                else
-                {
+                } else {
                     this.applySplash(result, list);
                 }
             }
@@ -142,64 +123,70 @@
         }
     }
 
-    private void applyWater()
-    {
+    private void applyWater() {
         AxisAlignedBB axisalignedbb = this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D);
         List<EntityLivingBase> list = this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, WATER_SENSITIVE);
 
-        if (!list.isEmpty())
-        {
-            for (EntityLivingBase entitylivingbase : list)
-            {
+        if (!list.isEmpty()) {
+            for (EntityLivingBase entitylivingbase : list) {
                 double d0 = this.getDistanceSq(entitylivingbase);
 
-                if (d0 < 16.0D && isWaterSensitiveEntity(entitylivingbase))
-                {
+                if (d0 < 16.0D && isWaterSensitiveEntity(entitylivingbase)) {
                     entitylivingbase.attackEntityFrom(DamageSource.DROWN, 1.0F);
                 }
             }
         }
     }
 
-    private void applySplash(RayTraceResult p_190543_1_, List<PotionEffect> p_190543_2_)
-    {
+    private void applySplash(RayTraceResult p_190543_1_, List<PotionEffect> p_190543_2_) {
         AxisAlignedBB axisalignedbb = this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D);
         List<EntityLivingBase> list = this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb);
-
-        if (!list.isEmpty())
-        {
-            for (EntityLivingBase entitylivingbase : list)
-            {
-                if (entitylivingbase.canBeHitWithPotion())
-                {
+        Map<LivingEntity, Double> affected = new HashMap<LivingEntity, Double>();
+        if (!list.isEmpty()) {
+            for (EntityLivingBase entitylivingbase : list) {
+                if (entitylivingbase.canBeHitWithPotion()) {
                     double d0 = this.getDistanceSq(entitylivingbase);
 
-                    if (d0 < 16.0D)
-                    {
+                    if (d0 < 16.0D) {
                         double d1 = 1.0D - Math.sqrt(d0) / 4.0D;
 
-                        if (entitylivingbase == p_190543_1_.entityHit)
-                        {
+                        if (entitylivingbase == p_190543_1_.entityHit) {
                             d1 = 1.0D;
                         }
+                        affected.put((LivingEntity) entitylivingbase.getBukkitEntity(), d1);
+                    }
+                }
+            }
+        }
+        org.bukkit.event.entity.PotionSplashEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPotionSplashEvent(this, affected);
+        if (!event.isCancelled() && p_190543_2_ != null && !p_190543_2_.isEmpty()) { // do not process effects if there are no effects to process
+            for (LivingEntity victim : event.getAffectedEntities()) {
+                if (!(victim instanceof CraftLivingEntity)) {
+                    continue;
+                }
+                EntityLivingBase entityliving = ((CraftLivingEntity) victim).getHandle();
+                double d1 = event.getIntensity(victim);
+                // CraftBukkit end
 
-                        for (PotionEffect potioneffect : p_190543_2_)
-                        {
-                            Potion potion = potioneffect.getPotion();
+                for (PotionEffect mobeffect : p_190543_2_) {
+                    Potion mobeffectlist = mobeffect.getPotion();
+                    // CraftBukkit start - Abide by PVP settings - for players only!
+                    if (!this.world.pvpMode && this.getThrower() instanceof EntityPlayer && entityliving instanceof EntityPlayer && entityliving != this.getThrower()) {
+                        int i = Potion.getIdFromPotion(mobeffectlist);
+                        // Block SLOWER_MOVEMENT, SLOWER_DIG, HARM, BLINDNESS, HUNGER, WEAKNESS and POISON potions
+                        if (i == 2 || i == 4 || i == 7 || i == 15 || i == 17 || i == 18 || i == 19) {
+                            continue;
+                        }
+                    }
+                    // CraftBukkit end
 
-                            if (potion.isInstant())
-                            {
-                                potion.affectEntity(this, this.getThrower(), entitylivingbase, potioneffect.getAmplifier(), d1);
-                            }
-                            else
-                            {
-                                int i = (int)(d1 * (double)potioneffect.getDuration() + 0.5D);
+                    if (mobeffectlist.isInstant()) {
+                        mobeffectlist.affectEntity(this, this.getThrower(), entityliving, mobeffect.getAmplifier(), d1);
+                    } else {
+                        int i = (int) (d1 * (double) mobeffect.getDuration() + 0.5D);
 
-                                if (i > 20)
-                                {
-                                    entitylivingbase.addPotionEffect(new PotionEffect(potion, i, potioneffect.getAmplifier(), potioneffect.getIsAmbient(), potioneffect.doesShowParticles()));
-                                }
-                            }
+                        if (i > 20) {
+                            entityliving.addPotionEffect(new PotionEffect(mobeffectlist, i, mobeffect.getAmplifier(), mobeffect.getIsAmbient(), mobeffect.doesShowParticles()));
                         }
                     }
                 }
@@ -207,78 +194,70 @@
         }
     }
 
-    private void makeAreaOfEffectCloud(ItemStack p_190542_1_, PotionType p_190542_2_)
-    {
+    private void makeAreaOfEffectCloud(ItemStack p_190542_1_, PotionType p_190542_2_) {
         EntityAreaEffectCloud entityareaeffectcloud = new EntityAreaEffectCloud(this.world, this.posX, this.posY, this.posZ);
         entityareaeffectcloud.setOwner(this.getThrower());
         entityareaeffectcloud.setRadius(3.0F);
         entityareaeffectcloud.setRadiusOnUse(-0.5F);
         entityareaeffectcloud.setWaitTime(10);
-        entityareaeffectcloud.setRadiusPerTick(-entityareaeffectcloud.getRadius() / (float)entityareaeffectcloud.getDuration());
+        entityareaeffectcloud.setRadiusPerTick(-entityareaeffectcloud.getRadius() / (float) entityareaeffectcloud.getDuration());
         entityareaeffectcloud.setPotion(p_190542_2_);
 
-        for (PotionEffect potioneffect : PotionUtils.getFullEffectsFromItem(p_190542_1_))
-        {
+        for (PotionEffect potioneffect : PotionUtils.getFullEffectsFromItem(p_190542_1_)) {
             entityareaeffectcloud.addEffect(new PotionEffect(potioneffect));
         }
 
         NBTTagCompound nbttagcompound = p_190542_1_.getTagCompound();
 
-        if (nbttagcompound != null && nbttagcompound.hasKey("CustomPotionColor", 99))
-        {
+        if (nbttagcompound != null && nbttagcompound.hasKey("CustomPotionColor", 99)) {
             entityareaeffectcloud.setColor(nbttagcompound.getInteger("CustomPotionColor"));
         }
 
-        this.world.spawnEntity(entityareaeffectcloud);
+        // this.world.spawnEntity(entityareaeffectcloud);
+        org.bukkit.event.entity.LingeringPotionSplashEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callLingeringPotionSplashEvent(this, entityareaeffectcloud);
+        if (!(event.isCancelled() || entityareaeffectcloud.isDead)) {
+            this.world.spawnEntity(entityareaeffectcloud);
+        } else {
+            entityareaeffectcloud.isDead = true;
+        }
     }
 
-    private boolean isLingering()
-    {
+    public boolean isLingering() {
         return this.getPotion().getItem() == Items.LINGERING_POTION;
     }
 
-    private void extinguishFires(BlockPos pos, EnumFacing p_184542_2_)
-    {
-        if (this.world.getBlockState(pos).getBlock() == Blocks.FIRE)
-        {
-            this.world.extinguishFire((EntityPlayer)null, pos.offset(p_184542_2_), p_184542_2_.getOpposite());
+    private void extinguishFires(BlockPos pos, EnumFacing p_184542_2_) {
+        if (this.world.getBlockState(pos).getBlock() == Blocks.FIRE) {
+            this.world.extinguishFire((EntityPlayer) null, pos.offset(p_184542_2_), p_184542_2_.getOpposite());
         }
     }
 
-    public static void registerFixesPotion(DataFixer fixer)
-    {
+    public static void registerFixesPotion(DataFixer fixer) {
         EntityThrowable.registerFixesThrowable(fixer, "ThrownPotion");
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(EntityPotion.class, new String[] {"Potion"}));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(EntityPotion.class, new String[]{"Potion"}));
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         ItemStack itemstack = new ItemStack(compound.getCompoundTag("Potion"));
 
-        if (itemstack.isEmpty())
-        {
+        if (itemstack.isEmpty()) {
             this.setDead();
-        }
-        else
-        {
+        } else {
             this.setItem(itemstack);
         }
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         ItemStack itemstack = this.getPotion();
 
-        if (!itemstack.isEmpty())
-        {
+        if (!itemstack.isEmpty()) {
             compound.setTag("Potion", itemstack.writeToNBT(new NBTTagCompound()));
         }
     }
 
-    private static boolean isWaterSensitiveEntity(EntityLivingBase p_190544_0_)
-    {
+    private static boolean isWaterSensitiveEntity(EntityLivingBase p_190544_0_) {
         return p_190544_0_ instanceof EntityEnderman || p_190544_0_ instanceof EntityBlaze;
     }
 }
