--- ../src-base/minecraft/net/minecraft/entity/projectile/EntityArrow.java
+++ ../src-work/minecraft/net/minecraft/entity/projectile/EntityArrow.java
@@ -2,8 +2,6 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -12,6 +10,7 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
 import net.minecraft.entity.MoverType;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityEnderman;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -28,42 +27,51 @@
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
-import net.minecraft.util.math.AxisAlignedBB;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.RayTraceResult;
-import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.*;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.player.PlayerPickupArrowEvent;
 
-public abstract class EntityArrow extends Entity implements IProjectile
-{
-    private static final Predicate<Entity> ARROW_TARGETS = Predicates.and(EntitySelectors.NOT_SPECTATING, EntitySelectors.IS_ALIVE, new Predicate<Entity>()
-    {
-        public boolean apply(@Nullable Entity p_apply_1_)
-        {
+import javax.annotation.Nullable;
+import java.util.List;
+
+public abstract class EntityArrow extends Entity implements IProjectile {
+    private static final Predicate<Entity> ARROW_TARGETS = Predicates.and(EntitySelectors.NOT_SPECTATING, EntitySelectors.IS_ALIVE, new Predicate<Entity>() {
+        public boolean apply(@Nullable Entity p_apply_1_) {
             return p_apply_1_.canBeCollidedWith();
         }
     });
     private static final DataParameter<Byte> CRITICAL = EntityDataManager.<Byte>createKey(EntityArrow.class, DataSerializers.BYTE);
-    private int xTile;
-    private int yTile;
-    private int zTile;
+    public int xTile;
+    public int yTile;
+    public int zTile;
     private Block inTile;
     private int inData;
-    protected boolean inGround;
+    public boolean inGround; // Spigot
     protected int timeInGround;
-    public EntityArrow.PickupStatus pickupStatus;
+    public PickupStatus pickupStatus;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
     private double damage;
-    private int knockbackStrength;
+    public int knockbackStrength;
 
-    public EntityArrow(World worldIn)
-    {
+    // Spigot Start
+    @Override
+    public void inactiveTick() {
+        if (this.inGround) {
+            this.ticksInGround += 1; // Despawn counter. First int after shooter
+        }
+        super.inactiveTick();
+    }
+    // Spigot End
+
+    public EntityArrow(World worldIn) {
         super(worldIn);
         this.xTile = -1;
         this.yTile = -1;
@@ -73,30 +81,26 @@
         this.setSize(0.5F, 0.5F);
     }
 
-    public EntityArrow(World worldIn, double x, double y, double z)
-    {
+    public EntityArrow(World worldIn, double x, double y, double z) {
         this(worldIn);
         this.setPosition(x, y, z);
     }
 
-    public EntityArrow(World worldIn, EntityLivingBase shooter)
-    {
-        this(worldIn, shooter.posX, shooter.posY + (double)shooter.getEyeHeight() - 0.10000000149011612D, shooter.posZ);
+    public EntityArrow(World worldIn, EntityLivingBase shooter) {
+        this(worldIn, shooter.posX, shooter.posY + (double) shooter.getEyeHeight() - 0.10000000149011612D, shooter.posZ);
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity) shooter.getBukkitEntity();
 
-        if (shooter instanceof EntityPlayer)
-        {
+        if (shooter instanceof EntityPlayer) {
             this.pickupStatus = EntityArrow.PickupStatus.ALLOWED;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isInRangeToRenderDist(double distance)
-    {
+    public boolean isInRangeToRenderDist(double distance) {
         double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 10.0D;
 
-        if (Double.isNaN(d0))
-        {
+        if (Double.isNaN(d0)) {
             d0 = 1.0D;
         }
 
@@ -104,68 +108,61 @@
         return distance < d0 * d0;
     }
 
-    protected void entityInit()
-    {
-        this.dataManager.register(CRITICAL, Byte.valueOf((byte)0));
+    protected void entityInit() {
+        this.dataManager.register(CRITICAL, Byte.valueOf((byte) 0));
     }
 
-    public void shoot(Entity shooter, float pitch, float yaw, float p_184547_4_, float velocity, float inaccuracy)
-    {
+    public void shoot(Entity shooter, float pitch, float yaw, float p_184547_4_, float velocity, float inaccuracy) {
         float f = -MathHelper.sin(yaw * 0.017453292F) * MathHelper.cos(pitch * 0.017453292F);
         float f1 = -MathHelper.sin(pitch * 0.017453292F);
         float f2 = MathHelper.cos(yaw * 0.017453292F) * MathHelper.cos(pitch * 0.017453292F);
-        this.shoot((double)f, (double)f1, (double)f2, velocity, inaccuracy);
+        this.shoot((double) f, (double) f1, (double) f2, velocity, inaccuracy);
         this.motionX += shooter.motionX;
         this.motionZ += shooter.motionZ;
 
-        if (!shooter.onGround)
-        {
+        if (!shooter.onGround) {
             this.motionY += shooter.motionY;
         }
     }
 
-    public void shoot(double x, double y, double z, float velocity, float inaccuracy)
-    {
+    public void shoot(double x, double y, double z, float velocity, float inaccuracy) {
         float f = MathHelper.sqrt(x * x + y * y + z * z);
-        x = x / (double)f;
-        y = y / (double)f;
-        z = z / (double)f;
-        x = x + this.rand.nextGaussian() * 0.007499999832361937D * (double)inaccuracy;
-        y = y + this.rand.nextGaussian() * 0.007499999832361937D * (double)inaccuracy;
-        z = z + this.rand.nextGaussian() * 0.007499999832361937D * (double)inaccuracy;
-        x = x * (double)velocity;
-        y = y * (double)velocity;
-        z = z * (double)velocity;
+        x = x / (double) f;
+        y = y / (double) f;
+        z = z / (double) f;
+        x = x + this.rand.nextGaussian() * 0.007499999832361937D * (double) inaccuracy;
+        y = y + this.rand.nextGaussian() * 0.007499999832361937D * (double) inaccuracy;
+        z = z + this.rand.nextGaussian() * 0.007499999832361937D * (double) inaccuracy;
+        x = x * (double) velocity;
+        y = y * (double) velocity;
+        z = z * (double) velocity;
         this.motionX = x;
         this.motionY = y;
         this.motionZ = z;
         float f1 = MathHelper.sqrt(x * x + z * z);
-        this.rotationYaw = (float)(MathHelper.atan2(x, z) * (180D / Math.PI));
-        this.rotationPitch = (float)(MathHelper.atan2(y, (double)f1) * (180D / Math.PI));
+        this.rotationYaw = (float) (MathHelper.atan2(x, z) * (180D / Math.PI));
+        this.rotationPitch = (float) (MathHelper.atan2(y, (double) f1) * (180D / Math.PI));
         this.prevRotationYaw = this.rotationYaw;
         this.prevRotationPitch = this.rotationPitch;
         this.ticksInGround = 0;
     }
 
     @SideOnly(Side.CLIENT)
-    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport)
-    {
+    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport) {
         this.setPosition(x, y, z);
         this.setRotation(yaw, pitch);
     }
 
     @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
+    public void setVelocity(double x, double y, double z) {
         this.motionX = x;
         this.motionY = y;
         this.motionZ = z;
 
-        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
-        {
+        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
             float f = MathHelper.sqrt(x * x + z * z);
-            this.rotationPitch = (float)(MathHelper.atan2(y, (double)f) * (180D / Math.PI));
-            this.rotationYaw = (float)(MathHelper.atan2(x, z) * (180D / Math.PI));
+            this.rotationPitch = (float) (MathHelper.atan2(y, (double) f) * (180D / Math.PI));
+            this.rotationYaw = (float) (MathHelper.atan2(x, z) * (180D / Math.PI));
             this.prevRotationPitch = this.rotationPitch;
             this.prevRotationYaw = this.rotationYaw;
             this.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
@@ -173,15 +170,13 @@
         }
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
 
-        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
-        {
+        if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
             float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.rotationYaw = (float)(MathHelper.atan2(this.motionX, this.motionZ) * (180D / Math.PI));
-            this.rotationPitch = (float)(MathHelper.atan2(this.motionY, (double)f) * (180D / Math.PI));
+            this.rotationYaw = (float) (MathHelper.atan2(this.motionX, this.motionZ) * (180D / Math.PI));
+            this.rotationPitch = (float) (MathHelper.atan2(this.motionY, (double) f) * (180D / Math.PI));
             this.prevRotationYaw = this.rotationYaw;
             this.prevRotationPitch = this.rotationPitch;
         }
@@ -190,48 +185,39 @@
         IBlockState iblockstate = this.world.getBlockState(blockpos);
         Block block = iblockstate.getBlock();
 
-        if (iblockstate.getMaterial() != Material.AIR)
-        {
+        if (iblockstate.getMaterial() != Material.AIR) {
             AxisAlignedBB axisalignedbb = iblockstate.getCollisionBoundingBox(this.world, blockpos);
 
-            if (axisalignedbb != Block.NULL_AABB && axisalignedbb.offset(blockpos).contains(new Vec3d(this.posX, this.posY, this.posZ)))
-            {
+            if (axisalignedbb != Block.NULL_AABB && axisalignedbb.offset(blockpos).contains(new Vec3d(this.posX, this.posY, this.posZ))) {
                 this.inGround = true;
             }
         }
 
-        if (this.arrowShake > 0)
-        {
+        if (this.arrowShake > 0) {
             --this.arrowShake;
         }
 
-        if (this.inGround)
-        {
+        if (this.inGround) {
             int j = block.getMetaFromState(iblockstate);
 
-            if ((block != this.inTile || j != this.inData) && !this.world.collidesWithAnyBlock(this.getEntityBoundingBox().grow(0.05D)))
-            {
+            if ((block != this.inTile || j != this.inData) && !this.world.collidesWithAnyBlock(this.getEntityBoundingBox().grow(0.05D))) {
                 this.inGround = false;
-                this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+                this.motionX *= (double) (this.rand.nextFloat() * 0.2F);
+                this.motionY *= (double) (this.rand.nextFloat() * 0.2F);
+                this.motionZ *= (double) (this.rand.nextFloat() * 0.2F);
                 this.ticksInGround = 0;
                 this.ticksInAir = 0;
-            }
-            else
-            {
+            } else {
                 ++this.ticksInGround;
 
-                if (this.ticksInGround >= 1200)
+                if (this.ticksInGround >= world.spigotConfig.arrowDespawnRate) // Spigot - First int after shooter
                 {
                     this.setDead();
                 }
             }
 
             ++this.timeInGround;
-        }
-        else
-        {
+        } else {
             this.timeInGround = 0;
             ++this.ticksInAir;
             Vec3d vec3d1 = new Vec3d(this.posX, this.posY, this.posZ);
@@ -240,38 +226,31 @@
             vec3d1 = new Vec3d(this.posX, this.posY, this.posZ);
             vec3d = new Vec3d(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
 
-            if (raytraceresult != null)
-            {
+            if (raytraceresult != null) {
                 vec3d = new Vec3d(raytraceresult.hitVec.x, raytraceresult.hitVec.y, raytraceresult.hitVec.z);
             }
 
             Entity entity = this.findEntityOnPath(vec3d1, vec3d);
 
-            if (entity != null)
-            {
+            if (entity != null) {
                 raytraceresult = new RayTraceResult(entity);
             }
 
-            if (raytraceresult != null && raytraceresult.entityHit instanceof EntityPlayer)
-            {
-                EntityPlayer entityplayer = (EntityPlayer)raytraceresult.entityHit;
+            if (raytraceresult != null && raytraceresult.entityHit instanceof EntityPlayer) {
+                EntityPlayer entityplayer = (EntityPlayer) raytraceresult.entityHit;
 
-                if (this.shootingEntity instanceof EntityPlayer && !((EntityPlayer)this.shootingEntity).canAttackPlayer(entityplayer))
-                {
+                if (this.shootingEntity instanceof EntityPlayer && !((EntityPlayer) this.shootingEntity).canAttackPlayer(entityplayer)) {
                     raytraceresult = null;
                 }
             }
 
-            if (raytraceresult != null && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult))
-            {
+            if (raytraceresult != null && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult)) {
                 this.onHit(raytraceresult);
             }
 
-            if (this.getIsCritical())
-            {
-                for (int k = 0; k < 4; ++k)
-                {
-                    this.world.spawnParticle(EnumParticleTypes.CRIT, this.posX + this.motionX * (double)k / 4.0D, this.posY + this.motionY * (double)k / 4.0D, this.posZ + this.motionZ * (double)k / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ);
+            if (this.getIsCritical()) {
+                for (int k = 0; k < 4; ++k) {
+                    this.world.spawnParticle(EnumParticleTypes.CRIT, this.posX + this.motionX * (double) k / 4.0D, this.posY + this.motionY * (double) k / 4.0D, this.posZ + this.motionZ * (double) k / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ);
                 }
             }
 
@@ -279,25 +258,21 @@
             this.posY += this.motionY;
             this.posZ += this.motionZ;
             float f4 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.rotationYaw = (float)(MathHelper.atan2(this.motionX, this.motionZ) * (180D / Math.PI));
+            this.rotationYaw = (float) (MathHelper.atan2(this.motionX, this.motionZ) * (180D / Math.PI));
 
-            for (this.rotationPitch = (float)(MathHelper.atan2(this.motionY, (double)f4) * (180D / Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F)
-            {
+            for (this.rotationPitch = (float) (MathHelper.atan2(this.motionY, (double) f4) * (180D / Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
                 ;
             }
 
-            while (this.rotationPitch - this.prevRotationPitch >= 180.0F)
-            {
+            while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
                 this.prevRotationPitch += 360.0F;
             }
 
-            while (this.rotationYaw - this.prevRotationYaw < -180.0F)
-            {
+            while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
                 this.prevRotationYaw -= 360.0F;
             }
 
-            while (this.rotationYaw - this.prevRotationYaw >= 180.0F)
-            {
+            while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
                 this.prevRotationYaw += 360.0F;
             }
 
@@ -306,10 +281,8 @@
             float f1 = 0.99F;
             float f2 = 0.05F;
 
-            if (this.isInWater())
-            {
-                for (int i = 0; i < 4; ++i)
-                {
+            if (this.isInWater()) {
+                for (int i = 0; i < 4; ++i) {
                     float f3 = 0.25F;
                     this.world.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * 0.25D, this.posY - this.motionY * 0.25D, this.posZ - this.motionZ * 0.25D, this.motionX, this.motionY, this.motionZ);
                 }
@@ -317,17 +290,15 @@
                 f1 = 0.6F;
             }
 
-            if (this.isWet())
-            {
+            if (this.isWet()) {
                 this.extinguish();
             }
 
-            this.motionX *= (double)f1;
-            this.motionY *= (double)f1;
-            this.motionZ *= (double)f1;
+            this.motionX *= (double) f1;
+            this.motionY *= (double) f1;
+            this.motionZ *= (double) f1;
 
-            if (!this.hasNoGravity())
-            {
+            if (!this.hasNoGravity()) {
                 this.motionY -= 0.05000000074505806D;
             }
 
@@ -336,80 +307,68 @@
         }
     }
 
-    protected void onHit(RayTraceResult raytraceResultIn)
-    {
+    protected void onHit(RayTraceResult raytraceResultIn) {
         Entity entity = raytraceResultIn.entityHit;
-
-        if (entity != null)
-        {
+        org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, raytraceResultIn);
+        if (entity != null) {
             float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-            int i = MathHelper.ceil((double)f * this.damage);
+            int i = MathHelper.ceil((double) f * this.damage);
 
-            if (this.getIsCritical())
-            {
+            if (this.getIsCritical()) {
                 i += this.rand.nextInt(i / 2 + 2);
             }
 
             DamageSource damagesource;
 
-            if (this.shootingEntity == null)
-            {
+            if (this.shootingEntity == null) {
                 damagesource = DamageSource.causeArrowDamage(this, this);
-            }
-            else
-            {
+            } else {
                 damagesource = DamageSource.causeArrowDamage(this, this.shootingEntity);
             }
 
-            if (this.isBurning() && !(entity instanceof EntityEnderman))
-            {
-                entity.setFire(5);
+            if (this.isBurning() && !(entity instanceof EntityEnderman)) {
+//                entity.setFire(5);
+                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                if (!combustEvent.isCancelled()) {
+                    entity.setFire(combustEvent.getDuration());
+                }
             }
 
-            if (entity.attackEntityFrom(damagesource, (float)i))
-            {
-                if (entity instanceof EntityLivingBase)
-                {
-                    EntityLivingBase entitylivingbase = (EntityLivingBase)entity;
+            if (entity.attackEntityFrom(damagesource, (float) i)) {
+                if (entity instanceof EntityLivingBase) {
+                    EntityLivingBase entitylivingbase = (EntityLivingBase) entity;
 
-                    if (!this.world.isRemote)
-                    {
+                    if (!this.world.isRemote) {
                         entitylivingbase.setArrowCountInEntity(entitylivingbase.getArrowCountInEntity() + 1);
                     }
 
-                    if (this.knockbackStrength > 0)
-                    {
+                    if (this.knockbackStrength > 0) {
                         float f1 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
-                        if (f1 > 0.0F)
-                        {
-                            entitylivingbase.addVelocity(this.motionX * (double)this.knockbackStrength * 0.6000000238418579D / (double)f1, 0.1D, this.motionZ * (double)this.knockbackStrength * 0.6000000238418579D / (double)f1);
+                        if (f1 > 0.0F) {
+                            entitylivingbase.addVelocity(this.motionX * (double) this.knockbackStrength * 0.6000000238418579D / (double) f1, 0.1D, this.motionZ * (double) this.knockbackStrength * 0.6000000238418579D / (double) f1);
                         }
                     }
 
-                    if (this.shootingEntity instanceof EntityLivingBase)
-                    {
+                    if (this.shootingEntity instanceof EntityLivingBase) {
                         EnchantmentHelper.applyThornEnchantments(entitylivingbase, this.shootingEntity);
-                        EnchantmentHelper.applyArthropodEnchantments((EntityLivingBase)this.shootingEntity, entitylivingbase);
+                        EnchantmentHelper.applyArthropodEnchantments((EntityLivingBase) this.shootingEntity, entitylivingbase);
                     }
 
                     this.arrowHit(entitylivingbase);
 
-                    if (this.shootingEntity != null && entitylivingbase != this.shootingEntity && entitylivingbase instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP)
-                    {
-                        ((EntityPlayerMP)this.shootingEntity).connection.sendPacket(new SPacketChangeGameState(6, 0.0F));
+                    if (this.shootingEntity != null && entitylivingbase != this.shootingEntity && entitylivingbase instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP) {
+                        ((EntityPlayerMP) this.shootingEntity).connection.sendPacket(new SPacketChangeGameState(6, 0.0F));
                     }
                 }
 
                 this.playSound(SoundEvents.ENTITY_ARROW_HIT, 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 
-                if (!(entity instanceof EntityEnderman))
-                {
+                if (!(entity instanceof EntityEnderman)) {
                     this.setDead();
                 }
-            }
-            else
-            {
+            } else {
                 this.motionX *= -0.10000000149011612D;
                 this.motionY *= -0.10000000149011612D;
                 this.motionZ *= -0.10000000149011612D;
@@ -417,19 +376,15 @@
                 this.prevRotationYaw += 180.0F;
                 this.ticksInAir = 0;
 
-                if (!this.world.isRemote && this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ < 0.0010000000474974513D)
-                {
-                    if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED)
-                    {
+                if (!this.world.isRemote && this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ < 0.0010000000474974513D) {
+                    if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED) {
                         this.entityDropItem(this.getArrowStack(), 0.1F);
                     }
 
                     this.setDead();
                 }
             }
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = raytraceResultIn.getBlockPos();
             this.xTile = blockpos.getX();
             this.yTile = blockpos.getY();
@@ -437,63 +392,54 @@
             IBlockState iblockstate = this.world.getBlockState(blockpos);
             this.inTile = iblockstate.getBlock();
             this.inData = this.inTile.getMetaFromState(iblockstate);
-            this.motionX = (double)((float)(raytraceResultIn.hitVec.x - this.posX));
-            this.motionY = (double)((float)(raytraceResultIn.hitVec.y - this.posY));
-            this.motionZ = (double)((float)(raytraceResultIn.hitVec.z - this.posZ));
+            this.motionX = (double) ((float) (raytraceResultIn.hitVec.x - this.posX));
+            this.motionY = (double) ((float) (raytraceResultIn.hitVec.y - this.posY));
+            this.motionZ = (double) ((float) (raytraceResultIn.hitVec.z - this.posZ));
             float f2 = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-            this.posX -= this.motionX / (double)f2 * 0.05000000074505806D;
-            this.posY -= this.motionY / (double)f2 * 0.05000000074505806D;
-            this.posZ -= this.motionZ / (double)f2 * 0.05000000074505806D;
+            this.posX -= this.motionX / (double) f2 * 0.05000000074505806D;
+            this.posY -= this.motionY / (double) f2 * 0.05000000074505806D;
+            this.posZ -= this.motionZ / (double) f2 * 0.05000000074505806D;
             this.playSound(SoundEvents.ENTITY_ARROW_HIT, 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
             this.inGround = true;
             this.arrowShake = 7;
             this.setIsCritical(false);
 
-            if (iblockstate.getMaterial() != Material.AIR)
-            {
+            if (iblockstate.getMaterial() != Material.AIR) {
                 this.inTile.onEntityCollidedWithBlock(this.world, blockpos, iblockstate, this);
             }
         }
     }
 
-    public void move(MoverType type, double x, double y, double z)
-    {
+    public void move(MoverType type, double x, double y, double z) {
         super.move(type, x, y, z);
 
-        if (this.inGround)
-        {
+        if (this.inGround) {
             this.xTile = MathHelper.floor(this.posX);
             this.yTile = MathHelper.floor(this.posY);
             this.zTile = MathHelper.floor(this.posZ);
         }
     }
 
-    protected void arrowHit(EntityLivingBase living)
-    {
+    protected void arrowHit(EntityLivingBase living) {
     }
 
     @Nullable
-    protected Entity findEntityOnPath(Vec3d start, Vec3d end)
-    {
+    protected Entity findEntityOnPath(Vec3d start, Vec3d end) {
         Entity entity = null;
         List<Entity> list = this.world.getEntitiesInAABBexcluding(this, this.getEntityBoundingBox().expand(this.motionX, this.motionY, this.motionZ).grow(1.0D), ARROW_TARGETS);
         double d0 = 0.0D;
 
-        for (int i = 0; i < list.size(); ++i)
-        {
+        for (int i = 0; i < list.size(); ++i) {
             Entity entity1 = list.get(i);
 
-            if (entity1 != this.shootingEntity || this.ticksInAir >= 5)
-            {
+            if (entity1 != this.shootingEntity || this.ticksInAir >= 5) {
                 AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow(0.30000001192092896D);
                 RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(start, end);
 
-                if (raytraceresult != null)
-                {
+                if (raytraceresult != null) {
                     double d1 = start.squareDistanceTo(raytraceresult.hitVec);
 
-                    if (d1 < d0 || d0 == 0.0D)
-                    {
+                    if (d1 < d0 || d0 == 0.0D) {
                         entity = entity1;
                         d0 = d1;
                     }
@@ -504,44 +450,37 @@
         return entity;
     }
 
-    public static void registerFixesArrow(DataFixer fixer, String name)
-    {
+    public static void registerFixesArrow(DataFixer fixer, String name) {
     }
 
-    public static void registerFixesArrow(DataFixer fixer)
-    {
+    public static void registerFixesArrow(DataFixer fixer) {
         registerFixesArrow(fixer, "Arrow");
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         compound.setInteger("xTile", this.xTile);
         compound.setInteger("yTile", this.yTile);
         compound.setInteger("zTile", this.zTile);
-        compound.setShort("life", (short)this.ticksInGround);
+        compound.setShort("life", (short) this.ticksInGround);
         ResourceLocation resourcelocation = Block.REGISTRY.getNameForObject(this.inTile);
         compound.setString("inTile", resourcelocation == null ? "" : resourcelocation.toString());
-        compound.setByte("inData", (byte)this.inData);
-        compound.setByte("shake", (byte)this.arrowShake);
-        compound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-        compound.setByte("pickup", (byte)this.pickupStatus.ordinal());
+        compound.setByte("inData", (byte) this.inData);
+        compound.setByte("shake", (byte) this.arrowShake);
+        compound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
+        compound.setByte("pickup", (byte) this.pickupStatus.ordinal());
         compound.setDouble("damage", this.damage);
         compound.setBoolean("crit", this.getIsCritical());
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         this.xTile = compound.getInteger("xTile");
         this.yTile = compound.getInteger("yTile");
         this.zTile = compound.getInteger("zTile");
         this.ticksInGround = compound.getShort("life");
 
-        if (compound.hasKey("inTile", 8))
-        {
+        if (compound.hasKey("inTile", 8)) {
             this.inTile = Block.getBlockFromName(compound.getString("inTile"));
-        }
-        else
-        {
+        } else {
             this.inTile = Block.getBlockById(compound.getByte("inTile") & 255);
         }
 
@@ -549,36 +488,39 @@
         this.arrowShake = compound.getByte("shake") & 255;
         this.inGround = compound.getByte("inGround") == 1;
 
-        if (compound.hasKey("damage", 99))
-        {
+        if (compound.hasKey("damage", 99)) {
             this.damage = compound.getDouble("damage");
         }
 
-        if (compound.hasKey("pickup", 99))
-        {
+        if (compound.hasKey("pickup", 99)) {
             this.pickupStatus = EntityArrow.PickupStatus.getByOrdinal(compound.getByte("pickup"));
-        }
-        else if (compound.hasKey("player", 99))
-        {
+        } else if (compound.hasKey("player", 99)) {
             this.pickupStatus = compound.getBoolean("player") ? EntityArrow.PickupStatus.ALLOWED : EntityArrow.PickupStatus.DISALLOWED;
         }
 
         this.setIsCritical(compound.getBoolean("crit"));
     }
 
-    public void onCollideWithPlayer(EntityPlayer entityIn)
-    {
-        if (!this.world.isRemote && this.inGround && this.arrowShake <= 0)
-        {
-            boolean flag = this.pickupStatus == EntityArrow.PickupStatus.ALLOWED || this.pickupStatus == EntityArrow.PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+    public void onCollideWithPlayer(EntityPlayer entityIn) {
+        if (!this.world.isRemote && this.inGround && this.arrowShake <= 0) {
+            ItemStack itemstack = this.getArrowStack();
+            EntityItem item = new EntityItem(this.world, this.posX, this.posY, this.posZ, itemstack);
+            if (this.pickupStatus == PickupStatus.ALLOWED && entityIn.inventory.canHold(itemstack) > 0) {
+                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(this.world.getServer(), this, item), (org.bukkit.entity.Arrow) this.getBukkitEntity());
+                // event.setCancelled(!entityhuman.thisisatest); TODO
+                this.world.getServer().getPluginManager().callEvent(event);
 
-            if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(this.getArrowStack()))
-            {
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            boolean flag = this.pickupStatus == PickupStatus.ALLOWED || this.pickupStatus == PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+
+            if (this.pickupStatus == PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(item.getItem())) {
                 flag = false;
             }
 
-            if (flag)
-            {
+            if (flag) {
                 entityIn.onItemPickup(this, 1);
                 this.setDead();
             }
@@ -587,88 +529,76 @@
 
     protected abstract ItemStack getArrowStack();
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    public void setDamage(double damageIn)
-    {
+    public void setDamage(double damageIn) {
         this.damage = damageIn;
     }
 
-    public double getDamage()
-    {
+    public double getDamage() {
         return this.damage;
     }
 
-    public void setKnockbackStrength(int knockbackStrengthIn)
-    {
+    public void setKnockbackStrength(int knockbackStrengthIn) {
         this.knockbackStrength = knockbackStrengthIn;
     }
 
-    public boolean canBeAttackedWithItem()
-    {
+    public boolean canBeAttackedWithItem() {
         return false;
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return 0.0F;
     }
 
-    public void setIsCritical(boolean critical)
-    {
-        byte b0 = ((Byte)this.dataManager.get(CRITICAL)).byteValue();
+    public void setIsCritical(boolean critical) {
+        byte b0 = ((Byte) this.dataManager.get(CRITICAL)).byteValue();
 
-        if (critical)
-        {
-            this.dataManager.set(CRITICAL, Byte.valueOf((byte)(b0 | 1)));
+        if (critical) {
+            this.dataManager.set(CRITICAL, Byte.valueOf((byte) (b0 | 1)));
+        } else {
+            this.dataManager.set(CRITICAL, Byte.valueOf((byte) (b0 & -2)));
         }
-        else
-        {
-            this.dataManager.set(CRITICAL, Byte.valueOf((byte)(b0 & -2)));
-        }
     }
 
-    public boolean getIsCritical()
-    {
-        byte b0 = ((Byte)this.dataManager.get(CRITICAL)).byteValue();
+    public boolean getIsCritical() {
+        byte b0 = ((Byte) this.dataManager.get(CRITICAL)).byteValue();
         return (b0 & 1) != 0;
     }
 
-    public void setEnchantmentEffectsFromEntity(EntityLivingBase p_190547_1_, float p_190547_2_)
-    {
+    public void setEnchantmentEffectsFromEntity(EntityLivingBase p_190547_1_, float p_190547_2_) {
         int i = EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.POWER, p_190547_1_);
         int j = EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.PUNCH, p_190547_1_);
-        this.setDamage((double)(p_190547_2_ * 2.0F) + this.rand.nextGaussian() * 0.25D + (double)((float)this.world.getDifficulty().getDifficultyId() * 0.11F));
+        this.setDamage((double) (p_190547_2_ * 2.0F) + this.rand.nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().getDifficultyId() * 0.11F));
 
-        if (i > 0)
-        {
-            this.setDamage(this.getDamage() + (double)i * 0.5D + 0.5D);
+        if (i > 0) {
+            this.setDamage(this.getDamage() + (double) i * 0.5D + 0.5D);
         }
 
-        if (j > 0)
-        {
+        if (j > 0) {
             this.setKnockbackStrength(j);
         }
 
-        if (EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.FLAME, p_190547_1_) > 0)
-        {
-            this.setFire(100);
+        if (EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.FLAME, p_190547_1_) > 0) {
+//            this.setFire(100);
+            EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 100);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                this.setFire(event.getDuration());
+            }
         }
     }
 
-    public static enum PickupStatus
-    {
+    public static enum PickupStatus {
         DISALLOWED,
         ALLOWED,
         CREATIVE_ONLY;
 
-        public static EntityArrow.PickupStatus getByOrdinal(int ordinal)
-        {
-            if (ordinal < 0 || ordinal > values().length)
-            {
+        public static EntityArrow.PickupStatus getByOrdinal(int ordinal) {
+            if (ordinal < 0 || ordinal > values().length) {
                 ordinal = 0;
             }
 
