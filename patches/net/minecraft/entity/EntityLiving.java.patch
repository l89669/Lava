--- ../src-base/minecraft/net/minecraft/entity/EntityLiving.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityLiving.java
@@ -1,32 +1,20 @@
 package net.minecraft.entity;
 
 import com.google.common.collect.Maps;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.Random;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
-import net.minecraft.entity.ai.EntityAITasks;
-import net.minecraft.entity.ai.EntityJumpHelper;
-import net.minecraft.entity.ai.EntityLookHelper;
-import net.minecraft.entity.ai.EntityMoveHelper;
-import net.minecraft.entity.ai.EntitySenses;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.ai.attributes.AttributeModifier;
 import net.minecraft.entity.item.EntityBoat;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityGhast;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.inventory.EntityEquipmentSlot;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemArmor;
-import net.minecraft.item.ItemBow;
-import net.minecraft.item.ItemStack;
-import net.minecraft.item.ItemSword;
+import net.minecraft.item.*;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagFloat;
 import net.minecraft.nbt.NBTTagList;
@@ -37,13 +25,7 @@
 import net.minecraft.pathfinding.PathNavigate;
 import net.minecraft.pathfinding.PathNavigateGround;
 import net.minecraft.pathfinding.PathNodeType;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.EnumHandSide;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.NonNullList;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SoundEvent;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
@@ -57,9 +39,21 @@
 import net.minecraft.world.storage.loot.LootTable;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
 
-public abstract class EntityLiving extends EntityLivingBase
-{
+import javax.annotation.Nullable;
+import java.util.Arrays;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+
+public abstract class EntityLiving extends EntityLivingBase {
     private static final DataParameter<Byte> AI_FLAGS = EntityDataManager.<Byte>createKey(EntityLiving.class, DataSerializers.BYTE);
     public int livingSoundTime;
     protected int experienceValue;
@@ -68,16 +62,15 @@
     protected EntityJumpHelper jumpHelper;
     private final EntityBodyHelper bodyHelper;
     protected PathNavigate navigator;
-    public final EntityAITasks tasks;
-    public final EntityAITasks targetTasks;
+    public EntityAITasks tasks;
+    public EntityAITasks targetTasks;
     private EntityLivingBase attackTarget;
     private final EntitySenses senses;
     private final NonNullList<ItemStack> inventoryHands = NonNullList.<ItemStack>withSize(2, ItemStack.EMPTY);
-    protected float[] inventoryHandsDropChances = new float[2];
+    public float[] inventoryHandsDropChances = new float[2];
     private final NonNullList<ItemStack> inventoryArmor = NonNullList.<ItemStack>withSize(4, ItemStack.EMPTY);
-    protected float[] inventoryArmorDropChances = new float[4];
-    private boolean canPickUpLoot;
-    private boolean persistenceRequired;
+    public float[] inventoryArmorDropChances = new float[4];
+    public boolean persistenceRequired;
     private final Map<PathNodeType, Float> mapPathPriority = Maps.newEnumMap(PathNodeType.class);
     private ResourceLocation deathLootTable;
     private long deathLootTableSeed;
@@ -85,8 +78,7 @@
     private Entity leashHolder;
     private NBTTagCompound leashNBTTag;
 
-    public EntityLiving(World worldIn)
-    {
+    public EntityLiving(World worldIn) {
         super(worldIn);
         this.tasks = new EntityAITasks(worldIn != null && worldIn.profiler != null ? worldIn.profiler : null);
         this.targetTasks = new EntityAITasks(worldIn != null && worldIn.profiler != null ? worldIn.profiler : null);
@@ -99,117 +91,128 @@
         Arrays.fill(this.inventoryArmorDropChances, 0.085F);
         Arrays.fill(this.inventoryHandsDropChances, 0.085F);
 
-        if (worldIn != null && !worldIn.isRemote)
-        {
+        if (worldIn != null && !worldIn.isRemote) {
             this.initEntityAI();
         }
+
+        // CraftBukkit start - default persistance to type's persistance value
+        this.persistenceRequired = !canDespawn();
+        // CraftBukkit end
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getAttributeMap().registerAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(16.0D);
     }
 
-    protected PathNavigate createNavigator(World worldIn)
-    {
+    protected PathNavigate createNavigator(World worldIn) {
         return new PathNavigateGround(this, worldIn);
     }
 
-    public float getPathPriority(PathNodeType nodeType)
-    {
+    public float getPathPriority(PathNodeType nodeType) {
         Float f = this.mapPathPriority.get(nodeType);
         return f == null ? nodeType.getPriority() : f.floatValue();
     }
 
-    public void setPathPriority(PathNodeType nodeType, float priority)
-    {
+    public void setPathPriority(PathNodeType nodeType, float priority) {
         this.mapPathPriority.put(nodeType, Float.valueOf(priority));
     }
 
-    protected EntityBodyHelper createBodyHelper()
-    {
+    protected EntityBodyHelper createBodyHelper() {
         return new EntityBodyHelper(this);
     }
 
-    public EntityLookHelper getLookHelper()
-    {
+    public EntityLookHelper getLookHelper() {
         return this.lookHelper;
     }
 
-    public EntityMoveHelper getMoveHelper()
-    {
+    public EntityMoveHelper getMoveHelper() {
         return this.moveHelper;
     }
 
-    public EntityJumpHelper getJumpHelper()
-    {
+    public EntityJumpHelper getJumpHelper() {
         return this.jumpHelper;
     }
 
-    public PathNavigate getNavigator()
-    {
+    public PathNavigate getNavigator() {
         return this.navigator;
     }
 
-    public EntitySenses getEntitySenses()
-    {
+    public EntitySenses getEntitySenses() {
         return this.senses;
     }
 
     @Nullable
-    public EntityLivingBase getAttackTarget()
-    {
+    public EntityLivingBase getAttackTarget() {
         return this.attackTarget;
     }
 
-    public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn)
-    {
+    public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn) {
         this.attackTarget = entitylivingbaseIn;
         net.minecraftforge.common.ForgeHooks.onLivingSetAttackTarget(this, entitylivingbaseIn);
+        // CraftBukkit start - fire event
+        setAttackTarget(entitylivingbaseIn, EntityTargetEvent.TargetReason.UNKNOWN, true);
     }
 
-    public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
-    {
+    public boolean setAttackTarget(@Nullable EntityLivingBase entityliving, EntityTargetEvent.TargetReason reason, boolean fireEvent) {
+        if (getAttackTarget() == entityliving) return false;
+        if (fireEvent) {
+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN && getAttackTarget() != null && entityliving == null) {
+                reason = getAttackTarget().isEntityAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
+            }
+            CraftLivingEntity ctarget = null;
+            if (entityliving != null) {
+                ctarget = (CraftLivingEntity) entityliving.getBukkitEntity();
+            }
+            EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
+            world.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            if (event.getTarget() != null) {
+                entityliving = ((CraftLivingEntity) event.getTarget()).getHandle();
+            } else {
+                entityliving = null;
+            }
+        }
+        this.attackTarget = entityliving;
+        return true;
+        // CraftBukkit end
+    }
+
+    public boolean canAttackClass(Class<? extends EntityLivingBase> cls) {
         return cls != EntityGhast.class;
     }
 
-    public void eatGrassBonus()
-    {
+    public void eatGrassBonus() {
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
-        this.dataManager.register(AI_FLAGS, Byte.valueOf((byte)0));
+        this.dataManager.register(AI_FLAGS, Byte.valueOf((byte) 0));
     }
 
-    public int getTalkInterval()
-    {
+    public int getTalkInterval() {
         return 80;
     }
 
-    public void playLivingSound()
-    {
+    public void playLivingSound() {
         SoundEvent soundevent = this.getAmbientSound();
 
-        if (soundevent != null)
-        {
+        if (soundevent != null) {
             this.playSound(soundevent, this.getSoundVolume(), this.getSoundPitch());
         }
     }
 
-    public void onEntityUpdate()
-    {
+    public void onEntityUpdate() {
         super.onEntityUpdate();
         this.world.profiler.startSection("mobBaseTick");
 
-        if (this.isEntityAlive() && this.rand.nextInt(1000) < this.livingSoundTime++)
-        {
+        if (this.isEntityAlive() && this.rand.nextInt(1000) < this.livingSoundTime++) {
             this.applyEntityAI();
             this.playLivingSound();
         }
@@ -217,89 +220,67 @@
         this.world.profiler.endSection();
     }
 
-    protected void playHurtSound(DamageSource source)
-    {
+    protected void playHurtSound(DamageSource source) {
         this.applyEntityAI();
         super.playHurtSound(source);
     }
 
-    private void applyEntityAI()
-    {
+    private void applyEntityAI() {
         this.livingSoundTime = -this.getTalkInterval();
     }
 
-    protected int getExperiencePoints(EntityPlayer player)
-    {
-        if (this.experienceValue > 0)
-        {
+    protected int getExperiencePoints(EntityPlayer player) {
+        if (this.experienceValue > 0) {
             int i = this.experienceValue;
 
-            for (int j = 0; j < this.inventoryArmor.size(); ++j)
-            {
-                if (!((ItemStack)this.inventoryArmor.get(j)).isEmpty() && this.inventoryArmorDropChances[j] <= 1.0F)
-                {
+            for (int j = 0; j < this.inventoryArmor.size(); ++j) {
+                if (!((ItemStack) this.inventoryArmor.get(j)).isEmpty() && this.inventoryArmorDropChances[j] <= 1.0F) {
                     i += 1 + this.rand.nextInt(3);
                 }
             }
 
-            for (int k = 0; k < this.inventoryHands.size(); ++k)
-            {
-                if (!((ItemStack)this.inventoryHands.get(k)).isEmpty() && this.inventoryHandsDropChances[k] <= 1.0F)
-                {
+            for (int k = 0; k < this.inventoryHands.size(); ++k) {
+                if (!((ItemStack) this.inventoryHands.get(k)).isEmpty() && this.inventoryHandsDropChances[k] <= 1.0F) {
                     i += 1 + this.rand.nextInt(3);
                 }
             }
 
             return i;
-        }
-        else
-        {
+        } else {
             return this.experienceValue;
         }
     }
 
-    public void spawnExplosionParticle()
-    {
-        if (this.world.isRemote)
-        {
-            for (int i = 0; i < 20; ++i)
-            {
+    public void spawnExplosionParticle() {
+        if (this.world.isRemote) {
+            for (int i = 0; i < 20; ++i) {
                 double d0 = this.rand.nextGaussian() * 0.02D;
                 double d1 = this.rand.nextGaussian() * 0.02D;
                 double d2 = this.rand.nextGaussian() * 0.02D;
                 double d3 = 10.0D;
-                this.world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d0 * 10.0D, this.posY + (double)(this.rand.nextFloat() * this.height) - d1 * 10.0D, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d2 * 10.0D, d0, d1, d2);
+                this.world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width - d0 * 10.0D, this.posY + (double) (this.rand.nextFloat() * this.height) - d1 * 10.0D, this.posZ + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width - d2 * 10.0D, d0, d1, d2);
             }
+        } else {
+            this.world.setEntityState(this, (byte) 20);
         }
-        else
-        {
-            this.world.setEntityState(this, (byte)20);
-        }
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 20)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 20) {
             this.spawnExplosionParticle();
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
 
-        if (!this.world.isRemote)
-        {
+        if (!this.world.isRemote) {
             this.updateLeashedState();
 
-            if (this.ticksExisted % 5 == 0)
-            {
+            if (this.ticksExisted % 5 == 0) {
                 boolean flag = !(this.getControllingPassenger() instanceof EntityLiving);
                 boolean flag1 = !(this.getRidingEntity() instanceof EntityBoat);
                 this.tasks.setControlFlag(1, flag);
@@ -309,62 +290,51 @@
         }
     }
 
-    protected float updateDistance(float p_110146_1_, float p_110146_2_)
-    {
+    protected float updateDistance(float p_110146_1_, float p_110146_2_) {
         this.bodyHelper.updateRenderAngles();
         return p_110146_2_;
     }
 
     @Nullable
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return null;
     }
 
     @Nullable
-    protected Item getDropItem()
-    {
+    protected Item getDropItem() {
         return null;
     }
 
-    protected void dropFewItems(boolean wasRecentlyHit, int lootingModifier)
-    {
+    protected void dropFewItems(boolean wasRecentlyHit, int lootingModifier) {
         Item item = this.getDropItem();
 
-        if (item != null)
-        {
+        if (item != null) {
             int i = this.rand.nextInt(3);
 
-            if (lootingModifier > 0)
-            {
+            if (lootingModifier > 0) {
                 i += this.rand.nextInt(lootingModifier + 1);
             }
 
-            for (int j = 0; j < i; ++j)
-            {
+            for (int j = 0; j < i; ++j) {
                 this.dropItem(item, 1);
             }
         }
     }
 
-    public static void registerFixesMob(DataFixer fixer, Class<?> name)
-    {
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(name, new String[] {"ArmorItems", "HandItems"}));
+    public static void registerFixesMob(DataFixer fixer, Class<?> name) {
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(name, new String[]{"ArmorItems", "HandItems"}));
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
-        compound.setBoolean("CanPickUpLoot", this.canPickUpLoot());
+        compound.setBoolean("CanPickUpLoot", this.thisisatestof());
         compound.setBoolean("PersistenceRequired", this.persistenceRequired);
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (ItemStack itemstack : this.inventoryArmor)
-        {
+        for (ItemStack itemstack : this.inventoryArmor) {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 itemstack.writeToNBT(nbttagcompound);
             }
 
@@ -374,12 +344,10 @@
         compound.setTag("ArmorItems", nbttaglist);
         NBTTagList nbttaglist1 = new NBTTagList();
 
-        for (ItemStack itemstack1 : this.inventoryHands)
-        {
+        for (ItemStack itemstack1 : this.inventoryHands) {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
-            if (!itemstack1.isEmpty())
-            {
+            if (!itemstack1.isEmpty()) {
                 itemstack1.writeToNBT(nbttagcompound1);
             }
 
@@ -389,34 +357,28 @@
         compound.setTag("HandItems", nbttaglist1);
         NBTTagList nbttaglist2 = new NBTTagList();
 
-        for (float f : this.inventoryArmorDropChances)
-        {
+        for (float f : this.inventoryArmorDropChances) {
             nbttaglist2.appendTag(new NBTTagFloat(f));
         }
 
         compound.setTag("ArmorDropChances", nbttaglist2);
         NBTTagList nbttaglist3 = new NBTTagList();
 
-        for (float f1 : this.inventoryHandsDropChances)
-        {
+        for (float f1 : this.inventoryHandsDropChances) {
             nbttaglist3.appendTag(new NBTTagFloat(f1));
         }
 
         compound.setTag("HandDropChances", nbttaglist3);
         compound.setBoolean("Leashed", this.isLeashed);
 
-        if (this.leashHolder != null)
-        {
+        if (this.leashHolder != null) {
             NBTTagCompound nbttagcompound2 = new NBTTagCompound();
 
-            if (this.leashHolder instanceof EntityLivingBase)
-            {
+            if (this.leashHolder instanceof EntityLivingBase) {
                 UUID uuid = this.leashHolder.getUniqueID();
                 nbttagcompound2.setUniqueId("UUID", uuid);
-            }
-            else if (this.leashHolder instanceof EntityHanging)
-            {
-                BlockPos blockpos = ((EntityHanging)this.leashHolder).getHangingPosition();
+            } else if (this.leashHolder instanceof EntityHanging) {
+                BlockPos blockpos = ((EntityHanging) this.leashHolder).getHangingPosition();
                 nbttagcompound2.setInteger("X", blockpos.getX());
                 nbttagcompound2.setInteger("Y", blockpos.getY());
                 nbttagcompound2.setInteger("Z", blockpos.getZ());
@@ -427,84 +389,78 @@
 
         compound.setBoolean("LeftHanded", this.isLeftHanded());
 
-        if (this.deathLootTable != null)
-        {
+        if (this.deathLootTable != null) {
             compound.setString("DeathLootTable", this.deathLootTable.toString());
 
-            if (this.deathLootTableSeed != 0L)
-            {
+            if (this.deathLootTableSeed != 0L) {
                 compound.setLong("DeathLootTableSeed", this.deathLootTableSeed);
             }
         }
 
-        if (this.isAIDisabled())
-        {
+        if (this.isAIDisabled()) {
             compound.setBoolean("NoAI", this.isAIDisabled());
         }
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
 
-        if (compound.hasKey("CanPickUpLoot", 1))
-        {
-            this.setCanPickUpLoot(compound.getBoolean("CanPickUpLoot"));
+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
+        if (compound.hasKey("CanPickUpLoot", 1)) {
+            // this.idkwhyreyoudoingthis(compound.getBoolean("CanPickUpLoot"));
+            boolean data = compound.getBoolean("CanPickUpLoot");
+            if (isLevelAtLeast(compound, 1) || data) {
+                this.idkwhyreyoudoingthis(data);
+            }
         }
 
-        this.persistenceRequired = compound.getBoolean("PersistenceRequired");
+        // this.persistenceRequired = compound.getBoolean("PersistenceRequired");
+        boolean data = compound.getBoolean("PersistenceRequired");
+        if (isLevelAtLeast(compound, 1) || data) {
+            this.persistenceRequired = data;
+        }
 
-        if (compound.hasKey("ArmorItems", 9))
-        {
+        if (compound.hasKey("ArmorItems", 9)) {
             NBTTagList nbttaglist = compound.getTagList("ArmorItems", 10);
 
-            for (int i = 0; i < this.inventoryArmor.size(); ++i)
-            {
+            for (int i = 0; i < this.inventoryArmor.size(); ++i) {
                 this.inventoryArmor.set(i, new ItemStack(nbttaglist.getCompoundTagAt(i)));
             }
         }
 
-        if (compound.hasKey("HandItems", 9))
-        {
+        if (compound.hasKey("HandItems", 9)) {
             NBTTagList nbttaglist1 = compound.getTagList("HandItems", 10);
 
-            for (int j = 0; j < this.inventoryHands.size(); ++j)
-            {
+            for (int j = 0; j < this.inventoryHands.size(); ++j) {
                 this.inventoryHands.set(j, new ItemStack(nbttaglist1.getCompoundTagAt(j)));
             }
         }
 
-        if (compound.hasKey("ArmorDropChances", 9))
-        {
+        if (compound.hasKey("ArmorDropChances", 9)) {
             NBTTagList nbttaglist2 = compound.getTagList("ArmorDropChances", 5);
 
-            for (int k = 0; k < nbttaglist2.tagCount(); ++k)
-            {
+            for (int k = 0; k < nbttaglist2.tagCount(); ++k) {
                 this.inventoryArmorDropChances[k] = nbttaglist2.getFloatAt(k);
             }
         }
 
-        if (compound.hasKey("HandDropChances", 9))
-        {
+        if (compound.hasKey("HandDropChances", 9)) {
             NBTTagList nbttaglist3 = compound.getTagList("HandDropChances", 5);
 
-            for (int l = 0; l < nbttaglist3.tagCount(); ++l)
-            {
+            for (int l = 0; l < nbttaglist3.tagCount(); ++l) {
                 this.inventoryHandsDropChances[l] = nbttaglist3.getFloatAt(l);
             }
         }
 
         this.isLeashed = compound.getBoolean("Leashed");
 
-        if (this.isLeashed && compound.hasKey("Leash", 10))
-        {
+        if (this.isLeashed && compound.hasKey("Leash", 10)) {
             this.leashNBTTag = compound.getCompoundTag("Leash");
         }
 
         this.setLeftHanded(compound.getBoolean("LeftHanded"));
 
-        if (compound.hasKey("DeathLootTable", 8))
-        {
+        if (compound.hasKey("DeathLootTable", 8)) {
             this.deathLootTable = new ResourceLocation(compound.getString("DeathLootTable"));
             this.deathLootTableSeed = compound.getLong("DeathLootTableSeed");
         }
@@ -513,76 +469,60 @@
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return null;
     }
 
-    protected void dropLoot(boolean wasRecentlyHit, int lootingModifier, DamageSource source)
-    {
+    protected void dropLoot(boolean wasRecentlyHit, int lootingModifier, DamageSource source) {
         ResourceLocation resourcelocation = this.deathLootTable;
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             resourcelocation = this.getLootTable();
         }
 
-        if (resourcelocation != null)
-        {
+        if (resourcelocation != null) {
             LootTable loottable = this.world.getLootTableManager().getLootTableFromLocation(resourcelocation);
             this.deathLootTable = null;
-            LootContext.Builder lootcontext$builder = (new LootContext.Builder((WorldServer)this.world)).withLootedEntity(this).withDamageSource(source);
+            LootContext.Builder lootcontext$builder = (new LootContext.Builder((WorldServer) this.world)).withLootedEntity(this).withDamageSource(source);
 
-            if (wasRecentlyHit && this.attackingPlayer != null)
-            {
+            if (wasRecentlyHit && this.attackingPlayer != null) {
                 lootcontext$builder = lootcontext$builder.withPlayer(this.attackingPlayer).withLuck(this.attackingPlayer.getLuck());
             }
 
-            for (ItemStack itemstack : loottable.generateLootForPools(this.deathLootTableSeed == 0L ? this.rand : new Random(this.deathLootTableSeed), lootcontext$builder.build()))
-            {
+            for (ItemStack itemstack : loottable.generateLootForPools(this.deathLootTableSeed == 0L ? this.rand : new Random(this.deathLootTableSeed), lootcontext$builder.build())) {
                 this.entityDropItem(itemstack, 0.0F);
             }
 
             this.dropEquipment(wasRecentlyHit, lootingModifier);
-        }
-        else
-        {
+        } else {
             super.dropLoot(wasRecentlyHit, lootingModifier, source);
         }
     }
 
-    public void setMoveForward(float amount)
-    {
+    public void setMoveForward(float amount) {
         this.moveForward = amount;
     }
 
-    public void setMoveVertical(float amount)
-    {
+    public void setMoveVertical(float amount) {
         this.moveVertical = amount;
     }
 
-    public void setMoveStrafing(float amount)
-    {
+    public void setMoveStrafing(float amount) {
         this.moveStrafing = amount;
     }
 
-    public void setAIMoveSpeed(float speedIn)
-    {
+    public void setAIMoveSpeed(float speedIn) {
         super.setAIMoveSpeed(speedIn);
         this.setMoveForward(speedIn);
     }
 
-    public void onLivingUpdate()
-    {
+    public void onLivingUpdate() {
         super.onLivingUpdate();
         this.world.profiler.startSection("looting");
 
-        if (!this.world.isRemote && this.canPickUpLoot() && !this.dead && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this))
-        {
-            for (EntityItem entityitem : this.world.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().grow(1.0D, 0.0D, 1.0D)))
-            {
-                if (!entityitem.isDead && !entityitem.getItem().isEmpty() && !entityitem.cannotPickup())
-                {
+        if (!this.world.isRemote && this.thisisatestof() && !this.dead && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this)) {
+            for (EntityItem entityitem : this.world.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().grow(1.0D, 0.0D, 1.0D))) {
+                if (!entityitem.isDead && !entityitem.getItem().isEmpty() && !entityitem.cannotPickup()) {
                     this.updateEquipmentIfNeeded(entityitem);
                 }
             }
@@ -591,93 +531,74 @@
         this.world.profiler.endSection();
     }
 
-    protected void updateEquipmentIfNeeded(EntityItem itemEntity)
-    {
+    protected void updateEquipmentIfNeeded(EntityItem itemEntity) {
         ItemStack itemstack = itemEntity.getItem();
         EntityEquipmentSlot entityequipmentslot = getSlotForItemStack(itemstack);
         boolean flag = true;
         ItemStack itemstack1 = this.getItemStackFromSlot(entityequipmentslot);
 
-        if (!itemstack1.isEmpty())
-        {
-            if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.HAND)
-            {
-                if (itemstack.getItem() instanceof ItemSword && !(itemstack1.getItem() instanceof ItemSword))
-                {
+        if (!itemstack1.isEmpty()) {
+            if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.HAND) {
+                if (itemstack.getItem() instanceof ItemSword && !(itemstack1.getItem() instanceof ItemSword)) {
                     flag = true;
-                }
-                else if (itemstack.getItem() instanceof ItemSword && itemstack1.getItem() instanceof ItemSword)
-                {
-                    ItemSword itemsword = (ItemSword)itemstack.getItem();
-                    ItemSword itemsword1 = (ItemSword)itemstack1.getItem();
+                } else if (itemstack.getItem() instanceof ItemSword && itemstack1.getItem() instanceof ItemSword) {
+                    ItemSword itemsword = (ItemSword) itemstack.getItem();
+                    ItemSword itemsword1 = (ItemSword) itemstack1.getItem();
 
-                    if (itemsword.getAttackDamage() == itemsword1.getAttackDamage())
-                    {
+                    if (itemsword.getAttackDamage() == itemsword1.getAttackDamage()) {
                         flag = itemstack.getMetadata() > itemstack1.getMetadata() || itemstack.hasTagCompound() && !itemstack1.hasTagCompound();
-                    }
-                    else
-                    {
+                    } else {
                         flag = itemsword.getAttackDamage() > itemsword1.getAttackDamage();
                     }
-                }
-                else if (itemstack.getItem() instanceof ItemBow && itemstack1.getItem() instanceof ItemBow)
-                {
+                } else if (itemstack.getItem() instanceof ItemBow && itemstack1.getItem() instanceof ItemBow) {
                     flag = itemstack.hasTagCompound() && !itemstack1.hasTagCompound();
-                }
-                else
-                {
+                } else {
                     flag = false;
                 }
-            }
-            else if (itemstack.getItem() instanceof ItemArmor && !(itemstack1.getItem() instanceof ItemArmor))
-            {
+            } else if (itemstack.getItem() instanceof ItemArmor && !(itemstack1.getItem() instanceof ItemArmor)) {
                 flag = true;
-            }
-            else if (itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor && !EnchantmentHelper.hasBindingCurse(itemstack1))
-            {
-                ItemArmor itemarmor = (ItemArmor)itemstack.getItem();
-                ItemArmor itemarmor1 = (ItemArmor)itemstack1.getItem();
+            } else if (itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor && !EnchantmentHelper.hasBindingCurse(itemstack1)) {
+                ItemArmor itemarmor = (ItemArmor) itemstack.getItem();
+                ItemArmor itemarmor1 = (ItemArmor) itemstack1.getItem();
 
-                if (itemarmor.damageReduceAmount == itemarmor1.damageReduceAmount)
-                {
+                if (itemarmor.damageReduceAmount == itemarmor1.damageReduceAmount) {
                     flag = itemstack.getMetadata() > itemstack1.getMetadata() || itemstack.hasTagCompound() && !itemstack1.hasTagCompound();
-                }
-                else
-                {
+                } else {
                     flag = itemarmor.damageReduceAmount > itemarmor1.damageReduceAmount;
                 }
-            }
-            else
-            {
+            } else {
                 flag = false;
             }
         }
 
-        if (flag && this.canEquipItem(itemstack))
-        {
+        // if (flag && this.canEquipItem(itemstack)) {
+        boolean canPickup = flag && this.canEquipItem(itemstack);
+
+        EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((LivingEntity) getBukkitEntity(), (org.bukkit.entity.Item) itemEntity.getBukkitEntity(), 0);
+        entityEvent.setCancelled(!canPickup);
+        this.world.getServer().getPluginManager().callEvent(entityEvent);
+        canPickup = !entityEvent.isCancelled();
+        if (canPickup) {
             double d0;
 
-            switch (entityequipmentslot.getSlotType())
-            {
+            switch (entityequipmentslot.getSlotType()) {
                 case HAND:
-                    d0 = (double)this.inventoryHandsDropChances[entityequipmentslot.getIndex()];
+                    d0 = (double) this.inventoryHandsDropChances[entityequipmentslot.getIndex()];
                     break;
                 case ARMOR:
-                    d0 = (double)this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
+                    d0 = (double) this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
                     break;
                 default:
                     d0 = 0.0D;
             }
 
-            if (!itemstack1.isEmpty() && (double)(this.rand.nextFloat() - 0.1F) < d0)
-            {
+            if (!itemstack1.isEmpty() && (double) (this.rand.nextFloat() - 0.1F) < d0) {
                 this.entityDropItem(itemstack1, 0.0F);
             }
 
             this.setItemStackToSlot(entityequipmentslot, itemstack);
 
-            switch (entityequipmentslot.getSlotType())
-            {
+            switch (entityequipmentslot.getSlotType()) {
                 case HAND:
                     this.inventoryHandsDropChances[entityequipmentslot.getIndex()] = 2.0F;
                     break;
@@ -691,68 +612,58 @@
         }
     }
 
-    protected boolean canEquipItem(ItemStack stack)
-    {
+    protected boolean canEquipItem(ItemStack stack) {
         return true;
     }
 
-    protected boolean canDespawn()
-    {
+    public boolean canDespawn() {
         return true;
     }
 
-    protected void despawnEntity()
-    {
+    protected void despawnEntity() {
         net.minecraftforge.fml.common.eventhandler.Event.Result result = null;
-        if (this.persistenceRequired)
-        {
+        if (this.persistenceRequired) {
             this.idleTime = 0;
-        }
-        else if ((this.idleTime & 0x1F) == 0x1F && (result = net.minecraftforge.event.ForgeEventFactory.canEntityDespawn(this)) != net.minecraftforge.fml.common.eventhandler.Event.Result.DEFAULT)
-        {
-            if (result == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
-            {
+        } else if ((this.idleTime & 0x1F) == 0x1F && (result = net.minecraftforge.event.ForgeEventFactory.canEntityDespawn(this)) != net.minecraftforge.fml.common.eventhandler.Event.Result.DEFAULT) {
+            if (result == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY) {
                 this.idleTime = 0;
-            }
-            else
-            {
+            } else {
                 this.setDead();
             }
-        }
-        else
-        {
+        } else {
             Entity entity = this.world.getClosestPlayerToEntity(this, -1.0D);
 
-            if (entity != null)
-            {
+            if (entity != null) {
                 double d0 = entity.posX - this.posX;
                 double d1 = entity.posY - this.posY;
                 double d2 = entity.posZ - this.posZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (this.canDespawn() && d3 > 16384.0D)
+                if (/*this.canDespawn() && */d3 > 16384.0D) // CraftBukkit - remove canDespawn() check
                 {
                     this.setDead();
                 }
 
-                if (this.idleTime > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D && this.canDespawn())
+                if (this.idleTime > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D/* && this.canDespawn()*/) // CraftBukkit - remove canDespawn() check
                 {
                     this.setDead();
-                }
-                else if (d3 < 1024.0D)
-                {
+                } else if (d3 < 1024.0D) {
                     this.idleTime = 0;
                 }
             }
         }
     }
 
-    protected final void updateEntityActionState()
-    {
+    protected final void updateEntityActionState() {
         ++this.idleTime;
         this.world.profiler.startSection("checkDespawn");
         this.despawnEntity();
         this.world.profiler.endSection();
+        // Spigot Start
+        if (this.fromMobSpawner) {
+            return;
+        }
+        // Spigot End
         this.world.profiler.startSection("sensing");
         this.senses.clearSensingCache();
         this.world.profiler.endSection();
@@ -769,9 +680,8 @@
         this.updateAITasks();
         this.world.profiler.endSection();
 
-        if (this.isRiding() && this.getRidingEntity() instanceof EntityLiving)
-        {
-            EntityLiving entityliving = (EntityLiving)this.getRidingEntity();
+        if (this.isRiding() && this.getRidingEntity() instanceof EntityLiving) {
+            EntityLiving entityliving = (EntityLiving) this.getRidingEntity();
             entityliving.getNavigator().setPath(this.getNavigator().getPath(), 1.5D);
             entityliving.getMoveHelper().read(this.getMoveHelper());
         }
@@ -787,94 +697,75 @@
         this.world.profiler.endSection();
     }
 
-    protected void updateAITasks()
-    {
+    protected void updateAITasks() {
     }
 
-    public int getVerticalFaceSpeed()
-    {
+    public int getVerticalFaceSpeed() {
         return 40;
     }
 
-    public int getHorizontalFaceSpeed()
-    {
+    public int getHorizontalFaceSpeed() {
         return 10;
     }
 
-    public void faceEntity(Entity entityIn, float maxYawIncrease, float maxPitchIncrease)
-    {
+    public void faceEntity(Entity entityIn, float maxYawIncrease, float maxPitchIncrease) {
         double d0 = entityIn.posX - this.posX;
         double d2 = entityIn.posZ - this.posZ;
         double d1;
 
-        if (entityIn instanceof EntityLivingBase)
-        {
-            EntityLivingBase entitylivingbase = (EntityLivingBase)entityIn;
-            d1 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
+        if (entityIn instanceof EntityLivingBase) {
+            EntityLivingBase entitylivingbase = (EntityLivingBase) entityIn;
+            d1 = entitylivingbase.posY + (double) entitylivingbase.getEyeHeight() - (this.posY + (double) this.getEyeHeight());
+        } else {
+            d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double) this.getEyeHeight());
         }
-        else
-        {
-            d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
-        }
 
-        double d3 = (double)MathHelper.sqrt(d0 * d0 + d2 * d2);
-        float f = (float)(MathHelper.atan2(d2, d0) * (180D / Math.PI)) - 90.0F;
-        float f1 = (float)(-(MathHelper.atan2(d1, d3) * (180D / Math.PI)));
+        double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
+        float f = (float) (MathHelper.atan2(d2, d0) * (180D / Math.PI)) - 90.0F;
+        float f1 = (float) (-(MathHelper.atan2(d1, d3) * (180D / Math.PI)));
         this.rotationPitch = this.updateRotation(this.rotationPitch, f1, maxPitchIncrease);
         this.rotationYaw = this.updateRotation(this.rotationYaw, f, maxYawIncrease);
     }
 
-    private float updateRotation(float angle, float targetAngle, float maxIncrease)
-    {
+    private float updateRotation(float angle, float targetAngle, float maxIncrease) {
         float f = MathHelper.wrapDegrees(targetAngle - angle);
 
-        if (f > maxIncrease)
-        {
+        if (f > maxIncrease) {
             f = maxIncrease;
         }
 
-        if (f < -maxIncrease)
-        {
+        if (f < -maxIncrease) {
             f = -maxIncrease;
         }
 
         return angle + f;
     }
 
-    public boolean getCanSpawnHere()
-    {
+    public boolean getCanSpawnHere() {
         IBlockState iblockstate = this.world.getBlockState((new BlockPos(this)).down());
         return iblockstate.canEntitySpawn(this);
     }
 
-    public boolean isNotColliding()
-    {
+    public boolean isNotColliding() {
         return !this.world.containsAnyLiquid(this.getEntityBoundingBox()) && this.world.getCollisionBoxes(this, this.getEntityBoundingBox()).isEmpty() && this.world.checkNoEntityCollision(this.getEntityBoundingBox(), this);
     }
 
-    public float getRenderSizeModifier()
-    {
+    public float getRenderSizeModifier() {
         return 1.0F;
     }
 
-    public int getMaxSpawnedInChunk()
-    {
+    public int getMaxSpawnedInChunk() {
         return 4;
     }
 
-    public int getMaxFallHeight()
-    {
-        if (this.getAttackTarget() == null)
-        {
+    public int getMaxFallHeight() {
+        if (this.getAttackTarget() == null) {
             return 3;
-        }
-        else
-        {
-            int i = (int)(this.getHealth() - this.getMaxHealth() * 0.33F);
+        } else {
+            int i = (int) (this.getHealth() - this.getMaxHealth() * 0.33F);
             i = i - (3 - this.world.getDifficulty().getDifficultyId()) * 4;
 
-            if (i < 0)
-            {
+            if (i < 0) {
                 i = 0;
             }
 
@@ -882,20 +773,16 @@
         }
     }
 
-    public Iterable<ItemStack> getHeldEquipment()
-    {
+    public Iterable<ItemStack> getHeldEquipment() {
         return this.inventoryHands;
     }
 
-    public Iterable<ItemStack> getArmorInventoryList()
-    {
+    public Iterable<ItemStack> getArmorInventoryList() {
         return this.inventoryArmor;
     }
 
-    public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn)
-    {
-        switch (slotIn.getSlotType())
-        {
+    public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn) {
+        switch (slotIn.getSlotType()) {
             case HAND:
                 return this.inventoryHands.get(slotIn.getIndex());
             case ARMOR:
@@ -905,10 +792,8 @@
         }
     }
 
-    public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack)
-    {
-        switch (slotIn.getSlotType())
-        {
+    public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack) {
+        switch (slotIn.getSlotType()) {
             case HAND:
                 this.inventoryHands.set(slotIn.getIndex(), stack);
                 break;
@@ -917,20 +802,17 @@
         }
     }
 
-    protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
-    {
-        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
-        {
+    protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier) {
+        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values()) {
             ItemStack itemstack = this.getItemStackFromSlot(entityequipmentslot);
             double d0;
 
-            switch (entityequipmentslot.getSlotType())
-            {
+            switch (entityequipmentslot.getSlotType()) {
                 case HAND:
-                    d0 = (double)this.inventoryHandsDropChances[entityequipmentslot.getIndex()];
+                    d0 = (double) this.inventoryHandsDropChances[entityequipmentslot.getIndex()];
                     break;
                 case ARMOR:
-                    d0 = (double)this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
+                    d0 = (double) this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
                     break;
                 default:
                     d0 = 0.0D;
@@ -938,10 +820,8 @@
 
             boolean flag = d0 > 1.0D;
 
-            if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack) && (wasRecentlyHit || flag) && (double)(this.rand.nextFloat() - (float)lootingModifier * 0.01F) < d0)
-            {
-                if (!flag && itemstack.isItemStackDamageable())
-                {
+            if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack) && (wasRecentlyHit || flag) && (double) (this.rand.nextFloat() - (float) lootingModifier * 0.01F) < d0) {
+                if (!flag && itemstack.isItemStackDamageable()) {
                     itemstack.setItemDamage(itemstack.getMaxDamage() - this.rand.nextInt(1 + this.rand.nextInt(Math.max(itemstack.getMaxDamage() - 3, 1))));
                 }
 
@@ -950,49 +830,39 @@
         }
     }
 
-    protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty)
-    {
-        if (this.rand.nextFloat() < 0.15F * difficulty.getClampedAdditionalDifficulty())
-        {
+    protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty) {
+        if (this.rand.nextFloat() < 0.15F * difficulty.getClampedAdditionalDifficulty()) {
             int i = this.rand.nextInt(2);
             float f = this.world.getDifficulty() == EnumDifficulty.HARD ? 0.1F : 0.25F;
 
-            if (this.rand.nextFloat() < 0.095F)
-            {
+            if (this.rand.nextFloat() < 0.095F) {
                 ++i;
             }
 
-            if (this.rand.nextFloat() < 0.095F)
-            {
+            if (this.rand.nextFloat() < 0.095F) {
                 ++i;
             }
 
-            if (this.rand.nextFloat() < 0.095F)
-            {
+            if (this.rand.nextFloat() < 0.095F) {
                 ++i;
             }
 
             boolean flag = true;
 
-            for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
-            {
-                if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
-                {
+            for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values()) {
+                if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR) {
                     ItemStack itemstack = this.getItemStackFromSlot(entityequipmentslot);
 
-                    if (!flag && this.rand.nextFloat() < f)
-                    {
+                    if (!flag && this.rand.nextFloat() < f) {
                         break;
                     }
 
                     flag = false;
 
-                    if (itemstack.isEmpty())
-                    {
+                    if (itemstack.isEmpty()) {
                         Item item = getArmorByChance(entityequipmentslot, i);
 
-                        if (item != null)
-                        {
+                        if (item != null) {
                             this.setItemStackToSlot(entityequipmentslot, new ItemStack(item));
                         }
                     }
@@ -1001,125 +871,79 @@
         }
     }
 
-    public static EntityEquipmentSlot getSlotForItemStack(ItemStack stack)
-    {
+    public static EntityEquipmentSlot getSlotForItemStack(ItemStack stack) {
         final EntityEquipmentSlot slot = stack.getItem().getEquipmentSlot(stack);
-        if (slot != null) return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
-        if (stack.getItem() != Item.getItemFromBlock(Blocks.PUMPKIN) && stack.getItem() != Items.SKULL)
-        {
-            if (stack.getItem() instanceof ItemArmor)
-            {
-                return ((ItemArmor)stack.getItem()).armorType;
-            }
-            else if (stack.getItem() == Items.ELYTRA)
-            {
+        if (slot != null)
+            return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
+        if (stack.getItem() != Item.getItemFromBlock(Blocks.PUMPKIN) && stack.getItem() != Items.SKULL) {
+            if (stack.getItem() instanceof ItemArmor) {
+                return ((ItemArmor) stack.getItem()).armorType;
+            } else if (stack.getItem() == Items.ELYTRA) {
                 return EntityEquipmentSlot.CHEST;
-            }
-            else
-            {
+            } else {
                 return stack.getItem().isShield(stack, null) ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
             }
-        }
-        else
-        {
+        } else {
             return EntityEquipmentSlot.HEAD;
         }
     }
 
     @Nullable
-    public static Item getArmorByChance(EntityEquipmentSlot slotIn, int chance)
-    {
-        switch (slotIn)
-        {
+    public static Item getArmorByChance(EntityEquipmentSlot slotIn, int chance) {
+        switch (slotIn) {
             case HEAD:
 
-                if (chance == 0)
-                {
+                if (chance == 0) {
                     return Items.LEATHER_HELMET;
-                }
-                else if (chance == 1)
-                {
+                } else if (chance == 1) {
                     return Items.GOLDEN_HELMET;
-                }
-                else if (chance == 2)
-                {
+                } else if (chance == 2) {
                     return Items.CHAINMAIL_HELMET;
-                }
-                else if (chance == 3)
-                {
+                } else if (chance == 3) {
                     return Items.IRON_HELMET;
-                }
-                else if (chance == 4)
-                {
+                } else if (chance == 4) {
                     return Items.DIAMOND_HELMET;
                 }
 
             case CHEST:
 
-                if (chance == 0)
-                {
+                if (chance == 0) {
                     return Items.LEATHER_CHESTPLATE;
-                }
-                else if (chance == 1)
-                {
+                } else if (chance == 1) {
                     return Items.GOLDEN_CHESTPLATE;
-                }
-                else if (chance == 2)
-                {
+                } else if (chance == 2) {
                     return Items.CHAINMAIL_CHESTPLATE;
-                }
-                else if (chance == 3)
-                {
+                } else if (chance == 3) {
                     return Items.IRON_CHESTPLATE;
-                }
-                else if (chance == 4)
-                {
+                } else if (chance == 4) {
                     return Items.DIAMOND_CHESTPLATE;
                 }
 
             case LEGS:
 
-                if (chance == 0)
-                {
+                if (chance == 0) {
                     return Items.LEATHER_LEGGINGS;
-                }
-                else if (chance == 1)
-                {
+                } else if (chance == 1) {
                     return Items.GOLDEN_LEGGINGS;
-                }
-                else if (chance == 2)
-                {
+                } else if (chance == 2) {
                     return Items.CHAINMAIL_LEGGINGS;
-                }
-                else if (chance == 3)
-                {
+                } else if (chance == 3) {
                     return Items.IRON_LEGGINGS;
-                }
-                else if (chance == 4)
-                {
+                } else if (chance == 4) {
                     return Items.DIAMOND_LEGGINGS;
                 }
 
             case FEET:
 
-                if (chance == 0)
-                {
+                if (chance == 0) {
                     return Items.LEATHER_BOOTS;
-                }
-                else if (chance == 1)
-                {
+                } else if (chance == 1) {
                     return Items.GOLDEN_BOOTS;
-                }
-                else if (chance == 2)
-                {
+                } else if (chance == 2) {
                     return Items.CHAINMAIL_BOOTS;
-                }
-                else if (chance == 3)
-                {
+                } else if (chance == 3) {
                     return Items.IRON_BOOTS;
-                }
-                else if (chance == 4)
-                {
+                } else if (chance == 4) {
                     return Items.DIAMOND_BOOTS;
                 }
 
@@ -1128,60 +952,47 @@
         }
     }
 
-    protected void setEnchantmentBasedOnDifficulty(DifficultyInstance difficulty)
-    {
+    protected void setEnchantmentBasedOnDifficulty(DifficultyInstance difficulty) {
         float f = difficulty.getClampedAdditionalDifficulty();
 
-        if (!this.getHeldItemMainhand().isEmpty() && this.rand.nextFloat() < 0.25F * f)
-        {
-            this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItemMainhand(), (int)(5.0F + f * (float)this.rand.nextInt(18)), false));
+        if (!this.getHeldItemMainhand().isEmpty() && this.rand.nextFloat() < 0.25F * f) {
+            this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItemMainhand(), (int) (5.0F + f * (float) this.rand.nextInt(18)), false));
         }
 
-        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
-        {
-            if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
-            {
+        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values()) {
+            if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR) {
                 ItemStack itemstack = this.getItemStackFromSlot(entityequipmentslot);
 
-                if (!itemstack.isEmpty() && this.rand.nextFloat() < 0.5F * f)
-                {
-                    this.setItemStackToSlot(entityequipmentslot, EnchantmentHelper.addRandomEnchantment(this.rand, itemstack, (int)(5.0F + f * (float)this.rand.nextInt(18)), false));
+                if (!itemstack.isEmpty() && this.rand.nextFloat() < 0.5F * f) {
+                    this.setItemStackToSlot(entityequipmentslot, EnchantmentHelper.addRandomEnchantment(this.rand, itemstack, (int) (5.0F + f * (float) this.rand.nextInt(18)), false));
                 }
             }
         }
     }
 
     @Nullable
-    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
-    {
+    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata) {
         this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).applyModifier(new AttributeModifier("Random spawn bonus", this.rand.nextGaussian() * 0.05D, 1));
 
-        if (this.rand.nextFloat() < 0.05F)
-        {
+        if (this.rand.nextFloat() < 0.05F) {
             this.setLeftHanded(true);
-        }
-        else
-        {
+        } else {
             this.setLeftHanded(false);
         }
 
         return livingdata;
     }
 
-    public boolean canBeSteered()
-    {
+    public boolean canBeSteered() {
         return false;
     }
 
-    public void enablePersistence()
-    {
+    public void enablePersistence() {
         this.persistenceRequired = true;
     }
 
-    public void setDropChance(EntityEquipmentSlot slotIn, float chance)
-    {
-        switch (slotIn.getSlotType())
-        {
+    public void setDropChance(EntityEquipmentSlot slotIn, float chance) {
+        switch (slotIn.getSlotType()) {
             case HAND:
                 this.inventoryHandsDropChances[slotIn.getIndex()] = chance;
                 break;
@@ -1190,164 +1001,137 @@
         }
     }
 
-    public boolean canPickUpLoot()
-    {
-        return this.canPickUpLoot;
+    public boolean thisisatestof() {
+        return thisisatest;
     }
 
-    public void setCanPickUpLoot(boolean canPickup)
-    {
-        this.canPickUpLoot = canPickup;
+    public void idkwhyreyoudoingthis(boolean canPickup) {
+        thisisatest = canPickup;
     }
 
-    public boolean isNoDespawnRequired()
-    {
+    public boolean isNoDespawnRequired() {
         return this.persistenceRequired;
     }
 
-    public final boolean processInitialInteract(EntityPlayer player, EnumHand hand)
-    {
-        if (this.getLeashed() && this.getLeashHolder() == player)
-        {
+    public final boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
+        if (this.getLeashed() && this.getLeashHolder() == player) {
+            if (CraftEventFactory.callPlayerUnleashEntityEvent(this, player).isCancelled()) {
+                ((EntityPlayerMP) player).connection.sendPacket(new SPacketEntityAttach(this, this.getLeashHolder()));
+                return false;
+            }
             this.clearLeashed(true, !player.capabilities.isCreativeMode);
             return true;
-        }
-        else
-        {
+        } else {
             ItemStack itemstack = player.getHeldItem(hand);
 
-            if (itemstack.getItem() == Items.LEAD && this.canBeLeashedTo(player))
-            {
+            if (itemstack.getItem() == Items.LEAD && this.canBeLeashedTo(player)) {
+                if (CraftEventFactory.callPlayerLeashEntityEvent(this, player, player).isCancelled()) {
+                    ((EntityPlayerMP) player).connection.sendPacket(new SPacketEntityAttach(this, this.getLeashHolder()));
+                    return false;
+                }
                 this.setLeashHolder(player, true);
                 itemstack.shrink(1);
                 return true;
-            }
-            else
-            {
+            } else {
                 return this.processInteract(player, hand) ? true : super.processInitialInteract(player, hand);
             }
         }
     }
 
-    protected boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    protected boolean processInteract(EntityPlayer player, EnumHand hand) {
         return false;
     }
 
-    protected void updateLeashedState()
-    {
-        if (this.leashNBTTag != null)
-        {
+    protected void updateLeashedState() {
+        if (this.leashNBTTag != null) {
             this.recreateLeash();
         }
 
-        if (this.isLeashed)
-        {
-            if (!this.isEntityAlive())
-            {
+        if (this.isLeashed) {
+            if (!this.isEntityAlive()) {
+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.PLAYER_UNLEASH));
                 this.clearLeashed(true, true);
             }
 
-            if (this.leashHolder == null || this.leashHolder.isDead)
-            {
+            if (this.leashHolder == null || this.leashHolder.isDead) {
+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.HOLDER_GONE));
                 this.clearLeashed(true, true);
             }
         }
     }
 
-    public void clearLeashed(boolean sendPacket, boolean dropLead)
-    {
-        if (this.isLeashed)
-        {
+    public void clearLeashed(boolean sendPacket, boolean dropLead) {
+        if (this.isLeashed) {
             this.isLeashed = false;
             this.leashHolder = null;
 
-            if (!this.world.isRemote && dropLead)
-            {
+            if (!this.world.isRemote && dropLead) {
                 this.dropItem(Items.LEAD, 1);
             }
 
-            if (!this.world.isRemote && sendPacket && this.world instanceof WorldServer)
-            {
-                ((WorldServer)this.world).getEntityTracker().sendToTracking(this, new SPacketEntityAttach(this, (Entity)null));
+            if (!this.world.isRemote && sendPacket && this.world instanceof WorldServer) {
+                ((WorldServer) this.world).getEntityTracker().sendToTracking(this, new SPacketEntityAttach(this, (Entity) null));
             }
         }
     }
 
-    public boolean canBeLeashedTo(EntityPlayer player)
-    {
+    public boolean canBeLeashedTo(EntityPlayer player) {
         return !this.getLeashed() && !(this instanceof IMob);
     }
 
-    public boolean getLeashed()
-    {
+    public boolean getLeashed() {
         return this.isLeashed;
     }
 
-    public Entity getLeashHolder()
-    {
+    public Entity getLeashHolder() {
         return this.leashHolder;
     }
 
-    public void setLeashHolder(Entity entityIn, boolean sendAttachNotification)
-    {
+    public void setLeashHolder(Entity entityIn, boolean sendAttachNotification) {
         this.isLeashed = true;
         this.leashHolder = entityIn;
 
-        if (!this.world.isRemote && sendAttachNotification && this.world instanceof WorldServer)
-        {
-            ((WorldServer)this.world).getEntityTracker().sendToTracking(this, new SPacketEntityAttach(this, this.leashHolder));
+        if (!this.world.isRemote && sendAttachNotification && this.world instanceof WorldServer) {
+            ((WorldServer) this.world).getEntityTracker().sendToTracking(this, new SPacketEntityAttach(this, this.leashHolder));
         }
 
-        if (this.isRiding())
-        {
+        if (this.isRiding()) {
             this.dismountRidingEntity();
         }
     }
 
-    public boolean startRiding(Entity entityIn, boolean force)
-    {
+    public boolean startRiding(Entity entityIn, boolean force) {
         boolean flag = super.startRiding(entityIn, force);
 
-        if (flag && this.getLeashed())
-        {
+        if (flag && this.getLeashed()) {
             this.clearLeashed(true, true);
         }
 
         return flag;
     }
 
-    private void recreateLeash()
-    {
-        if (this.isLeashed && this.leashNBTTag != null)
-        {
-            if (this.leashNBTTag.hasUniqueId("UUID"))
-            {
+    private void recreateLeash() {
+        if (this.isLeashed && this.leashNBTTag != null) {
+            if (this.leashNBTTag.hasUniqueId("UUID")) {
                 UUID uuid = this.leashNBTTag.getUniqueId("UUID");
 
-                for (EntityLivingBase entitylivingbase : this.world.getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(10.0D)))
-                {
-                    if (entitylivingbase.getUniqueID().equals(uuid))
-                    {
+                for (EntityLivingBase entitylivingbase : this.world.getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(10.0D))) {
+                    if (entitylivingbase.getUniqueID().equals(uuid)) {
                         this.setLeashHolder(entitylivingbase, true);
                         break;
                     }
                 }
-            }
-            else if (this.leashNBTTag.hasKey("X", 99) && this.leashNBTTag.hasKey("Y", 99) && this.leashNBTTag.hasKey("Z", 99))
-            {
+            } else if (this.leashNBTTag.hasKey("X", 99) && this.leashNBTTag.hasKey("Y", 99) && this.leashNBTTag.hasKey("Z", 99)) {
                 BlockPos blockpos = new BlockPos(this.leashNBTTag.getInteger("X"), this.leashNBTTag.getInteger("Y"), this.leashNBTTag.getInteger("Z"));
                 EntityLeashKnot entityleashknot = EntityLeashKnot.getKnotForPosition(this.world, blockpos);
 
-                if (entityleashknot == null)
-                {
+                if (entityleashknot == null) {
                     entityleashknot = EntityLeashKnot.createKnot(this.world, blockpos);
                 }
 
                 this.setLeashHolder(entityleashknot, true);
-            }
-            else
-            {
+            } else {
+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.UNKNOWN));
                 this.clearLeashed(false, true);
             }
         }
@@ -1355,111 +1139,86 @@
         this.leashNBTTag = null;
     }
 
-    public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn)
-    {
+    public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn) {
         EntityEquipmentSlot entityequipmentslot;
 
-        if (inventorySlot == 98)
-        {
+        if (inventorySlot == 98) {
             entityequipmentslot = EntityEquipmentSlot.MAINHAND;
-        }
-        else if (inventorySlot == 99)
-        {
+        } else if (inventorySlot == 99) {
             entityequipmentslot = EntityEquipmentSlot.OFFHAND;
-        }
-        else if (inventorySlot == 100 + EntityEquipmentSlot.HEAD.getIndex())
-        {
+        } else if (inventorySlot == 100 + EntityEquipmentSlot.HEAD.getIndex()) {
             entityequipmentslot = EntityEquipmentSlot.HEAD;
-        }
-        else if (inventorySlot == 100 + EntityEquipmentSlot.CHEST.getIndex())
-        {
+        } else if (inventorySlot == 100 + EntityEquipmentSlot.CHEST.getIndex()) {
             entityequipmentslot = EntityEquipmentSlot.CHEST;
-        }
-        else if (inventorySlot == 100 + EntityEquipmentSlot.LEGS.getIndex())
-        {
+        } else if (inventorySlot == 100 + EntityEquipmentSlot.LEGS.getIndex()) {
             entityequipmentslot = EntityEquipmentSlot.LEGS;
-        }
-        else
-        {
-            if (inventorySlot != 100 + EntityEquipmentSlot.FEET.getIndex())
-            {
+        } else {
+            if (inventorySlot != 100 + EntityEquipmentSlot.FEET.getIndex()) {
                 return false;
             }
 
             entityequipmentslot = EntityEquipmentSlot.FEET;
         }
 
-        if (!itemStackIn.isEmpty() && !isItemStackInSlot(entityequipmentslot, itemStackIn) && entityequipmentslot != EntityEquipmentSlot.HEAD)
-        {
+        if (!itemStackIn.isEmpty() && !isItemStackInSlot(entityequipmentslot, itemStackIn) && entityequipmentslot != EntityEquipmentSlot.HEAD) {
             return false;
-        }
-        else
-        {
+        } else {
             this.setItemStackToSlot(entityequipmentslot, itemStackIn);
             return true;
         }
     }
 
-    public boolean canPassengerSteer()
-    {
+    public boolean canPassengerSteer() {
         return this.canBeSteered() && super.canPassengerSteer();
     }
 
-    public static boolean isItemStackInSlot(EntityEquipmentSlot slotIn, ItemStack stack)
-    {
+    public static boolean isItemStackInSlot(EntityEquipmentSlot slotIn, ItemStack stack) {
         EntityEquipmentSlot entityequipmentslot = getSlotForItemStack(stack);
         return entityequipmentslot == slotIn || entityequipmentslot == EntityEquipmentSlot.MAINHAND && slotIn == EntityEquipmentSlot.OFFHAND || entityequipmentslot == EntityEquipmentSlot.OFFHAND && slotIn == EntityEquipmentSlot.MAINHAND;
     }
 
-    public boolean isServerWorld()
-    {
+    public boolean isServerWorld() {
         return super.isServerWorld() && !this.isAIDisabled();
     }
 
-    public void setNoAI(boolean disable)
-    {
-        byte b0 = ((Byte)this.dataManager.get(AI_FLAGS)).byteValue();
-        this.dataManager.set(AI_FLAGS, Byte.valueOf(disable ? (byte)(b0 | 1) : (byte)(b0 & -2)));
+    public void setNoAI(boolean disable) {
+        byte b0 = ((Byte) this.dataManager.get(AI_FLAGS)).byteValue();
+        this.dataManager.set(AI_FLAGS, Byte.valueOf(disable ? (byte) (b0 | 1) : (byte) (b0 & -2)));
     }
 
-    public void setLeftHanded(boolean leftHanded)
-    {
-        byte b0 = ((Byte)this.dataManager.get(AI_FLAGS)).byteValue();
-        this.dataManager.set(AI_FLAGS, Byte.valueOf(leftHanded ? (byte)(b0 | 2) : (byte)(b0 & -3)));
+    public void setLeftHanded(boolean leftHanded) {
+        byte b0 = ((Byte) this.dataManager.get(AI_FLAGS)).byteValue();
+        this.dataManager.set(AI_FLAGS, Byte.valueOf(leftHanded ? (byte) (b0 | 2) : (byte) (b0 & -3)));
     }
 
-    public boolean isAIDisabled()
-    {
-        return (((Byte)this.dataManager.get(AI_FLAGS)).byteValue() & 1) != 0;
+    public boolean isAIDisabled() {
+        return (((Byte) this.dataManager.get(AI_FLAGS)).byteValue() & 1) != 0;
     }
 
-    public boolean isLeftHanded()
-    {
-        return (((Byte)this.dataManager.get(AI_FLAGS)).byteValue() & 2) != 0;
+    public boolean isLeftHanded() {
+        return (((Byte) this.dataManager.get(AI_FLAGS)).byteValue() & 2) != 0;
     }
 
-    public EnumHandSide getPrimaryHand()
-    {
+    public EnumHandSide getPrimaryHand() {
         return this.isLeftHanded() ? EnumHandSide.LEFT : EnumHandSide.RIGHT;
     }
 
-    public static enum SpawnPlacementType
-    {
+    public static enum SpawnPlacementType {
         ON_GROUND,
         IN_AIR,
         IN_WATER;
 
         private final java.util.function.BiPredicate<net.minecraft.world.IBlockAccess, BlockPos> spawnPredicate;
 
-        SpawnPlacementType() { this.spawnPredicate = null; }
+        SpawnPlacementType() {
+            this.spawnPredicate = null;
+        }
 
-        SpawnPlacementType(java.util.function.BiPredicate<net.minecraft.world.IBlockAccess, BlockPos> spawnPredicate)
-        {
+        SpawnPlacementType(java.util.function.BiPredicate<net.minecraft.world.IBlockAccess, BlockPos> spawnPredicate) {
             this.spawnPredicate = spawnPredicate;
         }
 
-        public boolean canSpawnAt(World world, BlockPos pos)
-        {
+        public boolean canSpawnAt(World world, BlockPos pos) {
             return this.spawnPredicate != null ? this.spawnPredicate.test(world, pos) : net.minecraft.world.WorldEntitySpawner.canCreatureTypeSpawnBody(this, world, pos);
         }
     }
