--- ../src-base/minecraft/net/minecraft/entity/monster/EntityVindicator.java
+++ ../src-work/minecraft/net/minecraft/entity/monster/EntityVindicator.java
@@ -1,19 +1,8 @@
 package net.minecraft.entity.monster;
 
 import com.google.common.base.Predicate;
-import javax.annotation.Nullable;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.EnumCreatureAttribute;
-import net.minecraft.entity.IEntityLivingData;
-import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIAttackMelee;
-import net.minecraft.entity.ai.EntityAIHurtByTarget;
-import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAIWander;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
+import net.minecraft.entity.*;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Items;
@@ -31,45 +20,40 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityVindicator extends AbstractIllager
-{
+import javax.annotation.Nullable;
+
+public class EntityVindicator extends AbstractIllager {
     private boolean johnny;
-    private static final Predicate<Entity> JOHNNY_SELECTOR = new Predicate<Entity>()
-    {
-        public boolean apply(@Nullable Entity p_apply_1_)
-        {
-            return p_apply_1_ instanceof EntityLivingBase && ((EntityLivingBase)p_apply_1_).attackable();
+    private static final Predicate<Entity> JOHNNY_SELECTOR = new Predicate<Entity>() {
+        public boolean apply(@Nullable Entity p_apply_1_) {
+            return p_apply_1_ instanceof EntityLivingBase && ((EntityLivingBase) p_apply_1_).attackable();
         }
     };
 
-    public EntityVindicator(World worldIn)
-    {
+    public EntityVindicator(World worldIn) {
         super(worldIn);
         this.setSize(0.6F, 1.95F);
     }
 
-    public static void registerFixesVindicator(DataFixer fixer)
-    {
+    public static void registerFixesVindicator(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntityVindicator.class);
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         super.initEntityAI();
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(4, new EntityAIAttackMelee(this, 1.0D, false));
         this.tasks.addTask(8, new EntityAIWander(this, 0.6D));
         this.tasks.addTask(9, new EntityAIWatchClosest(this, EntityPlayer.class, 3.0F, 1.0F));
         this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, new Class[] {EntityVindicator.class}));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, new Class[]{EntityVindicator.class}));
         this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true));
         this.targetTasks.addTask(3, new EntityAINearestAttackableTarget(this, EntityVillager.class, true));
         this.targetTasks.addTask(3, new EntityAINearestAttackableTarget(this, EntityIronGolem.class, true));
         this.targetTasks.addTask(4, new EntityVindicator.AIJohnnyAttack(this));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3499999940395355D);
         this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(12.0D);
@@ -77,124 +61,98 @@
         this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(5.0D);
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
     }
 
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_VINDICATION_ILLAGER;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isAggressive()
-    {
+    public boolean isAggressive() {
         return this.isAggressive(1);
     }
 
-    public void setAggressive(boolean p_190636_1_)
-    {
+    public void setAggressive(boolean p_190636_1_) {
         this.setAggressive(1, p_190636_1_);
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
 
-        if (this.johnny)
-        {
+        if (this.johnny) {
             compound.setBoolean("Johnny", true);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public AbstractIllager.IllagerArmPose getArmPose()
-    {
+    public AbstractIllager.IllagerArmPose getArmPose() {
         return this.isAggressive() ? AbstractIllager.IllagerArmPose.ATTACKING : AbstractIllager.IllagerArmPose.CROSSED;
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
 
-        if (compound.hasKey("Johnny", 99))
-        {
+        if (compound.hasKey("Johnny", 99)) {
             this.johnny = compound.getBoolean("Johnny");
         }
     }
 
     @Nullable
-    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
-    {
+    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata) {
         IEntityLivingData ientitylivingdata = super.onInitialSpawn(difficulty, livingdata);
         this.setEquipmentBasedOnDifficulty(difficulty);
         this.setEnchantmentBasedOnDifficulty(difficulty);
         return ientitylivingdata;
     }
 
-    protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty)
-    {
+    protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty) {
         this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, new ItemStack(Items.IRON_AXE));
     }
 
-    protected void updateAITasks()
-    {
+    protected void updateAITasks() {
         super.updateAITasks();
         this.setAggressive(this.getAttackTarget() != null);
     }
 
-    public boolean isOnSameTeam(Entity entityIn)
-    {
-        if (super.isOnSameTeam(entityIn))
-        {
+    public boolean isOnSameTeam(Entity entityIn) {
+        if (super.isOnSameTeam(entityIn)) {
             return true;
-        }
-        else if (entityIn instanceof EntityLivingBase && ((EntityLivingBase)entityIn).getCreatureAttribute() == EnumCreatureAttribute.ILLAGER)
-        {
+        } else if (entityIn instanceof EntityLivingBase && ((EntityLivingBase) entityIn).getCreatureAttribute() == EnumCreatureAttribute.ILLAGER) {
             return this.getTeam() == null && entityIn.getTeam() == null;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public void setCustomNameTag(String name)
-    {
+    public void setCustomNameTag(String name) {
         super.setCustomNameTag(name);
 
-        if (!this.johnny && "Johnny".equals(name))
-        {
+        if (!this.johnny && "Johnny".equals(name)) {
             this.johnny = true;
         }
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return SoundEvents.VINDICATION_ILLAGER_AMBIENT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.VINDICATION_ILLAGER_DEATH;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_VINDICATION_ILLAGER_HURT;
     }
 
-    static class AIJohnnyAttack extends EntityAINearestAttackableTarget<EntityLivingBase>
-        {
-            public AIJohnnyAttack(EntityVindicator vindicator)
-            {
-                super(vindicator, EntityLivingBase.class, 0, true, true, EntityVindicator.JOHNNY_SELECTOR);
-            }
+    static class AIJohnnyAttack extends EntityAINearestAttackableTarget<EntityLivingBase> {
+        public AIJohnnyAttack(EntityVindicator vindicator) {
+            super(vindicator, EntityLivingBase.class, 0, true, true, EntityVindicator.JOHNNY_SELECTOR);
+        }
 
-            public boolean shouldExecute()
-            {
-                return ((EntityVindicator)this.taskOwner).johnny && super.shouldExecute();
-            }
+        public boolean shouldExecute() {
+            return ((EntityVindicator) this.taskOwner).johnny && super.shouldExecute();
         }
+    }
 }
