--- ../src-base/minecraft/net/minecraft/entity/monster/EntitySpider.java
+++ ../src-work/minecraft/net/minecraft/entity/monster/EntitySpider.java
@@ -1,21 +1,8 @@
 package net.minecraft.entity.monster;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.EnumCreatureAttribute;
-import net.minecraft.entity.IEntityLivingData;
-import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIAttackMelee;
-import net.minecraft.entity.ai.EntityAIHurtByTarget;
-import net.minecraft.entity.ai.EntityAILeapAtTarget;
-import net.minecraft.entity.ai.EntityAILookIdle;
-import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
+import net.minecraft.entity.*;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.MobEffects;
 import net.minecraft.init.SoundEvents;
@@ -36,23 +23,22 @@
 import net.minecraft.world.World;
 import net.minecraft.world.storage.loot.LootTableList;
 
-public class EntitySpider extends EntityMob
-{
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public class EntitySpider extends EntityMob {
     private static final DataParameter<Byte> CLIMBING = EntityDataManager.<Byte>createKey(EntitySpider.class, DataSerializers.BYTE);
 
-    public EntitySpider(World worldIn)
-    {
+    public EntitySpider(World worldIn) {
         super(worldIn);
         this.setSize(1.4F, 0.9F);
     }
 
-    public static void registerFixesSpider(DataFixer fixer)
-    {
+    public static void registerFixesSpider(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntitySpider.class);
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(3, new EntityAILeapAtTarget(this, 0.4F));
         this.tasks.addTask(4, new EntitySpider.AISpiderAttack(this));
@@ -64,141 +50,115 @@
         this.targetTasks.addTask(3, new EntitySpider.AISpiderTarget(this, EntityIronGolem.class));
     }
 
-    public double getMountedYOffset()
-    {
-        return (double)(this.height * 0.5F);
+    public double getMountedYOffset() {
+        return (double) (this.height * 0.5F);
     }
 
-    protected PathNavigate createNavigator(World worldIn)
-    {
+    protected PathNavigate createNavigator(World worldIn) {
         return new PathNavigateClimber(this, worldIn);
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
-        this.dataManager.register(CLIMBING, Byte.valueOf((byte)0));
+        this.dataManager.register(CLIMBING, Byte.valueOf((byte) 0));
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
 
-        if (!this.world.isRemote)
-        {
+        if (!this.world.isRemote) {
             this.setBesideClimbableBlock(this.collidedHorizontally);
         }
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(16.0D);
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return SoundEvents.ENTITY_SPIDER_AMBIENT;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_SPIDER_HURT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.ENTITY_SPIDER_DEATH;
     }
 
-    protected void playStepSound(BlockPos pos, Block blockIn)
-    {
+    protected void playStepSound(BlockPos pos, Block blockIn) {
         this.playSound(SoundEvents.ENTITY_SPIDER_STEP, 0.15F, 1.0F);
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_SPIDER;
     }
 
-    public boolean isOnLadder()
-    {
+    public boolean isOnLadder() {
         return this.isBesideClimbableBlock();
     }
 
-    public void setInWeb()
-    {
+    public void setInWeb() {
     }
 
-    public EnumCreatureAttribute getCreatureAttribute()
-    {
+    public EnumCreatureAttribute getCreatureAttribute() {
         return EnumCreatureAttribute.ARTHROPOD;
     }
 
-    public boolean isPotionApplicable(PotionEffect potioneffectIn)
-    {
-        if(potioneffectIn.getPotion() == MobEffects.POISON)
-        {
-        	net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent event = new net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent(this, potioneffectIn);
-        	net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
-        	return event.getResult() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW;
-        }	
+    public boolean isPotionApplicable(PotionEffect potioneffectIn) {
+        if (potioneffectIn.getPotion() == MobEffects.POISON) {
+            net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent event = new net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent(this, potioneffectIn);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+            return event.getResult() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW;
+        }
         return super.isPotionApplicable(potioneffectIn);
     }
 
-    public boolean isBesideClimbableBlock()
-    {
-        return (((Byte)this.dataManager.get(CLIMBING)).byteValue() & 1) != 0;
+    public boolean isBesideClimbableBlock() {
+        return (((Byte) this.dataManager.get(CLIMBING)).byteValue() & 1) != 0;
     }
 
-    public void setBesideClimbableBlock(boolean climbing)
-    {
-        byte b0 = ((Byte)this.dataManager.get(CLIMBING)).byteValue();
+    public void setBesideClimbableBlock(boolean climbing) {
+        byte b0 = ((Byte) this.dataManager.get(CLIMBING)).byteValue();
 
-        if (climbing)
-        {
-            b0 = (byte)(b0 | 1);
+        if (climbing) {
+            b0 = (byte) (b0 | 1);
+        } else {
+            b0 = (byte) (b0 & -2);
         }
-        else
-        {
-            b0 = (byte)(b0 & -2);
-        }
 
         this.dataManager.set(CLIMBING, Byte.valueOf(b0));
     }
 
     @Nullable
-    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
-    {
+    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata) {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
 
-        if (this.world.rand.nextInt(100) == 0)
-        {
+        if (this.world.rand.nextInt(100) == 0) {
             EntitySkeleton entityskeleton = new EntitySkeleton(this.world);
             entityskeleton.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
-            entityskeleton.onInitialSpawn(difficulty, (IEntityLivingData)null);
-            this.world.spawnEntity(entityskeleton);
+            entityskeleton.onInitialSpawn(difficulty, (IEntityLivingData) null);
+            // this.world.spawnEntity(entityskeleton);
+            this.world.spawnEntity(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY);
             entityskeleton.startRiding(this);
         }
 
-        if (livingdata == null)
-        {
+        if (livingdata == null) {
             livingdata = new EntitySpider.GroupData();
 
-            if (this.world.getDifficulty() == EnumDifficulty.HARD && this.world.rand.nextFloat() < 0.1F * difficulty.getClampedAdditionalDifficulty())
-            {
-                ((EntitySpider.GroupData)livingdata).setRandomEffect(this.world.rand);
+            if (this.world.getDifficulty() == EnumDifficulty.HARD && this.world.rand.nextFloat() < 0.1F * difficulty.getClampedAdditionalDifficulty()) {
+                ((EntitySpider.GroupData) livingdata).setRandomEffect(this.world.rand);
             }
         }
 
-        if (livingdata instanceof EntitySpider.GroupData)
-        {
-            Potion potion = ((EntitySpider.GroupData)livingdata).effect;
+        if (livingdata instanceof EntitySpider.GroupData) {
+            Potion potion = ((EntitySpider.GroupData) livingdata).effect;
 
-            if (potion != null)
-            {
+            if (potion != null) {
                 this.addPotionEffect(new PotionEffect(potion, Integer.MAX_VALUE));
             }
         }
@@ -206,77 +166,57 @@
         return livingdata;
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return 0.65F;
     }
 
-    static class AISpiderAttack extends EntityAIAttackMelee
-        {
-            public AISpiderAttack(EntitySpider spider)
-            {
-                super(spider, 1.0D, true);
-            }
+    static class AISpiderAttack extends EntityAIAttackMelee {
+        public AISpiderAttack(EntitySpider spider) {
+            super(spider, 1.0D, true);
+        }
 
-            public boolean shouldContinueExecuting()
-            {
-                float f = this.attacker.getBrightness();
+        public boolean shouldContinueExecuting() {
+            float f = this.attacker.getBrightness();
 
-                if (f >= 0.5F && this.attacker.getRNG().nextInt(100) == 0)
-                {
-                    this.attacker.setAttackTarget((EntityLivingBase)null);
-                    return false;
-                }
-                else
-                {
-                    return super.shouldContinueExecuting();
-                }
+            if (f >= 0.5F && this.attacker.getRNG().nextInt(100) == 0) {
+                this.attacker.setAttackTarget((EntityLivingBase) null);
+                return false;
+            } else {
+                return super.shouldContinueExecuting();
             }
+        }
 
-            protected double getAttackReachSqr(EntityLivingBase attackTarget)
-            {
-                return (double)(4.0F + attackTarget.width);
-            }
+        protected double getAttackReachSqr(EntityLivingBase attackTarget) {
+            return (double) (4.0F + attackTarget.width);
         }
+    }
 
-    static class AISpiderTarget<T extends EntityLivingBase> extends EntityAINearestAttackableTarget<T>
-        {
-            public AISpiderTarget(EntitySpider spider, Class<T> classTarget)
-            {
-                super(spider, classTarget, true);
-            }
+    static class AISpiderTarget<T extends EntityLivingBase> extends EntityAINearestAttackableTarget<T> {
+        public AISpiderTarget(EntitySpider spider, Class<T> classTarget) {
+            super(spider, classTarget, true);
+        }
 
-            public boolean shouldExecute()
-            {
-                float f = this.taskOwner.getBrightness();
-                return f >= 0.5F ? false : super.shouldExecute();
-            }
+        public boolean shouldExecute() {
+            float f = this.taskOwner.getBrightness();
+            return f >= 0.5F ? false : super.shouldExecute();
         }
+    }
 
-    public static class GroupData implements IEntityLivingData
-        {
-            public Potion effect;
+    public static class GroupData implements IEntityLivingData {
+        public Potion effect;
 
-            public void setRandomEffect(Random rand)
-            {
-                int i = rand.nextInt(5);
+        public void setRandomEffect(Random rand) {
+            int i = rand.nextInt(5);
 
-                if (i <= 1)
-                {
-                    this.effect = MobEffects.SPEED;
-                }
-                else if (i <= 2)
-                {
-                    this.effect = MobEffects.STRENGTH;
-                }
-                else if (i <= 3)
-                {
-                    this.effect = MobEffects.REGENERATION;
-                }
-                else if (i <= 4)
-                {
-                    this.effect = MobEffects.INVISIBILITY;
-                }
+            if (i <= 1) {
+                this.effect = MobEffects.SPEED;
+            } else if (i <= 2) {
+                this.effect = MobEffects.STRENGTH;
+            } else if (i <= 3) {
+                this.effect = MobEffects.REGENERATION;
+            } else if (i <= 4) {
+                this.effect = MobEffects.INVISIBILITY;
             }
         }
+    }
 }
