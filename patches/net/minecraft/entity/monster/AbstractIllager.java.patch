--- ../src-base/minecraft/net/minecraft/entity/monster/AbstractIllager.java
+++ ../src-work/minecraft/net/minecraft/entity/monster/AbstractIllager.java
@@ -8,58 +8,47 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class AbstractIllager extends EntityMob
-{
+public abstract class AbstractIllager extends EntityMob {
     protected static final DataParameter<Byte> AGGRESSIVE = EntityDataManager.<Byte>createKey(AbstractIllager.class, DataSerializers.BYTE);
 
-    public AbstractIllager(World p_i47509_1_)
-    {
+    public AbstractIllager(World p_i47509_1_) {
         super(p_i47509_1_);
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
-        this.dataManager.register(AGGRESSIVE, Byte.valueOf((byte)0));
+        this.dataManager.register(AGGRESSIVE, Byte.valueOf((byte) 0));
     }
 
     @SideOnly(Side.CLIENT)
-    protected boolean isAggressive(int mask)
-    {
-        int i = ((Byte)this.dataManager.get(AGGRESSIVE)).byteValue();
+    protected boolean isAggressive(int mask) {
+        int i = ((Byte) this.dataManager.get(AGGRESSIVE)).byteValue();
         return (i & mask) != 0;
     }
 
-    protected void setAggressive(int mask, boolean value)
-    {
-        int i = ((Byte)this.dataManager.get(AGGRESSIVE)).byteValue();
+    protected void setAggressive(int mask, boolean value) {
+        int i = ((Byte) this.dataManager.get(AGGRESSIVE)).byteValue();
 
-        if (value)
-        {
+        if (value) {
             i = i | mask;
-        }
-        else
-        {
+        } else {
             i = i & ~mask;
         }
 
-        this.dataManager.set(AGGRESSIVE, Byte.valueOf((byte)(i & 255)));
+        this.dataManager.set(AGGRESSIVE, Byte.valueOf((byte) (i & 255)));
     }
 
-    public EnumCreatureAttribute getCreatureAttribute()
-    {
+    public EnumCreatureAttribute getCreatureAttribute() {
         return EnumCreatureAttribute.ILLAGER;
     }
 
     @SideOnly(Side.CLIENT)
-    public AbstractIllager.IllagerArmPose getArmPose()
-    {
+    public AbstractIllager.IllagerArmPose getArmPose() {
         return AbstractIllager.IllagerArmPose.CROSSED;
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum IllagerArmPose
-    {
+    public static enum IllagerArmPose {
         CROSSED,
         ATTACKING,
         SPELLCASTING,
