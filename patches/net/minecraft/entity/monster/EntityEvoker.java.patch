--- ../src-base/minecraft/net/minecraft/entity/monster/EntityEvoker.java
+++ ../src-work/minecraft/net/minecraft/entity/monster/EntityEvoker.java
@@ -1,21 +1,9 @@
 package net.minecraft.entity.monster;
 
 import com.google.common.base.Predicate;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.EnumCreatureAttribute;
-import net.minecraft.entity.IEntityLivingData;
-import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIAvoidEntity;
-import net.minecraft.entity.ai.EntityAIHurtByTarget;
-import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAIWander;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
+import net.minecraft.entity.*;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.passive.EntitySheep;
 import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.entity.player.EntityPlayer;
@@ -33,19 +21,19 @@
 import net.minecraft.world.World;
 import net.minecraft.world.storage.loot.LootTableList;
 
-public class EntityEvoker extends EntitySpellcasterIllager
-{
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class EntityEvoker extends EntitySpellcasterIllager {
     private EntitySheep wololoTarget;
 
-    public EntityEvoker(World worldIn)
-    {
+    public EntityEvoker(World worldIn) {
         super(worldIn);
         this.setSize(0.6F, 1.95F);
         this.experienceValue = 10;
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         super.initEntityAI();
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(1, new EntityEvoker.AICastingSpell());
@@ -56,180 +44,138 @@
         this.tasks.addTask(8, new EntityAIWander(this, 0.6D));
         this.tasks.addTask(9, new EntityAIWatchClosest(this, EntityPlayer.class, 3.0F, 1.0F));
         this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, new Class[] {EntityEvoker.class}));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, new Class[]{EntityEvoker.class}));
         this.targetTasks.addTask(2, (new EntityAINearestAttackableTarget(this, EntityPlayer.class, true)).setUnseenMemoryTicks(300));
         this.targetTasks.addTask(3, (new EntityAINearestAttackableTarget(this, EntityVillager.class, false)).setUnseenMemoryTicks(300));
         this.targetTasks.addTask(3, new EntityAINearestAttackableTarget(this, EntityIronGolem.class, false));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.5D);
         this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(12.0D);
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(24.0D);
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
     }
 
-    public static void registerFixesEvoker(DataFixer fixer)
-    {
+    public static void registerFixesEvoker(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntityEvoker.class);
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
     }
 
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_EVOCATION_ILLAGER;
     }
 
-    protected void updateAITasks()
-    {
+    protected void updateAITasks() {
         super.updateAITasks();
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
     }
 
-    public boolean isOnSameTeam(Entity entityIn)
-    {
-        if (entityIn == null)
-        {
+    public boolean isOnSameTeam(Entity entityIn) {
+        if (entityIn == null) {
             return false;
-        }
-        else if (entityIn == this)
-        {
+        } else if (entityIn == this) {
             return true;
-        }
-        else if (super.isOnSameTeam(entityIn))
-        {
+        } else if (super.isOnSameTeam(entityIn)) {
             return true;
-        }
-        else if (entityIn instanceof EntityVex)
-        {
-            return this.isOnSameTeam(((EntityVex)entityIn).getOwner());
-        }
-        else if (entityIn instanceof EntityLivingBase && ((EntityLivingBase)entityIn).getCreatureAttribute() == EnumCreatureAttribute.ILLAGER)
-        {
+        } else if (entityIn instanceof EntityVex) {
+            return this.isOnSameTeam(((EntityVex) entityIn).getOwner());
+        } else if (entityIn instanceof EntityLivingBase && ((EntityLivingBase) entityIn).getCreatureAttribute() == EnumCreatureAttribute.ILLAGER) {
             return this.getTeam() == null && entityIn.getTeam() == null;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return SoundEvents.ENTITY_EVOCATION_ILLAGER_AMBIENT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.EVOCATION_ILLAGER_DEATH;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_EVOCATION_ILLAGER_HURT;
     }
 
-    private void setWololoTarget(@Nullable EntitySheep wololoTargetIn)
-    {
+    private void setWololoTarget(@Nullable EntitySheep wololoTargetIn) {
         this.wololoTarget = wololoTargetIn;
     }
 
     @Nullable
-    private EntitySheep getWololoTarget()
-    {
+    private EntitySheep getWololoTarget() {
         return this.wololoTarget;
     }
 
-    protected SoundEvent getSpellSound()
-    {
+    protected SoundEvent getSpellSound() {
         return SoundEvents.EVOCATION_ILLAGER_CAST_SPELL;
     }
 
-    class AIAttackSpell extends EntitySpellcasterIllager.AIUseSpell
-    {
-        private AIAttackSpell()
-        {
+    class AIAttackSpell extends EntitySpellcasterIllager.AIUseSpell {
+        private AIAttackSpell() {
             super();
         }
 
-        protected int getCastingTime()
-        {
+        protected int getCastingTime() {
             return 40;
         }
 
-        protected int getCastingInterval()
-        {
+        protected int getCastingInterval() {
             return 100;
         }
 
-        protected void castSpell()
-        {
+        protected void castSpell() {
             EntityLivingBase entitylivingbase = EntityEvoker.this.getAttackTarget();
             double d0 = Math.min(entitylivingbase.posY, EntityEvoker.this.posY);
             double d1 = Math.max(entitylivingbase.posY, EntityEvoker.this.posY) + 1.0D;
-            float f = (float)MathHelper.atan2(entitylivingbase.posZ - EntityEvoker.this.posZ, entitylivingbase.posX - EntityEvoker.this.posX);
+            float f = (float) MathHelper.atan2(entitylivingbase.posZ - EntityEvoker.this.posZ, entitylivingbase.posX - EntityEvoker.this.posX);
 
-            if (EntityEvoker.this.getDistanceSq(entitylivingbase) < 9.0D)
-            {
-                for (int i = 0; i < 5; ++i)
-                {
-                    float f1 = f + (float)i * (float)Math.PI * 0.4F;
-                    this.spawnFangs(EntityEvoker.this.posX + (double)MathHelper.cos(f1) * 1.5D, EntityEvoker.this.posZ + (double)MathHelper.sin(f1) * 1.5D, d0, d1, f1, 0);
+            if (EntityEvoker.this.getDistanceSq(entitylivingbase) < 9.0D) {
+                for (int i = 0; i < 5; ++i) {
+                    float f1 = f + (float) i * (float) Math.PI * 0.4F;
+                    this.spawnFangs(EntityEvoker.this.posX + (double) MathHelper.cos(f1) * 1.5D, EntityEvoker.this.posZ + (double) MathHelper.sin(f1) * 1.5D, d0, d1, f1, 0);
                 }
 
-                for (int k = 0; k < 8; ++k)
-                {
-                    float f2 = f + (float)k * (float)Math.PI * 2.0F / 8.0F + ((float)Math.PI * 2F / 5F);
-                    this.spawnFangs(EntityEvoker.this.posX + (double)MathHelper.cos(f2) * 2.5D, EntityEvoker.this.posZ + (double)MathHelper.sin(f2) * 2.5D, d0, d1, f2, 3);
+                for (int k = 0; k < 8; ++k) {
+                    float f2 = f + (float) k * (float) Math.PI * 2.0F / 8.0F + ((float) Math.PI * 2F / 5F);
+                    this.spawnFangs(EntityEvoker.this.posX + (double) MathHelper.cos(f2) * 2.5D, EntityEvoker.this.posZ + (double) MathHelper.sin(f2) * 2.5D, d0, d1, f2, 3);
                 }
-            }
-            else
-            {
-                for (int l = 0; l < 16; ++l)
-                {
-                    double d2 = 1.25D * (double)(l + 1);
+            } else {
+                for (int l = 0; l < 16; ++l) {
+                    double d2 = 1.25D * (double) (l + 1);
                     int j = 1 * l;
-                    this.spawnFangs(EntityEvoker.this.posX + (double)MathHelper.cos(f) * d2, EntityEvoker.this.posZ + (double)MathHelper.sin(f) * d2, d0, d1, f, j);
+                    this.spawnFangs(EntityEvoker.this.posX + (double) MathHelper.cos(f) * d2, EntityEvoker.this.posZ + (double) MathHelper.sin(f) * d2, d0, d1, f, j);
                 }
             }
         }
 
-        private void spawnFangs(double p_190876_1_, double p_190876_3_, double p_190876_5_, double p_190876_7_, float p_190876_9_, int p_190876_10_)
-        {
+        private void spawnFangs(double p_190876_1_, double p_190876_3_, double p_190876_5_, double p_190876_7_, float p_190876_9_, int p_190876_10_) {
             BlockPos blockpos = new BlockPos(p_190876_1_, p_190876_7_, p_190876_3_);
             boolean flag = false;
             double d0 = 0.0D;
 
-            while (true)
-            {
-                if (!EntityEvoker.this.world.isBlockNormalCube(blockpos, true) && EntityEvoker.this.world.isBlockNormalCube(blockpos.down(), true))
-                {
-                    if (!EntityEvoker.this.world.isAirBlock(blockpos))
-                    {
+            while (true) {
+                if (!EntityEvoker.this.world.isBlockNormalCube(blockpos, true) && EntityEvoker.this.world.isBlockNormalCube(blockpos.down(), true)) {
+                    if (!EntityEvoker.this.world.isAirBlock(blockpos)) {
                         IBlockState iblockstate = EntityEvoker.this.world.getBlockState(blockpos);
                         AxisAlignedBB axisalignedbb = iblockstate.getCollisionBoundingBox(EntityEvoker.this.world, blockpos);
 
-                        if (axisalignedbb != null)
-                        {
+                        if (axisalignedbb != null) {
                             d0 = axisalignedbb.maxY;
                         }
                     }
@@ -240,88 +186,68 @@
 
                 blockpos = blockpos.down();
 
-                if (blockpos.getY() < MathHelper.floor(p_190876_5_) - 1)
-                {
+                if (blockpos.getY() < MathHelper.floor(p_190876_5_) - 1) {
                     break;
                 }
             }
 
-            if (flag)
-            {
-                EntityEvokerFangs entityevokerfangs = new EntityEvokerFangs(EntityEvoker.this.world, p_190876_1_, (double)blockpos.getY() + d0, p_190876_3_, p_190876_9_, p_190876_10_, EntityEvoker.this);
+            if (flag) {
+                EntityEvokerFangs entityevokerfangs = new EntityEvokerFangs(EntityEvoker.this.world, p_190876_1_, (double) blockpos.getY() + d0, p_190876_3_, p_190876_9_, p_190876_10_, EntityEvoker.this);
                 EntityEvoker.this.world.spawnEntity(entityevokerfangs);
             }
         }
 
-        protected SoundEvent getSpellPrepareSound()
-        {
+        protected SoundEvent getSpellPrepareSound() {
             return SoundEvents.EVOCATION_ILLAGER_PREPARE_ATTACK;
         }
 
-        protected EntitySpellcasterIllager.SpellType getSpellType()
-        {
+        protected EntitySpellcasterIllager.SpellType getSpellType() {
             return EntitySpellcasterIllager.SpellType.FANGS;
         }
     }
 
-    class AICastingSpell extends EntitySpellcasterIllager.AICastingApell
-    {
-        private AICastingSpell()
-        {
+    class AICastingSpell extends EntitySpellcasterIllager.AICastingApell {
+        private AICastingSpell() {
             super();
         }
 
-        public void updateTask()
-        {
-            if (EntityEvoker.this.getAttackTarget() != null)
-            {
-                EntityEvoker.this.getLookHelper().setLookPositionWithEntity(EntityEvoker.this.getAttackTarget(), (float)EntityEvoker.this.getHorizontalFaceSpeed(), (float)EntityEvoker.this.getVerticalFaceSpeed());
+        public void updateTask() {
+            if (EntityEvoker.this.getAttackTarget() != null) {
+                EntityEvoker.this.getLookHelper().setLookPositionWithEntity(EntityEvoker.this.getAttackTarget(), (float) EntityEvoker.this.getHorizontalFaceSpeed(), (float) EntityEvoker.this.getVerticalFaceSpeed());
+            } else if (EntityEvoker.this.getWololoTarget() != null) {
+                EntityEvoker.this.getLookHelper().setLookPositionWithEntity(EntityEvoker.this.getWololoTarget(), (float) EntityEvoker.this.getHorizontalFaceSpeed(), (float) EntityEvoker.this.getVerticalFaceSpeed());
             }
-            else if (EntityEvoker.this.getWololoTarget() != null)
-            {
-                EntityEvoker.this.getLookHelper().setLookPositionWithEntity(EntityEvoker.this.getWololoTarget(), (float)EntityEvoker.this.getHorizontalFaceSpeed(), (float)EntityEvoker.this.getVerticalFaceSpeed());
-            }
         }
     }
 
-    class AISummonSpell extends EntitySpellcasterIllager.AIUseSpell
-    {
-        private AISummonSpell()
-        {
+    class AISummonSpell extends EntitySpellcasterIllager.AIUseSpell {
+        private AISummonSpell() {
             super();
         }
 
-        public boolean shouldExecute()
-        {
-            if (!super.shouldExecute())
-            {
+        public boolean shouldExecute() {
+            if (!super.shouldExecute()) {
                 return false;
-            }
-            else
-            {
+            } else {
                 int i = EntityEvoker.this.world.getEntitiesWithinAABB(EntityVex.class, EntityEvoker.this.getEntityBoundingBox().grow(16.0D)).size();
                 return EntityEvoker.this.rand.nextInt(8) + 1 > i;
             }
         }
 
-        protected int getCastingTime()
-        {
+        protected int getCastingTime() {
             return 100;
         }
 
-        protected int getCastingInterval()
-        {
+        protected int getCastingInterval() {
             return 340;
         }
 
-        protected void castSpell()
-        {
-            for (int i = 0; i < 3; ++i)
-            {
+        protected void castSpell() {
+            for (int i = 0; i < 3; ++i) {
                 BlockPos blockpos = (new BlockPos(EntityEvoker.this)).add(-2 + EntityEvoker.this.rand.nextInt(5), 1, -2 + EntityEvoker.this.rand.nextInt(5));
                 EntityVex entityvex = new EntityVex(EntityEvoker.this.world);
                 entityvex.moveToBlockPosAndAngles(blockpos, 0.0F, 0.0F);
-                entityvex.onInitialSpawn(EntityEvoker.this.world.getDifficultyForLocation(blockpos), (IEntityLivingData)null);
+                entityvex.onInitialSpawn(EntityEvoker.this.world.getDifficultyForLocation(blockpos), (IEntityLivingData) null);
                 entityvex.setOwner(EntityEvoker.this);
                 entityvex.setBoundOrigin(blockpos);
                 entityvex.setLimitedLife(20 * (30 + EntityEvoker.this.rand.nextInt(90)));
@@ -329,109 +255,81 @@
             }
         }
 
-        protected SoundEvent getSpellPrepareSound()
-        {
+        protected SoundEvent getSpellPrepareSound() {
             return SoundEvents.EVOCATION_ILLAGER_PREPARE_SUMMON;
         }
 
-        protected EntitySpellcasterIllager.SpellType getSpellType()
-        {
+        protected EntitySpellcasterIllager.SpellType getSpellType() {
             return EntitySpellcasterIllager.SpellType.SUMMON_VEX;
         }
     }
 
-    public class AIWololoSpell extends EntitySpellcasterIllager.AIUseSpell
-    {
-        final Predicate<EntitySheep> wololoSelector = new Predicate<EntitySheep>()
-        {
-            public boolean apply(EntitySheep p_apply_1_)
-            {
+    public class AIWololoSpell extends EntitySpellcasterIllager.AIUseSpell {
+        final Predicate<EntitySheep> wololoSelector = new Predicate<EntitySheep>() {
+            public boolean apply(EntitySheep p_apply_1_) {
                 return p_apply_1_.getFleeceColor() == EnumDyeColor.BLUE;
             }
         };
 
-        public AIWololoSpell()
-        {
+        public AIWololoSpell() {
             super();
         }
 
-        public boolean shouldExecute()
-        {
-            if (EntityEvoker.this.getAttackTarget() != null)
-            {
+        public boolean shouldExecute() {
+            if (EntityEvoker.this.getAttackTarget() != null) {
                 return false;
-            }
-            else if (EntityEvoker.this.isSpellcasting())
-            {
+            } else if (EntityEvoker.this.isSpellcasting()) {
                 return false;
-            }
-            else if (EntityEvoker.this.ticksExisted < this.spellCooldown)
-            {
+            } else if (EntityEvoker.this.ticksExisted < this.spellCooldown) {
                 return false;
-            }
-            else if (!net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(EntityEvoker.this.world, EntityEvoker.this))
-            {
+            } else if (!net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(EntityEvoker.this.world, EntityEvoker.this)) {
                 return false;
-            }
-            else
-            {
+            } else {
                 List<EntitySheep> list = EntityEvoker.this.world.<EntitySheep>getEntitiesWithinAABB(EntitySheep.class, EntityEvoker.this.getEntityBoundingBox().grow(16.0D, 4.0D, 16.0D), this.wololoSelector);
 
-                if (list.isEmpty())
-                {
+                if (list.isEmpty()) {
                     return false;
-                }
-                else
-                {
+                } else {
                     EntityEvoker.this.setWololoTarget(list.get(EntityEvoker.this.rand.nextInt(list.size())));
                     return true;
                 }
             }
         }
 
-        public boolean shouldContinueExecuting()
-        {
+        public boolean shouldContinueExecuting() {
             return EntityEvoker.this.getWololoTarget() != null && this.spellWarmup > 0;
         }
 
-        public void resetTask()
-        {
+        public void resetTask() {
             super.resetTask();
-            EntityEvoker.this.setWololoTarget((EntitySheep)null);
+            EntityEvoker.this.setWololoTarget((EntitySheep) null);
         }
 
-        protected void castSpell()
-        {
+        protected void castSpell() {
             EntitySheep entitysheep = EntityEvoker.this.getWololoTarget();
 
-            if (entitysheep != null && entitysheep.isEntityAlive())
-            {
+            if (entitysheep != null && entitysheep.isEntityAlive()) {
                 entitysheep.setFleeceColor(EnumDyeColor.RED);
             }
         }
 
-        protected int getCastWarmupTime()
-        {
+        protected int getCastWarmupTime() {
             return 40;
         }
 
-        protected int getCastingTime()
-        {
+        protected int getCastingTime() {
             return 60;
         }
 
-        protected int getCastingInterval()
-        {
+        protected int getCastingInterval() {
             return 140;
         }
 
-        protected SoundEvent getSpellPrepareSound()
-        {
+        protected SoundEvent getSpellPrepareSound() {
             return SoundEvents.EVOCATION_ILLAGER_PREPARE_WOLOLO;
         }
 
-        protected EntitySpellcasterIllager.SpellType getSpellType()
-        {
+        protected EntitySpellcasterIllager.SpellType getSpellType() {
             return EntitySpellcasterIllager.SpellType.WOLOLO;
         }
     }
