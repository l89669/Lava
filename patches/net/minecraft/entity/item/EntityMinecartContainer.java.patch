--- ../src-base/minecraft/net/minecraft/entity/item/EntityMinecartContainer.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityMinecartContainer.java
@@ -1,7 +1,5 @@
 package net.minecraft.entity.item;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Container;
@@ -23,40 +21,76 @@
 import net.minecraft.world.storage.loot.ILootContainer;
 import net.minecraft.world.storage.loot.LootContext;
 import net.minecraft.world.storage.loot.LootTable;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
-public abstract class EntityMinecartContainer extends EntityMinecart implements ILockableContainer, ILootContainer
-{
-    private NonNullList<ItemStack> minecartContainerItems = NonNullList.<ItemStack>withSize(36, ItemStack.EMPTY);
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Random;
+
+public abstract class EntityMinecartContainer extends EntityMinecart implements ILockableContainer, ILootContainer {
+    private NonNullList<ItemStack> minecartContainerItems = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
     public boolean dropContentsWhenDead = true;
     private ResourceLocation lootTable;
     private long lootTableSeed;
+    private int maxStack = MAX_STACK; // CraftBukkit
 
-    public EntityMinecartContainer(World worldIn)
-    {
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public EntityMinecartContainer(World worldIn) {
         super(worldIn);
     }
 
-    public EntityMinecartContainer(World worldIn, double x, double y, double z)
-    {
+    public EntityMinecartContainer(World worldIn, double x, double y, double z) {
         super(worldIn, x, y, z);
     }
 
-    public void killMinecart(DamageSource source)
-    {
+    // CraftBukkit start
+    public List<ItemStack> getContents() {
+        return this.minecartContainerItems;
+    }
+
+    public InventoryHolder getOwner() {
+        org.bukkit.entity.Entity cart = getBukkitEntity();
+        if (cart instanceof InventoryHolder) return (InventoryHolder) cart;
+        return null;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
+
+    public void killMinecart(DamageSource source) {
         super.killMinecart(source);
 
-        if (this.world.getGameRules().getBoolean("doEntityDrops"))
-        {
+        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
             InventoryHelper.dropInventoryItems(this.world, this, this);
         }
     }
 
-    public boolean isEmpty()
-    {
-        for (ItemStack itemstack : this.minecartContainerItems)
-        {
-            if (!itemstack.isEmpty())
-            {
+    public boolean isEmpty() {
+        for (ItemStack itemstack : this.minecartContainerItems) {
+            if (!itemstack.isEmpty()) {
                 return false;
             }
         }
@@ -64,217 +98,170 @@
         return true;
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
-        this.addLoot((EntityPlayer)null);
+    public ItemStack getStackInSlot(int index) {
+        this.addLoot((EntityPlayer) null);
         return this.minecartContainerItems.get(index);
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
-        this.addLoot((EntityPlayer)null);
+    public ItemStack decrStackSize(int index, int count) {
+        this.addLoot((EntityPlayer) null);
         return ItemStackHelper.getAndSplit(this.minecartContainerItems, index, count);
     }
 
-    public ItemStack removeStackFromSlot(int index)
-    {
-        this.addLoot((EntityPlayer)null);
+    public ItemStack removeStackFromSlot(int index) {
+        this.addLoot((EntityPlayer) null);
         ItemStack itemstack = this.minecartContainerItems.get(index);
 
-        if (itemstack.isEmpty())
-        {
+        if (itemstack.isEmpty()) {
             return ItemStack.EMPTY;
-        }
-        else
-        {
+        } else {
             this.minecartContainerItems.set(index, ItemStack.EMPTY);
             return itemstack;
         }
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
-        this.addLoot((EntityPlayer)null);
+    public void setInventorySlotContents(int index, ItemStack stack) {
+        this.addLoot((EntityPlayer) null);
         this.minecartContainerItems.set(index, stack);
 
-        if (!stack.isEmpty() && stack.getCount() > this.getInventoryStackLimit())
-        {
+        if (!stack.isEmpty() && stack.getCount() > this.getInventoryStackLimit()) {
             stack.setCount(this.getInventoryStackLimit());
         }
     }
 
-    public void markDirty()
-    {
+    public void markDirty() {
     }
 
-    public boolean isUsableByPlayer(EntityPlayer player)
-    {
-        if (this.isDead)
-        {
+    public boolean isUsableByPlayer(EntityPlayer player) {
+        if (this.isDead) {
             return false;
-        }
-        else
-        {
+        } else {
             return player.getDistanceSq(this) <= 64.0D;
         }
     }
 
-    public void openInventory(EntityPlayer player)
-    {
+    public void openInventory(EntityPlayer player) {
     }
 
-    public void closeInventory(EntityPlayer player)
-    {
+    public void closeInventory(EntityPlayer player) {
     }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
         return true;
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return maxStack;
     }
 
     @Nullable
-    public Entity changeDimension(int dimensionIn, net.minecraftforge.common.util.ITeleporter teleporter)
-    {
+    public Entity changeDimension(int dimensionIn, net.minecraftforge.common.util.ITeleporter teleporter) {
         this.dropContentsWhenDead = false;
         return super.changeDimension(dimensionIn, teleporter);
     }
 
-    public void setDead()
-    {
-        if (this.dropContentsWhenDead)
-        {
+    public void setDead() {
+        if (this.dropContentsWhenDead) {
             InventoryHelper.dropInventoryItems(this.world, this, this);
         }
 
         super.setDead();
     }
 
-    public void setDropItemsWhenDead(boolean dropWhenDead)
-    {
+    public void setDropItemsWhenDead(boolean dropWhenDead) {
         this.dropContentsWhenDead = dropWhenDead;
     }
 
-    public static void addDataFixers(DataFixer p_190574_0_, Class<?> p_190574_1_)
-    {
+    public static void addDataFixers(DataFixer p_190574_0_, Class<?> p_190574_1_) {
         EntityMinecart.registerFixesMinecart(p_190574_0_, p_190574_1_);
-        p_190574_0_.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(p_190574_1_, new String[] {"Items"}));
+        p_190574_0_.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(p_190574_1_, new String[]{"Items"}));
     }
 
-    protected void writeEntityToNBT(NBTTagCompound compound)
-    {
+    protected void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
 
-        if (this.lootTable != null)
-        {
+        if (this.lootTable != null) {
             compound.setString("LootTable", this.lootTable.toString());
 
-            if (this.lootTableSeed != 0L)
-            {
+            if (this.lootTableSeed != 0L) {
                 compound.setLong("LootTableSeed", this.lootTableSeed);
             }
-        }
-        else
-        {
+        } else {
             ItemStackHelper.saveAllItems(compound, this.minecartContainerItems);
         }
     }
 
-    protected void readEntityFromNBT(NBTTagCompound compound)
-    {
+    protected void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.minecartContainerItems = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
 
-        if (compound.hasKey("LootTable", 8))
-        {
+        if (compound.hasKey("LootTable", 8)) {
             this.lootTable = new ResourceLocation(compound.getString("LootTable"));
             this.lootTableSeed = compound.getLong("LootTableSeed");
-        }
-        else
-        {
+        } else {
             ItemStackHelper.loadAllItems(compound, this.minecartContainerItems);
         }
     }
 
-    public boolean processInitialInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (super.processInitialInteract(player, hand)) return true;
-        if (!this.world.isRemote)
-        {
+        if (!this.world.isRemote) {
             player.displayGUIChest(this);
         }
 
         return true;
     }
 
-    protected void applyDrag()
-    {
+    protected void applyDrag() {
         float f = 0.98F;
 
-        if (this.lootTable == null)
-        {
+        if (this.lootTable == null) {
             int i = 15 - Container.calcRedstoneFromInventory(this);
-            f += (float)i * 0.001F;
+            f += (float) i * 0.001F;
         }
 
-        this.motionX *= (double)f;
+        this.motionX *= (double) f;
         this.motionY *= 0.0D;
-        this.motionZ *= (double)f;
+        this.motionZ *= (double) f;
     }
 
-    public int getField(int id)
-    {
+    public int getField(int id) {
         return 0;
     }
 
-    public void setField(int id, int value)
-    {
+    public void setField(int id, int value) {
     }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 0;
     }
 
-    public boolean isLocked()
-    {
+    public boolean isLocked() {
         return false;
     }
 
-    public void setLockCode(LockCode code)
-    {
+    public void setLockCode(LockCode code) {
     }
 
-    public LockCode getLockCode()
-    {
+    public LockCode getLockCode() {
         return LockCode.EMPTY_CODE;
     }
 
-    public void addLoot(@Nullable EntityPlayer player)
-    {
-        if (this.lootTable != null)
-        {
+    public void addLoot(@Nullable EntityPlayer player) {
+        if (this.lootTable != null) {
             LootTable loottable = this.world.getLootTableManager().getLootTableFromLocation(this.lootTable);
             this.lootTable = null;
             Random random;
 
-            if (this.lootTableSeed == 0L)
-            {
+            if (this.lootTableSeed == 0L) {
                 random = new Random();
-            }
-            else
-            {
+            } else {
                 random = new Random(this.lootTableSeed);
             }
 
-            LootContext.Builder lootcontext$builder = new LootContext.Builder((WorldServer)this.world).withLootedEntity(this); // Forge: add looted entity to LootContext
+            LootContext.Builder lootcontext$builder = new LootContext.Builder((WorldServer) this.world).withLootedEntity(this); // Forge: add looted entity to LootContext
 
-            if (player != null)
-            {
+            if (player != null) {
                 lootcontext$builder.withLuck(player.getLuck()).withPlayer(player); // Forge: add player to LootContext
             }
 
@@ -287,35 +274,29 @@
     @SuppressWarnings("unchecked")
     @Override
     @Nullable
-    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
-    {
-        if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
-        {
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing) {
+        if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
             return (T) itemHandler;
         }
         return super.getCapability(capability, facing);
     }
 
     @Override
-    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable net.minecraft.util.EnumFacing facing)
-    {
+    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable net.minecraft.util.EnumFacing facing) {
         return capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY || super.hasCapability(capability, facing);
     }
 
-    public void clear()
-    {
-        this.addLoot((EntityPlayer)null);
+    public void clear() {
+        this.addLoot((EntityPlayer) null);
         this.minecartContainerItems.clear();
     }
 
-    public void setLootTable(ResourceLocation lootTableIn, long lootTableSeedIn)
-    {
+    public void setLootTable(ResourceLocation lootTableIn, long lootTableSeedIn) {
         this.lootTable = lootTableIn;
         this.lootTableSeed = lootTableSeedIn;
     }
 
-    public ResourceLocation getLootTable()
-    {
+    public ResourceLocation getLootTable() {
         return this.lootTable;
     }
 }
