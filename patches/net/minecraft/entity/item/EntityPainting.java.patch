--- ../src-base/minecraft/net/minecraft/entity/item/EntityPainting.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityPainting.java
@@ -1,9 +1,6 @@
 package net.minecraft.entity.item;
 
 import com.google.common.collect.Lists;
-import java.util.Iterator;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityHanging;
 import net.minecraft.entity.player.EntityPlayer;
@@ -17,48 +14,44 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntityPainting extends EntityHanging
-{
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.List;
+
+public class EntityPainting extends EntityHanging {
     public EntityPainting.EnumArt art;
 
-    public EntityPainting(World worldIn)
-    {
+    public EntityPainting(World worldIn) {
         super(worldIn);
+        this.art = EnumArt.values()[this.rand.nextInt(EnumArt.values().length)]; // CraftBukkit - generate a non-null painting
     }
 
-    public EntityPainting(World worldIn, BlockPos pos, EnumFacing facing)
-    {
+    public EntityPainting(World worldIn, BlockPos pos, EnumFacing facing) {
         super(worldIn, pos);
         List<EntityPainting.EnumArt> list = Lists.<EntityPainting.EnumArt>newArrayList();
         int i = 0;
 
-        for (EntityPainting.EnumArt entitypainting$enumart : EntityPainting.EnumArt.values())
-        {
+        for (EntityPainting.EnumArt entitypainting$enumart : EntityPainting.EnumArt.values()) {
             this.art = entitypainting$enumart;
             this.updateFacingWithBoundingBox(facing);
 
-            if (this.onValidSurface())
-            {
+            if (this.onValidSurface()) {
                 list.add(entitypainting$enumart);
                 int j = entitypainting$enumart.sizeX * entitypainting$enumart.sizeY;
 
-                if (j > i)
-                {
+                if (j > i) {
                     i = j;
                 }
             }
         }
 
-        if (!list.isEmpty())
-        {
+        if (!list.isEmpty()) {
             Iterator<EntityPainting.EnumArt> iterator = list.iterator();
 
-            while (iterator.hasNext())
-            {
+            while (iterator.hasNext()) {
                 EntityPainting.EnumArt entitypainting$enumart1 = iterator.next();
 
-                if (entitypainting$enumart1.sizeX * entitypainting$enumart1.sizeY < i)
-                {
+                if (entitypainting$enumart1.sizeX * entitypainting$enumart1.sizeY < i) {
                     iterator.remove();
                 }
             }
@@ -70,14 +63,11 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public EntityPainting(World worldIn, BlockPos pos, EnumFacing facing, String title)
-    {
+    public EntityPainting(World worldIn, BlockPos pos, EnumFacing facing, String title) {
         this(worldIn, pos, facing);
 
-        for (EntityPainting.EnumArt entitypainting$enumart : EntityPainting.EnumArt.values())
-        {
-            if (entitypainting$enumart.title.equals(title))
-            {
+        for (EntityPainting.EnumArt entitypainting$enumart : EntityPainting.EnumArt.values()) {
+            if (entitypainting$enumart.title.equals(title)) {
                 this.art = entitypainting$enumart;
                 break;
             }
@@ -86,54 +76,43 @@
         this.updateFacingWithBoundingBox(facing);
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         compound.setString("Motive", this.art.title);
         super.writeEntityToNBT(compound);
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         String s = compound.getString("Motive");
 
-        for (EntityPainting.EnumArt entitypainting$enumart : EntityPainting.EnumArt.values())
-        {
-            if (entitypainting$enumart.title.equals(s))
-            {
+        for (EntityPainting.EnumArt entitypainting$enumart : EntityPainting.EnumArt.values()) {
+            if (entitypainting$enumart.title.equals(s)) {
                 this.art = entitypainting$enumart;
             }
         }
 
-        if (this.art == null)
-        {
+        if (this.art == null) {
             this.art = EntityPainting.EnumArt.KEBAB;
         }
 
         super.readEntityFromNBT(compound);
     }
 
-    public int getWidthPixels()
-    {
+    public int getWidthPixels() {
         return this.art.sizeX;
     }
 
-    public int getHeightPixels()
-    {
+    public int getHeightPixels() {
         return this.art.sizeY;
     }
 
-    public void onBroken(@Nullable Entity brokenEntity)
-    {
-        if (this.world.getGameRules().getBoolean("doEntityDrops"))
-        {
+    public void onBroken(@Nullable Entity brokenEntity) {
+        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
             this.playSound(SoundEvents.ENTITY_PAINTING_BREAK, 1.0F, 1.0F);
 
-            if (brokenEntity instanceof EntityPlayer)
-            {
-                EntityPlayer entityplayer = (EntityPlayer)brokenEntity;
+            if (brokenEntity instanceof EntityPlayer) {
+                EntityPlayer entityplayer = (EntityPlayer) brokenEntity;
 
-                if (entityplayer.capabilities.isCreativeMode)
-                {
+                if (entityplayer.capabilities.isCreativeMode) {
                     return;
                 }
             }
@@ -142,25 +121,21 @@
         }
     }
 
-    public void playPlaceSound()
-    {
+    public void playPlaceSound() {
         this.playSound(SoundEvents.ENTITY_PAINTING_PLACE, 1.0F, 1.0F);
     }
 
-    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
-    {
+    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch) {
         this.setPosition(x, y, z);
     }
 
     @SideOnly(Side.CLIENT)
-    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport)
-    {
+    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport) {
         BlockPos blockpos = this.hangingPosition.add(x - this.posX, y - this.posY, z - this.posZ);
-        this.setPosition((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ());
+        this.setPosition((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ());
     }
 
-    public static enum EnumArt
-    {
+    public static enum EnumArt {
         KEBAB("Kebab", 16, 16, 0, 0),
         AZTEC("Aztec", 16, 16, 16, 0),
         ALBAN("Alban", 16, 16, 32, 0),
@@ -195,8 +170,7 @@
         public final int offsetX;
         public final int offsetY;
 
-        private EnumArt(String titleIn, int width, int height, int textureU, int textureV)
-        {
+        private EnumArt(String titleIn, int width, int height, int textureU, int textureV) {
             this.title = titleIn;
             this.sizeX = width;
             this.sizeY = height;
