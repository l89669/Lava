--- ../src-base/minecraft/net/minecraft/entity/item/EntityEnderCrystal.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityEnderCrystal.java
@@ -1,7 +1,6 @@
 package net.minecraft.entity.item;
 
 import com.google.common.base.Optional;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.boss.EntityDragon;
 import net.minecraft.init.Blocks;
@@ -17,105 +16,99 @@
 import net.minecraft.world.end.DragonFightManager;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 
-public class EntityEnderCrystal extends Entity
-{
+import javax.annotation.Nullable;
+
+public class EntityEnderCrystal extends Entity {
     private static final DataParameter<Optional<BlockPos>> BEAM_TARGET = EntityDataManager.<Optional<BlockPos>>createKey(EntityEnderCrystal.class, DataSerializers.OPTIONAL_BLOCK_POS);
     private static final DataParameter<Boolean> SHOW_BOTTOM = EntityDataManager.<Boolean>createKey(EntityEnderCrystal.class, DataSerializers.BOOLEAN);
     public int innerRotation;
 
-    public EntityEnderCrystal(World worldIn)
-    {
+    public EntityEnderCrystal(World worldIn) {
         super(worldIn);
         this.preventEntitySpawning = true;
         this.setSize(2.0F, 2.0F);
         this.innerRotation = this.rand.nextInt(100000);
     }
 
-    public EntityEnderCrystal(World worldIn, double x, double y, double z)
-    {
+    public EntityEnderCrystal(World worldIn, double x, double y, double z) {
         this(worldIn);
         this.setPosition(x, y, z);
     }
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         this.getDataManager().register(BEAM_TARGET, Optional.absent());
         this.getDataManager().register(SHOW_BOTTOM, Boolean.valueOf(true));
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         this.prevPosX = this.posX;
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
         ++this.innerRotation;
 
-        if (!this.world.isRemote)
-        {
+        if (!this.world.isRemote) {
             BlockPos blockpos = new BlockPos(this);
 
-            if (this.world.provider instanceof WorldProviderEnd && this.world.getBlockState(blockpos).getBlock() != Blocks.FIRE)
-            {
-                this.world.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
+            if (this.world.provider instanceof WorldProviderEnd && this.world.getBlockState(blockpos).getBlock() != Blocks.FIRE) {
+//                this.world.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
+                if (!CraftEventFactory.callBlockIgniteEvent(this.world, blockpos.getX(), blockpos.getY(), blockpos.getZ(), this).isCancelled()) {
+                    this.world.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
+                }
             }
         }
     }
 
-    protected void writeEntityToNBT(NBTTagCompound compound)
-    {
-        if (this.getBeamTarget() != null)
-        {
+    protected void writeEntityToNBT(NBTTagCompound compound) {
+        if (this.getBeamTarget() != null) {
             compound.setTag("BeamTarget", NBTUtil.createPosTag(this.getBeamTarget()));
         }
 
         compound.setBoolean("ShowBottom", this.shouldShowBottom());
     }
 
-    protected void readEntityFromNBT(NBTTagCompound compound)
-    {
-        if (compound.hasKey("BeamTarget", 10))
-        {
+    protected void readEntityFromNBT(NBTTagCompound compound) {
+        if (compound.hasKey("BeamTarget", 10)) {
             this.setBeamTarget(NBTUtil.getPosFromTag(compound.getCompoundTag("BeamTarget")));
         }
 
-        if (compound.hasKey("ShowBottom", 1))
-        {
+        if (compound.hasKey("ShowBottom", 1)) {
             this.setShowBottom(compound.getBoolean("ShowBottom"));
         }
     }
 
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return true;
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (this.isEntityInvulnerable(source))
-        {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (this.isEntityInvulnerable(source)) {
             return false;
-        }
-        else if (source.getTrueSource() instanceof EntityDragon)
-        {
+        } else if (source.getTrueSource() instanceof EntityDragon) {
             return false;
-        }
-        else
-        {
-            if (!this.isDead && !this.world.isRemote)
-            {
+        } else {
+            if (!this.isDead && !this.world.isRemote) {
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                    return false;
+                }
                 this.setDead();
 
-                if (!this.world.isRemote)
-                {
-                    if (!source.isExplosion())
-                    {
-                        this.world.createExplosion((Entity)null, this.posX, this.posY, this.posZ, 6.0F, true);
+                if (!this.world.isRemote) {
+                    if (!source.isExplosion()) {
+//                        this.world.createExplosion((Entity)null, this.posX, this.posY, this.posZ, 6.0F, true);
+                        ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, true);
+                        this.world.getServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            this.isDead = false;
+                            return false;
+                        }
+                        this.world.createExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire());
                     }
 
                     this.onCrystalDestroyed(source);
@@ -126,50 +119,41 @@
         }
     }
 
-    public void onKillCommand()
-    {
+    public void onKillCommand() {
         this.onCrystalDestroyed(DamageSource.GENERIC);
         super.onKillCommand();
     }
 
-    private void onCrystalDestroyed(DamageSource source)
-    {
-        if (this.world.provider instanceof WorldProviderEnd)
-        {
-            WorldProviderEnd worldproviderend = (WorldProviderEnd)this.world.provider;
+    private void onCrystalDestroyed(DamageSource source) {
+        if (this.world.provider instanceof WorldProviderEnd) {
+            WorldProviderEnd worldproviderend = (WorldProviderEnd) this.world.provider;
             DragonFightManager dragonfightmanager = worldproviderend.getDragonFightManager();
 
-            if (dragonfightmanager != null)
-            {
+            if (dragonfightmanager != null) {
                 dragonfightmanager.onCrystalDestroyed(this, source);
             }
         }
     }
 
-    public void setBeamTarget(@Nullable BlockPos beamTarget)
-    {
+    public void setBeamTarget(@Nullable BlockPos beamTarget) {
         this.getDataManager().set(BEAM_TARGET, Optional.fromNullable(beamTarget));
     }
 
     @Nullable
-    public BlockPos getBeamTarget()
-    {
-        return (BlockPos)((Optional)this.getDataManager().get(BEAM_TARGET)).orNull();
+    public BlockPos getBeamTarget() {
+        return (BlockPos) ((Optional) this.getDataManager().get(BEAM_TARGET)).orNull();
     }
 
-    public void setShowBottom(boolean showBottom)
-    {
+    public void setShowBottom(boolean showBottom) {
         this.getDataManager().set(SHOW_BOTTOM, Boolean.valueOf(showBottom));
     }
 
-    public boolean shouldShowBottom()
-    {
-        return ((Boolean)this.getDataManager().get(SHOW_BOTTOM)).booleanValue();
+    public boolean shouldShowBottom() {
+        return ((Boolean) this.getDataManager().get(SHOW_BOTTOM)).booleanValue();
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isInRangeToRenderDist(double distance)
-    {
+    public boolean isInRangeToRenderDist(double distance) {
         return super.isInRangeToRenderDist(distance) || this.getBeamTarget() != null;
     }
 }
