--- ../src-base/minecraft/net/minecraft/entity/item/EntityMinecart.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityMinecart.java
@@ -1,9 +1,6 @@
 package net.minecraft.entity.item;
 
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockRailBase;
 import net.minecraft.block.BlockRailPowered;
@@ -20,7 +17,6 @@
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntitySelectors;
 import net.minecraft.util.EnumFacing;
@@ -32,12 +28,20 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.IWorldNameable;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.Location;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
 
-public abstract class EntityMinecart extends Entity implements IWorldNameable
-{
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+
+public abstract class EntityMinecart extends Entity implements IWorldNameable {
     private static final DataParameter<Integer> ROLLING_AMPLITUDE = EntityDataManager.<Integer>createKey(EntityMinecart.class, DataSerializers.VARINT);
     private static final DataParameter<Integer> ROLLING_DIRECTION = EntityDataManager.<Integer>createKey(EntityMinecart.class, DataSerializers.VARINT);
     private static final DataParameter<Float> DAMAGE = EntityDataManager.<Float>createKey(EntityMinecart.class, DataSerializers.FLOAT);
@@ -45,7 +49,7 @@
     private static final DataParameter<Integer> DISPLAY_TILE_OFFSET = EntityDataManager.<Integer>createKey(EntityMinecart.class, DataSerializers.VARINT);
     private static final DataParameter<Boolean> SHOW_BLOCK = EntityDataManager.<Boolean>createKey(EntityMinecart.class, DataSerializers.BOOLEAN);
     private boolean isInReverse;
-    private static final int[][][] MATRIX = new int[][][] {{{0, 0, -1}, {0, 0, 1}}, {{ -1, 0, 0}, {1, 0, 0}}, {{ -1, -1, 0}, {1, 0, 0}}, {{ -1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, { -1, 0, 0}}, {{0, 0, -1}, { -1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
+    private static final int[][][] MATRIX = new int[][][]{{{0, 0, -1}, {0, 0, 1}}, {{-1, 0, 0}, {1, 0, 0}}, {{-1, -1, 0}, {1, 0, 0}}, {{-1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, {-1, 0, 0}}, {{0, 0, -1}, {-1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
     private int turnProgress;
     private double minecartX;
     private double minecartY;
@@ -73,17 +77,25 @@
     protected float maxSpeedAirVertical = defaultMaxSpeedAirVertical;
     protected double dragAir = defaultDragAir;
 
-    public EntityMinecart(World worldIn)
-    {
+    // CraftBukkit start - Use Forge vars from above
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = dragAir;
+    private double flyingY = dragAir;
+    private double flyingZ = dragAir;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
+
+    public EntityMinecart(World worldIn) {
         super(worldIn);
         this.preventEntitySpawning = true;
         this.setSize(0.98F, 0.7F);
     }
 
-    public static EntityMinecart create(World worldIn, double x, double y, double z, EntityMinecart.Type typeIn)
-    {
-        switch (typeIn)
-        {
+    public static EntityMinecart create(World worldIn, double x, double y, double z, EntityMinecart.Type typeIn) {
+        switch (typeIn) {
             case CHEST:
                 return new EntityMinecartChest(worldIn, x, y, z);
             case FURNACE:
@@ -101,13 +113,11 @@
         }
     }
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         this.dataManager.register(ROLLING_AMPLITUDE, Integer.valueOf(0));
         this.dataManager.register(ROLLING_DIRECTION, Integer.valueOf(1));
         this.dataManager.register(DAMAGE, Float.valueOf(0.0F));
@@ -117,26 +127,22 @@
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBox(Entity entityIn)
-    {
+    public AxisAlignedBB getCollisionBox(Entity entityIn) {
         if (getCollisionHandler() != null) return getCollisionHandler().getCollisionBox(this, entityIn);
         return entityIn.canBePushed() ? entityIn.getEntityBoundingBox() : null;
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBoundingBox()
-    {
+    public AxisAlignedBB getCollisionBoundingBox() {
         if (getCollisionHandler() != null) return getCollisionHandler().getBoundingBox(this);
         return null;
     }
 
-    public boolean canBePushed()
-    {
+    public boolean canBePushed() {
         return canBePushed;
     }
 
-    public EntityMinecart(World worldIn, double x, double y, double z)
-    {
+    public EntityMinecart(World worldIn, double x, double y, double z) {
         this(worldIn);
         this.setPosition(x, y, z);
         this.motionX = 0.0D;
@@ -147,60 +153,69 @@
         this.prevPosZ = z;
     }
 
-    public double getMountedYOffset()
-    {
+    public double getMountedYOffset() {
         return 0.0D;
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (!this.world.isRemote && !this.isDead)
-        {
-            if (this.isEntityInvulnerable(source))
-            {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (!this.world.isRemote && !this.isDead) {
+            if (this.isEntityInvulnerable(source)) {
                 return false;
-            }
-            else
-            {
+            } else {
+                // CraftBukkit start - fire VehicleDamageEvent
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (source.getTrueSource() == null) ? null : source.getTrueSource().getBukkitEntity();
+
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, amount);
+                this.world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return true;
+                }
+
+                amount = (float) event.getDamage();
+                // CraftBukkit end
+
                 this.setRollingDirection(-this.getRollingDirection());
                 this.setRollingAmplitude(10);
                 this.markVelocityChanged();
                 this.setDamage(this.getDamage() + amount * 10.0F);
-                boolean flag = source.getTrueSource() instanceof EntityPlayer && ((EntityPlayer)source.getTrueSource()).capabilities.isCreativeMode;
+                boolean flag = source.getTrueSource() instanceof EntityPlayer && ((EntityPlayer) source.getTrueSource()).capabilities.isCreativeMode;
 
-                if (flag || this.getDamage() > 40.0F)
-                {
+                if (flag || this.getDamage() > 40.0F) {
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+                    this.world.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled()) {
+                        this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
+                    // CraftBukkit end
+
                     this.removePassengers();
 
-                    if (flag && !this.hasCustomName())
-                    {
+                    if (flag && !this.hasCustomName()) {
                         this.setDead();
-                    }
-                    else
-                    {
+                    } else {
                         this.killMinecart(source);
                     }
                 }
 
                 return true;
             }
-        }
-        else
-        {
+        } else {
             return true;
         }
     }
 
-    public void killMinecart(DamageSource source)
-    {
+    public void killMinecart(DamageSource source) {
         this.setDead();
 
-        if (this.world.getGameRules().getBoolean("doEntityDrops"))
-        {
+        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
             ItemStack itemstack = new ItemStack(Items.MINECART, 1);
 
-            if (this.hasCustomName())
-            {
+            if (this.hasCustomName()) {
                 itemstack.setStackDisplayName(this.getCustomNameTag());
             }
 
@@ -209,40 +224,43 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void performHurtAnimation()
-    {
+    public void performHurtAnimation() {
         this.setRollingDirection(-this.getRollingDirection());
         this.setRollingAmplitude(10);
         this.setDamage(this.getDamage() + this.getDamage() * 10.0F);
     }
 
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return !this.isDead;
     }
 
-    public EnumFacing getAdjustedHorizontalFacing()
-    {
+    public EnumFacing getAdjustedHorizontalFacing() {
         return this.isInReverse ? this.getHorizontalFacing().getOpposite().rotateY() : this.getHorizontalFacing().rotateY();
     }
 
-    public void onUpdate()
-    {
-        if (this.getRollingAmplitude() > 0)
-        {
+    public void onUpdate() {
+        // CraftBukkit start
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
+        // CraftBukkit end
+
+        if (this.getRollingAmplitude() > 0) {
             this.setRollingAmplitude(this.getRollingAmplitude() - 1);
         }
 
-        if (this.getDamage() > 0.0F)
-        {
+        if (this.getDamage() > 0.0F) {
             this.setDamage(this.getDamage() - 1.0F);
         }
 
-        if (this.posY < -64.0D)
-        {
+        if (this.posY < -64.0D) {
             this.outOfWorld();
         }
 
+        // CraftBukkit - handled in postTick
+        /*
         if (!this.world.isRemote && this.world instanceof WorldServer)
         {
             this.world.profiler.startSection("portal");
@@ -294,35 +312,29 @@
 
             this.world.profiler.endSection();
         }
+        */
 
-        if (this.world.isRemote)
-        {
-            if (this.turnProgress > 0)
-            {
-                double d4 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
-                double d5 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
-                double d6 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
-                double d1 = MathHelper.wrapDegrees(this.minecartYaw - (double)this.rotationYaw);
-                this.rotationYaw = (float)((double)this.rotationYaw + d1 / (double)this.turnProgress);
-                this.rotationPitch = (float)((double)this.rotationPitch + (this.minecartPitch - (double)this.rotationPitch) / (double)this.turnProgress);
+        if (this.world.isRemote) {
+            if (this.turnProgress > 0) {
+                double d4 = this.posX + (this.minecartX - this.posX) / (double) this.turnProgress;
+                double d5 = this.posY + (this.minecartY - this.posY) / (double) this.turnProgress;
+                double d6 = this.posZ + (this.minecartZ - this.posZ) / (double) this.turnProgress;
+                double d1 = MathHelper.wrapDegrees(this.minecartYaw - (double) this.rotationYaw);
+                this.rotationYaw = (float) ((double) this.rotationYaw + d1 / (double) this.turnProgress);
+                this.rotationPitch = (float) ((double) this.rotationPitch + (this.minecartPitch - (double) this.rotationPitch) / (double) this.turnProgress);
                 --this.turnProgress;
                 this.setPosition(d4, d5, d6);
                 this.setRotation(this.rotationYaw, this.rotationPitch);
-            }
-            else
-            {
+            } else {
                 this.setPosition(this.posX, this.posY, this.posZ);
                 this.setRotation(this.rotationYaw, this.rotationPitch);
             }
-        }
-        else
-        {
+        } else {
             this.prevPosX = this.posX;
             this.prevPosY = this.posY;
             this.prevPosZ = this.posZ;
 
-            if (!this.hasNoGravity())
-            {
+            if (!this.hasNoGravity()) {
                 this.motionY -= 0.03999999910593033D;
             }
 
@@ -330,25 +342,20 @@
             int l = MathHelper.floor(this.posY);
             int i1 = MathHelper.floor(this.posZ);
 
-            if (BlockRailBase.isRailBlock(this.world, new BlockPos(k, l - 1, i1)))
-            {
+            if (BlockRailBase.isRailBlock(this.world, new BlockPos(k, l - 1, i1))) {
                 --l;
             }
 
             BlockPos blockpos = new BlockPos(k, l, i1);
             IBlockState iblockstate = this.world.getBlockState(blockpos);
 
-            if (canUseRail() && BlockRailBase.isRailBlock(iblockstate))
-            {
+            if (canUseRail() && BlockRailBase.isRailBlock(iblockstate)) {
                 this.moveAlongTrack(blockpos, iblockstate);
 
-                if (iblockstate.getBlock() == Blocks.ACTIVATOR_RAIL)
-                {
-                    this.onActivatorRailPass(k, l, i1, ((Boolean)iblockstate.getValue(BlockRailPowered.POWERED)).booleanValue());
+                if (iblockstate.getBlock() == Blocks.ACTIVATOR_RAIL) {
+                    this.onActivatorRailPass(k, l, i1, ((Boolean) iblockstate.getValue(BlockRailPowered.POWERED)).booleanValue());
                 }
-            }
-            else
-            {
+            } else {
                 this.moveDerailedMinecart();
             }
 
@@ -357,20 +364,17 @@
             double d0 = this.prevPosX - this.posX;
             double d2 = this.prevPosZ - this.posZ;
 
-            if (d0 * d0 + d2 * d2 > 0.001D)
-            {
-                this.rotationYaw = (float)(MathHelper.atan2(d2, d0) * 180.0D / Math.PI);
+            if (d0 * d0 + d2 * d2 > 0.001D) {
+                this.rotationYaw = (float) (MathHelper.atan2(d2, d0) * 180.0D / Math.PI);
 
-                if (this.isInReverse)
-                {
+                if (this.isInReverse) {
                     this.rotationYaw += 180.0F;
                 }
             }
 
-            double d3 = (double)MathHelper.wrapDegrees(this.rotationYaw - this.prevRotationYaw);
+            double d3 = (double) MathHelper.wrapDegrees(this.rotationYaw - this.prevRotationYaw);
 
-            if (d3 < -170.0D || d3 >= 170.0D)
-            {
+            if (d3 < -170.0D || d3 >= 170.0D) {
                 this.rotationYaw += 180.0F;
                 this.isInReverse = !this.isInReverse;
             }
@@ -379,35 +383,60 @@
 
             AxisAlignedBB box;
             if (getCollisionHandler() != null) box = getCollisionHandler().getMinecartCollisionBox(this);
-            else                               box = this.getEntityBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D);
+            else box = this.getEntityBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D);
 
-            if (canBeRidden() && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D)
-            {
+            // CraftBukkit start
+            org.bukkit.World bworld = this.world.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to)) {
+                this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+            }
+            // CraftBukkit end
+
+            if (canBeRidden() && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D) {
                 List<Entity> list = this.world.getEntitiesInAABBexcluding(this, box, EntitySelectors.getTeamCollisionPredicate(this));
 
-                if (!list.isEmpty())
-                {
-                    for (int j1 = 0; j1 < list.size(); ++j1)
-                    {
+                if (!list.isEmpty()) {
+                    for (int j1 = 0; j1 < list.size(); ++j1) {
                         Entity entity1 = list.get(j1);
 
-                        if (!(entity1 instanceof EntityPlayer) && !(entity1 instanceof EntityIronGolem) && !(entity1 instanceof EntityMinecart) && !this.isBeingRidden() && !entity1.isRiding())
-                        {
+                        if (!(entity1 instanceof EntityPlayer) && !(entity1 instanceof EntityIronGolem) && !(entity1 instanceof EntityMinecart) && !this.isBeingRidden() && !entity1.isRiding()) {
+                            // CraftBukkit start
+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
+                            // CraftBukkit end
                             entity1.startRiding(this);
-                        }
-                        else
-                        {
+                        } else {
+                            // CraftBukkit start
+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
+                            // CraftBukkit end
                             entity1.applyEntityCollision(this);
                         }
                     }
                 }
-            }
-            else
-            {
-                for (Entity entity : this.world.getEntitiesWithinAABBExcludingEntity(this, box))
-                {
-                    if (!this.isPassenger(entity) && entity.canBePushed() && entity instanceof EntityMinecart)
-                    {
+            } else {
+                for (Entity entity : this.world.getEntitiesWithinAABBExcludingEntity(this, box)) {
+                    if (!this.isPassenger(entity) && entity.canBePushed() && entity instanceof EntityMinecart) {
+                        VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
+                        this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                        if (collisionEvent.isCancelled()) {
+                            continue;
+                        }
                         entity.applyEntityCollision(this);
                     }
                 }
@@ -418,70 +447,70 @@
         }
     }
 
-    protected double getMaximumSpeed()
-    {
-        return 0.4D;
+    protected double getMaximumSpeed() {
+        return this.maxSpeed; // CraftBukkit
     }
 
-    public void onActivatorRailPass(int x, int y, int z, boolean receivingPower)
-    {
+    public void onActivatorRailPass(int x, int y, int z, boolean receivingPower) {
     }
 
-    protected void moveDerailedMinecart()
-    {
+    protected void moveDerailedMinecart() {
         double d0 = onGround ? this.getMaximumSpeed() : getMaxSpeedAirLateral();
         this.motionX = MathHelper.clamp(this.motionX, -d0, d0);
         this.motionZ = MathHelper.clamp(this.motionZ, -d0, d0);
 
         double moveY = motionY;
-        if(getMaxSpeedAirVertical() > 0 && motionY > getMaxSpeedAirVertical())
-        {
+        if (getMaxSpeedAirVertical() > 0 && motionY > getMaxSpeedAirVertical()) {
             moveY = getMaxSpeedAirVertical();
-            if(Math.abs(motionX) < 0.3f && Math.abs(motionZ) < 0.3f)
-            {
+            if (Math.abs(motionX) < 0.3f && Math.abs(motionZ) < 0.3f) {
                 moveY = 0.15f;
                 motionY = moveY;
             }
         }
 
-        if (this.onGround)
-        {
-            this.motionX *= 0.5D;
-            this.motionY *= 0.5D;
-            this.motionZ *= 0.5D;
+        if (this.onGround) {
+            // CraftBukkit start - replace magic numbers with our variables
+            // this.motionX *= 0.5D;
+            // this.motionY *= 0.5D;
+            // this.motionZ *= 0.5D;
+            this.motionX *= this.derailedX;
+            this.motionY *= this.derailedY;
+            this.motionZ *= this.derailedZ;
+            // CraftBukkit end
         }
 
         this.move(MoverType.SELF, this.motionX, moveY, this.motionZ);
 
-        if (!this.onGround)
-        {
-            this.motionX *= getDragAir();
-            this.motionY *= getDragAir();
-            this.motionZ *= getDragAir();
+        if (!this.onGround) {
+            // CraftBukkit start - replace magic numbers with our variables
+            // this.motionX *= getDragAir();
+            // this.motionY *= getDragAir();
+            // this.motionZ *= getDragAir();
+            this.motionX *= this.flyingX;
+            this.motionY *= this.flyingY;
+            this.motionZ *= this.flyingZ;
+            // CraftBukkit end
         }
     }
 
     @SuppressWarnings("incomplete-switch")
-    protected void moveAlongTrack(BlockPos pos, IBlockState state)
-    {
+    protected void moveAlongTrack(BlockPos pos, IBlockState state) {
         this.fallDistance = 0.0F;
         Vec3d vec3d = this.getPos(this.posX, this.posY, this.posZ);
-        this.posY = (double)pos.getY();
+        this.posY = (double) pos.getY();
         boolean flag = false;
         boolean flag1 = false;
-        BlockRailBase blockrailbase = (BlockRailBase)state.getBlock();
+        BlockRailBase blockrailbase = (BlockRailBase) state.getBlock();
 
-        if (blockrailbase == Blocks.GOLDEN_RAIL)
-        {
-            flag = ((Boolean)state.getValue(BlockRailPowered.POWERED)).booleanValue();
+        if (blockrailbase == Blocks.GOLDEN_RAIL) {
+            flag = ((Boolean) state.getValue(BlockRailPowered.POWERED)).booleanValue();
             flag1 = !flag;
         }
 
         double slopeAdjustment = getSlopeAdjustment();
         BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = blockrailbase.getRailDirection(world, pos, state, this);
 
-        switch (blockrailbase$enumraildirection)
-        {
+        switch (blockrailbase$enumraildirection) {
             case ASCENDING_EAST:
                 this.motionX -= slopeAdjustment;
                 ++this.posY;
@@ -500,40 +529,35 @@
         }
 
         int[][] aint = MATRIX[blockrailbase$enumraildirection.getMetadata()];
-        double d1 = (double)(aint[1][0] - aint[0][0]);
-        double d2 = (double)(aint[1][2] - aint[0][2]);
+        double d1 = (double) (aint[1][0] - aint[0][0]);
+        double d2 = (double) (aint[1][2] - aint[0][2]);
         double d3 = Math.sqrt(d1 * d1 + d2 * d2);
         double d4 = this.motionX * d1 + this.motionZ * d2;
 
-        if (d4 < 0.0D)
-        {
+        if (d4 < 0.0D) {
             d1 = -d1;
             d2 = -d2;
         }
 
         double d5 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
-        if (d5 > 2.0D)
-        {
+        if (d5 > 2.0D) {
             d5 = 2.0D;
         }
 
         this.motionX = d5 * d1 / d3;
         this.motionZ = d5 * d2 / d3;
-        Entity entity = this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
+        Entity entity = this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);
 
-        if (entity instanceof EntityLivingBase)
-        {
-            double d6 = (double)((EntityLivingBase)entity).moveForward;
+        if (entity instanceof EntityLivingBase) {
+            double d6 = (double) ((EntityLivingBase) entity).moveForward;
 
-            if (d6 > 0.0D)
-            {
-                double d7 = -Math.sin((double)(entity.rotationYaw * 0.017453292F));
-                double d8 = Math.cos((double)(entity.rotationYaw * 0.017453292F));
+            if (d6 > 0.0D) {
+                double d7 = -Math.sin((double) (entity.rotationYaw * 0.017453292F));
+                double d8 = Math.cos((double) (entity.rotationYaw * 0.017453292F));
                 double d9 = this.motionX * this.motionX + this.motionZ * this.motionZ;
 
-                if (d9 < 0.01D)
-                {
+                if (d9 < 0.01D) {
                     this.motionX += d7 * 0.1D;
                     this.motionZ += d8 * 0.1D;
                     flag1 = false;
@@ -541,44 +565,35 @@
             }
         }
 
-        if (flag1 && shouldDoRailFunctions())
-        {
+        if (flag1 && shouldDoRailFunctions()) {
             double d17 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
-            if (d17 < 0.03D)
-            {
+            if (d17 < 0.03D) {
                 this.motionX *= 0.0D;
                 this.motionY *= 0.0D;
                 this.motionZ *= 0.0D;
-            }
-            else
-            {
+            } else {
                 this.motionX *= 0.5D;
                 this.motionY *= 0.0D;
                 this.motionZ *= 0.5D;
             }
         }
 
-        double d18 = (double)pos.getX() + 0.5D + (double)aint[0][0] * 0.5D;
-        double d19 = (double)pos.getZ() + 0.5D + (double)aint[0][2] * 0.5D;
-        double d20 = (double)pos.getX() + 0.5D + (double)aint[1][0] * 0.5D;
-        double d21 = (double)pos.getZ() + 0.5D + (double)aint[1][2] * 0.5D;
+        double d18 = (double) pos.getX() + 0.5D + (double) aint[0][0] * 0.5D;
+        double d19 = (double) pos.getZ() + 0.5D + (double) aint[0][2] * 0.5D;
+        double d20 = (double) pos.getX() + 0.5D + (double) aint[1][0] * 0.5D;
+        double d21 = (double) pos.getZ() + 0.5D + (double) aint[1][2] * 0.5D;
         d1 = d20 - d18;
         d2 = d21 - d19;
         double d10;
 
-        if (d1 == 0.0D)
-        {
-            this.posX = (double)pos.getX() + 0.5D;
-            d10 = this.posZ - (double)pos.getZ();
-        }
-        else if (d2 == 0.0D)
-        {
-            this.posZ = (double)pos.getZ() + 0.5D;
-            d10 = this.posX - (double)pos.getX();
-        }
-        else
-        {
+        if (d1 == 0.0D) {
+            this.posX = (double) pos.getX() + 0.5D;
+            d10 = this.posZ - (double) pos.getZ();
+        } else if (d2 == 0.0D) {
+            this.posZ = (double) pos.getZ() + 0.5D;
+            d10 = this.posX - (double) pos.getX();
+        } else {
             double d11 = this.posX - d18;
             double d12 = this.posZ - d19;
             d10 = (d11 * d1 + d12 * d2) * 2.0D;
@@ -589,25 +604,20 @@
         this.setPosition(this.posX, this.posY, this.posZ);
         this.moveMinecartOnRail(pos);
 
-        if (aint[0][1] != 0 && MathHelper.floor(this.posX) - pos.getX() == aint[0][0] && MathHelper.floor(this.posZ) - pos.getZ() == aint[0][2])
-        {
-            this.setPosition(this.posX, this.posY + (double)aint[0][1], this.posZ);
+        if (aint[0][1] != 0 && MathHelper.floor(this.posX) - pos.getX() == aint[0][0] && MathHelper.floor(this.posZ) - pos.getZ() == aint[0][2]) {
+            this.setPosition(this.posX, this.posY + (double) aint[0][1], this.posZ);
+        } else if (aint[1][1] != 0 && MathHelper.floor(this.posX) - pos.getX() == aint[1][0] && MathHelper.floor(this.posZ) - pos.getZ() == aint[1][2]) {
+            this.setPosition(this.posX, this.posY + (double) aint[1][1], this.posZ);
         }
-        else if (aint[1][1] != 0 && MathHelper.floor(this.posX) - pos.getX() == aint[1][0] && MathHelper.floor(this.posZ) - pos.getZ() == aint[1][2])
-        {
-            this.setPosition(this.posX, this.posY + (double)aint[1][1], this.posZ);
-        }
 
         this.applyDrag();
         Vec3d vec3d1 = this.getPos(this.posX, this.posY, this.posZ);
 
-        if (vec3d1 != null && vec3d != null)
-        {
+        if (vec3d1 != null && vec3d != null) {
             double d14 = (vec3d.y - vec3d1.y) * 0.05D;
             d5 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
-            if (d5 > 0.0D)
-            {
+            if (d5 > 0.0D) {
                 this.motionX = this.motionX / d5 * (d5 + d14);
                 this.motionZ = this.motionZ / d5 * (d5 + d14);
             }
@@ -618,170 +628,135 @@
         int j = MathHelper.floor(this.posX);
         int i = MathHelper.floor(this.posZ);
 
-        if (j != pos.getX() || i != pos.getZ())
-        {
+        if (j != pos.getX() || i != pos.getZ()) {
             d5 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.motionX = d5 * (double)(j - pos.getX());
-            this.motionZ = d5 * (double)(i - pos.getZ());
+            this.motionX = d5 * (double) (j - pos.getX());
+            this.motionZ = d5 * (double) (i - pos.getZ());
         }
 
 
-        if(shouldDoRailFunctions())
-        {
-            ((BlockRailBase)state.getBlock()).onMinecartPass(world, this, pos);
+        if (shouldDoRailFunctions()) {
+            ((BlockRailBase) state.getBlock()).onMinecartPass(world, this, pos);
         }
 
-        if (flag && shouldDoRailFunctions())
-        {
+        if (flag && shouldDoRailFunctions()) {
             double d15 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
-            if (d15 > 0.01D)
-            {
+            if (d15 > 0.01D) {
                 double d16 = 0.06D;
                 this.motionX += this.motionX / d15 * 0.06D;
                 this.motionZ += this.motionZ / d15 * 0.06D;
-            }
-            else if (blockrailbase$enumraildirection == BlockRailBase.EnumRailDirection.EAST_WEST)
-            {
-                if (this.world.getBlockState(pos.west()).isNormalCube())
-                {
+            } else if (blockrailbase$enumraildirection == BlockRailBase.EnumRailDirection.EAST_WEST) {
+                if (this.world.getBlockState(pos.west()).isNormalCube()) {
                     this.motionX = 0.02D;
-                }
-                else if (this.world.getBlockState(pos.east()).isNormalCube())
-                {
+                } else if (this.world.getBlockState(pos.east()).isNormalCube()) {
                     this.motionX = -0.02D;
                 }
-            }
-            else if (blockrailbase$enumraildirection == BlockRailBase.EnumRailDirection.NORTH_SOUTH)
-            {
-                if (this.world.getBlockState(pos.north()).isNormalCube())
-                {
+            } else if (blockrailbase$enumraildirection == BlockRailBase.EnumRailDirection.NORTH_SOUTH) {
+                if (this.world.getBlockState(pos.north()).isNormalCube()) {
                     this.motionZ = 0.02D;
-                }
-                else if (this.world.getBlockState(pos.south()).isNormalCube())
-                {
+                } else if (this.world.getBlockState(pos.south()).isNormalCube()) {
                     this.motionZ = -0.02D;
                 }
             }
         }
     }
 
-    protected void applyDrag()
-    {
-        if (this.isBeingRidden())
+    protected void applyDrag() {
+        if (this.isBeingRidden() || !this.slowWhenEmpty) // CraftBukkit - add !this.slowWhenEmpty
         {
             this.motionX *= 0.996999979019165D;
             this.motionY *= 0.0D;
             this.motionZ *= 0.996999979019165D;
-        }
-        else
-        {
+        } else {
             this.motionX *= 0.9599999785423279D;
             this.motionY *= 0.0D;
             this.motionZ *= 0.9599999785423279D;
         }
     }
 
-    public void setPosition(double x, double y, double z)
-    {
+    public void setPosition(double x, double y, double z) {
         this.posX = x;
         this.posY = y;
         this.posZ = z;
         float f = this.width / 2.0F;
         float f1 = this.height;
-        this.setEntityBoundingBox(new AxisAlignedBB(x - (double)f, y, z - (double)f, x + (double)f, y + (double)f1, z + (double)f));
+        this.setEntityBoundingBox(new AxisAlignedBB(x - (double) f, y, z - (double) f, x + (double) f, y + (double) f1, z + (double) f));
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
-    public Vec3d getPosOffset(double x, double y, double z, double offset)
-    {
+    public Vec3d getPosOffset(double x, double y, double z, double offset) {
         int i = MathHelper.floor(x);
         int j = MathHelper.floor(y);
         int k = MathHelper.floor(z);
 
-        if (BlockRailBase.isRailBlock(this.world, new BlockPos(i, j - 1, k)))
-        {
+        if (BlockRailBase.isRailBlock(this.world, new BlockPos(i, j - 1, k))) {
             --j;
         }
 
         IBlockState iblockstate = this.world.getBlockState(new BlockPos(i, j, k));
 
-        if (BlockRailBase.isRailBlock(iblockstate))
-        {
-            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = ((BlockRailBase)iblockstate.getBlock()).getRailDirection(world, new BlockPos(i, j, k), iblockstate, this);
-            y = (double)j;
+        if (BlockRailBase.isRailBlock(iblockstate)) {
+            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = ((BlockRailBase) iblockstate.getBlock()).getRailDirection(world, new BlockPos(i, j, k), iblockstate, this);
+            y = (double) j;
 
-            if (blockrailbase$enumraildirection.isAscending())
-            {
-                y = (double)(j + 1);
+            if (blockrailbase$enumraildirection.isAscending()) {
+                y = (double) (j + 1);
             }
 
             int[][] aint = MATRIX[blockrailbase$enumraildirection.getMetadata()];
-            double d0 = (double)(aint[1][0] - aint[0][0]);
-            double d1 = (double)(aint[1][2] - aint[0][2]);
+            double d0 = (double) (aint[1][0] - aint[0][0]);
+            double d1 = (double) (aint[1][2] - aint[0][2]);
             double d2 = Math.sqrt(d0 * d0 + d1 * d1);
             d0 = d0 / d2;
             d1 = d1 / d2;
             x = x + d0 * offset;
             z = z + d1 * offset;
 
-            if (aint[0][1] != 0 && MathHelper.floor(x) - i == aint[0][0] && MathHelper.floor(z) - k == aint[0][2])
-            {
-                y += (double)aint[0][1];
+            if (aint[0][1] != 0 && MathHelper.floor(x) - i == aint[0][0] && MathHelper.floor(z) - k == aint[0][2]) {
+                y += (double) aint[0][1];
+            } else if (aint[1][1] != 0 && MathHelper.floor(x) - i == aint[1][0] && MathHelper.floor(z) - k == aint[1][2]) {
+                y += (double) aint[1][1];
             }
-            else if (aint[1][1] != 0 && MathHelper.floor(x) - i == aint[1][0] && MathHelper.floor(z) - k == aint[1][2])
-            {
-                y += (double)aint[1][1];
-            }
 
             return this.getPos(x, y, z);
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
     @Nullable
-    public Vec3d getPos(double p_70489_1_, double p_70489_3_, double p_70489_5_)
-    {
+    public Vec3d getPos(double p_70489_1_, double p_70489_3_, double p_70489_5_) {
         int i = MathHelper.floor(p_70489_1_);
         int j = MathHelper.floor(p_70489_3_);
         int k = MathHelper.floor(p_70489_5_);
 
-        if (BlockRailBase.isRailBlock(this.world, new BlockPos(i, j - 1, k)))
-        {
+        if (BlockRailBase.isRailBlock(this.world, new BlockPos(i, j - 1, k))) {
             --j;
         }
 
         IBlockState iblockstate = this.world.getBlockState(new BlockPos(i, j, k));
 
-        if (BlockRailBase.isRailBlock(iblockstate))
-        {
-            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = ((BlockRailBase)iblockstate.getBlock()).getRailDirection(world, new BlockPos(i, j, k), iblockstate, this);
+        if (BlockRailBase.isRailBlock(iblockstate)) {
+            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = ((BlockRailBase) iblockstate.getBlock()).getRailDirection(world, new BlockPos(i, j, k), iblockstate, this);
             int[][] aint = MATRIX[blockrailbase$enumraildirection.getMetadata()];
-            double d0 = (double)i + 0.5D + (double)aint[0][0] * 0.5D;
-            double d1 = (double)j + 0.0625D + (double)aint[0][1] * 0.5D;
-            double d2 = (double)k + 0.5D + (double)aint[0][2] * 0.5D;
-            double d3 = (double)i + 0.5D + (double)aint[1][0] * 0.5D;
-            double d4 = (double)j + 0.0625D + (double)aint[1][1] * 0.5D;
-            double d5 = (double)k + 0.5D + (double)aint[1][2] * 0.5D;
+            double d0 = (double) i + 0.5D + (double) aint[0][0] * 0.5D;
+            double d1 = (double) j + 0.0625D + (double) aint[0][1] * 0.5D;
+            double d2 = (double) k + 0.5D + (double) aint[0][2] * 0.5D;
+            double d3 = (double) i + 0.5D + (double) aint[1][0] * 0.5D;
+            double d4 = (double) j + 0.0625D + (double) aint[1][1] * 0.5D;
+            double d5 = (double) k + 0.5D + (double) aint[1][2] * 0.5D;
             double d6 = d3 - d0;
             double d7 = (d4 - d1) * 2.0D;
             double d8 = d5 - d2;
             double d9;
 
-            if (d6 == 0.0D)
-            {
-                d9 = p_70489_5_ - (double)k;
-            }
-            else if (d8 == 0.0D)
-            {
-                d9 = p_70489_1_ - (double)i;
-            }
-            else
-            {
+            if (d6 == 0.0D) {
+                d9 = p_70489_5_ - (double) k;
+            } else if (d8 == 0.0D) {
+                d9 = p_70489_1_ - (double) i;
+            } else {
                 double d10 = p_70489_1_ - d0;
                 double d11 = p_70489_5_ - d2;
                 d9 = (d10 * d6 + d11 * d8) * 2.0D;
@@ -791,47 +766,36 @@
             p_70489_3_ = d1 + d7 * d9;
             p_70489_5_ = d2 + d8 * d9;
 
-            if (d7 < 0.0D)
-            {
+            if (d7 < 0.0D) {
                 ++p_70489_3_;
             }
 
-            if (d7 > 0.0D)
-            {
+            if (d7 > 0.0D) {
                 p_70489_3_ += 0.5D;
             }
 
             return new Vec3d(p_70489_1_, p_70489_3_, p_70489_5_);
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getRenderBoundingBox()
-    {
+    public AxisAlignedBB getRenderBoundingBox() {
         AxisAlignedBB axisalignedbb = this.getEntityBoundingBox();
-        return this.hasDisplayTile() ? axisalignedbb.grow((double)Math.abs(this.getDisplayTileOffset()) / 16.0D) : axisalignedbb;
+        return this.hasDisplayTile() ? axisalignedbb.grow((double) Math.abs(this.getDisplayTileOffset()) / 16.0D) : axisalignedbb;
     }
 
-    public static void registerFixesMinecart(DataFixer fixer, Class<?> name)
-    {
+    public static void registerFixesMinecart(DataFixer fixer, Class<?> name) {
     }
 
-    protected void readEntityFromNBT(NBTTagCompound compound)
-    {
-        if (compound.getBoolean("CustomDisplayTile"))
-        {
+    protected void readEntityFromNBT(NBTTagCompound compound) {
+        if (compound.getBoolean("CustomDisplayTile")) {
             Block block;
 
-            if (compound.hasKey("DisplayTile", 8))
-            {
+            if (compound.hasKey("DisplayTile", 8)) {
                 block = Block.getBlockFromName(compound.getString("DisplayTile"));
-            }
-            else
-            {
+            } else {
                 block = Block.getBlockById(compound.getInteger("DisplayTile"));
             }
 
@@ -841,10 +805,8 @@
         }
     }
 
-    protected void writeEntityToNBT(NBTTagCompound compound)
-    {
-        if (this.hasDisplayTile())
-        {
+    protected void writeEntityToNBT(NBTTagCompound compound) {
+        if (this.hasDisplayTile()) {
             compound.setBoolean("CustomDisplayTile", true);
             IBlockState iblockstate = this.getDisplayTile();
             ResourceLocation resourcelocation = Block.REGISTRY.getNameForObject(iblockstate.getBlock());
@@ -854,33 +816,34 @@
         }
     }
 
-    public void applyEntityCollision(Entity entityIn)
-    {
+    public void applyEntityCollision(Entity entityIn) {
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.minecart.MinecartCollisionEvent(this, entityIn));
-        if (getCollisionHandler() != null)
-        {
+        if (getCollisionHandler() != null) {
             getCollisionHandler().onEntityCollision(this, entityIn);
             return;
         }
-        if (!this.world.isRemote)
-        {
-            if (!entityIn.noClip && !this.noClip)
-            {
-                if (!this.isPassenger(entityIn))
-                {
+        if (!this.world.isRemote) {
+            if (!entityIn.noClip && !this.noClip) {
+                if (!this.isPassenger(entityIn)) {
+                    // CraftBukkit start
+                    VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entityIn.getBukkitEntity());
+                    this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                    if (collisionEvent.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     double d0 = entityIn.posX - this.posX;
                     double d1 = entityIn.posZ - this.posZ;
                     double d2 = d0 * d0 + d1 * d1;
 
-                    if (d2 >= 9.999999747378752E-5D)
-                    {
-                        d2 = (double)MathHelper.sqrt(d2);
+                    if (d2 >= 9.999999747378752E-5D) {
+                        d2 = (double) MathHelper.sqrt(d2);
                         d0 = d0 / d2;
                         d1 = d1 / d2;
                         double d3 = 1.0D / d2;
 
-                        if (d3 > 1.0D)
-                        {
+                        if (d3 > 1.0D) {
                             d3 = 1.0D;
                         }
 
@@ -888,45 +851,38 @@
                         d1 = d1 * d3;
                         d0 = d0 * 0.10000000149011612D;
                         d1 = d1 * 0.10000000149011612D;
-                        d0 = d0 * (double)(1.0F - this.entityCollisionReduction);
-                        d1 = d1 * (double)(1.0F - this.entityCollisionReduction);
+                        d0 = d0 * (double) (1.0F - this.entityCollisionReduction);
+                        d1 = d1 * (double) (1.0F - this.entityCollisionReduction);
                         d0 = d0 * 0.5D;
                         d1 = d1 * 0.5D;
 
-                        if (entityIn instanceof EntityMinecart)
-                        {
+                        if (entityIn instanceof EntityMinecart) {
                             double d4 = entityIn.posX - this.posX;
                             double d5 = entityIn.posZ - this.posZ;
                             Vec3d vec3d = (new Vec3d(d4, 0.0D, d5)).normalize();
-                            Vec3d vec3d1 = (new Vec3d((double)MathHelper.cos(this.rotationYaw * 0.017453292F), 0.0D, (double)MathHelper.sin(this.rotationYaw * 0.017453292F))).normalize();
+                            Vec3d vec3d1 = (new Vec3d((double) MathHelper.cos(this.rotationYaw * 0.017453292F), 0.0D, (double) MathHelper.sin(this.rotationYaw * 0.017453292F))).normalize();
                             double d6 = Math.abs(vec3d.dotProduct(vec3d1));
 
-                            if (d6 < 0.800000011920929D)
-                            {
+                            if (d6 < 0.800000011920929D) {
                                 return;
                             }
 
                             double d7 = entityIn.motionX + this.motionX;
                             double d8 = entityIn.motionZ + this.motionZ;
 
-                            if (((EntityMinecart)entityIn).isPoweredCart() && !isPoweredCart())
-                            {
+                            if (((EntityMinecart) entityIn).isPoweredCart() && !isPoweredCart()) {
                                 this.motionX *= 0.20000000298023224D;
                                 this.motionZ *= 0.20000000298023224D;
                                 this.addVelocity(entityIn.motionX - d0, 0.0D, entityIn.motionZ - d1);
                                 entityIn.motionX *= 0.949999988079071D;
                                 entityIn.motionZ *= 0.949999988079071D;
-                            }
-                            else if (!((EntityMinecart)entityIn).isPoweredCart() && isPoweredCart())
-                            {
+                            } else if (!((EntityMinecart) entityIn).isPoweredCart() && isPoweredCart()) {
                                 entityIn.motionX *= 0.20000000298023224D;
                                 entityIn.motionZ *= 0.20000000298023224D;
                                 entityIn.addVelocity(this.motionX + d0, 0.0D, this.motionZ + d1);
                                 this.motionX *= 0.949999988079071D;
                                 this.motionZ *= 0.949999988079071D;
-                            }
-                            else
-                            {
+                            } else {
                                 d7 = d7 / 2.0D;
                                 d8 = d8 / 2.0D;
                                 this.motionX *= 0.20000000298023224D;
@@ -936,9 +892,7 @@
                                 entityIn.motionZ *= 0.20000000298023224D;
                                 entityIn.addVelocity(d7 + d0, 0.0D, d8 + d1);
                             }
-                        }
-                        else
-                        {
+                        } else {
                             this.addVelocity(-d0, 0.0D, -d1);
                             entityIn.addVelocity(d0 / 4.0D, 0.0D, d1 / 4.0D);
                         }
@@ -949,27 +903,24 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport)
-    {
+    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport) {
         this.minecartX = x;
         this.minecartY = y;
         this.minecartZ = z;
-        this.minecartYaw = (double)yaw;
-        this.minecartPitch = (double)pitch;
+        this.minecartYaw = (double) yaw;
+        this.minecartPitch = (double) pitch;
         this.turnProgress = posRotationIncrements + 2;
         this.motionX = this.velocityX;
         this.motionY = this.velocityY;
         this.motionZ = this.velocityZ;
     }
 
-    public void setDamage(float damage)
-    {
+    public void setDamage(float damage) {
         this.dataManager.set(DAMAGE, Float.valueOf(damage));
     }
 
     @SideOnly(Side.CLIENT)
-    public void setVelocity(double x, double y, double z)
-    {
+    public void setVelocity(double x, double y, double z) {
         this.motionX = x;
         this.motionY = y;
         this.motionZ = z;
@@ -978,84 +929,69 @@
         this.velocityZ = this.motionZ;
     }
 
-    public float getDamage()
-    {
-        return ((Float)this.dataManager.get(DAMAGE)).floatValue();
+    public float getDamage() {
+        return ((Float) this.dataManager.get(DAMAGE)).floatValue();
     }
 
-    public void setRollingAmplitude(int rollingAmplitude)
-    {
+    public void setRollingAmplitude(int rollingAmplitude) {
         this.dataManager.set(ROLLING_AMPLITUDE, Integer.valueOf(rollingAmplitude));
     }
 
-    public int getRollingAmplitude()
-    {
-        return ((Integer)this.dataManager.get(ROLLING_AMPLITUDE)).intValue();
+    public int getRollingAmplitude() {
+        return ((Integer) this.dataManager.get(ROLLING_AMPLITUDE)).intValue();
     }
 
-    public void setRollingDirection(int rollingDirection)
-    {
+    public void setRollingDirection(int rollingDirection) {
         this.dataManager.set(ROLLING_DIRECTION, Integer.valueOf(rollingDirection));
     }
 
-    public int getRollingDirection()
-    {
-        return ((Integer)this.dataManager.get(ROLLING_DIRECTION)).intValue();
+    public int getRollingDirection() {
+        return ((Integer) this.dataManager.get(ROLLING_DIRECTION)).intValue();
     }
 
     public abstract EntityMinecart.Type getType();
 
-    public IBlockState getDisplayTile()
-    {
-        return !this.hasDisplayTile() ? this.getDefaultDisplayTile() : Block.getStateById(((Integer)this.getDataManager().get(DISPLAY_TILE)).intValue());
+    public IBlockState getDisplayTile() {
+        return !this.hasDisplayTile() ? this.getDefaultDisplayTile() : Block.getStateById(((Integer) this.getDataManager().get(DISPLAY_TILE)).intValue());
     }
 
-    public IBlockState getDefaultDisplayTile()
-    {
+    public IBlockState getDefaultDisplayTile() {
         return Blocks.AIR.getDefaultState();
     }
 
-    public int getDisplayTileOffset()
-    {
-        return !this.hasDisplayTile() ? this.getDefaultDisplayTileOffset() : ((Integer)this.getDataManager().get(DISPLAY_TILE_OFFSET)).intValue();
+    public int getDisplayTileOffset() {
+        return !this.hasDisplayTile() ? this.getDefaultDisplayTileOffset() : ((Integer) this.getDataManager().get(DISPLAY_TILE_OFFSET)).intValue();
     }
 
-    public int getDefaultDisplayTileOffset()
-    {
+    public int getDefaultDisplayTileOffset() {
         return 6;
     }
 
-    public void setDisplayTile(IBlockState displayTile)
-    {
+    public void setDisplayTile(IBlockState displayTile) {
         this.getDataManager().set(DISPLAY_TILE, Integer.valueOf(Block.getStateId(displayTile)));
         this.setHasDisplayTile(true);
     }
 
-    public void setDisplayTileOffset(int displayTileOffset)
-    {
+    public void setDisplayTileOffset(int displayTileOffset) {
         this.getDataManager().set(DISPLAY_TILE_OFFSET, Integer.valueOf(displayTileOffset));
         this.setHasDisplayTile(true);
     }
 
-    public boolean hasDisplayTile()
-    {
-        return ((Boolean)this.getDataManager().get(SHOW_BLOCK)).booleanValue();
+    public boolean hasDisplayTile() {
+        return ((Boolean) this.getDataManager().get(SHOW_BLOCK)).booleanValue();
     }
 
-    public void setHasDisplayTile(boolean showBlock)
-    {
+    public void setHasDisplayTile(boolean showBlock) {
         this.getDataManager().set(SHOW_BLOCK, Boolean.valueOf(showBlock));
     }
-    
+
     @Override
-    public boolean processInitialInteract(EntityPlayer player, net.minecraft.util.EnumHand hand)
-    {
+    public boolean processInitialInteract(EntityPlayer player, net.minecraft.util.EnumHand hand) {
         return net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.minecart.MinecartInteractEvent(this, player, hand));
     }
 
     /* =================================== FORGE START ===========================================*/
-    private BlockPos getCurrentRailPosition()
-    {
+    private BlockPos getCurrentRailPosition() {
         int x = MathHelper.floor(this.posX);
         int y = MathHelper.floor(this.posY);
         int z = MathHelper.floor(this.posZ);
@@ -1064,14 +1000,13 @@
         return new BlockPos(x, y, z);
     }
 
-    protected double getMaxSpeed()
-    {
+    protected double getMaxSpeed() {
         if (!canUseRail()) return getMaximumSpeed();
         BlockPos pos = this.getCurrentRailPosition();
         IBlockState state = this.world.getBlockState(pos);
         if (!BlockRailBase.isRailBlock(state)) return getMaximumSpeed();
 
-        float railMaxSpeed = ((BlockRailBase)state.getBlock()).getRailMaxSpeed(world, this, pos);
+        float railMaxSpeed = ((BlockRailBase) state.getBlock()).getRailMaxSpeed(world, this, pos);
         return Math.min(railMaxSpeed, getCurrentCartSpeedCapOnRail());
     }
 
@@ -1079,13 +1014,11 @@
      * Moved to allow overrides.
      * This code handles minecart movement and speed capping when on a rail.
      */
-    public void moveMinecartOnRail(BlockPos pos)
-    {
+    public void moveMinecartOnRail(BlockPos pos) {
         double mX = this.motionX;
         double mZ = this.motionZ;
 
-        if (this.isBeingRidden())
-        {
+        if (this.isBeingRidden()) {
             mX *= 0.75D;
             mZ *= 0.75D;
         }
@@ -1099,21 +1032,21 @@
     /**
      * Gets the current global Minecart Collision handler if none
      * is registered, returns null
+     *
      * @return The collision handler or null
      */
     @Nullable
-    public static net.minecraftforge.common.IMinecartCollisionHandler getCollisionHandler()
-    {
+    public static net.minecraftforge.common.IMinecartCollisionHandler getCollisionHandler() {
         return collisionHandler;
     }
 
     /**
      * Sets the global Minecart Collision handler, overwrites any
      * that is currently set.
+     *
      * @param handler The new handler
      */
-    public static void setCollisionHandler(net.minecraftforge.common.IMinecartCollisionHandler handler)
-    {
+    public static void setCollisionHandler(net.minecraftforge.common.IMinecartCollisionHandler handler) {
         collisionHandler = handler;
     }
 
@@ -1121,28 +1054,19 @@
      * This function returns an ItemStack that represents this cart.
      * This should be an ItemStack that can be used by the player to place the cart,
      * but is not necessary the item the cart drops when destroyed.
+     *
      * @return An ItemStack that can be used to place the cart.
      */
-    public ItemStack getCartItem()
-    {
-        if (this instanceof EntityMinecartFurnace)
-        {
+    public ItemStack getCartItem() {
+        if (this instanceof EntityMinecartFurnace) {
             return new ItemStack(Items.FURNACE_MINECART);
-        }
-        else if (this instanceof EntityMinecartChest)
-        {
+        } else if (this instanceof EntityMinecartChest) {
             return new ItemStack(Items.CHEST_MINECART);
-        }
-        else if (this instanceof EntityMinecartTNT)
-        {
+        } else if (this instanceof EntityMinecartTNT) {
             return new ItemStack(Items.TNT_MINECART);
-        }
-        else if (this instanceof EntityMinecartHopper)
-        {
+        } else if (this instanceof EntityMinecartHopper) {
             return new ItemStack(Items.HOPPER_MINECART);
-        }
-        else if (this instanceof EntityMinecartCommandBlock)
-        {
+        } else if (this instanceof EntityMinecartCommandBlock) {
             return new ItemStack(Items.COMMAND_BLOCK_MINECART);
         }
         return new ItemStack(Items.MINECART);
@@ -1151,47 +1075,47 @@
     /**
      * Returns true if this cart can currently use rails.
      * This function is mainly used to gracefully detach a minecart from a rail.
+     *
      * @return True if the minecart can use rails.
      */
-    public boolean canUseRail()
-    {
+    public boolean canUseRail() {
         return canUseRail;
     }
 
     /**
      * Set whether the minecart can use rails.
      * This function is mainly used to gracefully detach a minecart from a rail.
+     *
      * @param use Whether the minecart can currently use rails.
      */
-    public void setCanUseRail(boolean use)
-    {
+    public void setCanUseRail(boolean use) {
         canUseRail = use;
     }
 
     /**
      * Return false if this cart should not call onMinecartPass() and should ignore Powered Rails.
+     *
      * @return True if this cart should call onMinecartPass().
      */
-    public boolean shouldDoRailFunctions()
-    {
+    public boolean shouldDoRailFunctions() {
         return true;
     }
 
     /**
      * Returns true if this cart is self propelled.
+     *
      * @return True if powered.
      */
-    public boolean isPoweredCart()
-    {
+    public boolean isPoweredCart() {
         return getType() == EntityMinecart.Type.FURNACE;
     }
 
     /**
      * Returns true if this cart can be ridden by an Entity.
+     *
      * @return True if this cart can be ridden.
      */
-    public boolean canBeRidden()
-    {
+    public boolean canBeRidden() {
         return this.getType() == EntityMinecart.Type.RIDEABLE;
     }
 
@@ -1208,8 +1132,7 @@
      *
      * @return Carts max speed.
      */
-    public float getMaxCartSpeedOnRail()
-    {
+    public float getMaxCartSpeedOnRail() {
         return 1.2f;
     }
 
@@ -1221,64 +1144,56 @@
      *
      * @return
      */
-    public final float getCurrentCartSpeedCapOnRail()
-    {
+    public final float getCurrentCartSpeedCapOnRail() {
         return currentSpeedRail;
     }
 
-    public final void setCurrentCartSpeedCapOnRail(float value)
-    {
+    public final void setCurrentCartSpeedCapOnRail(float value) {
         value = Math.min(value, getMaxCartSpeedOnRail());
         currentSpeedRail = value;
     }
 
-    public float getMaxSpeedAirLateral()
-    {
+    public float getMaxSpeedAirLateral() {
         return maxSpeedAirLateral;
     }
 
-    public void setMaxSpeedAirLateral(float value)
-    {
+    public void setMaxSpeedAirLateral(float value) {
         maxSpeedAirLateral = value;
     }
 
-    public float getMaxSpeedAirVertical()
-    {
+    public float getMaxSpeedAirVertical() {
         return maxSpeedAirVertical;
     }
 
-    public void setMaxSpeedAirVertical(float value)
-    {
+    public void setMaxSpeedAirVertical(float value) {
         maxSpeedAirVertical = value;
     }
 
-    public double getDragAir()
-    {
+    public double getDragAir() {
         return dragAir;
     }
 
-    public void setDragAir(double value)
-    {
+    public void setDragAir(double value) {
         dragAir = value;
+        flyingX = dragAir;
+        flyingY = dragAir;
+        flyingZ = dragAir;
     }
 
-    public double getSlopeAdjustment()
-    {
+    public double getSlopeAdjustment() {
         return 0.0078125D;
     }
 
     /**
      * Called from Detector Rails to retrieve a redstone power level for comparators.
      */
-    public int getComparatorLevel()
-    {
+    public int getComparatorLevel() {
         return -1;
     }
 
     /* =================================== FORGE END ===========================================*/
 
-    public static enum Type
-    {
+    public static enum Type {
         RIDEABLE(0, "MinecartRideable"),
         CHEST(1, "MinecartChest"),
         FURNACE(2, "MinecartFurnace"),
@@ -1291,35 +1206,51 @@
         private final int id;
         private final String name;
 
-        private Type(int idIn, String nameIn)
-        {
+        private Type(int idIn, String nameIn) {
             this.id = idIn;
             this.name = nameIn;
         }
 
-        public int getId()
-        {
+        public int getId() {
             return this.id;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
 
         @SideOnly(Side.CLIENT)
-        public static EntityMinecart.Type getById(int idIn)
-        {
+        public static EntityMinecart.Type getById(int idIn) {
             EntityMinecart.Type entityminecart$type = BY_ID.get(Integer.valueOf(idIn));
             return entityminecart$type == null ? RIDEABLE : entityminecart$type;
         }
 
-        static
-        {
-            for (EntityMinecart.Type entityminecart$type : values())
-            {
+        static {
+            for (EntityMinecart.Type entityminecart$type : values()) {
                 BY_ID.put(Integer.valueOf(entityminecart$type.getId()), entityminecart$type);
             }
         }
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod() {
+        return new Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying) {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod() {
+        return new Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed) {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
 }
