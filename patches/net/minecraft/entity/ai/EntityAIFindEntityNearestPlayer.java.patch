--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIFindEntityNearestPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIFindEntityNearestPlayer.java
@@ -1,14 +1,7 @@
 package net.minecraft.entity.ai;
 
 import com.google.common.base.Predicate;
-import java.util.Collections;
-import java.util.List;
-import javax.annotation.Nullable;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityCreature;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.SharedMonsterAttributes;
+import net.minecraft.entity.*;
 import net.minecraft.entity.ai.attributes.IAttributeInstance;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -16,135 +9,105 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class EntityAIFindEntityNearestPlayer extends EntityAIBase
-{
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.List;
+
+public class EntityAIFindEntityNearestPlayer extends EntityAIBase {
     private static final Logger LOGGER = LogManager.getLogger();
     private final EntityLiving entityLiving;
     private final Predicate<Entity> predicate;
     private final EntityAINearestAttackableTarget.Sorter sorter;
     private EntityLivingBase entityTarget;
 
-    public EntityAIFindEntityNearestPlayer(EntityLiving entityLivingIn)
-    {
+    public EntityAIFindEntityNearestPlayer(EntityLiving entityLivingIn) {
         this.entityLiving = entityLivingIn;
 
-        if (entityLivingIn instanceof EntityCreature)
-        {
+        if (entityLivingIn instanceof EntityCreature) {
             LOGGER.warn("Use NearestAttackableTargetGoal.class for PathfinerMob mobs!");
         }
 
-        this.predicate = new Predicate<Entity>()
-        {
-            public boolean apply(@Nullable Entity p_apply_1_)
-            {
-                if (!(p_apply_1_ instanceof EntityPlayer))
-                {
+        this.predicate = new Predicate<Entity>() {
+            public boolean apply(@Nullable Entity p_apply_1_) {
+                if (!(p_apply_1_ instanceof EntityPlayer)) {
                     return false;
-                }
-                else if (((EntityPlayer)p_apply_1_).capabilities.disableDamage)
-                {
+                } else if (((EntityPlayer) p_apply_1_).capabilities.disableDamage) {
                     return false;
-                }
-                else
-                {
+                } else {
                     double d0 = EntityAIFindEntityNearestPlayer.this.maxTargetRange();
 
-                    if (p_apply_1_.isSneaking())
-                    {
+                    if (p_apply_1_.isSneaking()) {
                         d0 *= 0.800000011920929D;
                     }
 
-                    if (p_apply_1_.isInvisible())
-                    {
-                        float f = ((EntityPlayer)p_apply_1_).getArmorVisibility();
+                    if (p_apply_1_.isInvisible()) {
+                        float f = ((EntityPlayer) p_apply_1_).getArmorVisibility();
 
-                        if (f < 0.1F)
-                        {
+                        if (f < 0.1F) {
                             f = 0.1F;
                         }
 
-                        d0 *= (double)(0.7F * f);
+                        d0 *= (double) (0.7F * f);
                     }
 
-                    return (double)p_apply_1_.getDistance(EntityAIFindEntityNearestPlayer.this.entityLiving) > d0 ? false : EntityAITarget.isSuitableTarget(EntityAIFindEntityNearestPlayer.this.entityLiving, (EntityLivingBase)p_apply_1_, false, true);
+                    return (double) p_apply_1_.getDistance(EntityAIFindEntityNearestPlayer.this.entityLiving) > d0 ? false : EntityAITarget.isSuitableTarget(EntityAIFindEntityNearestPlayer.this.entityLiving, (EntityLivingBase) p_apply_1_, false, true);
                 }
             }
         };
         this.sorter = new EntityAINearestAttackableTarget.Sorter(entityLivingIn);
     }
 
-    public boolean shouldExecute()
-    {
+    public boolean shouldExecute() {
         double d0 = this.maxTargetRange();
         List<EntityPlayer> list = this.entityLiving.world.<EntityPlayer>getEntitiesWithinAABB(EntityPlayer.class, this.entityLiving.getEntityBoundingBox().grow(d0, 4.0D, d0), this.predicate);
         Collections.sort(list, this.sorter);
 
-        if (list.isEmpty())
-        {
+        if (list.isEmpty()) {
             return false;
-        }
-        else
-        {
+        } else {
             this.entityTarget = list.get(0);
             return true;
         }
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
         EntityLivingBase entitylivingbase = this.entityLiving.getAttackTarget();
 
-        if (entitylivingbase == null)
-        {
+        if (entitylivingbase == null) {
             return false;
-        }
-        else if (!entitylivingbase.isEntityAlive())
-        {
+        } else if (!entitylivingbase.isEntityAlive()) {
             return false;
-        }
-        else if (entitylivingbase instanceof EntityPlayer && ((EntityPlayer)entitylivingbase).capabilities.disableDamage)
-        {
+        } else if (entitylivingbase instanceof EntityPlayer && ((EntityPlayer) entitylivingbase).capabilities.disableDamage) {
             return false;
-        }
-        else
-        {
+        } else {
             Team team = this.entityLiving.getTeam();
             Team team1 = entitylivingbase.getTeam();
 
-            if (team != null && team1 == team)
-            {
+            if (team != null && team1 == team) {
                 return false;
-            }
-            else
-            {
+            } else {
                 double d0 = this.maxTargetRange();
 
-                if (this.entityLiving.getDistanceSq(entitylivingbase) > d0 * d0)
-                {
+                if (this.entityLiving.getDistanceSq(entitylivingbase) > d0 * d0) {
                     return false;
+                } else {
+                    return !(entitylivingbase instanceof EntityPlayerMP) || !((EntityPlayerMP) entitylivingbase).interactionManager.isCreative();
                 }
-                else
-                {
-                    return !(entitylivingbase instanceof EntityPlayerMP) || !((EntityPlayerMP)entitylivingbase).interactionManager.isCreative();
-                }
             }
         }
     }
 
-    public void startExecuting()
-    {
-        this.entityLiving.setAttackTarget(this.entityTarget);
+    public void startExecuting() {
+        this.entityLiving.setAttackTarget(this.entityTarget, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true);
         super.startExecuting();
     }
 
-    public void resetTask()
-    {
-        this.entityLiving.setAttackTarget((EntityLivingBase)null);
+    public void resetTask() {
+        this.entityLiving.setAttackTarget((EntityLivingBase) null);
         super.startExecuting();
     }
 
-    protected double maxTargetRange()
-    {
+    protected double maxTargetRange() {
         IAttributeInstance iattributeinstance = this.entityLiving.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE);
         return iattributeinstance == null ? 16.0D : iattributeinstance.getAttributeValue();
     }
