--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIMoveThroughVillage.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIMoveThroughVillage.java
@@ -1,7 +1,6 @@
 package net.minecraft.entity.ai;
 
 import com.google.common.collect.Lists;
-import java.util.List;
 import net.minecraft.entity.EntityCreature;
 import net.minecraft.pathfinding.Path;
 import net.minecraft.pathfinding.PathNavigateGround;
@@ -11,8 +10,9 @@
 import net.minecraft.village.Village;
 import net.minecraft.village.VillageDoorInfo;
 
-public class EntityAIMoveThroughVillage extends EntityAIBase
-{
+import java.util.List;
+
+public class EntityAIMoveThroughVillage extends EntityAIBase {
     private final EntityCreature entity;
     private final double movementSpeed;
     private Path path;
@@ -20,65 +20,47 @@
     private final boolean isNocturnal;
     private final List<VillageDoorInfo> doorList = Lists.<VillageDoorInfo>newArrayList();
 
-    public EntityAIMoveThroughVillage(EntityCreature entityIn, double movementSpeedIn, boolean isNocturnalIn)
-    {
+    public EntityAIMoveThroughVillage(EntityCreature entityIn, double movementSpeedIn, boolean isNocturnalIn) {
         this.entity = entityIn;
         this.movementSpeed = movementSpeedIn;
         this.isNocturnal = isNocturnalIn;
         this.setMutexBits(1);
 
-        if (!(entityIn.getNavigator() instanceof PathNavigateGround))
-        {
+        if (!(entityIn.getNavigator() instanceof PathNavigateGround)) {
             throw new IllegalArgumentException("Unsupported mob for MoveThroughVillageGoal");
         }
     }
 
-    public boolean shouldExecute()
-    {
+    public boolean shouldExecute() {
         this.resizeDoorList();
 
-        if (this.isNocturnal && this.entity.world.isDaytime())
-        {
+        if (this.isNocturnal && this.entity.world.isDaytime()) {
             return false;
-        }
-        else
-        {
+        } else {
             Village village = this.entity.world.getVillageCollection().getNearestVillage(new BlockPos(this.entity), 0);
 
-            if (village == null)
-            {
+            if (village == null) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.doorInfo = this.findNearestDoor(village);
 
-                if (this.doorInfo == null)
-                {
+                if (this.doorInfo == null) {
                     return false;
-                }
-                else
-                {
-                    PathNavigateGround pathnavigateground = (PathNavigateGround)this.entity.getNavigator();
+                } else {
+                    PathNavigateGround pathnavigateground = (PathNavigateGround) this.entity.getNavigator();
                     boolean flag = pathnavigateground.getEnterDoors();
                     pathnavigateground.setBreakDoors(false);
                     this.path = pathnavigateground.getPathToPos(this.doorInfo.getDoorBlockPos());
                     pathnavigateground.setBreakDoors(flag);
 
-                    if (this.path != null)
-                    {
+                    if (this.path != null) {
                         return true;
-                    }
-                    else
-                    {
-                        Vec3d vec3d = RandomPositionGenerator.findRandomTargetBlockTowards(this.entity, 10, 7, new Vec3d((double)this.doorInfo.getDoorBlockPos().getX(), (double)this.doorInfo.getDoorBlockPos().getY(), (double)this.doorInfo.getDoorBlockPos().getZ()));
+                    } else {
+                        Vec3d vec3d = RandomPositionGenerator.findRandomTargetBlockTowards(this.entity, 10, 7, new Vec3d((double) this.doorInfo.getDoorBlockPos().getX(), (double) this.doorInfo.getDoorBlockPos().getY(), (double) this.doorInfo.getDoorBlockPos().getZ()));
 
-                        if (vec3d == null)
-                        {
+                        if (vec3d == null) {
                             return false;
-                        }
-                        else
-                        {
+                        } else {
                             pathnavigateground.setBreakDoors(false);
                             this.path = this.entity.getNavigator().getPathToXYZ(vec3d.x, vec3d.y, vec3d.z);
                             pathnavigateground.setBreakDoors(flag);
@@ -90,43 +72,33 @@
         }
     }
 
-    public boolean shouldContinueExecuting()
-    {
-        if (this.entity.getNavigator().noPath())
-        {
+    public boolean shouldContinueExecuting() {
+        if (this.entity.getNavigator().noPath()) {
             return false;
-        }
-        else
-        {
+        } else {
             float f = this.entity.width + 4.0F;
-            return this.entity.getDistanceSq(this.doorInfo.getDoorBlockPos()) > (double)(f * f);
+            return this.entity.getDistanceSq(this.doorInfo.getDoorBlockPos()) > (double) (f * f);
         }
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.entity.getNavigator().setPath(this.path, this.movementSpeed);
     }
 
-    public void resetTask()
-    {
-        if (this.entity.getNavigator().noPath() || this.entity.getDistanceSq(this.doorInfo.getDoorBlockPos()) < 16.0D)
-        {
+    public void resetTask() {
+        if (this.entity.getNavigator().noPath() || this.entity.getDistanceSq(this.doorInfo.getDoorBlockPos()) < 16.0D) {
             this.doorList.add(this.doorInfo);
         }
     }
 
-    private VillageDoorInfo findNearestDoor(Village villageIn)
-    {
+    private VillageDoorInfo findNearestDoor(Village villageIn) {
         VillageDoorInfo villagedoorinfo = null;
         int i = Integer.MAX_VALUE;
 
-        for (VillageDoorInfo villagedoorinfo1 : villageIn.getVillageDoorInfoList())
-        {
+        for (VillageDoorInfo villagedoorinfo1 : villageIn.getVillageDoorInfoList()) {
             int j = villagedoorinfo1.getDistanceSquared(MathHelper.floor(this.entity.posX), MathHelper.floor(this.entity.posY), MathHelper.floor(this.entity.posZ));
 
-            if (j < i && !this.doesDoorListContain(villagedoorinfo1))
-            {
+            if (j < i && !this.doesDoorListContain(villagedoorinfo1)) {
                 villagedoorinfo = villagedoorinfo1;
                 i = j;
             }
@@ -135,12 +107,9 @@
         return villagedoorinfo;
     }
 
-    private boolean doesDoorListContain(VillageDoorInfo doorInfoIn)
-    {
-        for (VillageDoorInfo villagedoorinfo : this.doorList)
-        {
-            if (doorInfoIn.getDoorBlockPos().equals(villagedoorinfo.getDoorBlockPos()))
-            {
+    private boolean doesDoorListContain(VillageDoorInfo doorInfoIn) {
+        for (VillageDoorInfo villagedoorinfo : this.doorList) {
+            if (doorInfoIn.getDoorBlockPos().equals(villagedoorinfo.getDoorBlockPos())) {
                 return true;
             }
         }
@@ -148,10 +117,8 @@
         return false;
     }
 
-    private void resizeDoorList()
-    {
-        if (this.doorList.size() > 15)
-        {
+    private void resizeDoorList() {
+        if (this.doorList.size() > 15) {
             this.doorList.remove(0);
         }
     }
