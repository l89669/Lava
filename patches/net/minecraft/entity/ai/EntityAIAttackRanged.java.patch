--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIAttackRanged.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIAttackRanged.java
@@ -5,8 +5,7 @@
 import net.minecraft.entity.IRangedAttackMob;
 import net.minecraft.util.math.MathHelper;
 
-public class EntityAIAttackRanged extends EntityAIBase
-{
+public class EntityAIAttackRanged extends EntityAIBase {
     private final EntityLiving entityHost;
     private final IRangedAttackMob rangedAttackEntityHost;
     private EntityLivingBase attackTarget;
@@ -18,23 +17,18 @@
     private final float attackRadius;
     private final float maxAttackDistance;
 
-    public EntityAIAttackRanged(IRangedAttackMob attacker, double movespeed, int maxAttackTime, float maxAttackDistanceIn)
-    {
+    public EntityAIAttackRanged(IRangedAttackMob attacker, double movespeed, int maxAttackTime, float maxAttackDistanceIn) {
         this(attacker, movespeed, maxAttackTime, maxAttackTime, maxAttackDistanceIn);
     }
 
-    public EntityAIAttackRanged(IRangedAttackMob attacker, double movespeed, int p_i1650_4_, int maxAttackTime, float maxAttackDistanceIn)
-    {
+    public EntityAIAttackRanged(IRangedAttackMob attacker, double movespeed, int p_i1650_4_, int maxAttackTime, float maxAttackDistanceIn) {
         this.rangedAttackTime = -1;
 
-        if (!(attacker instanceof EntityLivingBase))
-        {
+        if (!(attacker instanceof EntityLivingBase)) {
             throw new IllegalArgumentException("ArrowAttackGoal requires Mob implements RangedAttackMob");
-        }
-        else
-        {
+        } else {
             this.rangedAttackEntityHost = attacker;
-            this.entityHost = (EntityLiving)attacker;
+            this.entityHost = (EntityLiving) attacker;
             this.entityMoveSpeed = movespeed;
             this.attackIntervalMin = p_i1650_4_;
             this.maxRangedAttackTime = maxAttackTime;
@@ -44,74 +38,57 @@
         }
     }
 
-    public boolean shouldExecute()
-    {
+    public boolean shouldExecute() {
         EntityLivingBase entitylivingbase = this.entityHost.getAttackTarget();
 
-        if (entitylivingbase == null)
-        {
+        if (entitylivingbase == null) {
             return false;
-        }
-        else
-        {
+        } else {
             this.attackTarget = entitylivingbase;
             return true;
         }
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
         return this.shouldExecute() || !this.entityHost.getNavigator().noPath();
     }
 
-    public void resetTask()
-    {
+    public void resetTask() {
         this.attackTarget = null;
         this.seeTime = 0;
         this.rangedAttackTime = -1;
     }
 
-    public void updateTask()
-    {
+    public void updateTask() {
         double d0 = this.entityHost.getDistanceSq(this.attackTarget.posX, this.attackTarget.getEntityBoundingBox().minY, this.attackTarget.posZ);
         boolean flag = this.entityHost.getEntitySenses().canSee(this.attackTarget);
 
-        if (flag)
-        {
+        if (flag) {
             ++this.seeTime;
-        }
-        else
-        {
+        } else {
             this.seeTime = 0;
         }
 
-        if (d0 <= (double)this.maxAttackDistance && this.seeTime >= 20)
-        {
+        if (d0 <= (double) this.maxAttackDistance && this.seeTime >= 20) {
             this.entityHost.getNavigator().clearPath();
-        }
-        else
-        {
+        } else {
             this.entityHost.getNavigator().tryMoveToEntityLiving(this.attackTarget, this.entityMoveSpeed);
         }
 
         this.entityHost.getLookHelper().setLookPositionWithEntity(this.attackTarget, 30.0F, 30.0F);
 
-        if (--this.rangedAttackTime == 0)
-        {
-            if (!flag)
-            {
+        if (--this.rangedAttackTime == 0) {
+            if (!flag) {
                 return;
             }
 
             float f = MathHelper.sqrt(d0) / this.attackRadius;
             float lvt_5_1_ = MathHelper.clamp(f, 0.1F, 1.0F);
             this.rangedAttackEntityHost.attackEntityWithRangedAttack(this.attackTarget, lvt_5_1_);
-            this.rangedAttackTime = MathHelper.floor(f * (float)(this.maxRangedAttackTime - this.attackIntervalMin) + (float)this.attackIntervalMin);
-        }
-        else if (this.rangedAttackTime < 0)
-        {
+            this.rangedAttackTime = MathHelper.floor(f * (float) (this.maxRangedAttackTime - this.attackIntervalMin) + (float) this.attackIntervalMin);
+        } else if (this.rangedAttackTime < 0) {
             float f2 = MathHelper.sqrt(d0) / this.attackRadius;
-            this.rangedAttackTime = MathHelper.floor(f2 * (float)(this.maxRangedAttackTime - this.attackIntervalMin) + (float)this.attackIntervalMin);
+            this.rangedAttackTime = MathHelper.floor(f2 * (float) (this.maxRangedAttackTime - this.attackIntervalMin) + (float) this.attackIntervalMin);
         }
     }
 }
