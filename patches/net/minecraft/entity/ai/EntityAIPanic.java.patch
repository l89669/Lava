--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIPanic.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIPanic.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.ai;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
@@ -9,38 +8,32 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.World;
 
-public class EntityAIPanic extends EntityAIBase
-{
+import javax.annotation.Nullable;
+
+public class EntityAIPanic extends EntityAIBase {
     protected final EntityCreature creature;
     protected double speed;
     protected double randPosX;
     protected double randPosY;
     protected double randPosZ;
 
-    public EntityAIPanic(EntityCreature creature, double speedIn)
-    {
+    public EntityAIPanic(EntityCreature creature, double speedIn) {
         this.creature = creature;
         this.speed = speedIn;
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        if (this.creature.getRevengeTarget() == null && !this.creature.isBurning())
-        {
+    public boolean shouldExecute() {
+        if (this.creature.getRevengeTarget() == null && !this.creature.isBurning()) {
             return false;
-        }
-        else
-        {
-            if (this.creature.isBurning())
-            {
+        } else {
+            if (this.creature.isBurning()) {
                 BlockPos blockpos = this.getRandPos(this.creature.world, this.creature, 5, 4);
 
-                if (blockpos != null)
-                {
-                    this.randPosX = (double)blockpos.getX();
-                    this.randPosY = (double)blockpos.getY();
-                    this.randPosZ = (double)blockpos.getZ();
+                if (blockpos != null) {
+                    this.randPosX = (double) blockpos.getX();
+                    this.randPosY = (double) blockpos.getY();
+                    this.randPosZ = (double) blockpos.getZ();
                     return true;
                 }
             }
@@ -49,16 +42,12 @@
         }
     }
 
-    protected boolean findRandomPosition()
-    {
+    protected boolean findRandomPosition() {
         Vec3d vec3d = RandomPositionGenerator.findRandomTarget(this.creature, 5, 4);
 
-        if (vec3d == null)
-        {
+        if (vec3d == null) {
             return false;
-        }
-        else
-        {
+        } else {
             this.randPosX = vec3d.x;
             this.randPosY = vec3d.y;
             this.randPosZ = vec3d.z;
@@ -66,42 +55,40 @@
         }
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.creature.getNavigator().tryMoveToXYZ(this.randPosX, this.randPosY, this.randPosZ, this.speed);
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
+        // CraftBukkit start - introduce a temporary timeout hack until this is fixed properly
+        if ((this.creature.ticksExisted - this.creature.revengeTimer) > 100) {
+            this.creature.onKillEntity(null);
+            return false;
+        }
+        // CraftBukkit end
         return !this.creature.getNavigator().noPath();
     }
 
     @Nullable
-    private BlockPos getRandPos(World worldIn, Entity entityIn, int horizontalRange, int verticalRange)
-    {
+    private BlockPos getRandPos(World worldIn, Entity entityIn, int horizontalRange, int verticalRange) {
         BlockPos blockpos = new BlockPos(entityIn);
         int i = blockpos.getX();
         int j = blockpos.getY();
         int k = blockpos.getZ();
-        float f = (float)(horizontalRange * horizontalRange * verticalRange * 2);
+        float f = (float) (horizontalRange * horizontalRange * verticalRange * 2);
         BlockPos blockpos1 = null;
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for (int l = i - horizontalRange; l <= i + horizontalRange; ++l)
-        {
-            for (int i1 = j - verticalRange; i1 <= j + verticalRange; ++i1)
-            {
-                for (int j1 = k - horizontalRange; j1 <= k + horizontalRange; ++j1)
-                {
+        for (int l = i - horizontalRange; l <= i + horizontalRange; ++l) {
+            for (int i1 = j - verticalRange; i1 <= j + verticalRange; ++i1) {
+                for (int j1 = k - horizontalRange; j1 <= k + horizontalRange; ++j1) {
                     blockpos$mutableblockpos.setPos(l, i1, j1);
                     IBlockState iblockstate = worldIn.getBlockState(blockpos$mutableblockpos);
 
-                    if (iblockstate.getMaterial() == Material.WATER)
-                    {
-                        float f1 = (float)((l - i) * (l - i) + (i1 - j) * (i1 - j) + (j1 - k) * (j1 - k));
+                    if (iblockstate.getMaterial() == Material.WATER) {
+                        float f1 = (float) ((l - i) * (l - i) + (i1 - j) * (i1 - j) + (j1 - k) * (j1 - k));
 
-                        if (f1 < f)
-                        {
+                        if (f1 < f) {
                             f = f1;
                             blockpos1 = new BlockPos(blockpos$mutableblockpos);
                         }
