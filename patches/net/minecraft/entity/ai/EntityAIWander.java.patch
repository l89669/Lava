--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIWander.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIWander.java
@@ -1,11 +1,11 @@
 package net.minecraft.entity.ai;
 
-import javax.annotation.Nullable;
 import net.minecraft.entity.EntityCreature;
 import net.minecraft.util.math.Vec3d;
 
-public class EntityAIWander extends EntityAIBase
-{
+import javax.annotation.Nullable;
+
+public class EntityAIWander extends EntityAIBase {
     protected final EntityCreature entity;
     protected double x;
     protected double y;
@@ -14,42 +14,33 @@
     protected int executionChance;
     protected boolean mustUpdate;
 
-    public EntityAIWander(EntityCreature creatureIn, double speedIn)
-    {
+    public EntityAIWander(EntityCreature creatureIn, double speedIn) {
         this(creatureIn, speedIn, 120);
     }
 
-    public EntityAIWander(EntityCreature creatureIn, double speedIn, int chance)
-    {
+    public EntityAIWander(EntityCreature creatureIn, double speedIn, int chance) {
         this.entity = creatureIn;
         this.speed = speedIn;
         this.executionChance = chance;
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        if (!this.mustUpdate)
-        {
-            if (this.entity.getIdleTime() >= 100)
-            {
+    public boolean shouldExecute() {
+        if (!this.mustUpdate) {
+            if (this.entity.getIdleTime() >= 100) {
                 return false;
             }
 
-            if (this.entity.getRNG().nextInt(this.executionChance) != 0)
-            {
+            if (this.entity.getRNG().nextInt(this.executionChance) != 0) {
                 return false;
             }
         }
 
         Vec3d vec3d = this.getPosition();
 
-        if (vec3d == null)
-        {
+        if (vec3d == null) {
             return false;
-        }
-        else
-        {
+        } else {
             this.x = vec3d.x;
             this.y = vec3d.y;
             this.z = vec3d.z;
@@ -59,28 +50,23 @@
     }
 
     @Nullable
-    protected Vec3d getPosition()
-    {
+    protected Vec3d getPosition() {
         return RandomPositionGenerator.findRandomTarget(this.entity, 10, 7);
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
         return !this.entity.getNavigator().noPath();
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.entity.getNavigator().tryMoveToXYZ(this.x, this.y, this.z, this.speed);
     }
 
-    public void makeUpdate()
-    {
+    public void makeUpdate() {
         this.mustUpdate = true;
     }
 
-    public void setExecutionChance(int newchance)
-    {
+    public void setExecutionChance(int newchance) {
         this.executionChance = newchance;
     }
 }
