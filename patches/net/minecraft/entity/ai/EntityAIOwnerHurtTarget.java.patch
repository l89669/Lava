--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIOwnerHurtTarget.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIOwnerHurtTarget.java
@@ -3,35 +3,26 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.passive.EntityTameable;
 
-public class EntityAIOwnerHurtTarget extends EntityAITarget
-{
+public class EntityAIOwnerHurtTarget extends EntityAITarget {
     EntityTameable tameable;
     EntityLivingBase attacker;
     private int timestamp;
 
-    public EntityAIOwnerHurtTarget(EntityTameable theEntityTameableIn)
-    {
+    public EntityAIOwnerHurtTarget(EntityTameable theEntityTameableIn) {
         super(theEntityTameableIn, false);
         this.tameable = theEntityTameableIn;
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        if (!this.tameable.isTamed())
-        {
+    public boolean shouldExecute() {
+        if (!this.tameable.isTamed()) {
             return false;
-        }
-        else
-        {
+        } else {
             EntityLivingBase entitylivingbase = this.tameable.getOwner();
 
-            if (entitylivingbase == null)
-            {
+            if (entitylivingbase == null) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.attacker = entitylivingbase.getLastAttackedEntity();
                 int i = entitylivingbase.getLastAttackedEntityTime();
                 return i != this.timestamp && this.isSuitableTarget(this.attacker, false) && this.tameable.shouldAttackEntity(this.attacker, entitylivingbase);
@@ -39,13 +30,11 @@
         }
     }
 
-    public void startExecuting()
-    {
-        this.taskOwner.setAttackTarget(this.attacker);
+    public void startExecuting() {
+        this.taskOwner.setAttackTarget(this.attacker, org.bukkit.event.entity.EntityTargetEvent.TargetReason.OWNER_ATTACKED_TARGET, true);
         EntityLivingBase entitylivingbase = this.tameable.getOwner();
 
-        if (entitylivingbase != null)
-        {
+        if (entitylivingbase != null) {
             this.timestamp = entitylivingbase.getLastAttackedEntityTime();
         }
 
