--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIAvoidEntity.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIAvoidEntity.java
@@ -2,8 +2,6 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityCreature;
 import net.minecraft.pathfinding.Path;
@@ -11,8 +9,10 @@
 import net.minecraft.util.EntitySelectors;
 import net.minecraft.util.math.Vec3d;
 
-public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase
-{
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase {
     private final Predicate<Entity> canBeSeenSelector;
     protected EntityCreature entity;
     private final double farSpeed;
@@ -22,19 +22,15 @@
     private Path path;
     private final PathNavigate navigation;
     private final Class<T> classToAvoid;
-    private final Predicate <? super T > avoidTargetSelector;
+    private final Predicate<? super T> avoidTargetSelector;
 
-    public EntityAIAvoidEntity(EntityCreature entityIn, Class<T> classToAvoidIn, float avoidDistanceIn, double farSpeedIn, double nearSpeedIn)
-    {
+    public EntityAIAvoidEntity(EntityCreature entityIn, Class<T> classToAvoidIn, float avoidDistanceIn, double farSpeedIn, double nearSpeedIn) {
         this(entityIn, classToAvoidIn, Predicates.alwaysTrue(), avoidDistanceIn, farSpeedIn, nearSpeedIn);
     }
 
-    public EntityAIAvoidEntity(EntityCreature entityIn, Class<T> classToAvoidIn, Predicate <? super T > avoidTargetSelectorIn, float avoidDistanceIn, double farSpeedIn, double nearSpeedIn)
-    {
-        this.canBeSeenSelector = new Predicate<Entity>()
-        {
-            public boolean apply(@Nullable Entity p_apply_1_)
-            {
+    public EntityAIAvoidEntity(EntityCreature entityIn, Class<T> classToAvoidIn, Predicate<? super T> avoidTargetSelectorIn, float avoidDistanceIn, double farSpeedIn, double nearSpeedIn) {
+        this.canBeSeenSelector = new Predicate<Entity>() {
+            public boolean apply(@Nullable Entity p_apply_1_) {
                 return p_apply_1_.isEntityAlive() && EntityAIAvoidEntity.this.entity.getEntitySenses().canSee(p_apply_1_) && !EntityAIAvoidEntity.this.entity.isOnSameTeam(p_apply_1_);
             }
         };
@@ -48,58 +44,42 @@
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        List<T> list = this.entity.world.<T>getEntitiesWithinAABB(this.classToAvoid, this.entity.getEntityBoundingBox().grow((double)this.avoidDistance, 3.0D, (double)this.avoidDistance), Predicates.and(EntitySelectors.CAN_AI_TARGET, this.canBeSeenSelector, this.avoidTargetSelector));
+    public boolean shouldExecute() {
+        List<T> list = this.entity.world.<T>getEntitiesWithinAABB(this.classToAvoid, this.entity.getEntityBoundingBox().grow((double) this.avoidDistance, 3.0D, (double) this.avoidDistance), Predicates.and(EntitySelectors.CAN_AI_TARGET, this.canBeSeenSelector, this.avoidTargetSelector));
 
-        if (list.isEmpty())
-        {
+        if (list.isEmpty()) {
             return false;
-        }
-        else
-        {
+        } else {
             this.closestLivingEntity = list.get(0);
             Vec3d vec3d = RandomPositionGenerator.findRandomTargetBlockAwayFrom(this.entity, 16, 7, new Vec3d(this.closestLivingEntity.posX, this.closestLivingEntity.posY, this.closestLivingEntity.posZ));
 
-            if (vec3d == null)
-            {
+            if (vec3d == null) {
                 return false;
-            }
-            else if (this.closestLivingEntity.getDistanceSq(vec3d.x, vec3d.y, vec3d.z) < this.closestLivingEntity.getDistanceSq(this.entity))
-            {
+            } else if (this.closestLivingEntity.getDistanceSq(vec3d.x, vec3d.y, vec3d.z) < this.closestLivingEntity.getDistanceSq(this.entity)) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.path = this.navigation.getPathToXYZ(vec3d.x, vec3d.y, vec3d.z);
                 return this.path != null;
             }
         }
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
         return !this.navigation.noPath();
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.navigation.setPath(this.path, this.farSpeed);
     }
 
-    public void resetTask()
-    {
+    public void resetTask() {
         this.closestLivingEntity = null;
     }
 
-    public void updateTask()
-    {
-        if (this.entity.getDistanceSq(this.closestLivingEntity) < 49.0D)
-        {
+    public void updateTask() {
+        if (this.entity.getDistanceSq(this.closestLivingEntity) < 49.0D) {
             this.entity.getNavigator().setSpeed(this.nearSpeed);
-        }
-        else
-        {
+        } else {
             this.entity.getNavigator().setSpeed(this.farSpeed);
         }
     }
