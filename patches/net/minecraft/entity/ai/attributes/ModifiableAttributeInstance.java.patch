--- ../src-base/minecraft/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
@@ -3,16 +3,16 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.fml.relauncher.SideOnly;
+
+import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
-import javax.annotation.Nullable;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ModifiableAttributeInstance implements IAttributeInstance
-{
+public class ModifiableAttributeInstance implements IAttributeInstance {
     private final AbstractAttributeMap attributeMap;
     private final IAttribute genericAttribute;
     private final Map<Integer, Set<AttributeModifier>> mapByOperation = Maps.<Integer, Set<AttributeModifier>>newHashMap();
@@ -22,48 +22,39 @@
     private boolean needsUpdate = true;
     private double cachedValue;
 
-    public ModifiableAttributeInstance(AbstractAttributeMap attributeMapIn, IAttribute genericAttributeIn)
-    {
+    public ModifiableAttributeInstance(AbstractAttributeMap attributeMapIn, IAttribute genericAttributeIn) {
         this.attributeMap = attributeMapIn;
         this.genericAttribute = genericAttributeIn;
         this.baseValue = genericAttributeIn.getDefaultValue();
 
-        for (int i = 0; i < 3; ++i)
-        {
+        for (int i = 0; i < 3; ++i) {
             this.mapByOperation.put(Integer.valueOf(i), Sets.newHashSet());
         }
     }
 
-    public IAttribute getAttribute()
-    {
+    public IAttribute getAttribute() {
         return this.genericAttribute;
     }
 
-    public double getBaseValue()
-    {
+    public double getBaseValue() {
         return this.baseValue;
     }
 
-    public void setBaseValue(double baseValue)
-    {
-        if (baseValue != this.getBaseValue())
-        {
+    public void setBaseValue(double baseValue) {
+        if (baseValue != this.getBaseValue()) {
             this.baseValue = baseValue;
             this.flagForUpdate();
         }
     }
 
-    public Collection<AttributeModifier> getModifiersByOperation(int operation)
-    {
-        return (Collection)this.mapByOperation.get(Integer.valueOf(operation));
+    public Collection<AttributeModifier> getModifiersByOperation(int operation) {
+        return (Collection) this.mapByOperation.get(Integer.valueOf(operation));
     }
 
-    public Collection<AttributeModifier> getModifiers()
-    {
+    public Collection<AttributeModifier> getModifiers() {
         Set<AttributeModifier> set = Sets.<AttributeModifier>newHashSet();
 
-        for (int i = 0; i < 3; ++i)
-        {
+        for (int i = 0; i < 3; ++i) {
             set.addAll(this.getModifiersByOperation(i));
         }
 
@@ -71,28 +62,21 @@
     }
 
     @Nullable
-    public AttributeModifier getModifier(UUID uuid)
-    {
+    public AttributeModifier getModifier(UUID uuid) {
         return this.mapByUUID.get(uuid);
     }
 
-    public boolean hasModifier(AttributeModifier modifier)
-    {
+    public boolean hasModifier(AttributeModifier modifier) {
         return this.mapByUUID.get(modifier.getID()) != null;
     }
 
-    public void applyModifier(AttributeModifier modifier)
-    {
-        if (this.getModifier(modifier.getID()) != null)
-        {
+    public void applyModifier(AttributeModifier modifier) {
+        if (this.getModifier(modifier.getID()) != null) {
             throw new IllegalArgumentException("Modifier is already applied on this attribute!");
-        }
-        else
-        {
-            Set<AttributeModifier> set = (Set)this.mapByName.get(modifier.getName());
+        } else {
+            Set<AttributeModifier> set = (Set) this.mapByName.get(modifier.getName());
 
-            if (set == null)
-            {
+            if (set == null) {
                 set = Sets.<AttributeModifier>newHashSet();
                 this.mapByName.put(modifier.getName(), set);
             }
@@ -104,28 +88,23 @@
         }
     }
 
-    protected void flagForUpdate()
-    {
+    protected void flagForUpdate() {
         this.needsUpdate = true;
         this.attributeMap.onAttributeModified(this);
     }
 
-    public void removeModifier(AttributeModifier modifier)
-    {
-        for (int i = 0; i < 3; ++i)
-        {
-            Set<AttributeModifier> set = (Set)this.mapByOperation.get(Integer.valueOf(i));
+    public void removeModifier(AttributeModifier modifier) {
+        for (int i = 0; i < 3; ++i) {
+            Set<AttributeModifier> set = (Set) this.mapByOperation.get(Integer.valueOf(i));
             set.remove(modifier);
         }
 
-        Set<AttributeModifier> set1 = (Set)this.mapByName.get(modifier.getName());
+        Set<AttributeModifier> set1 = (Set) this.mapByName.get(modifier.getName());
 
-        if (set1 != null)
-        {
+        if (set1 != null) {
             set1.remove(modifier);
 
-            if (set1.isEmpty())
-            {
+            if (set1.isEmpty()) {
                 this.mapByName.remove(modifier.getName());
             }
         }
@@ -134,34 +113,27 @@
         this.flagForUpdate();
     }
 
-    public void removeModifier(UUID p_188479_1_)
-    {
+    public void removeModifier(UUID p_188479_1_) {
         AttributeModifier attributemodifier = this.getModifier(p_188479_1_);
 
-        if (attributemodifier != null)
-        {
+        if (attributemodifier != null) {
             this.removeModifier(attributemodifier);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void removeAllModifiers()
-    {
+    public void removeAllModifiers() {
         Collection<AttributeModifier> collection = this.getModifiers();
 
-        if (collection != null)
-        {
-            for (AttributeModifier attributemodifier : Lists.newArrayList(collection))
-            {
+        if (collection != null) {
+            for (AttributeModifier attributemodifier : Lists.newArrayList(collection)) {
                 this.removeModifier(attributemodifier);
             }
         }
     }
 
-    public double getAttributeValue()
-    {
-        if (this.needsUpdate)
-        {
+    public double getAttributeValue() {
+        if (this.needsUpdate) {
             this.cachedValue = this.computeValue();
             this.needsUpdate = false;
         }
@@ -169,40 +141,33 @@
         return this.cachedValue;
     }
 
-    private double computeValue()
-    {
+    private double computeValue() {
         double d0 = this.getBaseValue();
 
-        for (AttributeModifier attributemodifier : this.getAppliedModifiers(0))
-        {
+        for (AttributeModifier attributemodifier : this.getAppliedModifiers(0)) {
             d0 += attributemodifier.getAmount();
         }
 
         double d1 = d0;
 
-        for (AttributeModifier attributemodifier1 : this.getAppliedModifiers(1))
-        {
+        for (AttributeModifier attributemodifier1 : this.getAppliedModifiers(1)) {
             d1 += d0 * attributemodifier1.getAmount();
         }
 
-        for (AttributeModifier attributemodifier2 : this.getAppliedModifiers(2))
-        {
+        for (AttributeModifier attributemodifier2 : this.getAppliedModifiers(2)) {
             d1 *= 1.0D + attributemodifier2.getAmount();
         }
 
         return this.genericAttribute.clampValue(d1);
     }
 
-    private Collection<AttributeModifier> getAppliedModifiers(int operation)
-    {
+    private Collection<AttributeModifier> getAppliedModifiers(int operation) {
         Set<AttributeModifier> set = Sets.newHashSet(this.getModifiersByOperation(operation));
 
-        for (IAttribute iattribute = this.genericAttribute.getParent(); iattribute != null; iattribute = iattribute.getParent())
-        {
+        for (IAttribute iattribute = this.genericAttribute.getParent(); iattribute != null; iattribute = iattribute.getParent()) {
             IAttributeInstance iattributeinstance = this.attributeMap.getAttributeInstance(iattribute);
 
-            if (iattributeinstance != null)
-            {
+            if (iattributeinstance != null) {
                 set.addAll(iattributeinstance.getModifiersByOperation(operation));
             }
         }
