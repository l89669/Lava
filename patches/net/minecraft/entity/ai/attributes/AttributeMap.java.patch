--- ../src-base/minecraft/net/minecraft/entity/ai/attributes/AttributeMap.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/attributes/AttributeMap.java
@@ -1,81 +1,67 @@
 package net.minecraft.entity.ai.attributes;
 
 import com.google.common.collect.Sets;
+import net.minecraft.util.LowerStringMap;
+
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
-import net.minecraft.util.LowerStringMap;
 
-public class AttributeMap extends AbstractAttributeMap
-{
+public class AttributeMap extends AbstractAttributeMap {
     private final Set<IAttributeInstance> dirtyInstances = Sets.<IAttributeInstance>newHashSet();
     protected final Map<String, IAttributeInstance> instancesByName = new LowerStringMap();
 
-    public ModifiableAttributeInstance getAttributeInstance(IAttribute attribute)
-    {
-        return (ModifiableAttributeInstance)super.getAttributeInstance(attribute);
+    public ModifiableAttributeInstance getAttributeInstance(IAttribute attribute) {
+        return (ModifiableAttributeInstance) super.getAttributeInstance(attribute);
     }
 
-    public ModifiableAttributeInstance getAttributeInstanceByName(String attributeName)
-    {
+    public ModifiableAttributeInstance getAttributeInstanceByName(String attributeName) {
         IAttributeInstance iattributeinstance = super.getAttributeInstanceByName(attributeName);
 
-        if (iattributeinstance == null)
-        {
+        if (iattributeinstance == null) {
             iattributeinstance = this.instancesByName.get(attributeName);
         }
 
-        return (ModifiableAttributeInstance)iattributeinstance;
+        return (ModifiableAttributeInstance) iattributeinstance;
     }
 
-    public IAttributeInstance registerAttribute(IAttribute attribute)
-    {
+    public IAttributeInstance registerAttribute(IAttribute attribute) {
         IAttributeInstance iattributeinstance = super.registerAttribute(attribute);
 
-        if (attribute instanceof RangedAttribute && ((RangedAttribute)attribute).getDescription() != null)
-        {
-            this.instancesByName.put(((RangedAttribute)attribute).getDescription(), iattributeinstance);
+        if (attribute instanceof RangedAttribute && ((RangedAttribute) attribute).getDescription() != null) {
+            this.instancesByName.put(((RangedAttribute) attribute).getDescription(), iattributeinstance);
         }
 
         return iattributeinstance;
     }
 
-    protected IAttributeInstance createInstance(IAttribute attribute)
-    {
+    protected IAttributeInstance createInstance(IAttribute attribute) {
         return new ModifiableAttributeInstance(this, attribute);
     }
 
-    public void onAttributeModified(IAttributeInstance instance)
-    {
-        if (instance.getAttribute().getShouldWatch())
-        {
+    public void onAttributeModified(IAttributeInstance instance) {
+        if (instance.getAttribute().getShouldWatch()) {
             this.dirtyInstances.add(instance);
         }
 
-        for (IAttribute iattribute : this.descendantsByParent.get(instance.getAttribute()))
-        {
+        for (IAttribute iattribute : this.descendantsByParent.get(instance.getAttribute())) {
             ModifiableAttributeInstance modifiableattributeinstance = this.getAttributeInstance(iattribute);
 
-            if (modifiableattributeinstance != null)
-            {
+            if (modifiableattributeinstance != null) {
                 modifiableattributeinstance.flagForUpdate();
             }
         }
     }
 
-    public Set<IAttributeInstance> getDirtyInstances()
-    {
+    public Set<IAttributeInstance> getDirtyInstances() {
         return this.dirtyInstances;
     }
 
-    public Collection<IAttributeInstance> getWatchedAttributes()
-    {
+    public Collection<IAttributeInstance> getWatchedAttributes() {
         Set<IAttributeInstance> set = Sets.<IAttributeInstance>newHashSet();
 
-        for (IAttributeInstance iattributeinstance : this.getAllAttributes())
-        {
-            if (iattributeinstance.getAttribute().getShouldWatch())
-            {
+        for (IAttributeInstance iattributeinstance : this.getAllAttributes()) {
+            if (iattributeinstance.getAttribute().getShouldWatch()) {
                 set.add(iattributeinstance);
             }
         }
