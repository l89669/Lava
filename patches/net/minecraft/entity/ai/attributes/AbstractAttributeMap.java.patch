--- ../src-base/minecraft/net/minecraft/entity/ai/attributes/AbstractAttributeMap.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/attributes/AbstractAttributeMap.java
@@ -3,43 +3,36 @@
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
+import net.minecraft.util.LowerStringMap;
+
+import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Map.Entry;
-import javax.annotation.Nullable;
-import net.minecraft.util.LowerStringMap;
 
-public abstract class AbstractAttributeMap
-{
+public abstract class AbstractAttributeMap {
     protected final Map<IAttribute, IAttributeInstance> attributes = Maps.<IAttribute, IAttributeInstance>newHashMap();
     protected final Map<String, IAttributeInstance> attributesByName = new LowerStringMap();
     protected final Multimap<IAttribute, IAttribute> descendantsByParent = HashMultimap.<IAttribute, IAttribute>create();
 
-    public IAttributeInstance getAttributeInstance(IAttribute attribute)
-    {
+    public IAttributeInstance getAttributeInstance(IAttribute attribute) {
         return this.attributes.get(attribute);
     }
 
     @Nullable
-    public IAttributeInstance getAttributeInstanceByName(String attributeName)
-    {
+    public IAttributeInstance getAttributeInstanceByName(String attributeName) {
         return this.attributesByName.get(attributeName);
     }
 
-    public IAttributeInstance registerAttribute(IAttribute attribute)
-    {
-        if (this.attributesByName.containsKey(attribute.getName()))
-        {
+    public IAttributeInstance registerAttribute(IAttribute attribute) {
+        if (this.attributesByName.containsKey(attribute.getName())) {
             throw new IllegalArgumentException("Attribute is already registered!");
-        }
-        else
-        {
+        } else {
             IAttributeInstance iattributeinstance = this.createInstance(attribute);
             this.attributesByName.put(attribute.getName(), iattributeinstance);
             this.attributes.put(attribute, iattributeinstance);
 
-            for (IAttribute iattribute = attribute.getParent(); iattribute != null; iattribute = iattribute.getParent())
-            {
+            for (IAttribute iattribute = attribute.getParent(); iattribute != null; iattribute = iattribute.getParent()) {
                 this.descendantsByParent.put(iattribute, attribute);
             }
 
@@ -49,36 +42,28 @@
 
     protected abstract IAttributeInstance createInstance(IAttribute attribute);
 
-    public Collection<IAttributeInstance> getAllAttributes()
-    {
+    public Collection<IAttributeInstance> getAllAttributes() {
         return this.attributesByName.values();
     }
 
-    public void onAttributeModified(IAttributeInstance instance)
-    {
+    public void onAttributeModified(IAttributeInstance instance) {
     }
 
-    public void removeAttributeModifiers(Multimap<String, AttributeModifier> modifiers)
-    {
-        for (Entry<String, AttributeModifier> entry : modifiers.entries())
-        {
+    public void removeAttributeModifiers(Multimap<String, AttributeModifier> modifiers) {
+        for (Entry<String, AttributeModifier> entry : modifiers.entries()) {
             IAttributeInstance iattributeinstance = this.getAttributeInstanceByName(entry.getKey());
 
-            if (iattributeinstance != null)
-            {
+            if (iattributeinstance != null) {
                 iattributeinstance.removeModifier(entry.getValue());
             }
         }
     }
 
-    public void applyAttributeModifiers(Multimap<String, AttributeModifier> modifiers)
-    {
-        for (Entry<String, AttributeModifier> entry : modifiers.entries())
-        {
+    public void applyAttributeModifiers(Multimap<String, AttributeModifier> modifiers) {
+        for (Entry<String, AttributeModifier> entry : modifiers.entries()) {
             IAttributeInstance iattributeinstance = this.getAttributeInstanceByName(entry.getKey());
 
-            if (iattributeinstance != null)
-            {
+            if (iattributeinstance != null) {
                 iattributeinstance.removeModifier(entry.getValue());
                 iattributeinstance.applyModifier(entry.getValue());
             }
