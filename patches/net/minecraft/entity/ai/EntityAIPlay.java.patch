--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIPlay.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIPlay.java
@@ -1,59 +1,47 @@
 package net.minecraft.entity.ai;
 
-import java.util.List;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.util.math.Vec3d;
 
-public class EntityAIPlay extends EntityAIBase
-{
+import java.util.List;
+
+public class EntityAIPlay extends EntityAIBase {
     private final EntityVillager villager;
     private EntityLivingBase targetVillager;
     private final double speed;
     private int playTime;
 
-    public EntityAIPlay(EntityVillager villagerIn, double speedIn)
-    {
+    public EntityAIPlay(EntityVillager villagerIn, double speedIn) {
         this.villager = villagerIn;
         this.speed = speedIn;
         this.setMutexBits(1);
     }
 
-    public boolean shouldExecute()
-    {
-        if (this.villager.getGrowingAge() >= 0)
-        {
+    public boolean shouldExecute() {
+        if (this.villager.getGrowingAge() >= 0) {
             return false;
-        }
-        else if (this.villager.getRNG().nextInt(400) != 0)
-        {
+        } else if (this.villager.getRNG().nextInt(400) != 0) {
             return false;
-        }
-        else
-        {
+        } else {
             List<EntityVillager> list = this.villager.world.<EntityVillager>getEntitiesWithinAABB(EntityVillager.class, this.villager.getEntityBoundingBox().grow(6.0D, 3.0D, 6.0D));
             double d0 = Double.MAX_VALUE;
 
-            for (EntityVillager entityvillager : list)
-            {
-                if (entityvillager != this.villager && !entityvillager.isPlaying() && entityvillager.getGrowingAge() < 0)
-                {
+            for (EntityVillager entityvillager : list) {
+                if (entityvillager != this.villager && !entityvillager.isPlaying() && entityvillager.getGrowingAge() < 0) {
                     double d1 = entityvillager.getDistanceSq(this.villager);
 
-                    if (d1 <= d0)
-                    {
+                    if (d1 <= d0) {
                         d0 = d1;
                         this.targetVillager = entityvillager;
                     }
                 }
             }
 
-            if (this.targetVillager == null)
-            {
+            if (this.targetVillager == null) {
                 Vec3d vec3d = RandomPositionGenerator.findRandomTarget(this.villager, 16, 3);
 
-                if (vec3d == null)
-                {
+                if (vec3d == null) {
                     return false;
                 }
             }
@@ -62,44 +50,34 @@
         }
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
         return this.playTime > 0;
     }
 
-    public void startExecuting()
-    {
-        if (this.targetVillager != null)
-        {
+    public void startExecuting() {
+        if (this.targetVillager != null) {
             this.villager.setPlaying(true);
         }
 
         this.playTime = 1000;
     }
 
-    public void resetTask()
-    {
+    public void resetTask() {
         this.villager.setPlaying(false);
         this.targetVillager = null;
     }
 
-    public void updateTask()
-    {
+    public void updateTask() {
         --this.playTime;
 
-        if (this.targetVillager != null)
-        {
-            if (this.villager.getDistanceSq(this.targetVillager) > 4.0D)
-            {
+        if (this.targetVillager != null) {
+            if (this.villager.getDistanceSq(this.targetVillager) > 4.0D) {
                 this.villager.getNavigator().tryMoveToEntityLiving(this.targetVillager, this.speed);
             }
-        }
-        else if (this.villager.getNavigator().noPath())
-        {
+        } else if (this.villager.getNavigator().noPath()) {
             Vec3d vec3d = RandomPositionGenerator.findRandomTarget(this.villager, 16, 3);
 
-            if (vec3d == null)
-            {
+            if (vec3d == null) {
                 return;
             }
 
