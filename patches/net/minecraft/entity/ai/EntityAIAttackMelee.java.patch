--- ../src-base/minecraft/net/minecraft/entity/ai/EntityAIAttackMelee.java
+++ ../src-work/minecraft/net/minecraft/entity/ai/EntityAIAttackMelee.java
@@ -8,8 +8,7 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
-public class EntityAIAttackMelee extends EntityAIBase
-{
+public class EntityAIAttackMelee extends EntityAIBase {
     World world;
     protected EntityCreature attacker;
     protected int attackTick;
@@ -24,8 +23,7 @@
     private int failedPathFindingPenalty = 0;
     private boolean canPenalize = false;
 
-    public EntityAIAttackMelee(EntityCreature creature, double speedIn, boolean useLongMemory)
-    {
+    public EntityAIAttackMelee(EntityCreature creature, double speedIn, boolean useLongMemory) {
         this.attacker = creature;
         this.world = creature.world;
         this.speedTowardsTarget = speedIn;
@@ -33,132 +31,96 @@
         this.setMutexBits(3);
     }
 
-    public boolean shouldExecute()
-    {
+    public boolean shouldExecute() {
         EntityLivingBase entitylivingbase = this.attacker.getAttackTarget();
 
-        if (entitylivingbase == null)
-        {
+        if (entitylivingbase == null) {
             return false;
-        }
-        else if (!entitylivingbase.isEntityAlive())
-        {
+        } else if (!entitylivingbase.isEntityAlive()) {
             return false;
-        }
-        else
-        {
-            if (canPenalize)
-            {
-                if (--this.delayCounter <= 0)
-                {
+        } else {
+            if (canPenalize) {
+                if (--this.delayCounter <= 0) {
                     this.path = this.attacker.getNavigator().getPathToEntityLiving(entitylivingbase);
                     this.delayCounter = 4 + this.attacker.getRNG().nextInt(7);
                     return this.path != null;
-                }
-                else
-                {
+                } else {
                     return true;
                 }
             }
             this.path = this.attacker.getNavigator().getPathToEntityLiving(entitylivingbase);
 
-            if (this.path != null)
-            {
+            if (this.path != null) {
                 return true;
-            }
-            else
-            {
+            } else {
                 return this.getAttackReachSqr(entitylivingbase) >= this.attacker.getDistanceSq(entitylivingbase.posX, entitylivingbase.getEntityBoundingBox().minY, entitylivingbase.posZ);
             }
         }
     }
 
-    public boolean shouldContinueExecuting()
-    {
+    public boolean shouldContinueExecuting() {
         EntityLivingBase entitylivingbase = this.attacker.getAttackTarget();
 
-        if (entitylivingbase == null)
-        {
+        if (entitylivingbase == null) {
             return false;
-        }
-        else if (!entitylivingbase.isEntityAlive())
-        {
+        } else if (!entitylivingbase.isEntityAlive()) {
             return false;
-        }
-        else if (!this.longMemory)
-        {
+        } else if (!this.longMemory) {
             return !this.attacker.getNavigator().noPath();
-        }
-        else if (!this.attacker.isWithinHomeDistanceFromPosition(new BlockPos(entitylivingbase)))
-        {
+        } else if (!this.attacker.isWithinHomeDistanceFromPosition(new BlockPos(entitylivingbase))) {
             return false;
+        } else {
+            return !(entitylivingbase instanceof EntityPlayer) || !((EntityPlayer) entitylivingbase).isSpectator() && !((EntityPlayer) entitylivingbase).isCreative();
         }
-        else
-        {
-            return !(entitylivingbase instanceof EntityPlayer) || !((EntityPlayer)entitylivingbase).isSpectator() && !((EntityPlayer)entitylivingbase).isCreative();
-        }
     }
 
-    public void startExecuting()
-    {
+    public void startExecuting() {
         this.attacker.getNavigator().setPath(this.path, this.speedTowardsTarget);
         this.delayCounter = 0;
     }
 
-    public void resetTask()
-    {
+    public void resetTask() {
         EntityLivingBase entitylivingbase = this.attacker.getAttackTarget();
 
-        if (entitylivingbase instanceof EntityPlayer && (((EntityPlayer)entitylivingbase).isSpectator() || ((EntityPlayer)entitylivingbase).isCreative()))
-        {
-            this.attacker.setAttackTarget((EntityLivingBase)null);
+        if (entitylivingbase instanceof EntityPlayer && (((EntityPlayer) entitylivingbase).isSpectator() || ((EntityPlayer) entitylivingbase).isCreative())) {
+            this.attacker.setAttackTarget((EntityLivingBase) null);
         }
 
         this.attacker.getNavigator().clearPath();
     }
 
-    public void updateTask()
-    {
+    public void updateTask() {
         EntityLivingBase entitylivingbase = this.attacker.getAttackTarget();
         this.attacker.getLookHelper().setLookPositionWithEntity(entitylivingbase, 30.0F, 30.0F);
         double d0 = this.attacker.getDistanceSq(entitylivingbase.posX, entitylivingbase.getEntityBoundingBox().minY, entitylivingbase.posZ);
         --this.delayCounter;
 
-        if ((this.longMemory || this.attacker.getEntitySenses().canSee(entitylivingbase)) && this.delayCounter <= 0 && (this.targetX == 0.0D && this.targetY == 0.0D && this.targetZ == 0.0D || entitylivingbase.getDistanceSq(this.targetX, this.targetY, this.targetZ) >= 1.0D || this.attacker.getRNG().nextFloat() < 0.05F))
-        {
+        if ((this.longMemory || this.attacker.getEntitySenses().canSee(entitylivingbase)) && this.delayCounter <= 0 && (this.targetX == 0.0D && this.targetY == 0.0D && this.targetZ == 0.0D || entitylivingbase.getDistanceSq(this.targetX, this.targetY, this.targetZ) >= 1.0D || this.attacker.getRNG().nextFloat() < 0.05F)) {
             this.targetX = entitylivingbase.posX;
             this.targetY = entitylivingbase.getEntityBoundingBox().minY;
             this.targetZ = entitylivingbase.posZ;
             this.delayCounter = 4 + this.attacker.getRNG().nextInt(7);
 
-            if (this.canPenalize)
-            {
+            if (this.canPenalize) {
                 this.delayCounter += failedPathFindingPenalty;
-                if (this.attacker.getNavigator().getPath() != null)
-                {
+                if (this.attacker.getNavigator().getPath() != null) {
                     net.minecraft.pathfinding.PathPoint finalPathPoint = this.attacker.getNavigator().getPath().getFinalPathPoint();
                     if (finalPathPoint != null && entitylivingbase.getDistanceSq(finalPathPoint.x, finalPathPoint.y, finalPathPoint.z) < 1)
                         failedPathFindingPenalty = 0;
                     else
                         failedPathFindingPenalty += 10;
-                }
-                else
-                {
+                } else {
                     failedPathFindingPenalty += 10;
                 }
             }
 
-            if (d0 > 1024.0D)
-            {
+            if (d0 > 1024.0D) {
                 this.delayCounter += 10;
-            }
-            else if (d0 > 256.0D)
-            {
+            } else if (d0 > 256.0D) {
                 this.delayCounter += 5;
             }
 
-            if (!this.attacker.getNavigator().tryMoveToEntityLiving(entitylivingbase, this.speedTowardsTarget))
-            {
+            if (!this.attacker.getNavigator().tryMoveToEntityLiving(entitylivingbase, this.speedTowardsTarget)) {
                 this.delayCounter += 15;
             }
         }
@@ -167,20 +129,17 @@
         this.checkAndPerformAttack(entitylivingbase, d0);
     }
 
-    protected void checkAndPerformAttack(EntityLivingBase p_190102_1_, double p_190102_2_)
-    {
+    protected void checkAndPerformAttack(EntityLivingBase p_190102_1_, double p_190102_2_) {
         double d0 = this.getAttackReachSqr(p_190102_1_);
 
-        if (p_190102_2_ <= d0 && this.attackTick <= 0)
-        {
+        if (p_190102_2_ <= d0 && this.attackTick <= 0) {
             this.attackTick = 20;
             this.attacker.swingArm(EnumHand.MAIN_HAND);
             this.attacker.attackEntityAsMob(p_190102_1_);
         }
     }
 
-    protected double getAttackReachSqr(EntityLivingBase attackTarget)
-    {
-        return (double)(this.attacker.width * 2.0F * this.attacker.width * 2.0F + attackTarget.width);
+    protected double getAttackReachSqr(EntityLivingBase attackTarget) {
+        return (double) (this.attacker.width * 2.0F * this.attacker.width * 2.0F + attackTarget.width);
     }
 }
