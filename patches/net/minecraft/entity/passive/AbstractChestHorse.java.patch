--- ../src-base/minecraft/net/minecraft/entity/passive/AbstractChestHorse.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/AbstractChestHorse.java
@@ -20,94 +20,79 @@
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
 import net.minecraft.world.World;
 
-public abstract class AbstractChestHorse extends AbstractHorse
-{
+public abstract class AbstractChestHorse extends AbstractHorse {
     private static final DataParameter<Boolean> DATA_ID_CHEST = EntityDataManager.<Boolean>createKey(AbstractChestHorse.class, DataSerializers.BOOLEAN);
 
-    public AbstractChestHorse(World worldIn)
-    {
+    public AbstractChestHorse(World worldIn) {
         super(worldIn);
         this.canGallop = false;
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
         this.dataManager.register(DATA_ID_CHEST, Boolean.valueOf(false));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue((double)this.getModifiedMaxHealth());
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue((double) this.getModifiedMaxHealth());
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.17499999701976776D);
         this.getEntityAttribute(JUMP_STRENGTH).setBaseValue(0.5D);
     }
 
-    public boolean hasChest()
-    {
-        return ((Boolean)this.dataManager.get(DATA_ID_CHEST)).booleanValue();
+    public boolean hasChest() {
+        return ((Boolean) this.dataManager.get(DATA_ID_CHEST)).booleanValue();
     }
 
-    public void setChested(boolean chested)
-    {
+    public void setChested(boolean chested) {
         this.dataManager.set(DATA_ID_CHEST, Boolean.valueOf(chested));
     }
 
-    protected int getInventorySize()
-    {
+    protected int getInventorySize() {
         return this.hasChest() ? 17 : super.getInventorySize();
     }
 
-    public double getMountedYOffset()
-    {
+    public double getMountedYOffset() {
         return super.getMountedYOffset() - 0.25D;
     }
 
-    protected SoundEvent getAngrySound()
-    {
+    protected SoundEvent getAngrySound() {
         super.getAngrySound();
         return SoundEvents.ENTITY_DONKEY_ANGRY;
     }
 
-    public void onDeath(DamageSource cause)
-    {
-        super.onDeath(cause);
+    public void onDeath(DamageSource cause) {
+        // super.onDeath(cause); // CraftBukkit - moved down
 
-        if (this.hasChest())
-        {
-            if (!this.world.isRemote)
-            {
+        if (this.hasChest()) {
+            if (!this.world.isRemote) {
                 this.dropItem(Item.getItemFromBlock(Blocks.CHEST), 1);
             }
 
-            this.setChested(false);
+            // this.setChested(false); // CraftBukkit - moved down
         }
+        super.onDeath(cause);
+        this.setChested(false);
     }
 
-    public static void registerFixesAbstractChestHorse(DataFixer fixer, Class<?> entityClass)
-    {
+    public static void registerFixesAbstractChestHorse(DataFixer fixer, Class<?> entityClass) {
         AbstractHorse.registerFixesAbstractHorse(fixer, entityClass);
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(entityClass, new String[] {"Items"}));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(entityClass, new String[]{"Items"}));
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setBoolean("ChestedHorse", this.hasChest());
 
-        if (this.hasChest())
-        {
+        if (this.hasChest()) {
             NBTTagList nbttaglist = new NBTTagList();
 
-            for (int i = 2; i < this.horseChest.getSizeInventory(); ++i)
-            {
+            for (int i = 2; i < this.horseChest.getSizeInventory(); ++i) {
                 ItemStack itemstack = this.horseChest.getStackInSlot(i);
 
-                if (!itemstack.isEmpty())
-                {
+                if (!itemstack.isEmpty()) {
                     NBTTagCompound nbttagcompound = new NBTTagCompound();
-                    nbttagcompound.setByte("Slot", (byte)i);
+                    nbttagcompound.setByte("Slot", (byte) i);
                     itemstack.writeToNBT(nbttagcompound);
                     nbttaglist.appendTag(nbttagcompound);
                 }
@@ -117,23 +102,19 @@
         }
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.setChested(compound.getBoolean("ChestedHorse"));
 
-        if (this.hasChest())
-        {
+        if (this.hasChest()) {
             NBTTagList nbttaglist = compound.getTagList("Items", 10);
             this.initHorseChest();
 
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
+            for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
                 int j = nbttagcompound.getByte("Slot") & 255;
 
-                if (j >= 2 && j < this.horseChest.getSizeInventory())
-                {
+                if (j >= 2 && j < this.horseChest.getSizeInventory()) {
                     this.horseChest.setInventorySlotContents(j, new ItemStack(nbttagcompound));
                 }
             }
@@ -142,19 +123,15 @@
         this.updateHorseSlots();
     }
 
-    public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn)
-    {
-        if (inventorySlot == 499)
-        {
-            if (this.hasChest() && itemStackIn.isEmpty())
-            {
+    public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn) {
+        if (inventorySlot == 499) {
+            if (this.hasChest() && itemStackIn.isEmpty()) {
                 this.setChested(false);
                 this.initHorseChest();
                 return true;
             }
 
-            if (!this.hasChest() && itemStackIn.getItem() == Item.getItemFromBlock(Blocks.CHEST))
-            {
+            if (!this.hasChest() && itemStackIn.getItem() == Item.getItemFromBlock(Blocks.CHEST)) {
                 this.setChested(true);
                 this.initHorseChest();
                 return true;
@@ -164,38 +141,28 @@
         return super.replaceItemInInventory(inventorySlot, itemStackIn);
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
         ItemStack itemstack = player.getHeldItem(hand);
 
-        if (itemstack.getItem() == Items.SPAWN_EGG)
-        {
+        if (itemstack.getItem() == Items.SPAWN_EGG) {
             return super.processInteract(player, hand);
-        }
-        else
-        {
-            if (!this.isChild())
-            {
-                if (this.isTame() && player.isSneaking())
-                {
+        } else {
+            if (!this.isChild()) {
+                if (this.isTame() && player.isSneaking()) {
                     this.openGUI(player);
                     return true;
                 }
 
-                if (this.isBeingRidden())
-                {
+                if (this.isBeingRidden()) {
                     return super.processInteract(player, hand);
                 }
             }
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 boolean flag = this.handleEating(player, itemstack);
 
-                if (!flag && !this.isTame())
-                {
-                    if (itemstack.interactWithEntity(player, this, hand))
-                    {
+                if (!flag && !this.isTame()) {
+                    if (itemstack.interactWithEntity(player, this, hand)) {
                         return true;
                     }
 
@@ -203,24 +170,20 @@
                     return true;
                 }
 
-                if (!flag && !this.hasChest() && itemstack.getItem() == Item.getItemFromBlock(Blocks.CHEST))
-                {
+                if (!flag && !this.hasChest() && itemstack.getItem() == Item.getItemFromBlock(Blocks.CHEST)) {
                     this.setChested(true);
                     this.playChestEquipSound();
                     flag = true;
                     this.initHorseChest();
                 }
 
-                if (!flag && !this.isChild() && !this.isHorseSaddled() && itemstack.getItem() == Items.SADDLE)
-                {
+                if (!flag && !this.isChild() && !this.isHorseSaddled() && itemstack.getItem() == Items.SADDLE) {
                     this.openGUI(player);
                     return true;
                 }
 
-                if (flag)
-                {
-                    if (!player.capabilities.isCreativeMode)
-                    {
+                if (flag) {
+                    if (!player.capabilities.isCreativeMode) {
                         itemstack.shrink(1);
                     }
 
@@ -228,29 +191,22 @@
                 }
             }
 
-            if (this.isChild())
-            {
+            if (this.isChild()) {
                 return super.processInteract(player, hand);
-            }
-            else if (itemstack.interactWithEntity(player, this, hand))
-            {
+            } else if (itemstack.interactWithEntity(player, this, hand)) {
                 return true;
-            }
-            else
-            {
+            } else {
                 this.mountTo(player);
                 return true;
             }
         }
     }
 
-    protected void playChestEquipSound()
-    {
+    protected void playChestEquipSound() {
         this.playSound(SoundEvents.ENTITY_DONKEY_CHEST, 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
     }
 
-    public int getInventoryColumns()
-    {
+    public int getInventoryColumns() {
         return 5;
     }
 }
