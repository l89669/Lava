--- ../src-base/minecraft/net/minecraft/entity/passive/EntitySheep.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntitySheep.java
@@ -1,29 +1,19 @@
 package net.minecraft.entity.passive;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.IEntityLivingData;
 import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIEatGrass;
-import net.minecraft.entity.ai.EntityAIFollowParent;
-import net.minecraft.entity.ai.EntityAILookIdle;
-import net.minecraft.entity.ai.EntityAIMate;
-import net.minecraft.entity.ai.EntityAIPanic;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAITempt;
-import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.Container;
+import net.minecraft.inventory.InventoryCraftResult;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
@@ -45,44 +35,50 @@
 import net.minecraft.world.storage.loot.LootTableList;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.event.entity.SheepRegrowWoolEvent;
+import org.bukkit.event.player.PlayerShearEntityEvent;
+import org.bukkit.inventory.InventoryView;
 
-public class EntitySheep extends EntityAnimal implements net.minecraftforge.common.IShearable
-{
+import javax.annotation.Nullable;
+import java.util.Map;
+import java.util.Random;
+
+public class EntitySheep extends EntityAnimal implements net.minecraftforge.common.IShearable {
     private static final DataParameter<Byte> DYE_COLOR = EntityDataManager.<Byte>createKey(EntitySheep.class, DataSerializers.BYTE);
-    private final InventoryCrafting inventoryCrafting = new InventoryCrafting(new Container()
-    {
-        public boolean canInteractWith(EntityPlayer playerIn)
-        {
+    private final InventoryCrafting inventoryCrafting = new InventoryCrafting(new Container() {
+        public boolean canInteractWith(EntityPlayer playerIn) {
             return false;
         }
+
+        @Override
+        public InventoryView getBukkitView() {
+            return null; // TODO: O.O
+        }
     }, 2, 1);
     private static final Map<EnumDyeColor, float[]> DYE_TO_RGB = Maps.newEnumMap(EnumDyeColor.class);
     private int sheepTimer;
     private EntityAIEatGrass entityAIEatGrass;
 
-    private static float[] createSheepColor(EnumDyeColor p_192020_0_)
-    {
+    private static float[] createSheepColor(EnumDyeColor p_192020_0_) {
         float[] afloat = p_192020_0_.getColorComponentValues();
         float f = 0.75F;
-        return new float[] {afloat[0] * 0.75F, afloat[1] * 0.75F, afloat[2] * 0.75F};
+        return new float[]{afloat[0] * 0.75F, afloat[1] * 0.75F, afloat[2] * 0.75F};
     }
 
     @SideOnly(Side.CLIENT)
-    public static float[] getDyeRgb(EnumDyeColor dyeColor)
-    {
+    public static float[] getDyeRgb(EnumDyeColor dyeColor) {
         return DYE_TO_RGB.get(dyeColor);
     }
 
-    public EntitySheep(World worldIn)
-    {
+    public EntitySheep(World worldIn) {
         super(worldIn);
         this.setSize(0.9F, 1.3F);
         this.inventoryCrafting.setInventorySlotContents(0, new ItemStack(Items.DYE));
         this.inventoryCrafting.setInventorySlotContents(1, new ItemStack(Items.DYE));
+        this.inventoryCrafting.resultInventory = new InventoryCraftResult(); // CraftBukkit - add result slot for event
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         this.entityAIEatGrass = new EntityAIEatGrass(this);
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(1, new EntityAIPanic(this, 1.25D));
@@ -95,46 +91,36 @@
         this.tasks.addTask(8, new EntityAILookIdle(this));
     }
 
-    protected void updateAITasks()
-    {
+    protected void updateAITasks() {
         this.sheepTimer = this.entityAIEatGrass.getEatingGrassTimer();
         super.updateAITasks();
     }
 
-    public void onLivingUpdate()
-    {
-        if (this.world.isRemote)
-        {
+    public void onLivingUpdate() {
+        if (this.world.isRemote) {
             this.sheepTimer = Math.max(0, this.sheepTimer - 1);
         }
 
         super.onLivingUpdate();
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.23000000417232513D);
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
-        this.dataManager.register(DYE_COLOR, Byte.valueOf((byte)0));
+        this.dataManager.register(DYE_COLOR, Byte.valueOf((byte) 0));
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
-        if (this.getSheared())
-        {
+    protected ResourceLocation getLootTable() {
+        if (this.getSheared()) {
             return LootTableList.ENTITIES_SHEEP;
-        }
-        else
-        {
-            switch (this.getFleeceColor())
-            {
+        } else {
+            switch (this.getFleeceColor()) {
                 case WHITE:
                 default:
                     return LootTableList.ENTITIES_SHEEP_WHITE;
@@ -173,35 +159,36 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 10)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 10) {
             this.sheepTimer = 40;
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
         ItemStack itemstack = player.getHeldItem(hand);
 
         if (false && itemstack.getItem() == Items.SHEARS && !this.getSheared() && !this.isChild())   //Forge: Moved to onSheared
         {
-            if (!this.world.isRemote)
-            {
+            if (!this.world.isRemote) {
+                // CraftBukkit start
+                PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) player.getBukkitEntity(), this.getBukkitEntity());
+                this.world.getServer().getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return false;
+                }
+                // CraftBukkit end
+
                 this.setSheared(true);
                 int i = 1 + this.rand.nextInt(3);
 
-                for (int j = 0; j < i; ++j)
-                {
+                for (int j = 0; j < i; ++j) {
                     EntityItem entityitem = this.entityDropItem(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, this.getFleeceColor().getMetadata()), 1.0F);
-                    entityitem.motionY += (double)(this.rand.nextFloat() * 0.05F);
-                    entityitem.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-                    entityitem.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+                    entityitem.motionY += (double) (this.rand.nextFloat() * 0.05F);
+                    entityitem.motionX += (double) ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+                    entityitem.motionZ += (double) ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
                 }
             }
 
@@ -212,162 +199,134 @@
         return super.processInteract(player, hand);
     }
 
-    public static void registerFixesSheep(DataFixer fixer)
-    {
+    public static void registerFixesSheep(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntitySheep.class);
     }
 
     @SideOnly(Side.CLIENT)
-    public float getHeadRotationPointY(float p_70894_1_)
-    {
-        if (this.sheepTimer <= 0)
-        {
+    public float getHeadRotationPointY(float p_70894_1_) {
+        if (this.sheepTimer <= 0) {
             return 0.0F;
-        }
-        else if (this.sheepTimer >= 4 && this.sheepTimer <= 36)
-        {
+        } else if (this.sheepTimer >= 4 && this.sheepTimer <= 36) {
             return 1.0F;
+        } else {
+            return this.sheepTimer < 4 ? ((float) this.sheepTimer - p_70894_1_) / 4.0F : -((float) (this.sheepTimer - 40) - p_70894_1_) / 4.0F;
         }
-        else
-        {
-            return this.sheepTimer < 4 ? ((float)this.sheepTimer - p_70894_1_) / 4.0F : -((float)(this.sheepTimer - 40) - p_70894_1_) / 4.0F;
-        }
     }
 
     @SideOnly(Side.CLIENT)
-    public float getHeadRotationAngleX(float p_70890_1_)
-    {
-        if (this.sheepTimer > 4 && this.sheepTimer <= 36)
-        {
-            float f = ((float)(this.sheepTimer - 4) - p_70890_1_) / 32.0F;
-            return ((float)Math.PI / 5F) + ((float)Math.PI * 7F / 100F) * MathHelper.sin(f * 28.7F);
+    public float getHeadRotationAngleX(float p_70890_1_) {
+        if (this.sheepTimer > 4 && this.sheepTimer <= 36) {
+            float f = ((float) (this.sheepTimer - 4) - p_70890_1_) / 32.0F;
+            return ((float) Math.PI / 5F) + ((float) Math.PI * 7F / 100F) * MathHelper.sin(f * 28.7F);
+        } else {
+            return this.sheepTimer > 0 ? ((float) Math.PI / 5F) : this.rotationPitch * 0.017453292F;
         }
-        else
-        {
-            return this.sheepTimer > 0 ? ((float)Math.PI / 5F) : this.rotationPitch * 0.017453292F;
-        }
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setBoolean("Sheared", this.getSheared());
-        compound.setByte("Color", (byte)this.getFleeceColor().getMetadata());
+        compound.setByte("Color", (byte) this.getFleeceColor().getMetadata());
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.setSheared(compound.getBoolean("Sheared"));
         this.setFleeceColor(EnumDyeColor.byMetadata(compound.getByte("Color")));
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return SoundEvents.ENTITY_SHEEP_AMBIENT;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_SHEEP_HURT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.ENTITY_SHEEP_DEATH;
     }
 
-    protected void playStepSound(BlockPos pos, Block blockIn)
-    {
+    protected void playStepSound(BlockPos pos, Block blockIn) {
         this.playSound(SoundEvents.ENTITY_SHEEP_STEP, 0.15F, 1.0F);
     }
 
-    public EnumDyeColor getFleeceColor()
-    {
-        return EnumDyeColor.byMetadata(((Byte)this.dataManager.get(DYE_COLOR)).byteValue() & 15);
+    public EnumDyeColor getFleeceColor() {
+        return EnumDyeColor.byMetadata(((Byte) this.dataManager.get(DYE_COLOR)).byteValue() & 15);
     }
 
-    public void setFleeceColor(EnumDyeColor color)
-    {
-        byte b0 = ((Byte)this.dataManager.get(DYE_COLOR)).byteValue();
-        this.dataManager.set(DYE_COLOR, Byte.valueOf((byte)(b0 & 240 | color.getMetadata() & 15)));
+    public void setFleeceColor(EnumDyeColor color) {
+        byte b0 = ((Byte) this.dataManager.get(DYE_COLOR)).byteValue();
+        this.dataManager.set(DYE_COLOR, Byte.valueOf((byte) (b0 & 240 | color.getMetadata() & 15)));
     }
 
-    public boolean getSheared()
-    {
-        return (((Byte)this.dataManager.get(DYE_COLOR)).byteValue() & 16) != 0;
+    public boolean getSheared() {
+        return (((Byte) this.dataManager.get(DYE_COLOR)).byteValue() & 16) != 0;
     }
 
-    public void setSheared(boolean sheared)
-    {
-        byte b0 = ((Byte)this.dataManager.get(DYE_COLOR)).byteValue();
+    public void setSheared(boolean sheared) {
+        byte b0 = ((Byte) this.dataManager.get(DYE_COLOR)).byteValue();
 
-        if (sheared)
-        {
-            this.dataManager.set(DYE_COLOR, Byte.valueOf((byte)(b0 | 16)));
+        if (sheared) {
+            this.dataManager.set(DYE_COLOR, Byte.valueOf((byte) (b0 | 16)));
+        } else {
+            this.dataManager.set(DYE_COLOR, Byte.valueOf((byte) (b0 & -17)));
         }
-        else
-        {
-            this.dataManager.set(DYE_COLOR, Byte.valueOf((byte)(b0 & -17)));
-        }
     }
 
-    public static EnumDyeColor getRandomSheepColor(Random random)
-    {
+    public static EnumDyeColor getRandomSheepColor(Random random) {
         int i = random.nextInt(100);
 
-        if (i < 5)
-        {
+        if (i < 5) {
             return EnumDyeColor.BLACK;
-        }
-        else if (i < 10)
-        {
+        } else if (i < 10) {
             return EnumDyeColor.GRAY;
-        }
-        else if (i < 15)
-        {
+        } else if (i < 15) {
             return EnumDyeColor.SILVER;
-        }
-        else if (i < 18)
-        {
+        } else if (i < 18) {
             return EnumDyeColor.BROWN;
-        }
-        else
-        {
+        } else {
             return random.nextInt(500) == 0 ? EnumDyeColor.PINK : EnumDyeColor.WHITE;
         }
     }
 
-    public EntitySheep createChild(EntityAgeable ageable)
-    {
-        EntitySheep entitysheep = (EntitySheep)ageable;
+    public EntitySheep createChild(EntityAgeable ageable) {
+        EntitySheep entitysheep = (EntitySheep) ageable;
         EntitySheep entitysheep1 = new EntitySheep(this.world);
         entitysheep1.setFleeceColor(this.getDyeColorMixFromParents(this, entitysheep));
         return entitysheep1;
     }
 
-    public void eatGrassBonus()
-    {
+    public void eatGrassBonus() {
+        // CraftBukkit start
+        SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((org.bukkit.entity.Sheep) this.getBukkitEntity());
+        this.world.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) return;
+        // CraftBukkit end
+
         this.setSheared(false);
 
-        if (this.isChild())
-        {
+        if (this.isChild()) {
             this.addGrowth(60);
         }
     }
 
     @Nullable
-    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
-    {
+    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata) {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
         this.setFleeceColor(getRandomSheepColor(this.world.rand));
         return livingdata;
     }
 
-    @Override public boolean isShearable(ItemStack item, net.minecraft.world.IBlockAccess world, BlockPos pos){ return !this.getSheared() && !this.isChild(); }
     @Override
-    public java.util.List<ItemStack> onSheared(ItemStack item, net.minecraft.world.IBlockAccess world, BlockPos pos, int fortune)
-    {
+    public boolean isShearable(ItemStack item, net.minecraft.world.IBlockAccess world, BlockPos pos) {
+        return !this.getSheared() && !this.isChild();
+    }
+
+    @Override
+    public java.util.List<ItemStack> onSheared(ItemStack item, net.minecraft.world.IBlockAccess world, BlockPos pos, int fortune) {
         this.setSheared(true);
         int i = 1 + this.rand.nextInt(3);
 
@@ -379,39 +338,32 @@
         return ret;
     }
 
-    private EnumDyeColor getDyeColorMixFromParents(EntityAnimal father, EntityAnimal mother)
-    {
-        int i = ((EntitySheep)father).getFleeceColor().getDyeDamage();
-        int j = ((EntitySheep)mother).getFleeceColor().getDyeDamage();
+    private EnumDyeColor getDyeColorMixFromParents(EntityAnimal father, EntityAnimal mother) {
+        int i = ((EntitySheep) father).getFleeceColor().getDyeDamage();
+        int j = ((EntitySheep) mother).getFleeceColor().getDyeDamage();
         this.inventoryCrafting.getStackInSlot(0).setItemDamage(i);
         this.inventoryCrafting.getStackInSlot(1).setItemDamage(j);
-        ItemStack itemstack = CraftingManager.findMatchingResult(this.inventoryCrafting, ((EntitySheep)father).world);
+        ItemStack itemstack = CraftingManager.findMatchingResult(this.inventoryCrafting, ((EntitySheep) father).world);
         int k;
 
-        if (itemstack.getItem() == Items.DYE)
-        {
+        if (itemstack.getItem() == Items.DYE) {
             k = itemstack.getMetadata();
-        }
-        else
-        {
+        } else {
             k = this.world.rand.nextBoolean() ? i : j;
         }
 
         return EnumDyeColor.byDyeDamage(k);
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return 0.95F * this.height;
     }
 
-    static
-    {
-        for (EnumDyeColor enumdyecolor : EnumDyeColor.values())
-        {
+    static {
+        for (EnumDyeColor enumdyecolor : EnumDyeColor.values()) {
             DYE_TO_RGB.put(enumdyecolor, createSheepColor(enumdyecolor));
         }
 
-        DYE_TO_RGB.put(EnumDyeColor.WHITE, new float[] {0.9019608F, 0.9019608F, 0.9019608F});
+        DYE_TO_RGB.put(EnumDyeColor.WHITE, new float[]{0.9019608F, 0.9019608F, 0.9019608F});
     }
 }
