--- ../src-base/minecraft/net/minecraft/entity/passive/EntityTameable.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntityTameable.java
@@ -1,8 +1,6 @@
 package net.minecraft.entity.passive;
 
 import com.google.common.base.Optional;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
@@ -22,220 +20,176 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class EntityTameable extends EntityAnimal implements IEntityOwnable
-{
+import javax.annotation.Nullable;
+import java.util.UUID;
+
+public abstract class EntityTameable extends EntityAnimal implements IEntityOwnable {
     protected static final DataParameter<Byte> TAMED = EntityDataManager.<Byte>createKey(EntityTameable.class, DataSerializers.BYTE);
     protected static final DataParameter<Optional<UUID>> OWNER_UNIQUE_ID = EntityDataManager.<Optional<UUID>>createKey(EntityTameable.class, DataSerializers.OPTIONAL_UNIQUE_ID);
     protected EntityAISit aiSit;
 
-    public EntityTameable(World worldIn)
-    {
+    public EntityTameable(World worldIn) {
         super(worldIn);
         this.setupTamedAI();
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
-        this.dataManager.register(TAMED, Byte.valueOf((byte)0));
+        this.dataManager.register(TAMED, Byte.valueOf((byte) 0));
         this.dataManager.register(OWNER_UNIQUE_ID, Optional.absent());
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
 
-        if (this.getOwnerId() == null)
-        {
+        if (this.getOwnerId() == null) {
             compound.setString("OwnerUUID", "");
-        }
-        else
-        {
+        } else {
             compound.setString("OwnerUUID", this.getOwnerId().toString());
         }
 
         compound.setBoolean("Sitting", this.isSitting());
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         String s;
 
-        if (compound.hasKey("OwnerUUID", 8))
-        {
+        if (compound.hasKey("OwnerUUID", 8)) {
             s = compound.getString("OwnerUUID");
-        }
-        else
-        {
+        } else {
             String s1 = compound.getString("Owner");
             s = PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(), s1);
         }
 
-        if (!s.isEmpty())
-        {
-            try
-            {
+        if (!s.isEmpty()) {
+            try {
                 this.setOwnerId(UUID.fromString(s));
                 this.setTamed(true);
-            }
-            catch (Throwable var4)
-            {
+            } catch (Throwable var4) {
                 this.setTamed(false);
             }
         }
 
-        if (this.aiSit != null)
-        {
+        if (this.aiSit != null) {
             this.aiSit.setSitting(compound.getBoolean("Sitting"));
         }
 
         this.setSitting(compound.getBoolean("Sitting"));
     }
 
-    public boolean canBeLeashedTo(EntityPlayer player)
-    {
+    public boolean canBeLeashedTo(EntityPlayer player) {
         return !this.getLeashed();
     }
 
-    protected void playTameEffect(boolean play)
-    {
+    protected void playTameEffect(boolean play) {
         EnumParticleTypes enumparticletypes = EnumParticleTypes.HEART;
 
-        if (!play)
-        {
+        if (!play) {
             enumparticletypes = EnumParticleTypes.SMOKE_NORMAL;
         }
 
-        for (int i = 0; i < 7; ++i)
-        {
+        for (int i = 0; i < 7; ++i) {
             double d0 = this.rand.nextGaussian() * 0.02D;
             double d1 = this.rand.nextGaussian() * 0.02D;
             double d2 = this.rand.nextGaussian() * 0.02D;
-            this.world.spawnParticle(enumparticletypes, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2);
+            this.world.spawnParticle(enumparticletypes, this.posX + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, this.posY + 0.5D + (double) (this.rand.nextFloat() * this.height), this.posZ + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 7)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 7) {
             this.playTameEffect(true);
-        }
-        else if (id == 6)
-        {
+        } else if (id == 6) {
             this.playTameEffect(false);
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
 
-    public boolean isTamed()
-    {
-        return (((Byte)this.dataManager.get(TAMED)).byteValue() & 4) != 0;
+    public boolean isTamed() {
+        return (((Byte) this.dataManager.get(TAMED)).byteValue() & 4) != 0;
     }
 
-    public void setTamed(boolean tamed)
-    {
-        byte b0 = ((Byte)this.dataManager.get(TAMED)).byteValue();
+    public void setTamed(boolean tamed) {
+        byte b0 = ((Byte) this.dataManager.get(TAMED)).byteValue();
 
-        if (tamed)
-        {
-            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 | 4)));
+        if (tamed) {
+            this.dataManager.set(TAMED, Byte.valueOf((byte) (b0 | 4)));
+        } else {
+            this.dataManager.set(TAMED, Byte.valueOf((byte) (b0 & -5)));
         }
-        else
-        {
-            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 & -5)));
-        }
 
         this.setupTamedAI();
     }
 
-    protected void setupTamedAI()
-    {
+    protected void setupTamedAI() {
     }
 
-    public boolean isSitting()
-    {
-        return (((Byte)this.dataManager.get(TAMED)).byteValue() & 1) != 0;
+    public boolean isSitting() {
+        return (((Byte) this.dataManager.get(TAMED)).byteValue() & 1) != 0;
     }
 
-    public void setSitting(boolean sitting)
-    {
-        byte b0 = ((Byte)this.dataManager.get(TAMED)).byteValue();
+    public void setSitting(boolean sitting) {
+        byte b0 = ((Byte) this.dataManager.get(TAMED)).byteValue();
 
-        if (sitting)
-        {
-            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 | 1)));
+        if (sitting) {
+            this.dataManager.set(TAMED, Byte.valueOf((byte) (b0 | 1)));
+        } else {
+            this.dataManager.set(TAMED, Byte.valueOf((byte) (b0 & -2)));
         }
-        else
-        {
-            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 & -2)));
-        }
     }
 
     @Nullable
-    public UUID getOwnerId()
-    {
-        return (UUID)((Optional)this.dataManager.get(OWNER_UNIQUE_ID)).orNull();
+    public UUID getOwnerId() {
+        return (UUID) ((Optional) this.dataManager.get(OWNER_UNIQUE_ID)).orNull();
     }
 
-    public void setOwnerId(@Nullable UUID p_184754_1_)
-    {
+    public void setOwnerId(@Nullable UUID p_184754_1_) {
         this.dataManager.set(OWNER_UNIQUE_ID, Optional.fromNullable(p_184754_1_));
     }
 
-    public void setTamedBy(EntityPlayer player)
-    {
+    public void setTamedBy(EntityPlayer player) {
         this.setTamed(true);
         this.setOwnerId(player.getUniqueID());
 
-        if (player instanceof EntityPlayerMP)
-        {
-            CriteriaTriggers.TAME_ANIMAL.trigger((EntityPlayerMP)player, this);
+        if (player instanceof EntityPlayerMP) {
+            CriteriaTriggers.TAME_ANIMAL.trigger((EntityPlayerMP) player, this);
         }
     }
 
     @Nullable
-    public EntityLivingBase getOwner()
-    {
-        try
-        {
+    public EntityLivingBase getOwner() {
+        try {
             UUID uuid = this.getOwnerId();
             return uuid == null ? null : this.world.getPlayerEntityByUUID(uuid);
-        }
-        catch (IllegalArgumentException var2)
-        {
+        } catch (IllegalArgumentException var2) {
             return null;
         }
     }
 
-    public boolean isOwner(EntityLivingBase entityIn)
-    {
+    public boolean isOwner(EntityLivingBase entityIn) {
         return entityIn == this.getOwner();
     }
 
-    public EntityAISit getAISit()
-    {
+    public EntityAISit getAISit() {
         return this.aiSit;
     }
 
-    public boolean shouldAttackEntity(EntityLivingBase target, EntityLivingBase owner)
-    {
+    public void setAISit(EntityAISit aiSit) {
+        this.aiSit = aiSit;
+    }
+
+    public boolean shouldAttackEntity(EntityLivingBase target, EntityLivingBase owner) {
         return true;
     }
 
-    public Team getTeam()
-    {
-        if (this.isTamed())
-        {
+    public Team getTeam() {
+        if (this.isTamed()) {
             EntityLivingBase entitylivingbase = this.getOwner();
 
-            if (entitylivingbase != null)
-            {
+            if (entitylivingbase != null) {
                 return entitylivingbase.getTeam();
             }
         }
@@ -243,19 +197,15 @@
         return super.getTeam();
     }
 
-    public boolean isOnSameTeam(Entity entityIn)
-    {
-        if (this.isTamed())
-        {
+    public boolean isOnSameTeam(Entity entityIn) {
+        if (this.isTamed()) {
             EntityLivingBase entitylivingbase = this.getOwner();
 
-            if (entityIn == entitylivingbase)
-            {
+            if (entityIn == entitylivingbase) {
                 return true;
             }
 
-            if (entitylivingbase != null)
-            {
+            if (entitylivingbase != null) {
                 return entitylivingbase.isOnSameTeam(entityIn);
             }
         }
@@ -263,10 +213,8 @@
         return super.isOnSameTeam(entityIn);
     }
 
-    public void onDeath(DamageSource cause)
-    {
-        if (!this.world.isRemote && this.world.getGameRules().getBoolean("showDeathMessages") && this.getOwner() instanceof EntityPlayerMP)
-        {
+    public void onDeath(DamageSource cause) {
+        if (!this.world.isRemote && this.world.getGameRules().getBoolean("showDeathMessages") && this.getOwner() instanceof EntityPlayerMP) {
             this.getOwner().sendMessage(this.getCombatTracker().getDeathMessage());
         }
 
