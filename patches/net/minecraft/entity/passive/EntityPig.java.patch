--- ../src-base/minecraft/net/minecraft/entity/passive/EntityPig.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntityPig.java
@@ -1,21 +1,12 @@
 package net.minecraft.entity.passive;
 
 import com.google.common.collect.Sets;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIFollowParent;
-import net.minecraft.entity.ai.EntityAILookIdle;
-import net.minecraft.entity.ai.EntityAIMate;
-import net.minecraft.entity.ai.EntityAIPanic;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAITempt;
-import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.effect.EntityLightningBolt;
 import net.minecraft.entity.monster.EntityPigZombie;
 import net.minecraft.entity.player.EntityPlayer;
@@ -37,9 +28,12 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
 import net.minecraft.world.storage.loot.LootTableList;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
-public class EntityPig extends EntityAnimal
-{
+import javax.annotation.Nullable;
+import java.util.Set;
+
+public class EntityPig extends EntityAnimal {
     private static final DataParameter<Boolean> SADDLED = EntityDataManager.<Boolean>createKey(EntityPig.class, DataSerializers.BOOLEAN);
     private static final DataParameter<Integer> BOOST_TIME = EntityDataManager.<Integer>createKey(EntityPig.class, DataSerializers.VARINT);
     private static final Set<Item> TEMPTATION_ITEMS = Sets.newHashSet(Items.CARROT, Items.POTATO, Items.BEETROOT);
@@ -47,14 +41,12 @@
     private int boostTime;
     private int totalBoostTime;
 
-    public EntityPig(World worldIn)
-    {
+    public EntityPig(World worldIn) {
         super(worldIn);
         this.setSize(0.9F, 0.9F);
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(1, new EntityAIPanic(this, 1.25D));
         this.tasks.addTask(3, new EntityAIMate(this, 1.0D));
@@ -66,188 +58,157 @@
         this.tasks.addTask(8, new EntityAILookIdle(this));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
     }
 
     @Nullable
-    public Entity getControllingPassenger()
-    {
-        return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
+    public Entity getControllingPassenger() {
+        return this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);
     }
 
-    public boolean canBeSteered()
-    {
+    public boolean canBeSteered() {
         Entity entity = this.getControllingPassenger();
 
-        if (!(entity instanceof EntityPlayer))
-        {
+        if (!(entity instanceof EntityPlayer)) {
             return false;
-        }
-        else
-        {
-            EntityPlayer entityplayer = (EntityPlayer)entity;
+        } else {
+            EntityPlayer entityplayer = (EntityPlayer) entity;
             return entityplayer.getHeldItemMainhand().getItem() == Items.CARROT_ON_A_STICK || entityplayer.getHeldItemOffhand().getItem() == Items.CARROT_ON_A_STICK;
         }
     }
 
-    public void notifyDataManagerChange(DataParameter<?> key)
-    {
-        if (BOOST_TIME.equals(key) && this.world.isRemote)
-        {
+    public void notifyDataManagerChange(DataParameter<?> key) {
+        if (BOOST_TIME.equals(key) && this.world.isRemote) {
             this.boosting = true;
             this.boostTime = 0;
-            this.totalBoostTime = ((Integer)this.dataManager.get(BOOST_TIME)).intValue();
+            this.totalBoostTime = ((Integer) this.dataManager.get(BOOST_TIME)).intValue();
         }
 
         super.notifyDataManagerChange(key);
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
         this.dataManager.register(SADDLED, Boolean.valueOf(false));
         this.dataManager.register(BOOST_TIME, Integer.valueOf(0));
     }
 
-    public static void registerFixesPig(DataFixer fixer)
-    {
+    public static void registerFixesPig(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntityPig.class);
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setBoolean("Saddle", this.getSaddled());
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.setSaddled(compound.getBoolean("Saddle"));
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return SoundEvents.ENTITY_PIG_AMBIENT;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_PIG_HURT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.ENTITY_PIG_DEATH;
     }
 
-    protected void playStepSound(BlockPos pos, Block blockIn)
-    {
+    protected void playStepSound(BlockPos pos, Block blockIn) {
         this.playSound(SoundEvents.ENTITY_PIG_STEP, 0.15F, 1.0F);
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
-        if (!super.processInteract(player, hand))
-        {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
+        if (!super.processInteract(player, hand)) {
             ItemStack itemstack = player.getHeldItem(hand);
 
-            if (itemstack.getItem() == Items.NAME_TAG)
-            {
+            if (itemstack.getItem() == Items.NAME_TAG) {
                 itemstack.interactWithEntity(player, this, hand);
                 return true;
-            }
-            else if (this.getSaddled() && !this.isBeingRidden())
-            {
-                if (!this.world.isRemote)
-                {
+            } else if (this.getSaddled() && !this.isBeingRidden()) {
+                if (!this.world.isRemote) {
                     player.startRiding(this);
                 }
 
                 return true;
-            }
-            else if (itemstack.getItem() == Items.SADDLE)
-            {
+            } else if (itemstack.getItem() == Items.SADDLE) {
                 itemstack.interactWithEntity(player, this, hand);
                 return true;
-            }
-            else
-            {
+            } else {
                 return false;
             }
-        }
-        else
-        {
+        } else {
             return true;
         }
     }
 
-    public void onDeath(DamageSource cause)
-    {
-        super.onDeath(cause);
+    public void onDeath(DamageSource cause) {
+        // super.onDeath(cause); // CraftBukkit - Moved to end
 
-        if (!this.world.isRemote)
-        {
-            if (this.getSaddled())
-            {
+        if (!this.world.isRemote) {
+            if (this.getSaddled()) {
                 this.dropItem(Items.SADDLE, 1);
             }
         }
+        super.onDeath(cause); // CraftBukkit - Moved from above
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_PIG;
     }
 
-    public boolean getSaddled()
-    {
-        return ((Boolean)this.dataManager.get(SADDLED)).booleanValue();
+    public boolean getSaddled() {
+        return ((Boolean) this.dataManager.get(SADDLED)).booleanValue();
     }
 
-    public void setSaddled(boolean saddled)
-    {
-        if (saddled)
-        {
+    public void setSaddled(boolean saddled) {
+        if (saddled) {
             this.dataManager.set(SADDLED, Boolean.valueOf(true));
-        }
-        else
-        {
+        } else {
             this.dataManager.set(SADDLED, Boolean.valueOf(false));
         }
     }
 
-    public void onStruckByLightning(EntityLightningBolt lightningBolt)
-    {
-        if (!this.world.isRemote && !this.isDead)
-        {
+    public void onStruckByLightning(@Nullable EntityLightningBolt lightningBolt) {
+        if (!this.world.isRemote && !this.isDead) {
+            if (lightningBolt == null)
+                lightningBolt = new EntityLightningBolt(this.world, this.posX, this.posY, this.posZ, false);
             EntityPigZombie entitypigzombie = new EntityPigZombie(this.world);
+
+            // CraftBukkit start
+            if (CraftEventFactory.callPigZapEvent(this, lightningBolt, entitypigzombie).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+
             entitypigzombie.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
             entitypigzombie.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
             entitypigzombie.setNoAI(this.isAIDisabled());
 
-            if (this.hasCustomName())
-            {
+            if (this.hasCustomName()) {
                 entitypigzombie.setCustomNameTag(this.getCustomNameTag());
                 entitypigzombie.setAlwaysRenderNameTag(this.getAlwaysRenderNameTag());
             }
 
-            this.world.spawnEntity(entitypigzombie);
+            // CraftBukkit - added a reason for spawning this creature
+            this.world.spawnEntity(entitypigzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
             this.setDead();
         }
     }
 
-    public void travel(float strafe, float vertical, float forward)
-    {
-        Entity entity = this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
+    public void travel(float strafe, float vertical, float forward) {
+        Entity entity = this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);
 
-        if (this.isBeingRidden() && this.canBeSteered())
-        {
+        if (this.isBeingRidden() && this.canBeSteered()) {
             this.rotationYaw = entity.rotationYaw;
             this.prevRotationYaw = this.rotationYaw;
             this.rotationPitch = entity.rotationPitch * 0.5F;
@@ -257,25 +218,20 @@
             this.stepHeight = 1.0F;
             this.jumpMovementFactor = this.getAIMoveSpeed() * 0.1F;
 
-            if (this.boosting && this.boostTime++ > this.totalBoostTime)
-            {
+            if (this.boosting && this.boostTime++ > this.totalBoostTime) {
                 this.boosting = false;
             }
 
-            if (this.canPassengerSteer())
-            {
-                float f = (float)this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue() * 0.225F;
+            if (this.canPassengerSteer()) {
+                float f = (float) this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue() * 0.225F;
 
-                if (this.boosting)
-                {
-                    f += f * 1.15F * MathHelper.sin((float)this.boostTime / (float)this.totalBoostTime * (float)Math.PI);
+                if (this.boosting) {
+                    f += f * 1.15F * MathHelper.sin((float) this.boostTime / (float) this.totalBoostTime * (float) Math.PI);
                 }
 
                 this.setAIMoveSpeed(f);
                 super.travel(0.0F, 0.0F, 1.0F);
-            }
-            else
-            {
+            } else {
                 this.motionX = 0.0D;
                 this.motionY = 0.0D;
                 this.motionZ = 0.0D;
@@ -286,30 +242,23 @@
             double d0 = this.posZ - this.prevPosZ;
             float f1 = MathHelper.sqrt(d1 * d1 + d0 * d0) * 4.0F;
 
-            if (f1 > 1.0F)
-            {
+            if (f1 > 1.0F) {
                 f1 = 1.0F;
             }
 
             this.limbSwingAmount += (f1 - this.limbSwingAmount) * 0.4F;
             this.limbSwing += this.limbSwingAmount;
-        }
-        else
-        {
+        } else {
             this.stepHeight = 0.5F;
             this.jumpMovementFactor = 0.02F;
             super.travel(strafe, vertical, forward);
         }
     }
 
-    public boolean boost()
-    {
-        if (this.boosting)
-        {
+    public boolean boost() {
+        if (this.boosting) {
             return false;
-        }
-        else
-        {
+        } else {
             this.boosting = true;
             this.boostTime = 0;
             this.totalBoostTime = this.getRNG().nextInt(841) + 140;
@@ -318,13 +267,11 @@
         }
     }
 
-    public EntityPig createChild(EntityAgeable ageable)
-    {
+    public EntityPig createChild(EntityAgeable ageable) {
         return new EntityPig(this.world);
     }
 
-    public boolean isBreedingItem(ItemStack stack)
-    {
+    public boolean isBreedingItem(ItemStack stack) {
         return TEMPTATION_ITEMS.contains(stack.getItem());
     }
 }
