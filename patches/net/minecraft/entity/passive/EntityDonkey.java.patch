--- ../src-base/minecraft/net/minecraft/entity/passive/EntityDonkey.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntityDonkey.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.passive;
 
-import javax.annotation.Nullable;
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.util.DamageSource;
@@ -10,61 +9,49 @@
 import net.minecraft.world.World;
 import net.minecraft.world.storage.loot.LootTableList;
 
-public class EntityDonkey extends AbstractChestHorse
-{
-    public EntityDonkey(World worldIn)
-    {
+import javax.annotation.Nullable;
+
+public class EntityDonkey extends AbstractChestHorse {
+    public EntityDonkey(World worldIn) {
         super(worldIn);
     }
 
-    public static void registerFixesDonkey(DataFixer fixer)
-    {
+    public static void registerFixesDonkey(DataFixer fixer) {
         AbstractChestHorse.registerFixesAbstractChestHorse(fixer, EntityDonkey.class);
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_DONKEY;
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         super.getAmbientSound();
         return SoundEvents.ENTITY_DONKEY_AMBIENT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         super.getDeathSound();
         return SoundEvents.ENTITY_DONKEY_DEATH;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         super.getHurtSound(damageSourceIn);
         return SoundEvents.ENTITY_DONKEY_HURT;
     }
 
-    public boolean canMateWith(EntityAnimal otherAnimal)
-    {
-        if (otherAnimal == this)
-        {
+    public boolean canMateWith(EntityAnimal otherAnimal) {
+        if (otherAnimal == this) {
             return false;
-        }
-        else if (!(otherAnimal instanceof EntityDonkey) && !(otherAnimal instanceof EntityHorse))
-        {
+        } else if (!(otherAnimal instanceof EntityDonkey) && !(otherAnimal instanceof EntityHorse)) {
             return false;
+        } else {
+            return this.canMate() && ((AbstractHorse) otherAnimal).canMate();
         }
-        else
-        {
-            return this.canMate() && ((AbstractHorse)otherAnimal).canMate();
-        }
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable)
-    {
-        AbstractHorse abstracthorse = (AbstractHorse)(ageable instanceof EntityHorse ? new EntityMule(this.world) : new EntityDonkey(this.world));
+    public EntityAgeable createChild(EntityAgeable ageable) {
+        AbstractHorse abstracthorse = (AbstractHorse) (ageable instanceof EntityHorse ? new EntityMule(this.world) : new EntityDonkey(this.world));
         this.setOffspringAttributes(ageable, abstracthorse);
         return abstracthorse;
     }
