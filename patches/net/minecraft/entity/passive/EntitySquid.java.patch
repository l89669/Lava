--- ../src-base/minecraft/net/minecraft/entity/passive/EntitySquid.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntitySquid.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.passive;
 
-import javax.annotation.Nullable;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.MoverType;
 import net.minecraft.entity.SharedMonsterAttributes;
@@ -17,8 +16,9 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class EntitySquid extends EntityWaterMob
-{
+import javax.annotation.Nullable;
+
+public class EntitySquid extends EntityWaterMob {
     public float squidPitch;
     public float prevSquidPitch;
     public float squidYaw;
@@ -34,68 +34,56 @@
     private float randomMotionVecY;
     private float randomMotionVecZ;
 
-    public EntitySquid(World worldIn)
-    {
+    public EntitySquid(World worldIn) {
         super(worldIn);
         this.setSize(0.8F, 0.8F);
-        this.rand.setSeed((long)(1 + this.getEntityId()));
+        this.rand.setSeed((long) (1 + this.getEntityId())); // Paper
         this.rotationVelocity = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
     }
 
-    public static void registerFixesSquid(DataFixer fixer)
-    {
+    public static void registerFixesSquid(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntitySquid.class);
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         this.tasks.addTask(0, new EntitySquid.AIMoveRandom(this));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return this.height * 0.5F;
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return SoundEvents.ENTITY_SQUID_AMBIENT;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_SQUID_HURT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.ENTITY_SQUID_DEATH;
     }
 
-    protected float getSoundVolume()
-    {
+    protected float getSoundVolume() {
         return 0.4F;
     }
 
-    protected boolean canTriggerWalking()
-    {
+    protected boolean canTriggerWalking() {
         return false;
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_SQUID;
     }
 
-    public void onLivingUpdate()
-    {
+    public void onLivingUpdate() {
         super.onLivingUpdate();
         this.prevSquidPitch = this.squidPitch;
         this.prevSquidYaw = this.squidYaw;
@@ -103,152 +91,118 @@
         this.lastTentacleAngle = this.tentacleAngle;
         this.squidRotation += this.rotationVelocity;
 
-        if ((double)this.squidRotation > (Math.PI * 2D))
-        {
-            if (this.world.isRemote)
-            {
-                this.squidRotation = ((float)Math.PI * 2F);
-            }
-            else
-            {
-                this.squidRotation = (float)((double)this.squidRotation - (Math.PI * 2D));
+        if ((double) this.squidRotation > (Math.PI * 2D)) {
+            if (this.world.isRemote) {
+                this.squidRotation = ((float) Math.PI * 2F);
+            } else {
+                this.squidRotation = (float) ((double) this.squidRotation - (Math.PI * 2D));
 
-                if (this.rand.nextInt(10) == 0)
-                {
+                if (this.rand.nextInt(10) == 0) {
                     this.rotationVelocity = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
                 }
 
-                this.world.setEntityState(this, (byte)19);
+                this.world.setEntityState(this, (byte) 19);
             }
         }
 
-        if (this.inWater)
-        {
-            if (this.squidRotation < (float)Math.PI)
-            {
-                float f = this.squidRotation / (float)Math.PI;
-                this.tentacleAngle = MathHelper.sin(f * f * (float)Math.PI) * (float)Math.PI * 0.25F;
+        if (this.inWater) {
+            if (this.squidRotation < (float) Math.PI) {
+                float f = this.squidRotation / (float) Math.PI;
+                this.tentacleAngle = MathHelper.sin(f * f * (float) Math.PI) * (float) Math.PI * 0.25F;
 
-                if ((double)f > 0.75D)
-                {
+                if ((double) f > 0.75D) {
                     this.randomMotionSpeed = 1.0F;
                     this.rotateSpeed = 1.0F;
-                }
-                else
-                {
+                } else {
                     this.rotateSpeed *= 0.8F;
                 }
-            }
-            else
-            {
+            } else {
                 this.tentacleAngle = 0.0F;
                 this.randomMotionSpeed *= 0.9F;
                 this.rotateSpeed *= 0.99F;
             }
 
-            if (!this.world.isRemote)
-            {
-                this.motionX = (double)(this.randomMotionVecX * this.randomMotionSpeed);
-                this.motionY = (double)(this.randomMotionVecY * this.randomMotionSpeed);
-                this.motionZ = (double)(this.randomMotionVecZ * this.randomMotionSpeed);
+            if (!this.world.isRemote) {
+                this.motionX = (double) (this.randomMotionVecX * this.randomMotionSpeed);
+                this.motionY = (double) (this.randomMotionVecY * this.randomMotionSpeed);
+                this.motionZ = (double) (this.randomMotionVecZ * this.randomMotionSpeed);
             }
 
             float f1 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.renderYawOffset += (-((float)MathHelper.atan2(this.motionX, this.motionZ)) * (180F / (float)Math.PI) - this.renderYawOffset) * 0.1F;
+            this.renderYawOffset += (-((float) MathHelper.atan2(this.motionX, this.motionZ)) * (180F / (float) Math.PI) - this.renderYawOffset) * 0.1F;
             this.rotationYaw = this.renderYawOffset;
-            this.squidYaw = (float)((double)this.squidYaw + Math.PI * (double)this.rotateSpeed * 1.5D);
-            this.squidPitch += (-((float)MathHelper.atan2((double)f1, this.motionY)) * (180F / (float)Math.PI) - this.squidPitch) * 0.1F;
-        }
-        else
-        {
-            this.tentacleAngle = MathHelper.abs(MathHelper.sin(this.squidRotation)) * (float)Math.PI * 0.25F;
+            this.squidYaw = (float) ((double) this.squidYaw + Math.PI * (double) this.rotateSpeed * 1.5D);
+            this.squidPitch += (-((float) MathHelper.atan2((double) f1, this.motionY)) * (180F / (float) Math.PI) - this.squidPitch) * 0.1F;
+        } else {
+            this.tentacleAngle = MathHelper.abs(MathHelper.sin(this.squidRotation)) * (float) Math.PI * 0.25F;
 
-            if (!this.world.isRemote)
-            {
+            if (!this.world.isRemote) {
                 this.motionX = 0.0D;
                 this.motionZ = 0.0D;
 
-                if (this.isPotionActive(MobEffects.LEVITATION))
-                {
-                    this.motionY += 0.05D * (double)(this.getActivePotionEffect(MobEffects.LEVITATION).getAmplifier() + 1) - this.motionY;
-                }
-                else if (!this.hasNoGravity())
-                {
+                if (this.isPotionActive(MobEffects.LEVITATION)) {
+                    this.motionY += 0.05D * (double) (this.getActivePotionEffect(MobEffects.LEVITATION).getAmplifier() + 1) - this.motionY;
+                } else if (!this.hasNoGravity()) {
                     this.motionY -= 0.08D;
                 }
 
                 this.motionY *= 0.9800000190734863D;
             }
 
-            this.squidPitch = (float)((double)this.squidPitch + (double)(-90.0F - this.squidPitch) * 0.02D);
+            this.squidPitch = (float) ((double) this.squidPitch + (double) (-90.0F - this.squidPitch) * 0.02D);
         }
     }
 
-    public void travel(float strafe, float vertical, float forward)
-    {
+    public void travel(float strafe, float vertical, float forward) {
         this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
     }
 
-    public boolean getCanSpawnHere()
-    {
-        return this.posY > 45.0D && this.posY < (double)this.world.getSeaLevel() && super.getCanSpawnHere();
+    public boolean getCanSpawnHere() {
+        return this.posY > this.world.spigotConfig.squidSpawnRangeMin && this.posY < (double) this.world.getSeaLevel() && super.getCanSpawnHere();
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 19)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 19) {
             this.squidRotation = 0.0F;
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
 
-    public void setMovementVector(float randomMotionVecXIn, float randomMotionVecYIn, float randomMotionVecZIn)
-    {
+    public void setMovementVector(float randomMotionVecXIn, float randomMotionVecYIn, float randomMotionVecZIn) {
         this.randomMotionVecX = randomMotionVecXIn;
         this.randomMotionVecY = randomMotionVecYIn;
         this.randomMotionVecZ = randomMotionVecZIn;
     }
 
-    public boolean hasMovementVector()
-    {
+    public boolean hasMovementVector() {
         return this.randomMotionVecX != 0.0F || this.randomMotionVecY != 0.0F || this.randomMotionVecZ != 0.0F;
     }
 
-    static class AIMoveRandom extends EntityAIBase
-        {
-            private final EntitySquid squid;
+    static class AIMoveRandom extends EntityAIBase {
+        private final EntitySquid squid;
 
-            public AIMoveRandom(EntitySquid p_i45859_1_)
-            {
-                this.squid = p_i45859_1_;
-            }
+        public AIMoveRandom(EntitySquid p_i45859_1_) {
+            this.squid = p_i45859_1_;
+        }
 
-            public boolean shouldExecute()
-            {
-                return true;
-            }
+        public boolean shouldExecute() {
+            return true;
+        }
 
-            public void updateTask()
-            {
-                int i = this.squid.getIdleTime();
+        public void updateTask() {
+            int i = this.squid.getIdleTime();
 
-                if (i > 100)
-                {
-                    this.squid.setMovementVector(0.0F, 0.0F, 0.0F);
-                }
-                else if (this.squid.getRNG().nextInt(50) == 0 || !this.squid.inWater || !this.squid.hasMovementVector())
-                {
-                    float f = this.squid.getRNG().nextFloat() * ((float)Math.PI * 2F);
-                    float f1 = MathHelper.cos(f) * 0.2F;
-                    float f2 = -0.1F + this.squid.getRNG().nextFloat() * 0.2F;
-                    float f3 = MathHelper.sin(f) * 0.2F;
-                    this.squid.setMovementVector(f1, f2, f3);
-                }
+            if (i > 100) {
+                this.squid.setMovementVector(0.0F, 0.0F, 0.0F);
+            } else if (this.squid.getRNG().nextInt(50) == 0 || !this.squid.inWater || !this.squid.hasMovementVector()) {
+                float f = this.squid.getRNG().nextFloat() * ((float) Math.PI * 2F);
+                float f1 = MathHelper.cos(f) * 0.2F;
+                float f2 = -0.1F + this.squid.getRNG().nextFloat() * 0.2F;
+                float f3 = MathHelper.sin(f) * 0.2F;
+                this.squid.setMovementVector(f1, f2, f3);
             }
         }
+    }
 }
