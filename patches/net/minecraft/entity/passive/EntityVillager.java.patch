--- ../src-base/minecraft/net/minecraft/entity/passive/EntityVillager.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntityVillager.java
@@ -1,46 +1,15 @@
 package net.minecraft.entity.passive;
 
-import java.util.Locale;
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentData;
 import net.minecraft.enchantment.EnchantmentHelper;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityAgeable;
-import net.minecraft.entity.EntityList;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.IEntityLivingData;
-import net.minecraft.entity.IMerchant;
-import net.minecraft.entity.INpc;
-import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIAvoidEntity;
-import net.minecraft.entity.ai.EntityAIFollowGolem;
-import net.minecraft.entity.ai.EntityAIHarvestFarmland;
-import net.minecraft.entity.ai.EntityAILookAtTradePlayer;
-import net.minecraft.entity.ai.EntityAIMoveIndoors;
-import net.minecraft.entity.ai.EntityAIMoveTowardsRestriction;
-import net.minecraft.entity.ai.EntityAIOpenDoor;
-import net.minecraft.entity.ai.EntityAIPlay;
-import net.minecraft.entity.ai.EntityAIRestrictOpenDoor;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAITradePlayer;
-import net.minecraft.entity.ai.EntityAIVillagerInteract;
-import net.minecraft.entity.ai.EntityAIVillagerMate;
-import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
-import net.minecraft.entity.ai.EntityAIWatchClosest2;
+import net.minecraft.entity.*;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.effect.EntityLightningBolt;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityXPOrb;
-import net.minecraft.entity.monster.EntityEvoker;
-import net.minecraft.entity.monster.EntityVex;
-import net.minecraft.entity.monster.EntityVindicator;
-import net.minecraft.entity.monster.EntityWitch;
-import net.minecraft.entity.monster.EntityZombie;
-import net.minecraft.entity.monster.IMob;
+import net.minecraft.entity.monster.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -48,11 +17,7 @@
 import net.minecraft.init.MobEffects;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.InventoryBasic;
-import net.minecraft.item.EnumDyeColor;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemEnchantedBook;
-import net.minecraft.item.ItemMap;
-import net.minecraft.item.ItemStack;
+import net.minecraft.item.*;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.network.datasync.DataParameter;
@@ -63,17 +28,8 @@
 import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Team;
 import net.minecraft.stats.StatList;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SoundEvent;
-import net.minecraft.util.Tuple;
-import net.minecraft.util.datafix.DataFixer;
-import net.minecraft.util.datafix.DataFixesManager;
-import net.minecraft.util.datafix.FixTypes;
-import net.minecraft.util.datafix.IDataFixer;
-import net.minecraft.util.datafix.IDataWalker;
+import net.minecraft.util.*;
+import net.minecraft.util.datafix.*;
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
@@ -92,9 +48,19 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftVillager;
+import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
+import org.bukkit.entity.Villager;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.entity.VillagerAcquireTradeEvent;
+import org.bukkit.event.entity.VillagerReplenishTradeEvent;
 
-public class EntityVillager extends EntityAgeable implements INpc, IMerchant
-{
+import javax.annotation.Nullable;
+import java.util.Locale;
+import java.util.Random;
+
+public class EntityVillager extends EntityAgeable implements INpc, IMerchant {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DataParameter<Integer> PROFESSION = EntityDataManager.<Integer>createKey(EntityVillager.class, DataSerializers.VARINT);
     private int randomTickDivider;
@@ -104,36 +70,33 @@
     @Nullable
     private EntityPlayer buyingPlayer;
     @Nullable
-    private MerchantRecipeList buyingList;
+    public MerchantRecipeList buyingList; // PAIL private -> public
     private int timeUntilReset;
     private boolean needsInitilization;
     private boolean isWillingToMate;
-    private int wealth;
+    public int wealth;
     private java.util.UUID lastBuyingPlayer;
-    private int careerId;
+    public int careerId; // PAIL private -> public // PAIL rename careerID
     private int careerLevel;
     private boolean isLookingForHome;
     private boolean areAdditionalTasksSet;
-    private final InventoryBasic villagerInventory;
-    private static final EntityVillager.ITradeList[][][][] DEFAULT_TRADE_LIST_MAP = new EntityVillager.ITradeList[][][][] {{{{new EntityVillager.EmeraldForItems(Items.WHEAT, new EntityVillager.PriceInfo(18, 22)), new EntityVillager.EmeraldForItems(Items.POTATO, new EntityVillager.PriceInfo(15, 19)), new EntityVillager.EmeraldForItems(Items.CARROT, new EntityVillager.PriceInfo(15, 19)), new EntityVillager.ListItemForEmeralds(Items.BREAD, new EntityVillager.PriceInfo(-4, -2))}, {new EntityVillager.EmeraldForItems(Item.getItemFromBlock(Blocks.PUMPKIN), new EntityVillager.PriceInfo(8, 13)), new EntityVillager.ListItemForEmeralds(Items.PUMPKIN_PIE, new EntityVillager.PriceInfo(-3, -2))}, {new EntityVillager.EmeraldForItems(Item.getItemFromBlock(Blocks.MELON_BLOCK), new EntityVillager.PriceInfo(7, 12)), new EntityVillager.ListItemForEmeralds(Items.APPLE, new EntityVillager.PriceInfo(-7, -5))}, {new EntityVillager.ListItemForEmeralds(Items.COOKIE, new EntityVillager.PriceInfo(-10, -6)), new EntityVillager.ListItemForEmeralds(Items.CAKE, new EntityVillager.PriceInfo(1, 1))}}, {{new EntityVillager.EmeraldForItems(Items.STRING, new EntityVillager.PriceInfo(15, 20)), new EntityVillager.EmeraldForItems(Items.COAL, new EntityVillager.PriceInfo(16, 24)), new EntityVillager.ItemAndEmeraldToItem(Items.FISH, new EntityVillager.PriceInfo(6, 6), Items.COOKED_FISH, new EntityVillager.PriceInfo(6, 6))}, {new EntityVillager.ListEnchantedItemForEmeralds(Items.FISHING_ROD, new EntityVillager.PriceInfo(7, 8))}}, {{new EntityVillager.EmeraldForItems(Item.getItemFromBlock(Blocks.WOOL), new EntityVillager.PriceInfo(16, 22)), new EntityVillager.ListItemForEmeralds(Items.SHEARS, new EntityVillager.PriceInfo(3, 4))}, {new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL)), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 1), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 2), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 3), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 4), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 5), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 6), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 7), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 8), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 9), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 10), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 11), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 12), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 13), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 14), new EntityVillager.PriceInfo(1, 2)), new EntityVillager.ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 15), new EntityVillager.PriceInfo(1, 2))}}, {{new EntityVillager.EmeraldForItems(Items.STRING, new EntityVillager.PriceInfo(15, 20)), new EntityVillager.ListItemForEmeralds(Items.ARROW, new EntityVillager.PriceInfo(-12, -8))}, {new EntityVillager.ListItemForEmeralds(Items.BOW, new EntityVillager.PriceInfo(2, 3)), new EntityVillager.ItemAndEmeraldToItem(Item.getItemFromBlock(Blocks.GRAVEL), new EntityVillager.PriceInfo(10, 10), Items.FLINT, new EntityVillager.PriceInfo(6, 10))}}}, {{{new EntityVillager.EmeraldForItems(Items.PAPER, new EntityVillager.PriceInfo(24, 36)), new EntityVillager.ListEnchantedBookForEmeralds()}, {new EntityVillager.EmeraldForItems(Items.BOOK, new EntityVillager.PriceInfo(8, 10)), new EntityVillager.ListItemForEmeralds(Items.COMPASS, new EntityVillager.PriceInfo(10, 12)), new EntityVillager.ListItemForEmeralds(Item.getItemFromBlock(Blocks.BOOKSHELF), new EntityVillager.PriceInfo(3, 4))}, {new EntityVillager.EmeraldForItems(Items.WRITTEN_BOOK, new EntityVillager.PriceInfo(2, 2)), new EntityVillager.ListItemForEmeralds(Items.CLOCK, new EntityVillager.PriceInfo(10, 12)), new EntityVillager.ListItemForEmeralds(Item.getItemFromBlock(Blocks.GLASS), new EntityVillager.PriceInfo(-5, -3))}, {new EntityVillager.ListEnchantedBookForEmeralds()}, {new EntityVillager.ListEnchantedBookForEmeralds()}, {new EntityVillager.ListItemForEmeralds(Items.NAME_TAG, new EntityVillager.PriceInfo(20, 22))}}, {{new EntityVillager.EmeraldForItems(Items.PAPER, new EntityVillager.PriceInfo(24, 36))}, {new EntityVillager.EmeraldForItems(Items.COMPASS, new EntityVillager.PriceInfo(1, 1))}, {new EntityVillager.ListItemForEmeralds(Items.MAP, new EntityVillager.PriceInfo(7, 11))}, {new EntityVillager.TreasureMapForEmeralds(new EntityVillager.PriceInfo(12, 20), "Monument", MapDecoration.Type.MONUMENT), new EntityVillager.TreasureMapForEmeralds(new EntityVillager.PriceInfo(16, 28), "Mansion", MapDecoration.Type.MANSION)}}}, {{{new EntityVillager.EmeraldForItems(Items.ROTTEN_FLESH, new EntityVillager.PriceInfo(36, 40)), new EntityVillager.EmeraldForItems(Items.GOLD_INGOT, new EntityVillager.PriceInfo(8, 10))}, {new EntityVillager.ListItemForEmeralds(Items.REDSTONE, new EntityVillager.PriceInfo(-4, -1)), new EntityVillager.ListItemForEmeralds(new ItemStack(Items.DYE, 1, EnumDyeColor.BLUE.getDyeDamage()), new EntityVillager.PriceInfo(-2, -1))}, {new EntityVillager.ListItemForEmeralds(Items.ENDER_PEARL, new EntityVillager.PriceInfo(4, 7)), new EntityVillager.ListItemForEmeralds(Item.getItemFromBlock(Blocks.GLOWSTONE), new EntityVillager.PriceInfo(-3, -1))}, {new EntityVillager.ListItemForEmeralds(Items.EXPERIENCE_BOTTLE, new EntityVillager.PriceInfo(3, 11))}}}, {{{new EntityVillager.EmeraldForItems(Items.COAL, new EntityVillager.PriceInfo(16, 24)), new EntityVillager.ListItemForEmeralds(Items.IRON_HELMET, new EntityVillager.PriceInfo(4, 6))}, {new EntityVillager.EmeraldForItems(Items.IRON_INGOT, new EntityVillager.PriceInfo(7, 9)), new EntityVillager.ListItemForEmeralds(Items.IRON_CHESTPLATE, new EntityVillager.PriceInfo(10, 14))}, {new EntityVillager.EmeraldForItems(Items.DIAMOND, new EntityVillager.PriceInfo(3, 4)), new EntityVillager.ListEnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, new EntityVillager.PriceInfo(16, 19))}, {new EntityVillager.ListItemForEmeralds(Items.CHAINMAIL_BOOTS, new EntityVillager.PriceInfo(5, 7)), new EntityVillager.ListItemForEmeralds(Items.CHAINMAIL_LEGGINGS, new EntityVillager.PriceInfo(9, 11)), new EntityVillager.ListItemForEmeralds(Items.CHAINMAIL_HELMET, new EntityVillager.PriceInfo(5, 7)), new EntityVillager.ListItemForEmeralds(Items.CHAINMAIL_CHESTPLATE, new EntityVillager.PriceInfo(11, 15))}}, {{new EntityVillager.EmeraldForItems(Items.COAL, new EntityVillager.PriceInfo(16, 24)), new EntityVillager.ListItemForEmeralds(Items.IRON_AXE, new EntityVillager.PriceInfo(6, 8))}, {new EntityVillager.EmeraldForItems(Items.IRON_INGOT, new EntityVillager.PriceInfo(7, 9)), new EntityVillager.ListEnchantedItemForEmeralds(Items.IRON_SWORD, new EntityVillager.PriceInfo(9, 10))}, {new EntityVillager.EmeraldForItems(Items.DIAMOND, new EntityVillager.PriceInfo(3, 4)), new EntityVillager.ListEnchantedItemForEmeralds(Items.DIAMOND_SWORD, new EntityVillager.PriceInfo(12, 15)), new EntityVillager.ListEnchantedItemForEmeralds(Items.DIAMOND_AXE, new EntityVillager.PriceInfo(9, 12))}}, {{new EntityVillager.EmeraldForItems(Items.COAL, new EntityVillager.PriceInfo(16, 24)), new EntityVillager.ListEnchantedItemForEmeralds(Items.IRON_SHOVEL, new EntityVillager.PriceInfo(5, 7))}, {new EntityVillager.EmeraldForItems(Items.IRON_INGOT, new EntityVillager.PriceInfo(7, 9)), new EntityVillager.ListEnchantedItemForEmeralds(Items.IRON_PICKAXE, new EntityVillager.PriceInfo(9, 11))}, {new EntityVillager.EmeraldForItems(Items.DIAMOND, new EntityVillager.PriceInfo(3, 4)), new EntityVillager.ListEnchantedItemForEmeralds(Items.DIAMOND_PICKAXE, new EntityVillager.PriceInfo(12, 15))}}}, {{{new EntityVillager.EmeraldForItems(Items.PORKCHOP, new EntityVillager.PriceInfo(14, 18)), new EntityVillager.EmeraldForItems(Items.CHICKEN, new EntityVillager.PriceInfo(14, 18))}, {new EntityVillager.EmeraldForItems(Items.COAL, new EntityVillager.PriceInfo(16, 24)), new EntityVillager.ListItemForEmeralds(Items.COOKED_PORKCHOP, new EntityVillager.PriceInfo(-7, -5)), new EntityVillager.ListItemForEmeralds(Items.COOKED_CHICKEN, new EntityVillager.PriceInfo(-8, -6))}}, {{new EntityVillager.EmeraldForItems(Items.LEATHER, new EntityVillager.PriceInfo(9, 12)), new EntityVillager.ListItemForEmeralds(Items.LEATHER_LEGGINGS, new EntityVillager.PriceInfo(2, 4))}, {new EntityVillager.ListEnchantedItemForEmeralds(Items.LEATHER_CHESTPLATE, new EntityVillager.PriceInfo(7, 12))}, {new EntityVillager.ListItemForEmeralds(Items.SADDLE, new EntityVillager.PriceInfo(8, 10))}}}, {new EntityVillager.ITradeList[0][]}};
+    public final InventoryBasic villagerInventory;
+    private static final ITradeList[][][][] DEFAULT_TRADE_LIST_MAP = new ITradeList[][][][]{{{{new EmeraldForItems(Items.WHEAT, new PriceInfo(18, 22)), new EmeraldForItems(Items.POTATO, new PriceInfo(15, 19)), new EmeraldForItems(Items.CARROT, new PriceInfo(15, 19)), new ListItemForEmeralds(Items.BREAD, new PriceInfo(-4, -2))}, {new EmeraldForItems(Item.getItemFromBlock(Blocks.PUMPKIN), new PriceInfo(8, 13)), new ListItemForEmeralds(Items.PUMPKIN_PIE, new PriceInfo(-3, -2))}, {new EmeraldForItems(Item.getItemFromBlock(Blocks.MELON_BLOCK), new PriceInfo(7, 12)), new ListItemForEmeralds(Items.APPLE, new PriceInfo(-7, -5))}, {new ListItemForEmeralds(Items.COOKIE, new PriceInfo(-10, -6)), new ListItemForEmeralds(Items.CAKE, new PriceInfo(1, 1))}}, {{new EmeraldForItems(Items.STRING, new PriceInfo(15, 20)), new EmeraldForItems(Items.COAL, new PriceInfo(16, 24)), new ItemAndEmeraldToItem(Items.FISH, new PriceInfo(6, 6), Items.COOKED_FISH, new PriceInfo(6, 6))}, {new ListEnchantedItemForEmeralds(Items.FISHING_ROD, new PriceInfo(7, 8))}}, {{new EmeraldForItems(Item.getItemFromBlock(Blocks.WOOL), new PriceInfo(16, 22)), new ListItemForEmeralds(Items.SHEARS, new PriceInfo(3, 4))}, {new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL)), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 1), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 2), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 3), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 4), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 5), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 6), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 7), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 8), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 9), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 10), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 11), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 12), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 13), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 14), new PriceInfo(1, 2)), new ListItemForEmeralds(new ItemStack(Item.getItemFromBlock(Blocks.WOOL), 1, 15), new PriceInfo(1, 2))}}, {{new EmeraldForItems(Items.STRING, new PriceInfo(15, 20)), new ListItemForEmeralds(Items.ARROW, new PriceInfo(-12, -8))}, {new ListItemForEmeralds(Items.BOW, new PriceInfo(2, 3)), new ItemAndEmeraldToItem(Item.getItemFromBlock(Blocks.GRAVEL), new PriceInfo(10, 10), Items.FLINT, new PriceInfo(6, 10))}}}, {{{new EmeraldForItems(Items.PAPER, new PriceInfo(24, 36)), new ListEnchantedBookForEmeralds()}, {new EmeraldForItems(Items.BOOK, new PriceInfo(8, 10)), new ListItemForEmeralds(Items.COMPASS, new PriceInfo(10, 12)), new ListItemForEmeralds(Item.getItemFromBlock(Blocks.BOOKSHELF), new PriceInfo(3, 4))}, {new EmeraldForItems(Items.WRITTEN_BOOK, new PriceInfo(2, 2)), new ListItemForEmeralds(Items.CLOCK, new PriceInfo(10, 12)), new ListItemForEmeralds(Item.getItemFromBlock(Blocks.GLASS), new PriceInfo(-5, -3))}, {new ListEnchantedBookForEmeralds()}, {new ListEnchantedBookForEmeralds()}, {new ListItemForEmeralds(Items.NAME_TAG, new PriceInfo(20, 22))}}, {{new EmeraldForItems(Items.PAPER, new PriceInfo(24, 36))}, {new EmeraldForItems(Items.COMPASS, new PriceInfo(1, 1))}, {new ListItemForEmeralds(Items.MAP, new PriceInfo(7, 11))}, {new TreasureMapForEmeralds(new PriceInfo(12, 20), "Monument", MapDecoration.Type.MONUMENT), new TreasureMapForEmeralds(new PriceInfo(16, 28), "Mansion", MapDecoration.Type.MANSION)}}}, {{{new EmeraldForItems(Items.ROTTEN_FLESH, new PriceInfo(36, 40)), new EmeraldForItems(Items.GOLD_INGOT, new PriceInfo(8, 10))}, {new ListItemForEmeralds(Items.REDSTONE, new PriceInfo(-4, -1)), new ListItemForEmeralds(new ItemStack(Items.DYE, 1, EnumDyeColor.BLUE.getDyeDamage()), new PriceInfo(-2, -1))}, {new ListItemForEmeralds(Items.ENDER_PEARL, new PriceInfo(4, 7)), new ListItemForEmeralds(Item.getItemFromBlock(Blocks.GLOWSTONE), new PriceInfo(-3, -1))}, {new ListItemForEmeralds(Items.EXPERIENCE_BOTTLE, new PriceInfo(3, 11))}}}, {{{new EmeraldForItems(Items.COAL, new PriceInfo(16, 24)), new ListItemForEmeralds(Items.IRON_HELMET, new PriceInfo(4, 6))}, {new EmeraldForItems(Items.IRON_INGOT, new PriceInfo(7, 9)), new ListItemForEmeralds(Items.IRON_CHESTPLATE, new PriceInfo(10, 14))}, {new EmeraldForItems(Items.DIAMOND, new PriceInfo(3, 4)), new ListEnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, new PriceInfo(16, 19))}, {new ListItemForEmeralds(Items.CHAINMAIL_BOOTS, new PriceInfo(5, 7)), new ListItemForEmeralds(Items.CHAINMAIL_LEGGINGS, new PriceInfo(9, 11)), new ListItemForEmeralds(Items.CHAINMAIL_HELMET, new PriceInfo(5, 7)), new ListItemForEmeralds(Items.CHAINMAIL_CHESTPLATE, new PriceInfo(11, 15))}}, {{new EmeraldForItems(Items.COAL, new PriceInfo(16, 24)), new ListItemForEmeralds(Items.IRON_AXE, new PriceInfo(6, 8))}, {new EmeraldForItems(Items.IRON_INGOT, new PriceInfo(7, 9)), new ListEnchantedItemForEmeralds(Items.IRON_SWORD, new PriceInfo(9, 10))}, {new EmeraldForItems(Items.DIAMOND, new PriceInfo(3, 4)), new ListEnchantedItemForEmeralds(Items.DIAMOND_SWORD, new PriceInfo(12, 15)), new ListEnchantedItemForEmeralds(Items.DIAMOND_AXE, new PriceInfo(9, 12))}}, {{new EmeraldForItems(Items.COAL, new PriceInfo(16, 24)), new ListEnchantedItemForEmeralds(Items.IRON_SHOVEL, new PriceInfo(5, 7))}, {new EmeraldForItems(Items.IRON_INGOT, new PriceInfo(7, 9)), new ListEnchantedItemForEmeralds(Items.IRON_PICKAXE, new PriceInfo(9, 11))}, {new EmeraldForItems(Items.DIAMOND, new PriceInfo(3, 4)), new ListEnchantedItemForEmeralds(Items.DIAMOND_PICKAXE, new PriceInfo(12, 15))}}}, {{{new EmeraldForItems(Items.PORKCHOP, new PriceInfo(14, 18)), new EmeraldForItems(Items.CHICKEN, new PriceInfo(14, 18))}, {new EmeraldForItems(Items.COAL, new PriceInfo(16, 24)), new ListItemForEmeralds(Items.COOKED_PORKCHOP, new PriceInfo(-7, -5)), new ListItemForEmeralds(Items.COOKED_CHICKEN, new PriceInfo(-8, -6))}}, {{new EmeraldForItems(Items.LEATHER, new PriceInfo(9, 12)), new ListItemForEmeralds(Items.LEATHER_LEGGINGS, new PriceInfo(2, 4))}, {new ListEnchantedItemForEmeralds(Items.LEATHER_CHESTPLATE, new PriceInfo(7, 12))}, {new ListItemForEmeralds(Items.SADDLE, new PriceInfo(8, 10))}}}, {new ITradeList[0][]}};
 
-    public EntityVillager(World worldIn)
-    {
+    public EntityVillager(World worldIn) {
         this(worldIn, 0);
     }
 
-    public EntityVillager(World worldIn, int professionId)
-    {
+    public EntityVillager(World worldIn, int professionId) {
         super(worldIn);
-        this.villagerInventory = new InventoryBasic("Items", false, 8);
+        this.villagerInventory = new InventoryBasic("Items", false, 8, (CraftVillager) this.getBukkitEntity()); // CraftBukkit add argument
         this.setProfession(professionId);
         this.setSize(0.6F, 1.95F);
-        ((PathNavigateGround)this.getNavigator()).setBreakDoors(true);
-        this.setCanPickUpLoot(true);
+        ((PathNavigateGround) this.getNavigator()).setBreakDoors(true);
+        this.idkwhyreyoudoingthis(true);
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(1, new EntityAIAvoidEntity(this, EntityZombie.class, 8.0F, 0.6D, 0.6D));
         this.tasks.addTask(1, new EntityAIAvoidEntity(this, EntityEvoker.class, 12.0F, 0.8D, 0.8D));
@@ -153,87 +116,90 @@
         this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));
     }
 
-    private void setAdditionalAItasks()
-    {
-        if (!this.areAdditionalTasksSet)
-        {
+    private void setAdditionalAItasks() {
+        if (!this.areAdditionalTasksSet) {
             this.areAdditionalTasksSet = true;
 
-            if (this.isChild())
-            {
+            if (this.isChild()) {
                 this.tasks.addTask(8, new EntityAIPlay(this, 0.32D));
-            }
-            else if (this.getProfession() == 0)
-            {
+            } else if (this.getProfession() == 0) {
                 this.tasks.addTask(6, new EntityAIHarvestFarmland(this, 0.6D));
             }
         }
     }
 
-    protected void onGrowingAdult()
-    {
-        if (this.getProfession() == 0)
-        {
+    protected void onGrowingAdult() {
+        if (this.getProfession() == 0) {
             this.tasks.addTask(8, new EntityAIHarvestFarmland(this, 0.6D));
         }
 
         super.onGrowingAdult();
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.5D);
     }
 
-    protected void updateAITasks()
-    {
-        if (--this.randomTickDivider <= 0)
-        {
+    // Spigot Start
+    @Override
+    public void inactiveTick() {
+        // SPIGOT-3874
+        if (world.spigotConfig.tickInactiveVillagers) {
+            // SPIGOT-3894
+            net.minecraft.world.chunk.Chunk startingChunk = this.world.getChunkIfLoaded(MathHelper.floor(this.posX) >> 4, MathHelper.floor(this.posZ) >> 4);
+            if (!(startingChunk != null)) {
+                return;
+            }
+            this.updateAITasks(); // SPIGOT-3846
+        }
+        super.inactiveTick();
+    }
+    // Spigot End
+
+    protected void updateAITasks() {
+        if (--this.randomTickDivider <= 0) {
             BlockPos blockpos = new BlockPos(this);
             this.world.getVillageCollection().addToVillagerPositionList(blockpos);
             this.randomTickDivider = 70 + this.rand.nextInt(50);
             this.village = this.world.getVillageCollection().getNearestVillage(blockpos, 32);
 
-            if (this.village == null)
-            {
+            if (this.village == null) {
                 this.detachHome();
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos1 = this.village.getCenter();
                 this.setHomePosAndDistance(blockpos1, this.village.getVillageRadius());
 
-                if (this.isLookingForHome)
-                {
+                if (this.isLookingForHome) {
                     this.isLookingForHome = false;
                     this.village.setDefaultPlayerReputation(5);
                 }
             }
         }
 
-        if (!this.isTrading() && this.timeUntilReset > 0)
-        {
+        if (!this.isTrading() && this.timeUntilReset > 0) {
             --this.timeUntilReset;
 
-            if (this.timeUntilReset <= 0)
-            {
-                if (this.needsInitilization)
-                {
-                    for (MerchantRecipe merchantrecipe : this.buyingList)
-                    {
-                        if (merchantrecipe.isRecipeDisabled())
-                        {
-                            merchantrecipe.increaseMaxTradeUses(this.rand.nextInt(6) + this.rand.nextInt(6) + 2);
+            if (this.timeUntilReset <= 0) {
+                if (this.needsInitilization) {
+                    for (MerchantRecipe merchantrecipe : this.buyingList) {
+                        if (merchantrecipe.isRecipeDisabled()) {
+                            // CraftBukkit start
+                            int bonus = this.rand.nextInt(6) + this.rand.nextInt(6) + 2;
+                            VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
+                            Bukkit.getPluginManager().callEvent(event);
+                            if (!event.isCancelled()) {
+                                merchantrecipe.increaseMaxTradeUses(event.getBonus());
+                            }
+                            // CraftBukkit end
                         }
                     }
 
                     this.populateBuyingList();
                     this.needsInitilization = false;
 
-                    if (this.village != null && this.lastBuyingPlayer != null)
-                    {
-                        this.world.setEntityState(this, (byte)14);
+                    if (this.village != null && this.lastBuyingPlayer != null) {
+                        this.world.setEntityState(this, (byte) 14);
                         this.village.modifyPlayerReputation(this.lastBuyingPlayer, 1);
                     }
                 }
@@ -245,70 +211,52 @@
         super.updateAITasks();
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
         ItemStack itemstack = player.getHeldItem(hand);
         boolean flag = itemstack.getItem() == Items.NAME_TAG;
 
-        if (flag)
-        {
+        if (flag) {
             itemstack.interactWithEntity(player, this, hand);
             return true;
-        }
-        else if (!this.holdingSpawnEggOfClass(itemstack, this.getClass()) && this.isEntityAlive() && !this.isTrading() && !this.isChild() && !player.isSneaking())
-        {
-            if (this.buyingList == null)
-            {
+        } else if (!this.holdingSpawnEggOfClass(itemstack, this.getClass()) && this.isEntityAlive() && !this.isTrading() && !this.isChild() && !player.isSneaking()) {
+            if (this.buyingList == null) {
                 this.populateBuyingList();
             }
 
-            if (hand == EnumHand.MAIN_HAND)
-            {
+            if (hand == EnumHand.MAIN_HAND) {
                 player.addStat(StatList.TALKED_TO_VILLAGER);
             }
 
-            if (!this.world.isRemote && !this.buyingList.isEmpty())
-            {
+            if (!this.world.isRemote && !this.buyingList.isEmpty()) {
                 this.setCustomer(player);
                 player.displayVillagerTradeGui(this);
-            }
-            else if (this.buyingList.isEmpty())
-            {
+            } else if (this.buyingList.isEmpty()) {
                 return super.processInteract(player, hand);
             }
 
             return true;
-        }
-        else
-        {
+        } else {
             return super.processInteract(player, hand);
         }
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
         this.dataManager.register(PROFESSION, Integer.valueOf(0));
     }
 
-    public static void registerFixesVillager(DataFixer fixer)
-    {
+    public static void registerFixesVillager(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntityVillager.class);
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(EntityVillager.class, new String[] {"Inventory"}));
-        fixer.registerWalker(FixTypes.ENTITY, new IDataWalker()
-        {
-            public NBTTagCompound process(IDataFixer fixer, NBTTagCompound compound, int versionIn)
-            {
-                if (EntityList.getKey(EntityVillager.class).equals(new ResourceLocation(compound.getString("id"))) && compound.hasKey("Offers", 10))
-                {
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(EntityVillager.class, new String[]{"Inventory"}));
+        fixer.registerWalker(FixTypes.ENTITY, new IDataWalker() {
+            public NBTTagCompound process(IDataFixer fixer, NBTTagCompound compound, int versionIn) {
+                if (EntityList.getKey(EntityVillager.class).equals(new ResourceLocation(compound.getString("id"))) && compound.hasKey("Offers", 10)) {
                     NBTTagCompound nbttagcompound = compound.getCompoundTag("Offers");
 
-                    if (nbttagcompound.hasKey("Recipes", 9))
-                    {
+                    if (nbttagcompound.hasKey("Recipes", 9)) {
                         NBTTagList nbttaglist = nbttagcompound.getTagList("Recipes", 10);
 
-                        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-                        {
+                        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                             NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
                             DataFixesManager.processItemStack(fixer, nbttagcompound1, versionIn, "buy");
                             DataFixesManager.processItemStack(fixer, nbttagcompound1, versionIn, "buyB");
@@ -323,8 +271,7 @@
         });
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setInteger("Profession", this.getProfession());
         compound.setString("ProfessionName", this.getProfessionForge().getRegistryName().toString());
@@ -333,19 +280,16 @@
         compound.setInteger("CareerLevel", this.careerLevel);
         compound.setBoolean("Willing", this.isWillingToMate);
 
-        if (this.buyingList != null)
-        {
+        if (this.buyingList != null) {
             compound.setTag("Offers", this.buyingList.getRecipiesAsTags());
         }
 
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i) {
             ItemStack itemstack = this.villagerInventory.getStackInSlot(i);
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 nbttaglist.appendTag(itemstack.writeToNBT(new NBTTagCompound()));
             }
         }
@@ -353,14 +297,12 @@
         compound.setTag("Inventory", nbttaglist);
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.setProfession(compound.getInteger("Profession"));
-        if (compound.hasKey("ProfessionName"))
-        {
+        if (compound.hasKey("ProfessionName")) {
             net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession p =
-                net.minecraftforge.fml.common.registry.ForgeRegistries.VILLAGER_PROFESSIONS.getValue(new net.minecraft.util.ResourceLocation(compound.getString("ProfessionName")));
+                    net.minecraftforge.fml.common.registry.ForgeRegistries.VILLAGER_PROFESSIONS.getValue(new net.minecraft.util.ResourceLocation(compound.getString("ProfessionName")));
             if (p == null)
                 p = net.minecraftforge.fml.common.registry.ForgeRegistries.VILLAGER_PROFESSIONS.getValue(new net.minecraft.util.ResourceLocation("minecraft:farmer"));
             this.setProfession(p);
@@ -370,77 +312,65 @@
         this.careerLevel = compound.getInteger("CareerLevel");
         this.isWillingToMate = compound.getBoolean("Willing");
 
-        if (compound.hasKey("Offers", 10))
-        {
+        if (compound.hasKey("Offers", 10)) {
             NBTTagCompound nbttagcompound = compound.getCompoundTag("Offers");
             this.buyingList = new MerchantRecipeList(nbttagcompound);
         }
 
         NBTTagList nbttaglist = compound.getTagList("Inventory", 10);
 
-        for (int i = 0; i < nbttaglist.tagCount(); ++i)
-        {
+        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
             ItemStack itemstack = new ItemStack(nbttaglist.getCompoundTagAt(i));
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 this.villagerInventory.addItem(itemstack);
             }
         }
 
-        this.setCanPickUpLoot(true);
+        this.idkwhyreyoudoingthis(true);
         this.setAdditionalAItasks();
     }
 
-    protected boolean canDespawn()
-    {
+    public boolean canDespawn() {
         return false;
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         return this.isTrading() ? SoundEvents.ENTITY_VILLAGER_TRADING : SoundEvents.ENTITY_VILLAGER_AMBIENT;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_VILLAGER_HURT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.ENTITY_VILLAGER_DEATH;
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_VILLAGER;
     }
 
-    public void setProfession(int professionId)
-    {
+    public void setProfession(int professionId) {
         this.dataManager.set(PROFESSION, Integer.valueOf(professionId));
         net.minecraftforge.fml.common.registry.VillagerRegistry.onSetProfession(this, professionId);
     }
 
     @Deprecated //Use Forge Variant below
-    public int getProfession()
-    {
-        return Math.max(((Integer)this.dataManager.get(PROFESSION)).intValue(), 0);
+    public int getProfession() {
+        return Math.max(((Integer) this.dataManager.get(PROFESSION)).intValue(), 0);
     }
 
     private net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession prof;
-    public void setProfession(net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession prof)
-    {
+
+    public void setProfession(net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession prof) {
         this.prof = prof;
         this.setProfession(net.minecraftforge.fml.common.registry.VillagerRegistry.getId(prof));
     }
 
-    public net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession getProfessionForge()
-    {
-        if (this.prof == null)
-        {
+    public net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession getProfessionForge() {
+        if (this.prof == null) {
             this.prof = net.minecraftforge.fml.common.registry.VillagerRegistry.getById(this.getProfession());
             if (this.prof == null)
                 return net.minecraftforge.fml.common.registry.VillagerRegistry.getById(0); //Farmer
@@ -449,85 +379,65 @@
     }
 
     @Override
-    public void notifyDataManagerChange(DataParameter<?> key)
-    {
+    public void notifyDataManagerChange(DataParameter<?> key) {
         super.notifyDataManagerChange(key);
-        if (key.equals(PROFESSION))
-        {
+        if (key.equals(PROFESSION)) {
             net.minecraftforge.fml.common.registry.VillagerRegistry.onSetProfession(this, this.dataManager.get(PROFESSION));
         }
     }
 
-    public boolean isMating()
-    {
+    public boolean isMating() {
         return this.isMating;
     }
 
-    public void setMating(boolean mating)
-    {
+    public void setMating(boolean mating) {
         this.isMating = mating;
     }
 
-    public void setPlaying(boolean playing)
-    {
+    public void setPlaying(boolean playing) {
         this.isPlaying = playing;
     }
 
-    public boolean isPlaying()
-    {
+    public boolean isPlaying() {
         return this.isPlaying;
     }
 
-    public void setRevengeTarget(@Nullable EntityLivingBase livingBase)
-    {
+    public void setRevengeTarget(@Nullable EntityLivingBase livingBase) {
         super.setRevengeTarget(livingBase);
 
-        if (this.village != null && livingBase != null)
-        {
+        if (this.village != null && livingBase != null) {
             this.village.addOrRenewAgressor(livingBase);
 
-            if (livingBase instanceof EntityPlayer)
-            {
+            if (livingBase instanceof EntityPlayer) {
                 int i = -1;
 
-                if (this.isChild())
-                {
+                if (this.isChild()) {
                     i = -3;
                 }
 
                 this.village.modifyPlayerReputation(livingBase.getUniqueID(), i);
 
-                if (this.isEntityAlive())
-                {
-                    this.world.setEntityState(this, (byte)13);
+                if (this.isEntityAlive()) {
+                    this.world.setEntityState(this, (byte) 13);
                 }
             }
         }
     }
 
-    public void onDeath(DamageSource cause)
-    {
-        if (this.village != null)
-        {
+    public void onDeath(DamageSource cause) {
+        if (this.village != null) {
             Entity entity = cause.getTrueSource();
 
-            if (entity != null)
-            {
-                if (entity instanceof EntityPlayer)
-                {
+            if (entity != null) {
+                if (entity instanceof EntityPlayer) {
                     this.village.modifyPlayerReputation(entity.getUniqueID(), -2);
-                }
-                else if (entity instanceof IMob)
-                {
+                } else if (entity instanceof IMob) {
                     this.village.endMatingSeason();
                 }
-            }
-            else
-            {
+            } else {
                 EntityPlayer entityplayer = this.world.getClosestPlayerToEntity(this, 16.0D);
 
-                if (entityplayer != null)
-                {
+                if (entityplayer != null) {
                     this.village.endMatingSeason();
                 }
             }
@@ -536,49 +446,38 @@
         super.onDeath(cause);
     }
 
-    public void setCustomer(@Nullable EntityPlayer player)
-    {
+    public void setCustomer(@Nullable EntityPlayer player) {
         this.buyingPlayer = player;
     }
 
     @Nullable
-    public EntityPlayer getCustomer()
-    {
+    public EntityPlayer getCustomer() {
         return this.buyingPlayer;
     }
 
-    public boolean isTrading()
-    {
+    public boolean isTrading() {
         return this.buyingPlayer != null;
     }
 
-    public boolean getIsWillingToMate(boolean updateFirst)
-    {
-        if (!this.isWillingToMate && updateFirst && this.hasEnoughFoodToBreed())
-        {
+    public boolean getIsWillingToMate(boolean updateFirst) {
+        if (!this.isWillingToMate && updateFirst && this.hasEnoughFoodToBreed()) {
             boolean flag = false;
 
-            for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i)
-            {
+            for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i) {
                 ItemStack itemstack = this.villagerInventory.getStackInSlot(i);
 
-                if (!itemstack.isEmpty())
-                {
-                    if (itemstack.getItem() == Items.BREAD && itemstack.getCount() >= 3)
-                    {
+                if (!itemstack.isEmpty()) {
+                    if (itemstack.getItem() == Items.BREAD && itemstack.getCount() >= 3) {
                         flag = true;
                         this.villagerInventory.decrStackSize(i, 3);
-                    }
-                    else if ((itemstack.getItem() == Items.POTATO || itemstack.getItem() == Items.CARROT) && itemstack.getCount() >= 12)
-                    {
+                    } else if ((itemstack.getItem() == Items.POTATO || itemstack.getItem() == Items.CARROT) && itemstack.getCount() >= 12) {
                         flag = true;
                         this.villagerInventory.decrStackSize(i, 12);
                     }
                 }
 
-                if (flag)
-                {
-                    this.world.setEntityState(this, (byte)18);
+                if (flag) {
+                    this.world.setEntityState(this, (byte) 18);
                     this.isWillingToMate = true;
                     break;
                 }
@@ -588,86 +487,69 @@
         return this.isWillingToMate;
     }
 
-    public void setIsWillingToMate(boolean isWillingToMate)
-    {
+    public void setIsWillingToMate(boolean isWillingToMate) {
         this.isWillingToMate = isWillingToMate;
     }
 
-    public void useRecipe(MerchantRecipe recipe)
-    {
+    public void useRecipe(MerchantRecipe recipe) {
         recipe.incrementToolUses();
         this.livingSoundTime = -this.getTalkInterval();
         this.playSound(SoundEvents.ENTITY_VILLAGER_YES, this.getSoundVolume(), this.getSoundPitch());
         int i = 3 + this.rand.nextInt(4);
 
-        if (recipe.getToolUses() == 1 || this.rand.nextInt(5) == 0)
-        {
+        if (recipe.getToolUses() == 1 || this.rand.nextInt(5) == 0) {
             this.timeUntilReset = 40;
             this.needsInitilization = true;
             this.isWillingToMate = true;
 
-            if (this.buyingPlayer != null)
-            {
+            if (this.buyingPlayer != null) {
                 this.lastBuyingPlayer = this.buyingPlayer.getUniqueID();
-            }
-            else
-            {
+            } else {
                 this.lastBuyingPlayer = null;
             }
 
             i += 5;
         }
 
-        if (recipe.getItemToBuy().getItem() == Items.EMERALD)
-        {
+        if (recipe.getItemToBuy().getItem() == Items.EMERALD) {
             this.wealth += recipe.getItemToBuy().getCount();
         }
 
-        if (recipe.getRewardsExp())
-        {
+        if (recipe.getRewardsExp()) {
             this.world.spawnEntity(new EntityXPOrb(this.world, this.posX, this.posY + 0.5D, this.posZ, i));
         }
 
-        if (this.buyingPlayer instanceof EntityPlayerMP)
-        {
-            CriteriaTriggers.VILLAGER_TRADE.trigger((EntityPlayerMP)this.buyingPlayer, this, recipe.getItemToSell());
+        if (this.buyingPlayer instanceof EntityPlayerMP) {
+            CriteriaTriggers.VILLAGER_TRADE.trigger((EntityPlayerMP) this.buyingPlayer, this, recipe.getItemToSell());
         }
     }
 
-    public void verifySellingItem(ItemStack stack)
-    {
-        if (!this.world.isRemote && this.livingSoundTime > -this.getTalkInterval() + 20)
-        {
+    public void verifySellingItem(ItemStack stack) {
+        if (!this.world.isRemote && this.livingSoundTime > -this.getTalkInterval() + 20) {
             this.livingSoundTime = -this.getTalkInterval();
             this.playSound(stack.isEmpty() ? SoundEvents.ENTITY_VILLAGER_NO : SoundEvents.ENTITY_VILLAGER_YES, this.getSoundVolume(), this.getSoundPitch());
         }
     }
 
     @Nullable
-    public MerchantRecipeList getRecipes(EntityPlayer player)
-    {
-        if (this.buyingList == null)
-        {
+    public MerchantRecipeList getRecipes(EntityPlayer player) {
+        if (this.buyingList == null) {
             this.populateBuyingList();
         }
 
         return net.minecraftforge.event.ForgeEventFactory.listTradeOffers(this, player, buyingList);
     }
 
-    private void populateBuyingList()
+    public void populateBuyingList() // CraftBukkit private -> public // PAIL rename populateBuyingList
     {
-        if (this.careerId != 0 && this.careerLevel != 0)
-        {
+        if (this.careerId != 0 && this.careerLevel != 0) {
             ++this.careerLevel;
-        }
-        else
-        {
+        } else {
             this.careerId = this.getProfessionForge().getRandomCareer(this.rand) + 1;
             this.careerLevel = 1;
         }
 
-        if (this.buyingList == null)
-        {
+        if (this.buyingList == null) {
             this.buyingList = new MerchantRecipeList();
         }
 
@@ -675,81 +557,73 @@
         int j = this.careerLevel - 1;
         java.util.List<EntityVillager.ITradeList> trades = this.getProfessionForge().getCareer(i).getTrades(j);
 
-        if (trades != null)
-        {
-            for (EntityVillager.ITradeList entityvillager$itradelist : trades)
-            {
-                entityvillager$itradelist.addMerchantRecipe(this, this.buyingList, this.rand);
+        if (trades != null) {
+            for (EntityVillager.ITradeList entityvillager$itradelist : trades) {
+                // CraftBukkit start
+                // this is a hack. this must be done because otherwise, if
+                // mojang adds a new type of villager merchant option, it will need to
+                // have event handling added manually. this is better than having to do that.
+                MerchantRecipeList list = new MerchantRecipeList();
+                entityvillager$itradelist.addMerchantRecipe(this, list /*this.buyingList*/, this.rand);
+                for (MerchantRecipe recipe : list) {
+                    VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((Villager) getBukkitEntity(), recipe.asBukkit());
+                    Bukkit.getPluginManager().callEvent(event);
+                    if (!event.isCancelled()) {
+                        this.buyingList.add(CraftMerchantRecipe.fromBukkit(event.getRecipe()).toMinecraft());
+                    }
+                }
+                // CraftBukkit end
             }
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void setRecipes(@Nullable MerchantRecipeList recipeList)
-    {
+    public void setRecipes(@Nullable MerchantRecipeList recipeList) {
     }
 
-    public World getWorld()
-    {
+    public World getWorld() {
         return this.world;
     }
 
-    public BlockPos getPos()
-    {
+    public BlockPos getPos() {
         return new BlockPos(this);
     }
 
-    public ITextComponent getDisplayName()
-    {
+    public ITextComponent getDisplayName() {
         Team team = this.getTeam();
         String s = this.getCustomNameTag();
 
-        if (s != null && !s.isEmpty())
-        {
+        if (s != null && !s.isEmpty()) {
             TextComponentString textcomponentstring = new TextComponentString(ScorePlayerTeam.formatPlayerName(team, s));
             textcomponentstring.getStyle().setHoverEvent(this.getHoverEvent());
             textcomponentstring.getStyle().setInsertion(this.getCachedUniqueIdString());
             return textcomponentstring;
-        }
-        else
-        {
-            if (this.buyingList == null)
-            {
+        } else {
+            if (this.buyingList == null) {
                 this.populateBuyingList();
             }
 
             String s1 = null;
 
-            switch (this.getProfession())
-            {
+            switch (this.getProfession()) {
                 case 0:
 
-                    if (this.careerId == 1)
-                    {
+                    if (this.careerId == 1) {
                         s1 = "farmer";
-                    }
-                    else if (this.careerId == 2)
-                    {
+                    } else if (this.careerId == 2) {
                         s1 = "fisherman";
-                    }
-                    else if (this.careerId == 3)
-                    {
+                    } else if (this.careerId == 3) {
                         s1 = "shepherd";
-                    }
-                    else if (this.careerId == 4)
-                    {
+                    } else if (this.careerId == 4) {
                         s1 = "fletcher";
                     }
 
                     break;
                 case 1:
 
-                    if (this.careerId == 1)
-                    {
+                    if (this.careerId == 1) {
                         s1 = "librarian";
-                    }
-                    else if (this.careerId == 2)
-                    {
+                    } else if (this.careerId == 2) {
                         s1 = "cartographer";
                     }
 
@@ -759,28 +633,20 @@
                     break;
                 case 3:
 
-                    if (this.careerId == 1)
-                    {
+                    if (this.careerId == 1) {
                         s1 = "armor";
-                    }
-                    else if (this.careerId == 2)
-                    {
+                    } else if (this.careerId == 2) {
                         s1 = "weapon";
-                    }
-                    else if (this.careerId == 3)
-                    {
+                    } else if (this.careerId == 3) {
                         s1 = "tool";
                     }
 
                     break;
                 case 4:
 
-                    if (this.careerId == 1)
-                    {
+                    if (this.careerId == 1) {
                         s1 = "butcher";
-                    }
-                    else if (this.careerId == 2)
-                    {
+                    } else if (this.careerId == 2) {
                         s1 = "leather";
                     }
 
@@ -789,14 +655,13 @@
                     s1 = "nitwit";
             }
 
-            s1 = this.getProfessionForge().getCareer(this.careerId-1).getName();
+            s1 = this.getProfessionForge().getCareer(this.careerId - 1).getName();
             {
                 ITextComponent itextcomponent = new TextComponentTranslation("entity.Villager." + s1, new Object[0]);
                 itextcomponent.getStyle().setHoverEvent(this.getHoverEvent());
                 itextcomponent.getStyle().setInsertion(this.getCachedUniqueIdString());
 
-                if (team != null)
-                {
+                if (team != null) {
                     itextcomponent.getStyle().setColor(team.getColor());
                 }
 
@@ -805,56 +670,42 @@
         }
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return this.isChild() ? 0.81F : 1.62F;
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 12)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 12) {
             this.spawnParticles(EnumParticleTypes.HEART);
-        }
-        else if (id == 13)
-        {
+        } else if (id == 13) {
             this.spawnParticles(EnumParticleTypes.VILLAGER_ANGRY);
-        }
-        else if (id == 14)
-        {
+        } else if (id == 14) {
             this.spawnParticles(EnumParticleTypes.VILLAGER_HAPPY);
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    private void spawnParticles(EnumParticleTypes particleType)
-    {
-        for (int i = 0; i < 5; ++i)
-        {
+    private void spawnParticles(EnumParticleTypes particleType) {
+        for (int i = 0; i < 5; ++i) {
             double d0 = this.rand.nextGaussian() * 0.02D;
             double d1 = this.rand.nextGaussian() * 0.02D;
             double d2 = this.rand.nextGaussian() * 0.02D;
-            this.world.spawnParticle(particleType, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 1.0D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2);
+            this.world.spawnParticle(particleType, this.posX + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, this.posY + 1.0D + (double) (this.rand.nextFloat() * this.height), this.posZ + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
         }
     }
 
     @Nullable
-    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
-    {
+    public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata) {
         return this.finalizeMobSpawn(difficulty, livingdata, true);
     }
 
-    public IEntityLivingData finalizeMobSpawn(DifficultyInstance p_190672_1_, @Nullable IEntityLivingData p_190672_2_, boolean p_190672_3_)
-    {
+    public IEntityLivingData finalizeMobSpawn(DifficultyInstance p_190672_1_, @Nullable IEntityLivingData p_190672_2_, boolean p_190672_3_) {
         p_190672_2_ = super.onInitialSpawn(p_190672_1_, p_190672_2_);
 
-        if (p_190672_3_)
-        {
+        if (p_190672_3_) {
             net.minecraftforge.fml.common.registry.VillagerRegistry.setRandomProfession(this, this.world.rand);
         }
 
@@ -863,114 +714,90 @@
         return p_190672_2_;
     }
 
-    public void setLookingForHome()
-    {
+    public void setLookingForHome() {
         this.isLookingForHome = true;
     }
 
-    public EntityVillager createChild(EntityAgeable ageable)
-    {
+    public EntityVillager createChild(EntityAgeable ageable) {
         EntityVillager entityvillager = new EntityVillager(this.world);
-        entityvillager.onInitialSpawn(this.world.getDifficultyForLocation(new BlockPos(entityvillager)), (IEntityLivingData)null);
+        entityvillager.onInitialSpawn(this.world.getDifficultyForLocation(new BlockPos(entityvillager)), (IEntityLivingData) null);
         return entityvillager;
     }
 
-    public boolean canBeLeashedTo(EntityPlayer player)
-    {
+    public boolean canBeLeashedTo(EntityPlayer player) {
         return false;
     }
 
-    public void onStruckByLightning(EntityLightningBolt lightningBolt)
-    {
-        if (!this.world.isRemote && !this.isDead)
-        {
+    public void onStruckByLightning(@Nullable EntityLightningBolt lightningBolt) {
+        if (!this.world.isRemote && !this.isDead) {
             EntityWitch entitywitch = new EntityWitch(this.world);
             entitywitch.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-            entitywitch.onInitialSpawn(this.world.getDifficultyForLocation(new BlockPos(entitywitch)), (IEntityLivingData)null);
+            entitywitch.onInitialSpawn(this.world.getDifficultyForLocation(new BlockPos(entitywitch)), (IEntityLivingData) null);
             entitywitch.setNoAI(this.isAIDisabled());
 
-            if (this.hasCustomName())
-            {
+            if (this.hasCustomName()) {
                 entitywitch.setCustomNameTag(this.getCustomNameTag());
                 entitywitch.setAlwaysRenderNameTag(this.getAlwaysRenderNameTag());
             }
 
-            this.world.spawnEntity(entitywitch);
+            this.world.spawnEntity(entitywitch, SpawnReason.LIGHTNING);
             this.setDead();
         }
     }
 
-    public InventoryBasic getVillagerInventory()
-    {
+    public InventoryBasic getVillagerInventory() {
         return this.villagerInventory;
     }
 
-    protected void updateEquipmentIfNeeded(EntityItem itemEntity)
-    {
+    protected void updateEquipmentIfNeeded(EntityItem itemEntity) {
         ItemStack itemstack = itemEntity.getItem();
         Item item = itemstack.getItem();
 
-        if (this.canVillagerPickupItem(item))
-        {
+        if (this.canVillagerPickupItem(item)) {
             ItemStack itemstack1 = this.villagerInventory.addItem(itemstack);
 
-            if (itemstack1.isEmpty())
-            {
+            if (itemstack1.isEmpty()) {
                 itemEntity.setDead();
-            }
-            else
-            {
+            } else {
                 itemstack.setCount(itemstack1.getCount());
             }
         }
     }
 
-    private boolean canVillagerPickupItem(Item itemIn)
-    {
+    private boolean canVillagerPickupItem(Item itemIn) {
         return itemIn == Items.BREAD || itemIn == Items.POTATO || itemIn == Items.CARROT || itemIn == Items.WHEAT || itemIn == Items.WHEAT_SEEDS || itemIn == Items.BEETROOT || itemIn == Items.BEETROOT_SEEDS;
     }
 
-    public boolean hasEnoughFoodToBreed()
-    {
+    public boolean hasEnoughFoodToBreed() {
         return this.hasEnoughItems(1);
     }
 
-    public boolean canAbondonItems()
-    {
+    public boolean canAbondonItems() {
         return this.hasEnoughItems(2);
     }
 
-    public boolean wantsMoreFood()
-    {
+    public boolean wantsMoreFood() {
         boolean flag = this.getProfession() == 0;
 
-        if (flag)
-        {
+        if (flag) {
             return !this.hasEnoughItems(5);
-        }
-        else
-        {
+        } else {
             return !this.hasEnoughItems(1);
         }
     }
 
-    private boolean hasEnoughItems(int multiplier)
-    {
+    private boolean hasEnoughItems(int multiplier) {
         boolean flag = this.getProfession() == 0;
 
-        for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i)
-        {
+        for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i) {
             ItemStack itemstack = this.villagerInventory.getStackInSlot(i);
 
-            if (!itemstack.isEmpty())
-            {
-                if (itemstack.getItem() == Items.BREAD && itemstack.getCount() >= 3 * multiplier || itemstack.getItem() == Items.POTATO && itemstack.getCount() >= 12 * multiplier || itemstack.getItem() == Items.CARROT && itemstack.getCount() >= 12 * multiplier || itemstack.getItem() == Items.BEETROOT && itemstack.getCount() >= 12 * multiplier)
-                {
+            if (!itemstack.isEmpty()) {
+                if (itemstack.getItem() == Items.BREAD && itemstack.getCount() >= 3 * multiplier || itemstack.getItem() == Items.POTATO && itemstack.getCount() >= 12 * multiplier || itemstack.getItem() == Items.CARROT && itemstack.getCount() >= 12 * multiplier || itemstack.getItem() == Items.BEETROOT && itemstack.getCount() >= 12 * multiplier) {
                     return true;
                 }
 
-                if (flag && itemstack.getItem() == Items.WHEAT && itemstack.getCount() >= 9 * multiplier)
-                {
+                if (flag && itemstack.getItem() == Items.WHEAT && itemstack.getCount() >= 9 * multiplier) {
                     return true;
                 }
             }
@@ -979,14 +806,11 @@
         return false;
     }
 
-    public boolean isFarmItemInInventory()
-    {
-        for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i)
-        {
+    public boolean isFarmItemInInventory() {
+        for (int i = 0; i < this.villagerInventory.getSizeInventory(); ++i) {
             ItemStack itemstack = this.villagerInventory.getStackInSlot(i);
 
-            if (!itemstack.isEmpty() && (itemstack.getItem() == Items.WHEAT_SEEDS || itemstack.getItem() == Items.POTATO || itemstack.getItem() == Items.CARROT || itemstack.getItem() == Items.BEETROOT_SEEDS))
-            {
+            if (!itemstack.isEmpty() && (itemstack.getItem() == Items.WHEAT_SEEDS || itemstack.getItem() == Items.POTATO || itemstack.getItem() == Items.CARROT || itemstack.getItem() == Items.BEETROOT_SEEDS)) {
                 return true;
             }
         }
@@ -994,221 +818,185 @@
         return false;
     }
 
-    public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn)
-    {
-        if (super.replaceItemInInventory(inventorySlot, itemStackIn))
-        {
+    public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn) {
+        if (super.replaceItemInInventory(inventorySlot, itemStackIn)) {
             return true;
-        }
-        else
-        {
+        } else {
             int i = inventorySlot - 300;
 
-            if (i >= 0 && i < this.villagerInventory.getSizeInventory())
-            {
+            if (i >= 0 && i < this.villagerInventory.getSizeInventory()) {
                 this.villagerInventory.setInventorySlotContents(i, itemStackIn);
                 return true;
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
     }
 
-    public static class EmeraldForItems implements EntityVillager.ITradeList
-        {
-            public Item buyingItem;
-            public EntityVillager.PriceInfo price;
+    public static class EmeraldForItems implements EntityVillager.ITradeList {
+        public Item buyingItem;
+        public EntityVillager.PriceInfo price;
 
-            public EmeraldForItems(Item itemIn, EntityVillager.PriceInfo priceIn)
-            {
-                this.buyingItem = itemIn;
-                this.price = priceIn;
-            }
+        public EmeraldForItems(Item itemIn, EntityVillager.PriceInfo priceIn) {
+            this.buyingItem = itemIn;
+            this.price = priceIn;
+        }
 
-            public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random)
-            {
-                int i = 1;
+        public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random) {
+            int i = 1;
 
-                if (this.price != null)
-                {
-                    i = this.price.getPrice(random);
-                }
-
-                recipeList.add(new MerchantRecipe(new ItemStack(this.buyingItem, i, 0), Items.EMERALD));
+            if (this.price != null) {
+                i = this.price.getPrice(random);
             }
+
+            recipeList.add(new MerchantRecipe(new ItemStack(this.buyingItem, i, 0), Items.EMERALD));
         }
+    }
 
-    public interface ITradeList
-    {
+    public interface ITradeList {
         void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random);
     }
 
-    public static class ItemAndEmeraldToItem implements EntityVillager.ITradeList
-        {
-            public ItemStack buyingItemStack;
-            public EntityVillager.PriceInfo buyingPriceInfo;
-            public ItemStack sellingItemstack;
-            public EntityVillager.PriceInfo sellingPriceInfo;
+    public static class ItemAndEmeraldToItem implements EntityVillager.ITradeList {
+        public ItemStack buyingItemStack;
+        public EntityVillager.PriceInfo buyingPriceInfo;
+        public ItemStack sellingItemstack;
+        public EntityVillager.PriceInfo sellingPriceInfo;
 
-            public ItemAndEmeraldToItem(Item p_i45813_1_, EntityVillager.PriceInfo p_i45813_2_, Item p_i45813_3_, EntityVillager.PriceInfo p_i45813_4_)
-            {
-                this.buyingItemStack = new ItemStack(p_i45813_1_);
-                this.buyingPriceInfo = p_i45813_2_;
-                this.sellingItemstack = new ItemStack(p_i45813_3_);
-                this.sellingPriceInfo = p_i45813_4_;
-            }
+        public ItemAndEmeraldToItem(Item p_i45813_1_, EntityVillager.PriceInfo p_i45813_2_, Item p_i45813_3_, EntityVillager.PriceInfo p_i45813_4_) {
+            this.buyingItemStack = new ItemStack(p_i45813_1_);
+            this.buyingPriceInfo = p_i45813_2_;
+            this.sellingItemstack = new ItemStack(p_i45813_3_);
+            this.sellingPriceInfo = p_i45813_4_;
+        }
 
-            public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random)
-            {
-                int i = this.buyingPriceInfo.getPrice(random);
-                int j = this.sellingPriceInfo.getPrice(random);
-                recipeList.add(new MerchantRecipe(new ItemStack(this.buyingItemStack.getItem(), i, this.buyingItemStack.getMetadata()), new ItemStack(Items.EMERALD), new ItemStack(this.sellingItemstack.getItem(), j, this.sellingItemstack.getMetadata())));
-            }
+        public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random) {
+            int i = this.buyingPriceInfo.getPrice(random);
+            int j = this.sellingPriceInfo.getPrice(random);
+            recipeList.add(new MerchantRecipe(new ItemStack(this.buyingItemStack.getItem(), i, this.buyingItemStack.getMetadata()), new ItemStack(Items.EMERALD), new ItemStack(this.sellingItemstack.getItem(), j, this.sellingItemstack.getMetadata())));
         }
+    }
 
-    public static class ListEnchantedBookForEmeralds implements EntityVillager.ITradeList
-        {
-            public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random)
-            {
-                Enchantment enchantment = (Enchantment)Enchantment.REGISTRY.getRandomObject(random);
-                int i = MathHelper.getInt(random, enchantment.getMinLevel(), enchantment.getMaxLevel());
-                ItemStack itemstack = ItemEnchantedBook.getEnchantedItemStack(new EnchantmentData(enchantment, i));
-                int j = 2 + random.nextInt(5 + i * 10) + 3 * i;
+    public static class ListEnchantedBookForEmeralds implements EntityVillager.ITradeList {
+        public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random) {
+            Enchantment enchantment = (Enchantment) Enchantment.REGISTRY.getRandomObject(random);
+            int i = MathHelper.getInt(random, enchantment.getMinLevel(), enchantment.getMaxLevel());
+            ItemStack itemstack = ItemEnchantedBook.getEnchantedItemStack(new EnchantmentData(enchantment, i));
+            int j = 2 + random.nextInt(5 + i * 10) + 3 * i;
 
-                if (enchantment.isTreasureEnchantment())
-                {
-                    j *= 2;
-                }
+            if (enchantment.isTreasureEnchantment()) {
+                j *= 2;
+            }
 
-                if (j > 64)
-                {
-                    j = 64;
-                }
-
-                recipeList.add(new MerchantRecipe(new ItemStack(Items.BOOK), new ItemStack(Items.EMERALD, j), itemstack));
+            if (j > 64) {
+                j = 64;
             }
+
+            recipeList.add(new MerchantRecipe(new ItemStack(Items.BOOK), new ItemStack(Items.EMERALD, j), itemstack));
         }
+    }
 
-    public static class ListEnchantedItemForEmeralds implements EntityVillager.ITradeList
-        {
-            public ItemStack enchantedItemStack;
-            public EntityVillager.PriceInfo priceInfo;
+    public static class ListEnchantedItemForEmeralds implements EntityVillager.ITradeList {
+        public ItemStack enchantedItemStack;
+        public EntityVillager.PriceInfo priceInfo;
 
-            public ListEnchantedItemForEmeralds(Item p_i45814_1_, EntityVillager.PriceInfo p_i45814_2_)
-            {
-                this.enchantedItemStack = new ItemStack(p_i45814_1_);
-                this.priceInfo = p_i45814_2_;
-            }
+        public ListEnchantedItemForEmeralds(Item p_i45814_1_, EntityVillager.PriceInfo p_i45814_2_) {
+            this.enchantedItemStack = new ItemStack(p_i45814_1_);
+            this.priceInfo = p_i45814_2_;
+        }
 
-            public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random)
-            {
-                int i = 1;
+        public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random) {
+            int i = 1;
 
-                if (this.priceInfo != null)
-                {
-                    i = this.priceInfo.getPrice(random);
-                }
-
-                ItemStack itemstack = new ItemStack(Items.EMERALD, i, 0);
-                ItemStack itemstack1 = EnchantmentHelper.addRandomEnchantment(random, new ItemStack(this.enchantedItemStack.getItem(), 1, this.enchantedItemStack.getMetadata()), 5 + random.nextInt(15), false);
-                recipeList.add(new MerchantRecipe(itemstack, itemstack1));
+            if (this.priceInfo != null) {
+                i = this.priceInfo.getPrice(random);
             }
+
+            ItemStack itemstack = new ItemStack(Items.EMERALD, i, 0);
+            ItemStack itemstack1 = EnchantmentHelper.addRandomEnchantment(random, new ItemStack(this.enchantedItemStack.getItem(), 1, this.enchantedItemStack.getMetadata()), 5 + random.nextInt(15), false);
+            recipeList.add(new MerchantRecipe(itemstack, itemstack1));
         }
+    }
+
     //MODDERS DO NOT USE OR EDIT THIS IN ANY WAY IT WILL HAVE NO EFFECT, THIS IS JUST IN HERE TO ALLOW FORGE TO ACCESS IT
     @Deprecated
-    public static ITradeList[][][][] GET_TRADES_DONT_USE(){ return DEFAULT_TRADE_LIST_MAP; }
+    public static ITradeList[][][][] GET_TRADES_DONT_USE() {
+        return DEFAULT_TRADE_LIST_MAP;
+    }
 
-    public static class ListItemForEmeralds implements EntityVillager.ITradeList
-        {
-            public ItemStack itemToBuy;
-            public EntityVillager.PriceInfo priceInfo;
+    public static class ListItemForEmeralds implements EntityVillager.ITradeList {
+        public ItemStack itemToBuy;
+        public EntityVillager.PriceInfo priceInfo;
 
-            public ListItemForEmeralds(Item par1Item, EntityVillager.PriceInfo priceInfo)
-            {
-                this.itemToBuy = new ItemStack(par1Item);
-                this.priceInfo = priceInfo;
-            }
+        public ListItemForEmeralds(Item par1Item, EntityVillager.PriceInfo priceInfo) {
+            this.itemToBuy = new ItemStack(par1Item);
+            this.priceInfo = priceInfo;
+        }
 
-            public ListItemForEmeralds(ItemStack stack, EntityVillager.PriceInfo priceInfo)
-            {
-                this.itemToBuy = stack;
-                this.priceInfo = priceInfo;
-            }
+        public ListItemForEmeralds(ItemStack stack, EntityVillager.PriceInfo priceInfo) {
+            this.itemToBuy = stack;
+            this.priceInfo = priceInfo;
+        }
 
-            public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random)
-            {
-                int i = 1;
+        public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random) {
+            int i = 1;
 
-                if (this.priceInfo != null)
-                {
-                    i = this.priceInfo.getPrice(random);
-                }
+            if (this.priceInfo != null) {
+                i = this.priceInfo.getPrice(random);
+            }
 
-                ItemStack itemstack;
-                ItemStack itemstack1;
+            ItemStack itemstack;
+            ItemStack itemstack1;
 
-                if (i < 0)
-                {
-                    itemstack = new ItemStack(Items.EMERALD);
-                    itemstack1 = new ItemStack(this.itemToBuy.getItem(), -i, this.itemToBuy.getMetadata());
-                }
-                else
-                {
-                    itemstack = new ItemStack(Items.EMERALD, i, 0);
-                    itemstack1 = new ItemStack(this.itemToBuy.getItem(), 1, this.itemToBuy.getMetadata());
-                }
-
-                recipeList.add(new MerchantRecipe(itemstack, itemstack1));
+            if (i < 0) {
+                itemstack = new ItemStack(Items.EMERALD);
+                itemstack1 = new ItemStack(this.itemToBuy.getItem(), -i, this.itemToBuy.getMetadata());
+            } else {
+                itemstack = new ItemStack(Items.EMERALD, i, 0);
+                itemstack1 = new ItemStack(this.itemToBuy.getItem(), 1, this.itemToBuy.getMetadata());
             }
+
+            recipeList.add(new MerchantRecipe(itemstack, itemstack1));
         }
+    }
 
-    public static class PriceInfo extends Tuple<Integer, Integer>
-        {
-            public PriceInfo(int p_i45810_1_, int p_i45810_2_)
-            {
-                super(Integer.valueOf(p_i45810_1_), Integer.valueOf(p_i45810_2_));
+    public static class PriceInfo extends Tuple<Integer, Integer> {
+        public PriceInfo(int p_i45810_1_, int p_i45810_2_) {
+            super(Integer.valueOf(p_i45810_1_), Integer.valueOf(p_i45810_2_));
 
-                if (p_i45810_2_ < p_i45810_1_)
-                {
-                    EntityVillager.LOGGER.warn("PriceRange({}, {}) invalid, {} smaller than {}", Integer.valueOf(p_i45810_1_), Integer.valueOf(p_i45810_2_), Integer.valueOf(p_i45810_2_), Integer.valueOf(p_i45810_1_));
-                }
+            if (p_i45810_2_ < p_i45810_1_) {
+                EntityVillager.LOGGER.warn("PriceRange({}, {}) invalid, {} smaller than {}", Integer.valueOf(p_i45810_1_), Integer.valueOf(p_i45810_2_), Integer.valueOf(p_i45810_2_), Integer.valueOf(p_i45810_1_));
             }
+        }
 
-            public int getPrice(Random rand)
-            {
-                return ((Integer)this.getFirst()).intValue() >= ((Integer)this.getSecond()).intValue() ? ((Integer)this.getFirst()).intValue() : ((Integer)this.getFirst()).intValue() + rand.nextInt(((Integer)this.getSecond()).intValue() - ((Integer)this.getFirst()).intValue() + 1);
-            }
+        public int getPrice(Random rand) {
+            return ((Integer) this.getFirst()).intValue() >= ((Integer) this.getSecond()).intValue() ? ((Integer) this.getFirst()).intValue() : ((Integer) this.getFirst()).intValue() + rand.nextInt(((Integer) this.getSecond()).intValue() - ((Integer) this.getFirst()).intValue() + 1);
         }
+    }
 
-    static class TreasureMapForEmeralds implements EntityVillager.ITradeList
-        {
-            public EntityVillager.PriceInfo value;
-            public String destination;
-            public MapDecoration.Type destinationType;
+    static class TreasureMapForEmeralds implements EntityVillager.ITradeList {
+        public EntityVillager.PriceInfo value;
+        public String destination;
+        public MapDecoration.Type destinationType;
 
-            public TreasureMapForEmeralds(EntityVillager.PriceInfo p_i47340_1_, String p_i47340_2_, MapDecoration.Type p_i47340_3_)
-            {
-                this.value = p_i47340_1_;
-                this.destination = p_i47340_2_;
-                this.destinationType = p_i47340_3_;
-            }
+        public TreasureMapForEmeralds(EntityVillager.PriceInfo p_i47340_1_, String p_i47340_2_, MapDecoration.Type p_i47340_3_) {
+            this.value = p_i47340_1_;
+            this.destination = p_i47340_2_;
+            this.destinationType = p_i47340_3_;
+        }
 
-            public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random)
-            {
-                int i = this.value.getPrice(random);
-                World world = merchant.getWorld();
-                BlockPos blockpos = world.findNearestStructure(this.destination, merchant.getPos(), true);
+        public void addMerchantRecipe(IMerchant merchant, MerchantRecipeList recipeList, Random random) {
+            int i = this.value.getPrice(random);
+            World world = merchant.getWorld();
+            BlockPos blockpos = world.findNearestStructure(this.destination, merchant.getPos(), true);
 
-                if (blockpos != null)
-                {
-                    ItemStack itemstack = ItemMap.setupNewMap(world, (double)blockpos.getX(), (double)blockpos.getZ(), (byte)2, true, true);
-                    ItemMap.renderBiomePreviewMap(world, itemstack);
-                    MapData.addTargetDecoration(itemstack, blockpos, "+", this.destinationType);
-                    itemstack.setTranslatableName("filled_map." + this.destination.toLowerCase(Locale.ROOT));
-                    recipeList.add(new MerchantRecipe(new ItemStack(Items.EMERALD, i), new ItemStack(Items.COMPASS), itemstack));
-                }
+            if (blockpos != null) {
+                ItemStack itemstack = ItemMap.setupNewMap(world, (double) blockpos.getX(), (double) blockpos.getZ(), (byte) 2, true, true);
+                ItemMap.renderBiomePreviewMap(world, itemstack);
+                MapData.addTargetDecoration(itemstack, blockpos, "+", this.destinationType);
+                itemstack.setTranslatableName("filled_map." + this.destination.toLowerCase(Locale.ROOT));
+                recipeList.add(new MerchantRecipe(new ItemStack(Items.EMERALD, i), new ItemStack(Items.COMPASS), itemstack));
             }
         }
+    }
 }
