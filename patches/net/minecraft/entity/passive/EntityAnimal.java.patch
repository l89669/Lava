--- ../src-base/minecraft/net/minecraft/entity/passive/EntityAnimal.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntityAnimal.java
@@ -1,7 +1,5 @@
 package net.minecraft.entity.passive;
 
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.entity.EntityAgeable;
 import net.minecraft.entity.player.EntityPlayer;
@@ -10,7 +8,6 @@
 import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.util.DamageSource;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.math.BlockPos;
@@ -19,50 +16,49 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class EntityAnimal extends EntityAgeable implements IAnimals
-{
+import javax.annotation.Nullable;
+import java.util.UUID;
+
+public abstract class EntityAnimal extends EntityAgeable implements IAnimals {
     protected Block spawnableBlock = Blocks.GRASS;
     private int inLove;
     private UUID playerInLove;
 
-    public EntityAnimal(World worldIn)
-    {
+    public ItemStack breedItem; // CraftBukkit - Add breedItem variable
+
+    public EntityAnimal(World worldIn) {
         super(worldIn);
     }
 
-    protected void updateAITasks()
-    {
-        if (this.getGrowingAge() != 0)
-        {
+    protected void updateAITasks() {
+        if (this.getGrowingAge() != 0) {
             this.inLove = 0;
         }
 
         super.updateAITasks();
     }
 
-    public void onLivingUpdate()
-    {
+    public void onLivingUpdate() {
         super.onLivingUpdate();
 
-        if (this.getGrowingAge() != 0)
-        {
+        if (this.getGrowingAge() != 0) {
             this.inLove = 0;
         }
 
-        if (this.inLove > 0)
-        {
+        if (this.inLove > 0) {
             --this.inLove;
 
-            if (this.inLove % 10 == 0)
-            {
+            if (this.inLove % 10 == 0) {
                 double d0 = this.rand.nextGaussian() * 0.02D;
                 double d1 = this.rand.nextGaussian() * 0.02D;
                 double d2 = this.rand.nextGaussian() * 0.02D;
-                this.world.spawnParticle(EnumParticleTypes.HEART, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2);
+                this.world.spawnParticle(EnumParticleTypes.HEART, this.posX + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, this.posY + 0.5D + (double) (this.rand.nextFloat() * this.height), this.posZ + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
             }
         }
     }
 
+    /* CraftBukkit start
+    // Function disabled as it has no special function anymore after setSitting is disabled.
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -75,37 +71,32 @@
             return super.attackEntityFrom(source, amount);
         }
     }
+     // CraftBukkit end */
 
-    public float getBlockPathWeight(BlockPos pos)
-    {
+    public float getBlockPathWeight(BlockPos pos) {
         return this.world.getBlockState(pos.down()).getBlock() == this.spawnableBlock ? 10.0F : this.world.getLightBrightness(pos) - 0.5F;
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setInteger("InLove", this.inLove);
 
-        if (this.playerInLove != null)
-        {
+        if (this.playerInLove != null) {
             compound.setUniqueId("LoveCause", this.playerInLove);
         }
     }
 
-    public double getYOffset()
-    {
+    public double getYOffset() {
         return 0.14D;
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.inLove = compound.getInteger("InLove");
         this.playerInLove = compound.hasUniqueId("LoveCause") ? compound.getUniqueId("LoveCause") : null;
     }
 
-    public boolean getCanSpawnHere()
-    {
+    public boolean getCanSpawnHere() {
         int i = MathHelper.floor(this.posX);
         int j = MathHelper.floor(this.getEntityBoundingBox().minY);
         int k = MathHelper.floor(this.posZ);
@@ -113,43 +104,35 @@
         return this.world.getBlockState(blockpos.down()).getBlock() == this.spawnableBlock && this.world.getLight(blockpos) > 8 && super.getCanSpawnHere();
     }
 
-    public int getTalkInterval()
-    {
+    public int getTalkInterval() {
         return 120;
     }
 
-    protected boolean canDespawn()
-    {
+    public boolean canDespawn() {
         return false;
     }
 
-    protected int getExperiencePoints(EntityPlayer player)
-    {
+    protected int getExperiencePoints(EntityPlayer player) {
         return 1 + this.world.rand.nextInt(3);
     }
 
-    public boolean isBreedingItem(ItemStack stack)
-    {
+    public boolean isBreedingItem(ItemStack stack) {
         return stack.getItem() == Items.WHEAT;
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
         ItemStack itemstack = player.getHeldItem(hand);
 
-        if (!itemstack.isEmpty())
-        {
-            if (this.isBreedingItem(itemstack) && this.getGrowingAge() == 0 && this.inLove <= 0)
-            {
+        if (!itemstack.isEmpty()) {
+            if (this.isBreedingItem(itemstack) && this.getGrowingAge() == 0 && this.inLove <= 0) {
                 this.consumeItemFromStack(player, itemstack);
                 this.setInLove(player);
                 return true;
             }
 
-            if (this.isChild() && this.isBreedingItem(itemstack))
-            {
+            if (this.isChild() && this.isBreedingItem(itemstack)) {
                 this.consumeItemFromStack(player, itemstack);
-                this.ageUp((int)((float)(-this.getGrowingAge() / 20) * 0.1F), true);
+                this.ageUp((int) ((float) (-this.getGrowingAge() / 20) * 0.1F), true);
                 return true;
             }
         }
@@ -157,81 +140,61 @@
         return super.processInteract(player, hand);
     }
 
-    protected void consumeItemFromStack(EntityPlayer player, ItemStack stack)
-    {
-        if (!player.capabilities.isCreativeMode)
-        {
+    protected void consumeItemFromStack(EntityPlayer player, ItemStack stack) {
+        if (!player.capabilities.isCreativeMode) {
             stack.shrink(1);
         }
     }
 
-    public void setInLove(@Nullable EntityPlayer player)
-    {
+    public void setInLove(@Nullable EntityPlayer player) {
         this.inLove = 600;
 
-        if (player != null)
-        {
+        if (player != null) {
             this.playerInLove = player.getUniqueID();
+            this.breedItem = player.inventory.getCurrentItem(); // CraftBukkit
         }
 
-        this.world.setEntityState(this, (byte)18);
+        this.world.setEntityState(this, (byte) 18);
     }
 
     @Nullable
-    public EntityPlayerMP getLoveCause()
-    {
-        if (this.playerInLove == null)
-        {
+    public EntityPlayerMP getLoveCause() {
+        if (this.playerInLove == null) {
             return null;
-        }
-        else
-        {
+        } else {
             EntityPlayer entityplayer = this.world.getPlayerEntityByUUID(this.playerInLove);
-            return entityplayer instanceof EntityPlayerMP ? (EntityPlayerMP)entityplayer : null;
+            return entityplayer instanceof EntityPlayerMP ? (EntityPlayerMP) entityplayer : null;
         }
     }
 
-    public boolean isInLove()
-    {
+    public boolean isInLove() {
         return this.inLove > 0;
     }
 
-    public void resetInLove()
-    {
+    public void resetInLove() {
         this.inLove = 0;
     }
 
-    public boolean canMateWith(EntityAnimal otherAnimal)
-    {
-        if (otherAnimal == this)
-        {
+    public boolean canMateWith(EntityAnimal otherAnimal) {
+        if (otherAnimal == this) {
             return false;
-        }
-        else if (otherAnimal.getClass() != this.getClass())
-        {
+        } else if (otherAnimal.getClass() != this.getClass()) {
             return false;
-        }
-        else
-        {
+        } else {
             return this.isInLove() && otherAnimal.isInLove();
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 18)
-        {
-            for (int i = 0; i < 7; ++i)
-            {
+    public void handleStatusUpdate(byte id) {
+        if (id == 18) {
+            for (int i = 0; i < 7; ++i) {
                 double d0 = this.rand.nextGaussian() * 0.02D;
                 double d1 = this.rand.nextGaussian() * 0.02D;
                 double d2 = this.rand.nextGaussian() * 0.02D;
-                this.world.spawnParticle(EnumParticleTypes.HEART, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2);
+                this.world.spawnParticle(EnumParticleTypes.HEART, this.posX + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, this.posY + 0.5D + (double) (this.rand.nextFloat() * this.height), this.posZ + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
             }
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
