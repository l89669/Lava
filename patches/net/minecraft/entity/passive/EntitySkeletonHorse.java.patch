--- ../src-base/minecraft/net/minecraft/entity/passive/EntitySkeletonHorse.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntitySkeletonHorse.java
@@ -1,6 +1,5 @@
 package net.minecraft.entity.passive;
 
-import javax.annotation.Nullable;
 import net.minecraft.entity.EnumCreatureAttribute;
 import net.minecraft.entity.SharedMonsterAttributes;
 import net.minecraft.entity.ai.EntityAISkeletonRiders;
@@ -17,148 +16,115 @@
 import net.minecraft.world.World;
 import net.minecraft.world.storage.loot.LootTableList;
 
-public class EntitySkeletonHorse extends AbstractHorse
-{
+import javax.annotation.Nullable;
+
+public class EntitySkeletonHorse extends AbstractHorse {
     private final EntityAISkeletonRiders skeletonTrapAI = new EntityAISkeletonRiders(this);
     private boolean skeletonTrap;
     private int skeletonTrapTime;
 
-    public EntitySkeletonHorse(World worldIn)
-    {
+    public EntitySkeletonHorse(World worldIn) {
         super(worldIn);
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(15.0D);
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.20000000298023224D);
         this.getEntityAttribute(JUMP_STRENGTH).setBaseValue(this.getModifiedJumpStrength());
     }
 
-    protected SoundEvent getAmbientSound()
-    {
+    protected SoundEvent getAmbientSound() {
         super.getAmbientSound();
         return SoundEvents.ENTITY_SKELETON_HORSE_AMBIENT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         super.getDeathSound();
         return SoundEvents.ENTITY_SKELETON_HORSE_DEATH;
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         super.getHurtSound(damageSourceIn);
         return SoundEvents.ENTITY_SKELETON_HORSE_HURT;
     }
 
-    public EnumCreatureAttribute getCreatureAttribute()
-    {
+    public EnumCreatureAttribute getCreatureAttribute() {
         return EnumCreatureAttribute.UNDEAD;
     }
 
-    public double getMountedYOffset()
-    {
+    public double getMountedYOffset() {
         return super.getMountedYOffset() - 0.1875D;
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_SKELETON_HORSE;
     }
 
-    public void onLivingUpdate()
-    {
+    public void onLivingUpdate() {
         super.onLivingUpdate();
 
-        if (this.isTrap() && this.skeletonTrapTime++ >= 18000)
-        {
+        if (this.isTrap() && this.skeletonTrapTime++ >= 18000) {
             this.setDead();
         }
     }
 
-    public static void registerFixesSkeletonHorse(DataFixer fixer)
-    {
+    public static void registerFixesSkeletonHorse(DataFixer fixer) {
         AbstractHorse.registerFixesAbstractHorse(fixer, EntitySkeletonHorse.class);
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setBoolean("SkeletonTrap", this.isTrap());
         compound.setInteger("SkeletonTrapTime", this.skeletonTrapTime);
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.setTrap(compound.getBoolean("SkeletonTrap"));
         this.skeletonTrapTime = compound.getInteger("SkeletonTrapTime");
     }
 
-    public boolean isTrap()
-    {
+    public boolean isTrap() {
         return this.skeletonTrap;
     }
 
-    public void setTrap(boolean trap)
-    {
-        if (trap != this.skeletonTrap)
-        {
+    public void setTrap(boolean trap) {
+        if (trap != this.skeletonTrap) {
             this.skeletonTrap = trap;
 
-            if (trap)
-            {
+            if (trap) {
                 this.tasks.addTask(1, this.skeletonTrapAI);
-            }
-            else
-            {
+            } else {
                 this.tasks.removeTask(this.skeletonTrapAI);
             }
         }
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
         ItemStack itemstack = player.getHeldItem(hand);
         boolean flag = !itemstack.isEmpty();
 
-        if (flag && itemstack.getItem() == Items.SPAWN_EGG)
-        {
+        if (flag && itemstack.getItem() == Items.SPAWN_EGG) {
             return super.processInteract(player, hand);
-        }
-        else if (!this.isTame())
-        {
+        } else if (!this.isTame()) {
             return false;
-        }
-        else if (this.isChild())
-        {
+        } else if (this.isChild()) {
             return super.processInteract(player, hand);
-        }
-        else if (player.isSneaking())
-        {
+        } else if (player.isSneaking()) {
             this.openGUI(player);
             return true;
-        }
-        else if (this.isBeingRidden())
-        {
+        } else if (this.isBeingRidden()) {
             return super.processInteract(player, hand);
-        }
-        else
-        {
-            if (flag)
-            {
-                if (itemstack.getItem() == Items.SADDLE && !this.isHorseSaddled())
-                {
+        } else {
+            if (flag) {
+                if (itemstack.getItem() == Items.SADDLE && !this.isHorseSaddled()) {
                     this.openGUI(player);
                     return true;
                 }
 
-                if (itemstack.interactWithEntity(player, this, hand))
-                {
+                if (itemstack.interactWithEntity(player, this, hand)) {
                     return true;
                 }
             }
