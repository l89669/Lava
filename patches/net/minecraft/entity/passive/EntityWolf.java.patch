--- ../src-base/minecraft/net/minecraft/entity/passive/EntityWolf.java
+++ ../src-work/minecraft/net/minecraft/entity/passive/EntityWolf.java
@@ -1,30 +1,9 @@
 package net.minecraft.entity.passive;
 
 import com.google.common.base.Predicate;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityAgeable;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.SharedMonsterAttributes;
-import net.minecraft.entity.ai.EntityAIAttackMelee;
-import net.minecraft.entity.ai.EntityAIAvoidEntity;
-import net.minecraft.entity.ai.EntityAIBeg;
-import net.minecraft.entity.ai.EntityAIFollowOwner;
-import net.minecraft.entity.ai.EntityAIHurtByTarget;
-import net.minecraft.entity.ai.EntityAILeapAtTarget;
-import net.minecraft.entity.ai.EntityAILookIdle;
-import net.minecraft.entity.ai.EntityAIMate;
-import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
-import net.minecraft.entity.ai.EntityAIOwnerHurtByTarget;
-import net.minecraft.entity.ai.EntityAIOwnerHurtTarget;
-import net.minecraft.entity.ai.EntityAISit;
-import net.minecraft.entity.ai.EntityAISwimming;
-import net.minecraft.entity.ai.EntityAITargetNonTamed;
-import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
-import net.minecraft.entity.ai.EntityAIWatchClosest;
+import net.minecraft.entity.*;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.monster.AbstractSkeleton;
 import net.minecraft.entity.monster.EntityCreeper;
 import net.minecraft.entity.monster.EntityGhast;
@@ -39,11 +18,7 @@
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SoundEvent;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
@@ -51,9 +26,13 @@
 import net.minecraft.world.storage.loot.LootTableList;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
 
-public class EntityWolf extends EntityTameable
-{
+import javax.annotation.Nullable;
+import java.util.UUID;
+
+public class EntityWolf extends EntityTameable {
     private static final DataParameter<Float> DATA_HEALTH_ID = EntityDataManager.<Float>createKey(EntityWolf.class, DataSerializers.FLOAT);
     private static final DataParameter<Boolean> BEGGING = EntityDataManager.<Boolean>createKey(EntityWolf.class, DataSerializers.BOOLEAN);
     private static final DataParameter<Integer> COLLAR_COLOR = EntityDataManager.<Integer>createKey(EntityWolf.class, DataSerializers.VARINT);
@@ -64,19 +43,17 @@
     private float timeWolfIsShaking;
     private float prevTimeWolfIsShaking;
 
-    public EntityWolf(World worldIn)
-    {
+    public EntityWolf(World worldIn) {
         super(worldIn);
         this.setSize(0.6F, 0.85F);
         this.setTamed(false);
     }
 
-    protected void initEntityAI()
-    {
+    protected void initEntityAI() {
         this.aiSit = new EntityAISit(this);
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(2, this.aiSit);
-        this.tasks.addTask(3, new EntityWolf.AIAvoidEntity(this, EntityLlama.class, 24.0F, 1.5D, 1.5D));
+        this.tasks.addTask(3, new AIAvoidEntity(this, EntityLlama.class, 24.0F, 1.5D, 1.5D));
         this.tasks.addTask(4, new EntityAILeapAtTarget(this, 0.4F));
         this.tasks.addTask(5, new EntityAIAttackMelee(this, 1.0D, true));
         this.tasks.addTask(6, new EntityAIFollowOwner(this, 1.0D, 10.0F, 2.0F));
@@ -88,259 +65,220 @@
         this.targetTasks.addTask(1, new EntityAIOwnerHurtByTarget(this));
         this.targetTasks.addTask(2, new EntityAIOwnerHurtTarget(this));
         this.targetTasks.addTask(3, new EntityAIHurtByTarget(this, true, new Class[0]));
-        this.targetTasks.addTask(4, new EntityAITargetNonTamed(this, EntityAnimal.class, false, new Predicate<Entity>()
-        {
-            public boolean apply(@Nullable Entity p_apply_1_)
-            {
+        this.targetTasks.addTask(4, new EntityAITargetNonTamed(this, EntityAnimal.class, false, new Predicate<Entity>() {
+            public boolean apply(@Nullable Entity p_apply_1_) {
                 return p_apply_1_ instanceof EntitySheep || p_apply_1_ instanceof EntityRabbit;
             }
         }));
         this.targetTasks.addTask(5, new EntityAINearestAttackableTarget(this, AbstractSkeleton.class, false));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         super.applyEntityAttributes();
         this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
 
-        if (this.isTamed())
-        {
+        if (this.isTamed()) {
             this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D);
-        }
-        else
-        {
+        } else {
             this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
         }
 
         this.getAttributeMap().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0D);
     }
 
-    public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn)
-    {
+    // CraftBukkit - add overriden version
+    @Override
+    public boolean setAttackTarget(@Nullable EntityLivingBase entityliving, EntityTargetEvent.TargetReason reason, boolean fire) {
+        if (!super.setAttackTarget(entityliving, reason, fire)) {
+            return false;
+        }
+        entityliving = getAttackTarget();
+        if (entityliving == null) {
+            this.setAngry(false);
+        } else if (!this.isTamed()) {
+            this.setAngry(true);
+        }
+        return true;
+    }
+    // CraftBukkit end
+
+    public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn) {
         super.setAttackTarget(entitylivingbaseIn);
 
-        if (entitylivingbaseIn == null)
-        {
+        if (entitylivingbaseIn == null) {
             this.setAngry(false);
-        }
-        else if (!this.isTamed())
-        {
+        } else if (!this.isTamed()) {
             this.setAngry(true);
         }
     }
 
-    protected void updateAITasks()
-    {
+    protected void updateAITasks() {
         this.dataManager.set(DATA_HEALTH_ID, Float.valueOf(this.getHealth()));
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         super.entityInit();
         this.dataManager.register(DATA_HEALTH_ID, Float.valueOf(this.getHealth()));
         this.dataManager.register(BEGGING, Boolean.valueOf(false));
         this.dataManager.register(COLLAR_COLOR, Integer.valueOf(EnumDyeColor.RED.getDyeDamage()));
     }
 
-    protected void playStepSound(BlockPos pos, Block blockIn)
-    {
+    protected void playStepSound(BlockPos pos, Block blockIn) {
         this.playSound(SoundEvents.ENTITY_WOLF_STEP, 0.15F, 1.0F);
     }
 
-    public static void registerFixesWolf(DataFixer fixer)
-    {
+    public static void registerFixesWolf(DataFixer fixer) {
         EntityLiving.registerFixesMob(fixer, EntityWolf.class);
     }
 
-    public void writeEntityToNBT(NBTTagCompound compound)
-    {
+    public void writeEntityToNBT(NBTTagCompound compound) {
         super.writeEntityToNBT(compound);
         compound.setBoolean("Angry", this.isAngry());
-        compound.setByte("CollarColor", (byte)this.getCollarColor().getDyeDamage());
+        compound.setByte("CollarColor", (byte) this.getCollarColor().getDyeDamage());
     }
 
-    public void readEntityFromNBT(NBTTagCompound compound)
-    {
+    public void readEntityFromNBT(NBTTagCompound compound) {
         super.readEntityFromNBT(compound);
         this.setAngry(compound.getBoolean("Angry"));
 
-        if (compound.hasKey("CollarColor", 99))
-        {
+        if (compound.hasKey("CollarColor", 99)) {
             this.setCollarColor(EnumDyeColor.byDyeDamage(compound.getByte("CollarColor")));
         }
     }
 
-    protected SoundEvent getAmbientSound()
-    {
-        if (this.isAngry())
-        {
+    protected SoundEvent getAmbientSound() {
+        if (this.isAngry()) {
             return SoundEvents.ENTITY_WOLF_GROWL;
-        }
-        else if (this.rand.nextInt(3) == 0)
-        {
-            return this.isTamed() && ((Float)this.dataManager.get(DATA_HEALTH_ID)).floatValue() < 10.0F ? SoundEvents.ENTITY_WOLF_WHINE : SoundEvents.ENTITY_WOLF_PANT;
-        }
-        else
-        {
+        } else if (this.rand.nextInt(3) == 0) {
+            return this.isTamed() && ((Float) this.dataManager.get(DATA_HEALTH_ID)).floatValue() < 10.0F ? SoundEvents.ENTITY_WOLF_WHINE : SoundEvents.ENTITY_WOLF_PANT;
+        } else {
             return SoundEvents.ENTITY_WOLF_AMBIENT;
         }
     }
 
-    protected SoundEvent getHurtSound(DamageSource damageSourceIn)
-    {
+    protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
         return SoundEvents.ENTITY_WOLF_HURT;
     }
 
-    protected SoundEvent getDeathSound()
-    {
+    protected SoundEvent getDeathSound() {
         return SoundEvents.ENTITY_WOLF_DEATH;
     }
 
-    protected float getSoundVolume()
-    {
+    protected float getSoundVolume() {
         return 0.4F;
     }
 
     @Nullable
-    protected ResourceLocation getLootTable()
-    {
+    protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_WOLF;
     }
 
-    public void onLivingUpdate()
-    {
+    public void onLivingUpdate() {
         super.onLivingUpdate();
 
-        if (!this.world.isRemote && this.isWet && !this.isShaking && !this.hasPath() && this.onGround)
-        {
+        if (!this.world.isRemote && this.isWet && !this.isShaking && !this.hasPath() && this.onGround) {
             this.isShaking = true;
             this.timeWolfIsShaking = 0.0F;
             this.prevTimeWolfIsShaking = 0.0F;
-            this.world.setEntityState(this, (byte)8);
+            this.world.setEntityState(this, (byte) 8);
         }
 
-        if (!this.world.isRemote && this.getAttackTarget() == null && this.isAngry())
-        {
+        if (!this.world.isRemote && this.getAttackTarget() == null && this.isAngry()) {
             this.setAngry(false);
         }
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
         this.headRotationCourseOld = this.headRotationCourse;
 
-        if (this.isBegging())
-        {
+        if (this.isBegging()) {
             this.headRotationCourse += (1.0F - this.headRotationCourse) * 0.4F;
-        }
-        else
-        {
+        } else {
             this.headRotationCourse += (0.0F - this.headRotationCourse) * 0.4F;
         }
 
-        if (this.isWet())
-        {
+        if (this.isWet()) {
             this.isWet = true;
             this.isShaking = false;
             this.timeWolfIsShaking = 0.0F;
             this.prevTimeWolfIsShaking = 0.0F;
-        }
-        else if ((this.isWet || this.isShaking) && this.isShaking)
-        {
-            if (this.timeWolfIsShaking == 0.0F)
-            {
+        } else if ((this.isWet || this.isShaking) && this.isShaking) {
+            if (this.timeWolfIsShaking == 0.0F) {
                 this.playSound(SoundEvents.ENTITY_WOLF_SHAKE, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
             }
 
             this.prevTimeWolfIsShaking = this.timeWolfIsShaking;
             this.timeWolfIsShaking += 0.05F;
 
-            if (this.prevTimeWolfIsShaking >= 2.0F)
-            {
+            if (this.prevTimeWolfIsShaking >= 2.0F) {
                 this.isWet = false;
                 this.isShaking = false;
                 this.prevTimeWolfIsShaking = 0.0F;
                 this.timeWolfIsShaking = 0.0F;
             }
 
-            if (this.timeWolfIsShaking > 0.4F)
-            {
-                float f = (float)this.getEntityBoundingBox().minY;
-                int i = (int)(MathHelper.sin((this.timeWolfIsShaking - 0.4F) * (float)Math.PI) * 7.0F);
+            if (this.timeWolfIsShaking > 0.4F) {
+                float f = (float) this.getEntityBoundingBox().minY;
+                int i = (int) (MathHelper.sin((this.timeWolfIsShaking - 0.4F) * (float) Math.PI) * 7.0F);
 
-                for (int j = 0; j < i; ++j)
-                {
+                for (int j = 0; j < i; ++j) {
                     float f1 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
                     float f2 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
-                    this.world.spawnParticle(EnumParticleTypes.WATER_SPLASH, this.posX + (double)f1, (double)(f + 0.8F), this.posZ + (double)f2, this.motionX, this.motionY, this.motionZ);
+                    this.world.spawnParticle(EnumParticleTypes.WATER_SPLASH, this.posX + (double) f1, (double) (f + 0.8F), this.posZ + (double) f2, this.motionX, this.motionY, this.motionZ);
                 }
             }
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isWolfWet()
-    {
+    public boolean isWolfWet() {
         return this.isWet;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getShadingWhileWet(float p_70915_1_)
-    {
+    public float getShadingWhileWet(float p_70915_1_) {
         return 0.75F + (this.prevTimeWolfIsShaking + (this.timeWolfIsShaking - this.prevTimeWolfIsShaking) * p_70915_1_) / 2.0F * 0.25F;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getShakeAngle(float p_70923_1_, float p_70923_2_)
-    {
+    public float getShakeAngle(float p_70923_1_, float p_70923_2_) {
         float f = (this.prevTimeWolfIsShaking + (this.timeWolfIsShaking - this.prevTimeWolfIsShaking) * p_70923_1_ + p_70923_2_) / 1.8F;
 
-        if (f < 0.0F)
-        {
+        if (f < 0.0F) {
             f = 0.0F;
-        }
-        else if (f > 1.0F)
-        {
+        } else if (f > 1.0F) {
             f = 1.0F;
         }
 
-        return MathHelper.sin(f * (float)Math.PI) * MathHelper.sin(f * (float)Math.PI * 11.0F) * 0.15F * (float)Math.PI;
+        return MathHelper.sin(f * (float) Math.PI) * MathHelper.sin(f * (float) Math.PI * 11.0F) * 0.15F * (float) Math.PI;
     }
 
     @SideOnly(Side.CLIENT)
-    public float getInterestedAngle(float p_70917_1_)
-    {
-        return (this.headRotationCourseOld + (this.headRotationCourse - this.headRotationCourseOld) * p_70917_1_) * 0.15F * (float)Math.PI;
+    public float getInterestedAngle(float p_70917_1_) {
+        return (this.headRotationCourseOld + (this.headRotationCourse - this.headRotationCourseOld) * p_70917_1_) * 0.15F * (float) Math.PI;
     }
 
-    public float getEyeHeight()
-    {
+    public float getEyeHeight() {
         return this.height * 0.8F;
     }
 
-    public int getVerticalFaceSpeed()
-    {
+    public int getVerticalFaceSpeed() {
         return this.isSitting() ? 20 : super.getVerticalFaceSpeed();
     }
 
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (this.isEntityInvulnerable(source))
-        {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (this.isEntityInvulnerable(source)) {
             return false;
-        }
-        else
-        {
+        } else {
             Entity entity = source.getTrueSource();
 
-            if (this.aiSit != null)
-            {
-                this.aiSit.setSitting(false);
+            if (this.aiSit != null) {
+                // CraftBukkit - moved into EntityLiving.damageEntity_CB(DamageSource, float)
+                // this.aiSit.setSitting(false);
             }
 
-            if (entity != null && !(entity instanceof EntityPlayer) && !(entity instanceof EntityArrow))
-            {
+            if (entity != null && !(entity instanceof EntityPlayer) && !(entity instanceof EntityArrow)) {
                 amount = (amount + 1.0F) / 2.0F;
             }
 
@@ -348,67 +286,51 @@
         }
     }
 
-    public boolean attackEntityAsMob(Entity entityIn)
-    {
-        boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), (float)((int)this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue()));
+    public boolean attackEntityAsMob(Entity entityIn) {
+        boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), (float) ((int) this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue()));
 
-        if (flag)
-        {
+        if (flag) {
             this.applyEnchantments(this, entityIn);
         }
 
         return flag;
     }
 
-    public void setTamed(boolean tamed)
-    {
+    public void setTamed(boolean tamed) {
         super.setTamed(tamed);
 
-        if (tamed)
-        {
+        if (tamed) {
             this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D);
-        }
-        else
-        {
+        } else {
             this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
         }
 
         this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(4.0D);
     }
 
-    public boolean processInteract(EntityPlayer player, EnumHand hand)
-    {
+    public boolean processInteract(EntityPlayer player, EnumHand hand) {
         ItemStack itemstack = player.getHeldItem(hand);
 
-        if (this.isTamed())
-        {
-            if (!itemstack.isEmpty())
-            {
-                if (itemstack.getItem() instanceof ItemFood)
-                {
-                    ItemFood itemfood = (ItemFood)itemstack.getItem();
+        if (this.isTamed()) {
+            if (!itemstack.isEmpty()) {
+                if (itemstack.getItem() instanceof ItemFood) {
+                    ItemFood itemfood = (ItemFood) itemstack.getItem();
 
-                    if (itemfood.isWolfsFavoriteMeat() && ((Float)this.dataManager.get(DATA_HEALTH_ID)).floatValue() < 20.0F)
-                    {
-                        if (!player.capabilities.isCreativeMode)
-                        {
+                    if (itemfood.isWolfsFavoriteMeat() && ((Float) this.dataManager.get(DATA_HEALTH_ID)).floatValue() < 20.0F) {
+                        if (!player.capabilities.isCreativeMode) {
                             itemstack.shrink(1);
                         }
 
-                        this.heal((float)itemfood.getHealAmount(itemstack));
+                        this.heal((float) itemfood.getHealAmount(itemstack), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.EATING);
                         return true;
                     }
-                }
-                else if (itemstack.getItem() == Items.DYE)
-                {
+                } else if (itemstack.getItem() == Items.DYE) {
                     EnumDyeColor enumdyecolor = EnumDyeColor.byDyeDamage(itemstack.getMetadata());
 
-                    if (enumdyecolor != this.getCollarColor())
-                    {
+                    if (enumdyecolor != this.getCollarColor()) {
                         this.setCollarColor(enumdyecolor);
 
-                        if (!player.capabilities.isCreativeMode)
-                        {
+                        if (!player.capabilities.isCreativeMode) {
                             itemstack.shrink(1);
                         }
 
@@ -417,37 +339,32 @@
                 }
             }
 
-            if (this.isOwner(player) && !this.world.isRemote && !this.isBreedingItem(itemstack))
-            {
+            if (this.isOwner(player) && !this.world.isRemote && !this.isBreedingItem(itemstack)) {
                 this.aiSit.setSitting(!this.isSitting());
                 this.isJumping = false;
                 this.navigator.clearPath();
-                this.setAttackTarget((EntityLivingBase)null);
+                this.setAttackTarget((EntityLivingBase) null, EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
             }
-        }
-        else if (itemstack.getItem() == Items.BONE && !this.isAngry())
-        {
-            if (!player.capabilities.isCreativeMode)
-            {
+        } else if (itemstack.getItem() == Items.BONE && !this.isAngry()) {
+            if (!player.capabilities.isCreativeMode) {
                 itemstack.shrink(1);
             }
 
-            if (!this.world.isRemote)
-            {
-                if (this.rand.nextInt(3) == 0 && !net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, player))
-                {
+            if (!this.world.isRemote) {
+                // CraftBukkit - added event call and isCancelled check.
+                if (this.rand.nextInt(3) == 0 && !net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, player) && !CraftEventFactory.callEntityTameEvent(this, player).isCancelled()) {
                     this.setTamedBy(player);
                     this.navigator.clearPath();
-                    this.setAttackTarget((EntityLivingBase)null);
+                    this.setAttackTarget((EntityLivingBase) null);
                     this.aiSit.setSitting(true);
-                    this.setHealth(20.0F);
+                    // CraftBukkit - 20.0 -> getMaxHealth()
+                    // this.setHealth(20.0F);
+                    this.setHealth(this.getMaxHealth());
                     this.playTameEffect(true);
-                    this.world.setEntityState(this, (byte)7);
-                }
-                else
-                {
+                    this.world.setEntityState(this, (byte) 7);
+                } else {
                     this.playTameEffect(false);
-                    this.world.setEntityState(this, (byte)6);
+                    this.world.setEntityState(this, (byte) 6);
                 }
             }
 
@@ -458,79 +375,60 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 8)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 8) {
             this.isShaking = true;
             this.timeWolfIsShaking = 0.0F;
             this.prevTimeWolfIsShaking = 0.0F;
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public float getTailRotation()
-    {
-        if (this.isAngry())
-        {
+    public float getTailRotation() {
+        if (this.isAngry()) {
             return 1.5393804F;
+        } else {
+            return this.isTamed() ? (0.55F - (this.getMaxHealth() - ((Float) this.dataManager.get(DATA_HEALTH_ID)).floatValue()) * 0.02F) * (float) Math.PI : ((float) Math.PI / 5F);
         }
-        else
-        {
-            return this.isTamed() ? (0.55F - (this.getMaxHealth() - ((Float)this.dataManager.get(DATA_HEALTH_ID)).floatValue()) * 0.02F) * (float)Math.PI : ((float)Math.PI / 5F);
-        }
     }
 
-    public boolean isBreedingItem(ItemStack stack)
-    {
-        return stack.getItem() instanceof ItemFood && ((ItemFood)stack.getItem()).isWolfsFavoriteMeat();
+    public boolean isBreedingItem(ItemStack stack) {
+        return stack.getItem() instanceof ItemFood && ((ItemFood) stack.getItem()).isWolfsFavoriteMeat();
     }
 
-    public int getMaxSpawnedInChunk()
-    {
+    public int getMaxSpawnedInChunk() {
         return 8;
     }
 
-    public boolean isAngry()
-    {
-        return (((Byte)this.dataManager.get(TAMED)).byteValue() & 2) != 0;
+    public boolean isAngry() {
+        return (((Byte) this.dataManager.get(TAMED)).byteValue() & 2) != 0;
     }
 
-    public void setAngry(boolean angry)
-    {
-        byte b0 = ((Byte)this.dataManager.get(TAMED)).byteValue();
+    public void setAngry(boolean angry) {
+        byte b0 = ((Byte) this.dataManager.get(TAMED)).byteValue();
 
-        if (angry)
-        {
-            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 | 2)));
+        if (angry) {
+            this.dataManager.set(TAMED, Byte.valueOf((byte) (b0 | 2)));
+        } else {
+            this.dataManager.set(TAMED, Byte.valueOf((byte) (b0 & -3)));
         }
-        else
-        {
-            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 & -3)));
-        }
     }
 
-    public EnumDyeColor getCollarColor()
-    {
-        return EnumDyeColor.byDyeDamage(((Integer)this.dataManager.get(COLLAR_COLOR)).intValue() & 15);
+    public EnumDyeColor getCollarColor() {
+        return EnumDyeColor.byDyeDamage(((Integer) this.dataManager.get(COLLAR_COLOR)).intValue() & 15);
     }
 
-    public void setCollarColor(EnumDyeColor collarcolor)
-    {
+    public void setCollarColor(EnumDyeColor collarcolor) {
         this.dataManager.set(COLLAR_COLOR, Integer.valueOf(collarcolor.getDyeDamage()));
     }
 
-    public EntityWolf createChild(EntityAgeable ageable)
-    {
+    public EntityWolf createChild(EntityAgeable ageable) {
         EntityWolf entitywolf = new EntityWolf(this.world);
         UUID uuid = this.getOwnerId();
 
-        if (uuid != null)
-        {
+        if (uuid != null) {
             entitywolf.setOwnerId(uuid);
             entitywolf.setTamed(true);
         }
@@ -538,119 +436,85 @@
         return entitywolf;
     }
 
-    public void setBegging(boolean beg)
-    {
+    public void setBegging(boolean beg) {
         this.dataManager.set(BEGGING, Boolean.valueOf(beg));
     }
 
-    public boolean canMateWith(EntityAnimal otherAnimal)
-    {
-        if (otherAnimal == this)
-        {
+    public boolean canMateWith(EntityAnimal otherAnimal) {
+        if (otherAnimal == this) {
             return false;
-        }
-        else if (!this.isTamed())
-        {
+        } else if (!this.isTamed()) {
             return false;
-        }
-        else if (!(otherAnimal instanceof EntityWolf))
-        {
+        } else if (!(otherAnimal instanceof EntityWolf)) {
             return false;
-        }
-        else
-        {
-            EntityWolf entitywolf = (EntityWolf)otherAnimal;
+        } else {
+            EntityWolf entitywolf = (EntityWolf) otherAnimal;
 
-            if (!entitywolf.isTamed())
-            {
+            if (!entitywolf.isTamed()) {
                 return false;
-            }
-            else if (entitywolf.isSitting())
-            {
+            } else if (entitywolf.isSitting()) {
                 return false;
-            }
-            else
-            {
+            } else {
                 return this.isInLove() && entitywolf.isInLove();
             }
         }
     }
 
-    public boolean isBegging()
-    {
-        return ((Boolean)this.dataManager.get(BEGGING)).booleanValue();
+    public boolean isBegging() {
+        return ((Boolean) this.dataManager.get(BEGGING)).booleanValue();
     }
 
-    public boolean shouldAttackEntity(EntityLivingBase target, EntityLivingBase owner)
-    {
-        if (!(target instanceof EntityCreeper) && !(target instanceof EntityGhast))
-        {
-            if (target instanceof EntityWolf)
-            {
-                EntityWolf entitywolf = (EntityWolf)target;
+    public boolean shouldAttackEntity(EntityLivingBase target, EntityLivingBase owner) {
+        if (!(target instanceof EntityCreeper) && !(target instanceof EntityGhast)) {
+            if (target instanceof EntityWolf) {
+                EntityWolf entitywolf = (EntityWolf) target;
 
-                if (entitywolf.isTamed() && entitywolf.getOwner() == owner)
-                {
+                if (entitywolf.isTamed() && entitywolf.getOwner() == owner) {
                     return false;
                 }
             }
 
-            if (target instanceof EntityPlayer && owner instanceof EntityPlayer && !((EntityPlayer)owner).canAttackPlayer((EntityPlayer)target))
-            {
+            if (target instanceof EntityPlayer && owner instanceof EntityPlayer && !((EntityPlayer) owner).canAttackPlayer((EntityPlayer) target)) {
                 return false;
+            } else {
+                return !(target instanceof AbstractHorse) || !((AbstractHorse) target).isTame();
             }
-            else
-            {
-                return !(target instanceof AbstractHorse) || !((AbstractHorse)target).isTame();
-            }
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public boolean canBeLeashedTo(EntityPlayer player)
-    {
+    public boolean canBeLeashedTo(EntityPlayer player) {
         return !this.isAngry() && super.canBeLeashedTo(player);
     }
 
-    class AIAvoidEntity<T extends Entity> extends EntityAIAvoidEntity<T>
-    {
+    class AIAvoidEntity<T extends Entity> extends EntityAIAvoidEntity<T> {
         private final EntityWolf wolf;
 
-        public AIAvoidEntity(EntityWolf wolfIn, Class<T> p_i47251_3_, float p_i47251_4_, double p_i47251_5_, double p_i47251_7_)
-        {
+        public AIAvoidEntity(EntityWolf wolfIn, Class<T> p_i47251_3_, float p_i47251_4_, double p_i47251_5_, double p_i47251_7_) {
             super(wolfIn, p_i47251_3_, p_i47251_4_, p_i47251_5_, p_i47251_7_);
             this.wolf = wolfIn;
         }
 
-        public boolean shouldExecute()
-        {
-            if (super.shouldExecute() && this.closestLivingEntity instanceof EntityLlama)
-            {
-                return !this.wolf.isTamed() && this.avoidLlama((EntityLlama)this.closestLivingEntity);
-            }
-            else
-            {
+        public boolean shouldExecute() {
+            if (super.shouldExecute() && this.closestLivingEntity instanceof EntityLlama) {
+                return !this.wolf.isTamed() && this.avoidLlama((EntityLlama) this.closestLivingEntity);
+            } else {
                 return false;
             }
         }
 
-        private boolean avoidLlama(EntityLlama p_190854_1_)
-        {
+        private boolean avoidLlama(EntityLlama p_190854_1_) {
             return p_190854_1_.getStrength() >= EntityWolf.this.rand.nextInt(5);
         }
 
-        public void startExecuting()
-        {
-            EntityWolf.this.setAttackTarget((EntityLivingBase)null);
+        public void startExecuting() {
+            EntityWolf.this.setAttackTarget((EntityLivingBase) null);
             super.startExecuting();
         }
 
-        public void updateTask()
-        {
-            EntityWolf.this.setAttackTarget((EntityLivingBase)null);
+        public void updateTask() {
+            EntityWolf.this.setAttackTarget((EntityLivingBase) null);
             super.updateTask();
         }
     }
