--- ../src-base/minecraft/net/minecraft/tileentity/TileEntitySign.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntitySign.java
@@ -1,6 +1,5 @@
 package net.minecraft.tileentity;
 
-import javax.annotation.Nullable;
 import net.minecraft.command.CommandException;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandSender;
@@ -20,188 +19,207 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class TileEntitySign extends TileEntity
-{
-    public final ITextComponent[] signText = new ITextComponent[] {new TextComponentString(""), new TextComponentString(""), new TextComponentString(""), new TextComponentString("")};
+import javax.annotation.Nullable;
+
+public class TileEntitySign extends TileEntity {
+    public final ITextComponent[] signText = new ITextComponent[]{new TextComponentString(""), new TextComponentString(""), new TextComponentString(""), new TextComponentString("")};
     public int lineBeingEdited = -1;
-    private boolean isEditable = true;
+    public boolean isEditable = true;
     private EntityPlayer player;
     private final CommandResultStats stats = new CommandResultStats();
+    private static final boolean CONVERT_LEGACY_SIGNS = Boolean.getBoolean("convertLegacySigns");
+    public java.util.UUID signEditor; // Paper
 
-    public NBTTagCompound writeToNBT(NBTTagCompound compound)
-    {
+    public NBTTagCompound writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
 
-        for (int i = 0; i < 4; ++i)
-        {
+        for (int i = 0; i < 4; ++i) {
             String s = ITextComponent.Serializer.componentToJson(this.signText[i]);
             compound.setString("Text" + (i + 1), s);
         }
 
+        if (CONVERT_LEGACY_SIGNS) { // Paper
+            compound.setBoolean("Bukkit.isConverted", true);
+        }
+
         this.stats.writeStatsToNBT(compound);
         return compound;
     }
 
-    protected void setWorldCreate(World worldIn)
-    {
+    protected void setWorldCreate(World worldIn) {
         this.setWorld(worldIn);
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         this.isEditable = false;
         super.readFromNBT(compound);
-        ICommandSender icommandsender = new ICommandSender()
-        {
-            public String getName()
-            {
+        ICommandSender icommandsender = new ICommandSender() {
+            public String getName() {
                 return "Sign";
             }
-            public boolean canUseCommand(int permLevel, String commandName)
-            {
+
+            public boolean canUseCommand(int permLevel, String commandName) {
                 return permLevel <= 2; //Forge: Fixes  MC-75630 - Exploit with signs and command blocks
             }
-            public BlockPos getPosition()
-            {
+
+            public boolean canUseCommand(int permLevel, String commandName, String perm) {
+                return permLevel <= 2; //Forge: Fixes  MC-75630 - Exploit with signs and command blocks
+            }
+
+            public BlockPos getPosition() {
                 return TileEntitySign.this.pos;
             }
-            public Vec3d getPositionVector()
-            {
-                return new Vec3d((double)TileEntitySign.this.pos.getX() + 0.5D, (double)TileEntitySign.this.pos.getY() + 0.5D, (double)TileEntitySign.this.pos.getZ() + 0.5D);
+
+            public Vec3d getPositionVector() {
+                return new Vec3d((double) TileEntitySign.this.pos.getX() + 0.5D, (double) TileEntitySign.this.pos.getY() + 0.5D, (double) TileEntitySign.this.pos.getZ() + 0.5D);
             }
-            public World getEntityWorld()
-            {
+
+            public World getEntityWorld() {
                 return TileEntitySign.this.world;
             }
-            public MinecraftServer getServer()
-            {
+
+            public MinecraftServer getServer() {
                 return TileEntitySign.this.world.getMinecraftServer();
             }
         };
 
-        for (int i = 0; i < 4; ++i)
-        {
+        // CraftBukkit start - Add an option to convert signs correctly
+        // This is done with a flag instead of all the time because
+        // we have no way to tell whether a sign is from 1.7.10 or 1.8
+
+        boolean oldSign = Boolean.getBoolean("convertLegacySigns") && !compound.getBoolean("Bukkit.isConverted");
+
+        for (int i = 0; i < 4; ++i) {
             String s = compound.getString("Text" + (i + 1));
-            ITextComponent itextcomponent = ITextComponent.Serializer.jsonToComponent(s);
+            // ITextComponent itextcomponent = ITextComponent.Serializer.jsonToComponent(s);
+            if (s != null && s.length() > 2048) {
+                s = "\"\"";
+            }
 
-            try
-            {
-                this.signText[i] = TextComponentUtils.processComponent(icommandsender, itextcomponent, (Entity)null);
+            try {
+                ITextComponent ichatbasecomponent = ITextComponent.Serializer.jsonToComponent(s);
+
+                if (oldSign) {
+                    signText[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
+                    continue;
+                }
+                // CraftBukkit end
+
+                try {
+                    this.signText[i] = TextComponentUtils.processComponent(icommandsender, ichatbasecomponent, (Entity) null);
+                } catch (CommandException commandexception) {
+                    this.signText[i] = ichatbasecomponent;
+                }
+            } catch (com.google.gson.JsonParseException jsonparseexception) {
+                this.signText[i] = new TextComponentString(s);
             }
-            catch (CommandException var7)
-            {
-                this.signText[i] = itextcomponent;
-            }
         }
 
         this.stats.readStatsFromNBT(compound);
     }
 
     @Nullable
-    public SPacketUpdateTileEntity getUpdatePacket()
-    {
+    public SPacketUpdateTileEntity getUpdatePacket() {
         return new SPacketUpdateTileEntity(this.pos, 9, this.getUpdateTag());
     }
 
-    public NBTTagCompound getUpdateTag()
-    {
+    public NBTTagCompound getUpdateTag() {
         return this.writeToNBT(new NBTTagCompound());
     }
 
-    public boolean onlyOpsCanSetNbt()
-    {
+    public boolean onlyOpsCanSetNbt() {
         return true;
     }
 
-    public boolean getIsEditable()
-    {
+    public boolean getIsEditable() {
         return this.isEditable;
     }
 
     @SideOnly(Side.CLIENT)
-    public void setEditable(boolean isEditableIn)
-    {
+    public void setEditable(boolean isEditableIn) {
         this.isEditable = isEditableIn;
 
-        if (!isEditableIn)
-        {
+        if (!isEditableIn) {
             this.player = null;
         }
     }
 
-    public void setPlayer(EntityPlayer playerIn)
-    {
-        this.player = playerIn;
+    public void setPlayer(EntityPlayer playerIn) {
+        // Paper start
+        //this.player = playerIn;
+        signEditor = playerIn != null ? playerIn.getUniqueID() : null;
+        // Paper end
     }
 
-    public EntityPlayer getPlayer()
-    {
+    public EntityPlayer getPlayer() {
         return this.player;
     }
 
-    public boolean executeCommand(final EntityPlayer playerIn)
-    {
-        ICommandSender icommandsender = new ICommandSender()
-        {
-            public String getName()
-            {
+    public boolean executeCommand(final EntityPlayer playerIn) {
+        ICommandSender icommandsender = new ICommandSender() {
+            public String getName() {
                 return playerIn.getName();
             }
-            public ITextComponent getDisplayName()
-            {
+
+            public ITextComponent getDisplayName() {
                 return playerIn.getDisplayName();
             }
-            public void sendMessage(ITextComponent component)
-            {
+
+            public void sendMessage(ITextComponent component) {
             }
-            public boolean canUseCommand(int permLevel, String commandName)
-            {
+
+            public boolean canUseCommand(int permLevel, String commandName) {
                 return permLevel <= 2;
             }
-            public BlockPos getPosition()
-            {
+
+            public boolean canUseCommand(int permLevel, String commandName, String perm) {
+                return permLevel <= 2;
+            }
+
+            public BlockPos getPosition() {
                 return TileEntitySign.this.pos;
             }
-            public Vec3d getPositionVector()
-            {
-                return new Vec3d((double)TileEntitySign.this.pos.getX() + 0.5D, (double)TileEntitySign.this.pos.getY() + 0.5D, (double)TileEntitySign.this.pos.getZ() + 0.5D);
+
+            public Vec3d getPositionVector() {
+                return new Vec3d((double) TileEntitySign.this.pos.getX() + 0.5D, (double) TileEntitySign.this.pos.getY() + 0.5D, (double) TileEntitySign.this.pos.getZ() + 0.5D);
             }
-            public World getEntityWorld()
-            {
+
+            public World getEntityWorld() {
                 return playerIn.getEntityWorld();
             }
-            public Entity getCommandSenderEntity()
-            {
+
+            public Entity getCommandSenderEntity() {
                 return playerIn;
             }
-            public boolean sendCommandFeedback()
-            {
+
+            public boolean sendCommandFeedback() {
                 return false;
             }
-            public void setCommandStat(CommandResultStats.Type type, int amount)
-            {
-                if (TileEntitySign.this.world != null && !TileEntitySign.this.world.isRemote)
-                {
+
+            public void setCommandStat(CommandResultStats.Type type, int amount) {
+                if (TileEntitySign.this.world != null && !TileEntitySign.this.world.isRemote) {
                     TileEntitySign.this.stats.setCommandStatForSender(TileEntitySign.this.world.getMinecraftServer(), this, type, amount);
                 }
             }
-            public MinecraftServer getServer()
-            {
+
+            public MinecraftServer getServer() {
                 return playerIn.getServer();
             }
         };
 
-        for (ITextComponent itextcomponent : this.signText)
-        {
+        for (ITextComponent itextcomponent : this.signText) {
             Style style = itextcomponent == null ? null : itextcomponent.getStyle();
 
-            if (style != null && style.getClickEvent() != null)
-            {
+            if (style != null && style.getClickEvent() != null) {
                 ClickEvent clickevent = style.getClickEvent();
 
-                if (clickevent.getAction() == ClickEvent.Action.RUN_COMMAND)
-                {
-                    playerIn.getServer().getCommandManager().executeCommand(icommandsender, clickevent.getValue());
+                if (clickevent.getAction() == ClickEvent.Action.RUN_COMMAND) {
+                    // playerIn.getServer().getCommandManager().executeCommand(icommandsender, clickevent.getValue());
+                    CommandBlockBaseLogic.executeSafely(icommandsender, new org.bukkit.craftbukkit.command.ProxiedNativeCommandSender(
+                            icommandsender,
+                            new org.bukkit.craftbukkit.command.CraftBlockCommandSender(icommandsender),
+                            playerIn.getBukkitEntity()
+                    ), clickevent.getValue());
                 }
             }
         }
@@ -209,8 +227,7 @@
         return true;
     }
 
-    public CommandResultStats getStats()
-    {
+    public CommandResultStats getStats() {
         return this.stats;
     }
 }
