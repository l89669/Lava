--- ../src-base/minecraft/net/minecraft/tileentity/TileEntitySkull.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntitySkull.java
@@ -1,52 +1,103 @@
 package net.minecraft.tileentity;
 
+import com.google.common.base.Predicate;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import com.google.common.collect.Iterables;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.authlib.Agent;
 import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.properties.Property;
+
+import java.util.Locale;
 import java.util.UUID;
+import java.util.concurrent.*;
 import javax.annotation.Nullable;
+
 import net.minecraft.block.BlockSkull;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.network.play.server.SPacketUpdateTileEntity;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerProfileCache;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.ITickable;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
-import net.minecraft.util.StringUtils;
+import net.minecraft.util.*;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class TileEntitySkull extends TileEntity implements ITickable
-{
+public class TileEntitySkull extends TileEntity implements ITickable {
     private int skullType;
-    private int skullRotation;
+    public int skullRotation;
     private GameProfile playerProfile;
     private int dragonAnimatedTicks;
     private boolean dragonAnimated;
     private static PlayerProfileCache profileCache;
     private static MinecraftSessionService sessionService;
+    // Spigot start
+    public static final ExecutorService executor = Executors.newFixedThreadPool(3,
+            new ThreadFactoryBuilder().setNameFormat("Head Conversion Thread - %1$d").build()
+    );
+    public static final LoadingCache<String, GameProfile> skinCache = CacheBuilder.newBuilder()
+            .maximumSize(5000)
+            .expireAfterAccess(60, TimeUnit.MINUTES)
+            .build(new CacheLoader<String, GameProfile>() {
+                @Override
+                public GameProfile load(String key) throws Exception {
+                    final GameProfile[] profiles = new GameProfile[1];
+                    ProfileLookupCallback gameProfileLookup = new ProfileLookupCallback() {
 
-    public static void setProfileCache(PlayerProfileCache profileCacheIn)
-    {
+                        @Override
+                        public void onProfileLookupSucceeded(GameProfile gp) {
+                            profiles[0] = gp;
+                        }
+
+                        @Override
+                        public void onProfileLookupFailed(GameProfile gp, Exception excptn) {
+                            profiles[0] = gp;
+                        }
+                    };
+
+                    MinecraftServer.getServerCB().getGameProfileRepository().findProfilesByNames(new String[]{key}, Agent.MINECRAFT, gameProfileLookup);
+
+                    GameProfile profile = profiles[0];
+                    if (profile == null) {
+                        UUID uuid = EntityPlayer.getUUID(new GameProfile(null, key));
+                        profile = new GameProfile(uuid, key);
+
+                        gameProfileLookup.onProfileLookupSucceeded(profile);
+                    } else {
+
+                        Property property = Iterables.getFirst(profile.getProperties().get("textures"), null);
+
+                        if (property == null) {
+                            profile = MinecraftServer.getServerCB().getMinecraftSessionService().fillProfileProperties(profile, true);
+                        }
+                    }
+
+
+                    return profile;
+                }
+            });
+    // Spigot end
+
+    public static void setProfileCache(PlayerProfileCache profileCacheIn) {
         profileCache = profileCacheIn;
     }
 
-    public static void setSessionService(MinecraftSessionService sessionServiceIn)
-    {
+    public static void setSessionService(MinecraftSessionService sessionServiceIn) {
         sessionService = sessionServiceIn;
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound compound)
-    {
+    public NBTTagCompound writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
-        compound.setByte("SkullType", (byte)(this.skullType & 255));
-        compound.setByte("Rot", (byte)(this.skullRotation & 255));
+        compound.setByte("SkullType", (byte) (this.skullType & 255));
+        compound.setByte("Rot", (byte) (this.skullRotation & 255));
 
-        if (this.playerProfile != null)
-        {
+        if (this.playerProfile != null) {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             NBTUtil.writeGameProfile(nbttagcompound, this.playerProfile);
             compound.setTag("Owner", nbttagcompound);
@@ -55,156 +106,154 @@
         return compound;
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         super.readFromNBT(compound);
         this.skullType = compound.getByte("SkullType");
         this.skullRotation = compound.getByte("Rot");
 
-        if (this.skullType == 3)
-        {
-            if (compound.hasKey("Owner", 10))
-            {
+        if (this.skullType == 3) {
+            if (compound.hasKey("Owner", 10)) {
                 this.playerProfile = NBTUtil.readGameProfileFromNBT(compound.getCompoundTag("Owner"));
-            }
-            else if (compound.hasKey("ExtraType", 8))
-            {
+            } else if (compound.hasKey("ExtraType", 8)) {
                 String s = compound.getString("ExtraType");
 
-                if (!StringUtils.isNullOrEmpty(s))
-                {
-                    this.playerProfile = new GameProfile((UUID)null, s);
+                if (!StringUtils.isNullOrEmpty(s)) {
+                    this.playerProfile = new GameProfile(null, s);
                     this.updatePlayerProfile();
                 }
             }
         }
     }
 
-    public void update()
-    {
-        if (this.skullType == 5)
-        {
-            if (this.world.isBlockPowered(this.pos))
-            {
+    public void update() {
+        if (this.skullType == 5) {
+            if (this.world.isBlockPowered(this.pos)) {
                 this.dragonAnimated = true;
                 ++this.dragonAnimatedTicks;
-            }
-            else
-            {
+            } else {
                 this.dragonAnimated = false;
             }
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public float getAnimationProgress(float p_184295_1_)
-    {
-        return this.dragonAnimated ? (float)this.dragonAnimatedTicks + p_184295_1_ : (float)this.dragonAnimatedTicks;
+    public float getAnimationProgress(float p_184295_1_) {
+        return this.dragonAnimated ? (float) this.dragonAnimatedTicks + p_184295_1_ : (float) this.dragonAnimatedTicks;
     }
 
     @Nullable
-    public GameProfile getPlayerProfile()
-    {
+    public GameProfile getPlayerProfile() {
         return this.playerProfile;
     }
 
     @Nullable
-    public SPacketUpdateTileEntity getUpdatePacket()
-    {
+    public SPacketUpdateTileEntity getUpdatePacket() {
         return new SPacketUpdateTileEntity(this.pos, 4, this.getUpdateTag());
     }
 
-    public NBTTagCompound getUpdateTag()
-    {
+    public NBTTagCompound getUpdateTag() {
         return this.writeToNBT(new NBTTagCompound());
     }
 
-    public void setType(int type)
-    {
+    public void setType(int type) {
         this.skullType = type;
         this.playerProfile = null;
     }
 
-    public void setPlayerProfile(@Nullable GameProfile playerProfile)
-    {
+    public void setPlayerProfile(@Nullable GameProfile playerProfile) {
         this.skullType = 3;
         this.playerProfile = playerProfile;
         this.updatePlayerProfile();
     }
 
-    private void updatePlayerProfile()
-    {
-        this.playerProfile = updateGameprofile(this.playerProfile);
-        this.markDirty();
-    }
-
-    public static GameProfile updateGameprofile(GameProfile input)
-    {
-        if (input != null && !StringUtils.isNullOrEmpty(input.getName()))
-        {
-            if (input.isComplete() && input.getProperties().containsKey("textures"))
-            {
-                return input;
+    private void updatePlayerProfile() {
+        // Spigot start
+        GameProfile profile = this.playerProfile;
+        setType(0); // Work around client bug
+        updateGameprofile(profile, input -> {
+            setType(3); // Work around client bug
+            playerProfile = input;
+            markDirty();
+            if (world != null) {
+                world.notifyLightSet(pos); // PAIL: notify
             }
-            else if (profileCache != null && sessionService != null)
-            {
-                GameProfile gameprofile = profileCache.getGameProfileForUsername(input.getName());
+            return false;
+        }, false);
+        // Spigot end
 
-                if (gameprofile == null)
-                {
-                    return input;
-                }
-                else
-                {
-                    Property property = (Property)Iterables.getFirst(gameprofile.getProperties().get("textures"), (Object)null);
+    }
 
-                    if (property == null)
-                    {
-                        gameprofile = sessionService.fillProfileProperties(gameprofile, true);
+    // Spigot start - Support async lookups
+    public static Future<GameProfile> updateGameprofile(final GameProfile input, final Predicate<GameProfile> callback, boolean sync) {
+        if (input != null && !StringUtils.isNullOrEmpty(input.getName())) {
+            if (input.isComplete() && input.getProperties().containsKey("textures")) {
+                callback.apply(input);
+            } else if (MinecraftServer.getServerCB() == null) {
+                callback.apply(input);
+            } else {
+                GameProfile profile = skinCache.getIfPresent(input.getName().toLowerCase(Locale.ROOT));
+                if (profile != null && Iterables.getFirst(profile.getProperties().get("textures"), (Object) null) != null) {
+                    callback.apply(profile);
+
+                    return Futures.immediateFuture(profile);
+                } else {
+                    Callable<GameProfile> callable = () -> {
+                        final GameProfile profile1 = skinCache.getUnchecked(input.getName().toLowerCase(Locale.ROOT));
+                        MinecraftServer.getServerCB().processQueue.add(() -> {
+                            if (profile1 == null) {
+                                callback.apply(input);
+                            } else {
+                                callback.apply(profile1);
+                            }
+                        });
+                        return profile1;
+                    };
+                    if (sync) {
+                        try {
+                            return Futures.immediateFuture(callable.call());
+                        } catch (Exception ex) {
+                            com.google.common.base.Throwables.throwIfUnchecked(ex);
+                            throw new RuntimeException(ex); // Not possible
+                        }
+                    } else {
+                        return executor.submit(callable);
                     }
 
-                    return gameprofile;
                 }
             }
-            else
-            {
-                return input;
-            }
+        } else {
+            callback.apply(input);
         }
-        else
-        {
-            return input;
-        }
+
+        return Futures.immediateFuture(input);
     }
+    // Spigot end
 
-    public int getSkullType()
-    {
+    public static GameProfile updateGameprofile(GameProfile input) {
+        return Futures.getUnchecked(updateGameprofile(input, com.google.common.base.Predicates.alwaysTrue(), true)); // Lava
+    }
+
+    public int getSkullType() {
         return this.skullType;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getSkullRotation()
-    {
+    public int getSkullRotation() {
         return this.skullRotation;
     }
 
-    public void setSkullRotation(int rotation)
-    {
+    public void setSkullRotation(int rotation) {
         this.skullRotation = rotation;
     }
 
-    public void mirror(Mirror mirrorIn)
-    {
-        if (this.world != null && this.world.getBlockState(this.getPos()).getValue(BlockSkull.FACING) == EnumFacing.UP)
-        {
+    public void mirror(Mirror mirrorIn) {
+        if (this.world != null && this.world.getBlockState(this.getPos()).getValue(BlockSkull.FACING) == EnumFacing.UP) {
             this.skullRotation = mirrorIn.mirrorRotation(this.skullRotation, 16);
         }
     }
 
-    public void rotate(Rotation rotationIn)
-    {
-        if (this.world != null && this.world.getBlockState(this.getPos()).getValue(BlockSkull.FACING) == EnumFacing.UP)
-        {
+    public void rotate(Rotation rotationIn) {
+        if (this.world != null && this.world.getBlockState(this.getPos()).getValue(BlockSkull.FACING) == EnumFacing.UP) {
             this.skullRotation = rotationIn.rotate(this.skullRotation, 16);
         }
     }
