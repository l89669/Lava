--- ../src-base/minecraft/net/minecraft/tileentity/MobSpawnerBaseLogic.java
+++ ../src-work/minecraft/net/minecraft/tileentity/MobSpawnerBaseLogic.java
@@ -1,18 +1,12 @@
 package net.minecraft.tileentity;
 
 import com.google.common.collect.Lists;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.IEntityLivingData;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.StringUtils;
-import net.minecraft.util.WeightedRandom;
-import net.minecraft.util.WeightedSpawnerEntity;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
@@ -20,234 +14,201 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class MobSpawnerBaseLogic
-{
-    private int spawnDelay = 20;
+import javax.annotation.Nullable;
+import java.util.List;
+
+public abstract class MobSpawnerBaseLogic {
+    public int spawnDelay = 20;
     private final List<WeightedSpawnerEntity> potentialSpawns = Lists.<WeightedSpawnerEntity>newArrayList();
     private WeightedSpawnerEntity spawnData = new WeightedSpawnerEntity();
     private double mobRotation;
     private double prevMobRotation;
-    private int minSpawnDelay = 200;
-    private int maxSpawnDelay = 800;
-    private int spawnCount = 4;
+    public int minSpawnDelay = 200;
+    public int maxSpawnDelay = 800;
+    public int spawnCount = 4;
     private Entity cachedEntity;
-    private int maxNearbyEntities = 6;
-    private int activatingRangeFromPlayer = 16;
-    private int spawnRange = 4;
+    public int maxNearbyEntities = 6; // CraftBukkit private -> public
+    public int activatingRangeFromPlayer = 16; // CraftBukkit private -> public
+    public int spawnRange = 4; // CraftBukkit private -> public
 
     @Nullable
-    private ResourceLocation getEntityId()
-    {
+    public ResourceLocation getEntityId() {
         String s = this.spawnData.getNbt().getString("id");
         return StringUtils.isNullOrEmpty(s) ? null : new ResourceLocation(s);
     }
 
-    public void setEntityId(@Nullable ResourceLocation id)
-    {
-        if (id != null)
-        {
+    public void setEntityId(@Nullable ResourceLocation id) {
+        if (id != null) {
             this.spawnData.getNbt().setString("id", id.toString());
+            this.potentialSpawns.clear(); // CraftBukkit - SPIGOT-3496, MC-92282
         }
     }
 
-    private boolean isActivated()
-    {
+    private boolean isActivated() {
         BlockPos blockpos = this.getSpawnerPosition();
-        return this.getSpawnerWorld().isAnyPlayerWithinRangeAt((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D, (double)this.activatingRangeFromPlayer);
+        return this.getSpawnerWorld().isAnyPlayerWithinRangeAt((double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 0.5D, (double) blockpos.getZ() + 0.5D, (double) this.activatingRangeFromPlayer);
     }
 
-    public void updateSpawner()
-    {
-        if (!this.isActivated())
-        {
+    public void updateSpawner() {
+        if (!this.isActivated()) {
             this.prevMobRotation = this.mobRotation;
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = this.getSpawnerPosition();
 
-            if (this.getSpawnerWorld().isRemote)
-            {
-                double d3 = (double)((float)blockpos.getX() + this.getSpawnerWorld().rand.nextFloat());
-                double d4 = (double)((float)blockpos.getY() + this.getSpawnerWorld().rand.nextFloat());
-                double d5 = (double)((float)blockpos.getZ() + this.getSpawnerWorld().rand.nextFloat());
+            if (this.getSpawnerWorld().isRemote) {
+                double d3 = (double) ((float) blockpos.getX() + this.getSpawnerWorld().rand.nextFloat());
+                double d4 = (double) ((float) blockpos.getY() + this.getSpawnerWorld().rand.nextFloat());
+                double d5 = (double) ((float) blockpos.getZ() + this.getSpawnerWorld().rand.nextFloat());
                 this.getSpawnerWorld().spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d3, d4, d5, 0.0D, 0.0D, 0.0D);
                 this.getSpawnerWorld().spawnParticle(EnumParticleTypes.FLAME, d3, d4, d5, 0.0D, 0.0D, 0.0D);
 
-                if (this.spawnDelay > 0)
-                {
+                if (this.spawnDelay > 0) {
                     --this.spawnDelay;
                 }
 
                 this.prevMobRotation = this.mobRotation;
-                this.mobRotation = (this.mobRotation + (double)(1000.0F / ((float)this.spawnDelay + 200.0F))) % 360.0D;
-            }
-            else
-            {
-                if (this.spawnDelay == -1)
-                {
+                this.mobRotation = (this.mobRotation + (double) (1000.0F / ((float) this.spawnDelay + 200.0F))) % 360.0D;
+            } else {
+                if (this.spawnDelay == -1) {
                     this.resetTimer();
                 }
 
-                if (this.spawnDelay > 0)
-                {
+                if (this.spawnDelay > 0) {
                     --this.spawnDelay;
                     return;
                 }
 
                 boolean flag = false;
 
-                for (int i = 0; i < this.spawnCount; ++i)
-                {
+                for (int i = 0; i < this.spawnCount; ++i) {
                     NBTTagCompound nbttagcompound = this.spawnData.getNbt();
                     NBTTagList nbttaglist = nbttagcompound.getTagList("Pos", 6);
                     World world = this.getSpawnerWorld();
                     int j = nbttaglist.tagCount();
-                    double d0 = j >= 1 ? nbttaglist.getDoubleAt(0) : (double)blockpos.getX() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double)this.spawnRange + 0.5D;
-                    double d1 = j >= 2 ? nbttaglist.getDoubleAt(1) : (double)(blockpos.getY() + world.rand.nextInt(3) - 1);
-                    double d2 = j >= 3 ? nbttaglist.getDoubleAt(2) : (double)blockpos.getZ() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double)this.spawnRange + 0.5D;
+                    double d0 = j >= 1 ? nbttaglist.getDoubleAt(0) : (double) blockpos.getX() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    double d1 = j >= 2 ? nbttaglist.getDoubleAt(1) : (double) (blockpos.getY() + world.rand.nextInt(3) - 1);
+                    double d2 = j >= 3 ? nbttaglist.getDoubleAt(2) : (double) blockpos.getZ() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double) this.spawnRange + 0.5D;
                     Entity entity = AnvilChunkLoader.readWorldEntityPos(nbttagcompound, world, d0, d1, d2, false);
 
-                    if (entity == null)
-                    {
+                    if (entity == null) {
                         return;
                     }
 
-                    int k = world.getEntitiesWithinAABB(entity.getClass(), (new AxisAlignedBB((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), (double)(blockpos.getX() + 1), (double)(blockpos.getY() + 1), (double)(blockpos.getZ() + 1))).grow((double)this.spawnRange)).size();
+                    int k = world.getEntitiesWithinAABB(entity.getClass(), (new AxisAlignedBB((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), (double) (blockpos.getX() + 1), (double) (blockpos.getY() + 1), (double) (blockpos.getZ() + 1))).grow((double) this.spawnRange)).size();
 
-                    if (k >= this.maxNearbyEntities)
-                    {
+                    if (k >= this.maxNearbyEntities) {
                         this.resetTimer();
                         return;
                     }
 
-                    EntityLiving entityliving = entity instanceof EntityLiving ? (EntityLiving)entity : null;
+                    EntityLiving entityliving = entity instanceof EntityLiving ? (EntityLiving) entity : null;
                     entity.setLocationAndAngles(entity.posX, entity.posY, entity.posZ, world.rand.nextFloat() * 360.0F, 0.0F);
 
-                    if (entityliving == null || net.minecraftforge.event.ForgeEventFactory.canEntitySpawnSpawner(entityliving, getSpawnerWorld(), (float)entity.posX, (float)entity.posY, (float)entity.posZ, this))
-                    {
-                        if (this.spawnData.getNbt().getSize() == 1 && this.spawnData.getNbt().hasKey("id", 8) && entity instanceof EntityLiving)
-                        {
-                            if (!net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn(entityliving, this.getSpawnerWorld(), (float)entity.posX, (float)entity.posY, (float)entity.posZ, this))
-                            ((EntityLiving)entity).onInitialSpawn(world.getDifficultyForLocation(new BlockPos(entity)), (IEntityLivingData)null);
+                    if (entityliving == null || net.minecraftforge.event.ForgeEventFactory.canEntitySpawnSpawner(entityliving, getSpawnerWorld(), (float) entity.posX, (float) entity.posY, (float) entity.posZ, this)) {
+                        if (this.spawnData.getNbt().getSize() == 1 && this.spawnData.getNbt().hasKey("id", 8) && entity instanceof EntityLiving) {
+                            if (!net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn(entityliving, this.getSpawnerWorld(), (float) entity.posX, (float) entity.posY, (float) entity.posZ, this))
+                                ((EntityLiving) entity).onInitialSpawn(world.getDifficultyForLocation(new BlockPos(entity)), (IEntityLivingData) null);
                         }
 
-                        AnvilChunkLoader.spawnEntity(entity, world);
+                        if (entity.world.spigotConfig.nerfSpawnerMobs) entity.fromMobSpawner = true; // Spigot Start
+
+                        flag = true; // Paper
+
+                        if (org.bukkit.craftbukkit.event.CraftEventFactory.callSpawnerSpawnEvent(entity, blockpos).isCancelled()) {
+                            continue;
+                        }
+
+                        AnvilChunkLoader.spawnEntity(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER);
                         world.playEvent(2004, blockpos, 0);
 
-                        if (entityliving != null)
-                        {
+                        if (entityliving != null) {
                             entityliving.spawnExplosionParticle();
                         }
 
-                        flag = true;
+                        /*flag = true;*/ // Paper - moved up above cancellable event
                     }
                 }
 
-                if (flag)
-                {
+                if (flag) {
                     this.resetTimer();
                 }
             }
         }
     }
 
-    private void resetTimer()
-    {
-        if (this.maxSpawnDelay <= this.minSpawnDelay)
-        {
+    private void resetTimer() {
+        if (this.maxSpawnDelay <= this.minSpawnDelay) {
             this.spawnDelay = this.minSpawnDelay;
-        }
-        else
-        {
+        } else {
             int i = this.maxSpawnDelay - this.minSpawnDelay;
             this.spawnDelay = this.minSpawnDelay + this.getSpawnerWorld().rand.nextInt(i);
         }
 
-        if (!this.potentialSpawns.isEmpty())
-        {
-            this.setNextSpawnData((WeightedSpawnerEntity)WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
+        if (!this.potentialSpawns.isEmpty()) {
+            this.setNextSpawnData((WeightedSpawnerEntity) WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
         }
 
         this.broadcastEvent(1);
     }
 
-    public void readFromNBT(NBTTagCompound nbt)
-    {
+    public void readFromNBT(NBTTagCompound nbt) {
         this.spawnDelay = nbt.getShort("Delay");
         this.potentialSpawns.clear();
 
-        if (nbt.hasKey("SpawnPotentials", 9))
-        {
+        if (nbt.hasKey("SpawnPotentials", 9)) {
             NBTTagList nbttaglist = nbt.getTagList("SpawnPotentials", 10);
 
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
+            for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                 this.potentialSpawns.add(new WeightedSpawnerEntity(nbttaglist.getCompoundTagAt(i)));
             }
         }
 
-        if (nbt.hasKey("SpawnData", 10))
-        {
+        if (nbt.hasKey("SpawnData", 10)) {
             this.setNextSpawnData(new WeightedSpawnerEntity(1, nbt.getCompoundTag("SpawnData")));
+        } else if (!this.potentialSpawns.isEmpty()) {
+            this.setNextSpawnData((WeightedSpawnerEntity) WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
         }
-        else if (!this.potentialSpawns.isEmpty())
-        {
-            this.setNextSpawnData((WeightedSpawnerEntity)WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
-        }
 
-        if (nbt.hasKey("MinSpawnDelay", 99))
-        {
+        if (nbt.hasKey("MinSpawnDelay", 99)) {
             this.minSpawnDelay = nbt.getShort("MinSpawnDelay");
             this.maxSpawnDelay = nbt.getShort("MaxSpawnDelay");
             this.spawnCount = nbt.getShort("SpawnCount");
         }
 
-        if (nbt.hasKey("MaxNearbyEntities", 99))
-        {
+        if (nbt.hasKey("MaxNearbyEntities", 99)) {
             this.maxNearbyEntities = nbt.getShort("MaxNearbyEntities");
             this.activatingRangeFromPlayer = nbt.getShort("RequiredPlayerRange");
         }
 
-        if (nbt.hasKey("SpawnRange", 99))
-        {
+        if (nbt.hasKey("SpawnRange", 99)) {
             this.spawnRange = nbt.getShort("SpawnRange");
         }
 
-        if (this.getSpawnerWorld() != null)
-        {
+        if (this.getSpawnerWorld() != null) {
             this.cachedEntity = null;
         }
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound p_189530_1_)
-    {
+    public NBTTagCompound writeToNBT(NBTTagCompound p_189530_1_) {
         ResourceLocation resourcelocation = this.getEntityId();
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             return p_189530_1_;
-        }
-        else
-        {
-            p_189530_1_.setShort("Delay", (short)this.spawnDelay);
-            p_189530_1_.setShort("MinSpawnDelay", (short)this.minSpawnDelay);
-            p_189530_1_.setShort("MaxSpawnDelay", (short)this.maxSpawnDelay);
-            p_189530_1_.setShort("SpawnCount", (short)this.spawnCount);
-            p_189530_1_.setShort("MaxNearbyEntities", (short)this.maxNearbyEntities);
-            p_189530_1_.setShort("RequiredPlayerRange", (short)this.activatingRangeFromPlayer);
-            p_189530_1_.setShort("SpawnRange", (short)this.spawnRange);
+        } else {
+            p_189530_1_.setShort("Delay", (short) this.spawnDelay);
+            p_189530_1_.setShort("MinSpawnDelay", (short) this.minSpawnDelay);
+            p_189530_1_.setShort("MaxSpawnDelay", (short) this.maxSpawnDelay);
+            p_189530_1_.setShort("SpawnCount", (short) this.spawnCount);
+            p_189530_1_.setShort("MaxNearbyEntities", (short) this.maxNearbyEntities);
+            p_189530_1_.setShort("RequiredPlayerRange", (short) this.activatingRangeFromPlayer);
+            p_189530_1_.setShort("SpawnRange", (short) this.spawnRange);
             p_189530_1_.setTag("SpawnData", this.spawnData.getNbt().copy());
             NBTTagList nbttaglist = new NBTTagList();
 
-            if (this.potentialSpawns.isEmpty())
-            {
+            if (this.potentialSpawns.isEmpty()) {
                 nbttaglist.appendTag(this.spawnData.toCompoundTag());
-            }
-            else
-            {
-                for (WeightedSpawnerEntity weightedspawnerentity : this.potentialSpawns)
-                {
+            } else {
+                for (WeightedSpawnerEntity weightedspawnerentity : this.potentialSpawns) {
                     nbttaglist.appendTag(weightedspawnerentity.toCompoundTag());
                 }
             }
@@ -257,37 +218,29 @@
         }
     }
 
-    public boolean setDelayToMin(int delay)
-    {
-        if (delay == 1 && this.getSpawnerWorld().isRemote)
-        {
+    public boolean setDelayToMin(int delay) {
+        if (delay == 1 && this.getSpawnerWorld().isRemote) {
             this.spawnDelay = this.minSpawnDelay;
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public Entity getCachedEntity()
-    {
-        if (this.cachedEntity == null)
-        {
+    public Entity getCachedEntity() {
+        if (this.cachedEntity == null) {
             this.cachedEntity = AnvilChunkLoader.readWorldEntity(this.spawnData.getNbt(), this.getSpawnerWorld(), false);
 
-            if (this.spawnData.getNbt().getSize() == 1 && this.spawnData.getNbt().hasKey("id", 8) && this.cachedEntity instanceof EntityLiving)
-            {
-                ((EntityLiving)this.cachedEntity).onInitialSpawn(this.getSpawnerWorld().getDifficultyForLocation(new BlockPos(this.cachedEntity)), (IEntityLivingData)null);
+            if (this.spawnData.getNbt().getSize() == 1 && this.spawnData.getNbt().hasKey("id", 8) && this.cachedEntity instanceof EntityLiving) {
+                ((EntityLiving) this.cachedEntity).onInitialSpawn(this.getSpawnerWorld().getDifficultyForLocation(new BlockPos(this.cachedEntity)), (IEntityLivingData) null);
             }
         }
 
         return this.cachedEntity;
     }
 
-    public void setNextSpawnData(WeightedSpawnerEntity p_184993_1_)
-    {
+    public void setNextSpawnData(WeightedSpawnerEntity p_184993_1_) {
         this.spawnData = p_184993_1_;
     }
 
@@ -298,17 +251,18 @@
     public abstract BlockPos getSpawnerPosition();
 
     @SideOnly(Side.CLIENT)
-    public double getMobRotation()
-    {
+    public double getMobRotation() {
         return this.mobRotation;
     }
 
     @SideOnly(Side.CLIENT)
-    public double getPrevMobRotation()
-    {
+    public double getPrevMobRotation() {
         return this.prevMobRotation;
     }
 
     /* ======================================== FORGE START =====================================*/
-    @Nullable public Entity getSpawnerEntity() { return null; }
+    @Nullable
+    public Entity getSpawnerEntity() {
+        return null;
+    }
 }
