--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityChest.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityChest.java
@@ -1,16 +1,12 @@
 package net.minecraft.tileentity;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
-import net.minecraft.inventory.Container;
-import net.minecraft.inventory.ContainerChest;
-import net.minecraft.inventory.IInventory;
-import net.minecraft.inventory.InventoryLargeChest;
-import net.minecraft.inventory.ItemStackHelper;
+import net.minecraft.inventory.*;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.EnumFacing;
@@ -22,9 +18,13 @@
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
-public class TileEntityChest extends TileEntityLockableLoot implements ITickable
-{
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class TileEntityChest extends TileEntityLockableLoot implements ITickable {
     private NonNullList<ItemStack> chestContents = NonNullList.<ItemStack>withSize(27, ItemStack.EMPTY);
     public boolean adjacentChestChecked;
     public TileEntityChest adjacentChestZNeg;
@@ -37,26 +37,44 @@
     private int ticksSinceSync;
     private BlockChest.Type cachedChestType;
 
-    public TileEntityChest()
-    {
+    private int maxStack = MAX_STACK;
+
+    public TileEntityChest() {
     }
 
-    public TileEntityChest(BlockChest.Type typeIn)
-    {
+    public TileEntityChest(BlockChest.Type typeIn) {
         this.cachedChestType = typeIn;
     }
 
-    public int getSizeInventory()
-    {
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public List<ItemStack> getContents() {
+        return this.chestContents;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public int getSizeInventory() {
         return 27;
     }
 
-    public boolean isEmpty()
-    {
-        for (ItemStack itemstack : this.chestContents)
-        {
-            if (!itemstack.isEmpty())
-            {
+    public boolean isEmpty() {
+        for (ItemStack itemstack : this.chestContents) {
+            if (!itemstack.isEmpty()) {
                 return false;
             }
         }
@@ -64,111 +82,91 @@
         return true;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.hasCustomName() ? this.customName : "container.chest";
     }
 
-    public static void registerFixesChest(DataFixer fixer)
-    {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityChest.class, new String[] {"Items"}));
+    public static void registerFixesChest(DataFixer fixer) {
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityChest.class, new String[]{"Items"}));
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         super.readFromNBT(compound);
         this.chestContents = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
 
-        if (!this.checkLootAndRead(compound))
-        {
+        if (!this.checkLootAndRead(compound)) {
             ItemStackHelper.loadAllItems(compound, this.chestContents);
         }
 
-        if (compound.hasKey("CustomName", 8))
-        {
+        if (compound.hasKey("CustomName", 8)) {
             this.customName = compound.getString("CustomName");
         }
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound compound)
-    {
+    public NBTTagCompound writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
 
-        if (!this.checkLootAndWrite(compound))
-        {
+        if (!this.checkLootAndWrite(compound)) {
             ItemStackHelper.saveAllItems(compound, this.chestContents);
         }
 
-        if (this.hasCustomName())
-        {
+        if (this.hasCustomName()) {
             compound.setString("CustomName", this.customName);
         }
 
         return compound;
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return maxStack;
     }
 
-    public void updateContainingBlockInfo()
-    {
+    public void updateContainingBlockInfo() {
         super.updateContainingBlockInfo();
         this.adjacentChestChecked = false;
         doubleChestHandler = null;
     }
 
     @SuppressWarnings("incomplete-switch")
-    private void setNeighbor(TileEntityChest chestTe, EnumFacing side)
-    {
-        if (chestTe.isInvalid())
-        {
+    private void setNeighbor(TileEntityChest chestTe, EnumFacing side) {
+        if (chestTe.isInvalid()) {
             this.adjacentChestChecked = false;
-        }
-        else if (this.adjacentChestChecked)
-        {
-            switch (side)
-            {
+        } else if (this.adjacentChestChecked) {
+            switch (side) {
                 case NORTH:
 
-                    if (this.adjacentChestZNeg != chestTe)
-                    {
+                    if (this.adjacentChestZNeg != chestTe) {
                         this.adjacentChestChecked = false;
                     }
 
                     break;
                 case SOUTH:
 
-                    if (this.adjacentChestZPos != chestTe)
-                    {
+                    if (this.adjacentChestZPos != chestTe) {
                         this.adjacentChestChecked = false;
                     }
 
                     break;
                 case EAST:
 
-                    if (this.adjacentChestXPos != chestTe)
-                    {
+                    if (this.adjacentChestXPos != chestTe) {
                         this.adjacentChestChecked = false;
                     }
 
                     break;
                 case WEST:
 
-                    if (this.adjacentChestXNeg != chestTe)
-                    {
+                    if (this.adjacentChestXNeg != chestTe) {
                         this.adjacentChestChecked = false;
                     }
             }
         }
     }
 
-    public void checkForAdjacentChests()
-    {
-        if (!this.adjacentChestChecked)
-        {
-            if (this.world == null || !this.world.isAreaLoaded(this.pos, 1)) return; // Forge: prevent loading unloaded chunks when checking neighbors
+    public void checkForAdjacentChests() {
+        if (!this.adjacentChestChecked) {
+            if (this.world == null || !this.world.isAreaLoaded(this.pos, 1))
+                return; // Forge: prevent loading unloaded chunks when checking neighbors
             this.adjacentChestChecked = true;
             this.adjacentChestXNeg = this.getAdjacentChest(EnumFacing.WEST);
             this.adjacentChestXPos = this.getAdjacentChest(EnumFacing.EAST);
@@ -178,17 +176,14 @@
     }
 
     @Nullable
-    protected TileEntityChest getAdjacentChest(EnumFacing side)
-    {
+    protected TileEntityChest getAdjacentChest(EnumFacing side) {
         BlockPos blockpos = this.pos.offset(side);
 
-        if (this.isChestAt(blockpos))
-        {
+        if (this.isChestAt(blockpos)) {
             TileEntity tileentity = this.world.getTileEntity(blockpos);
 
-            if (tileentity instanceof TileEntityChest)
-            {
-                TileEntityChest tileentitychest = (TileEntityChest)tileentity;
+            if (tileentity instanceof TileEntityChest) {
+                TileEntityChest tileentitychest = (TileEntityChest) tileentity;
                 tileentitychest.setNeighbor(this, side.getOpposite());
                 return tileentitychest;
             }
@@ -197,40 +192,31 @@
         return null;
     }
 
-    private boolean isChestAt(BlockPos posIn)
-    {
-        if (this.world == null)
-        {
+    private boolean isChestAt(BlockPos posIn) {
+        if (this.world == null) {
             return false;
-        }
-        else
-        {
+        } else {
             Block block = this.world.getBlockState(posIn).getBlock();
-            return block instanceof BlockChest && ((BlockChest)block).chestType == this.getChestType();
+            return block instanceof BlockChest && ((BlockChest) block).chestType == this.getChestType();
         }
     }
 
-    public void update()
-    {
+    public void update() {
         this.checkForAdjacentChests();
         int i = this.pos.getX();
         int j = this.pos.getY();
         int k = this.pos.getZ();
         ++this.ticksSinceSync;
 
-        if (!this.world.isRemote && this.numPlayersUsing != 0 && (this.ticksSinceSync + i + j + k) % 200 == 0)
-        {
+        if (!this.world.isRemote && this.numPlayersUsing != 0 && (this.ticksSinceSync + i + j + k) % 200 == 0) {
             this.numPlayersUsing = 0;
             float f = 5.0F;
 
-            for (EntityPlayer entityplayer : this.world.getEntitiesWithinAABB(EntityPlayer.class, new AxisAlignedBB((double)((float)i - 5.0F), (double)((float)j - 5.0F), (double)((float)k - 5.0F), (double)((float)(i + 1) + 5.0F), (double)((float)(j + 1) + 5.0F), (double)((float)(k + 1) + 5.0F))))
-            {
-                if (entityplayer.openContainer instanceof ContainerChest)
-                {
-                    IInventory iinventory = ((ContainerChest)entityplayer.openContainer).getLowerChestInventory();
+            for (EntityPlayer entityplayer : this.world.getEntitiesWithinAABB(EntityPlayer.class, new AxisAlignedBB((double) ((float) i - 5.0F), (double) ((float) j - 5.0F), (double) ((float) k - 5.0F), (double) ((float) (i + 1) + 5.0F), (double) ((float) (j + 1) + 5.0F), (double) ((float) (k + 1) + 5.0F)))) {
+                if (entityplayer.openContainer instanceof ContainerChest) {
+                    IInventory iinventory = ((ContainerChest) entityplayer.openContainer).getLowerChestInventory();
 
-                    if (iinventory == this || iinventory instanceof InventoryLargeChest && ((InventoryLargeChest)iinventory).isPartOfLargeChest(this))
-                    {
+                    if (iinventory == this || iinventory instanceof InventoryLargeChest && ((InventoryLargeChest) iinventory).isPartOfLargeChest(this)) {
                         ++this.numPlayersUsing;
                     }
                 }
@@ -240,112 +226,99 @@
         this.prevLidAngle = this.lidAngle;
         float f1 = 0.1F;
 
-        if (this.numPlayersUsing > 0 && this.lidAngle == 0.0F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null)
-        {
-            double d1 = (double)i + 0.5D;
-            double d2 = (double)k + 0.5D;
+        if (this.numPlayersUsing > 0 && this.lidAngle == 0.0F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
+            double d1 = (double) i + 0.5D;
+            double d2 = (double) k + 0.5D;
 
-            if (this.adjacentChestZPos != null)
-            {
+            if (this.adjacentChestZPos != null) {
                 d2 += 0.5D;
             }
 
-            if (this.adjacentChestXPos != null)
-            {
+            if (this.adjacentChestXPos != null) {
                 d1 += 0.5D;
             }
 
-            this.world.playSound((EntityPlayer)null, d1, (double)j + 0.5D, d2, SoundEvents.BLOCK_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+            this.world.playSound((EntityPlayer) null, d1, (double) j + 0.5D, d2, SoundEvents.BLOCK_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
         }
 
-        if (this.numPlayersUsing == 0 && this.lidAngle > 0.0F || this.numPlayersUsing > 0 && this.lidAngle < 1.0F)
-        {
+        if (this.numPlayersUsing == 0 && this.lidAngle > 0.0F || this.numPlayersUsing > 0 && this.lidAngle < 1.0F) {
             float f2 = this.lidAngle;
 
-            if (this.numPlayersUsing > 0)
-            {
+            if (this.numPlayersUsing > 0) {
                 this.lidAngle += 0.1F;
-            }
-            else
-            {
+            } else {
                 this.lidAngle -= 0.1F;
             }
 
-            if (this.lidAngle > 1.0F)
-            {
+            if (this.lidAngle > 1.0F) {
                 this.lidAngle = 1.0F;
             }
 
             float f3 = 0.5F;
 
-            if (this.lidAngle < 0.5F && f2 >= 0.5F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null)
-            {
-                double d3 = (double)i + 0.5D;
-                double d0 = (double)k + 0.5D;
+            if (this.lidAngle < 0.5F && f2 >= 0.5F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
+                double d3 = (double) i + 0.5D;
+                double d0 = (double) k + 0.5D;
 
-                if (this.adjacentChestZPos != null)
-                {
+                if (this.adjacentChestZPos != null) {
                     d0 += 0.5D;
                 }
 
-                if (this.adjacentChestXPos != null)
-                {
+                if (this.adjacentChestXPos != null) {
                     d3 += 0.5D;
                 }
 
-                this.world.playSound((EntityPlayer)null, d3, (double)j + 0.5D, d0, SoundEvents.BLOCK_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+                this.world.playSound((EntityPlayer) null, d3, (double) j + 0.5D, d0, SoundEvents.BLOCK_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
             }
 
-            if (this.lidAngle < 0.0F)
-            {
+            if (this.lidAngle < 0.0F) {
                 this.lidAngle = 0.0F;
             }
         }
     }
 
-    public boolean receiveClientEvent(int id, int type)
-    {
-        if (id == 1)
-        {
+    public boolean receiveClientEvent(int id, int type) {
+        if (id == 1) {
             this.numPlayersUsing = type;
             return true;
-        }
-        else
-        {
+        } else {
             return super.receiveClientEvent(id, type);
         }
     }
 
-    public void openInventory(EntityPlayer player)
-    {
-        if (!player.isSpectator())
-        {
-            if (this.numPlayersUsing < 0)
-            {
+    public void openInventory(EntityPlayer player) {
+        if (!player.isSpectator()) {
+            if (this.numPlayersUsing < 0) {
                 this.numPlayersUsing = 0;
             }
 
+            int oldPower = Math.max(0, Math.min(15, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
+
             ++this.numPlayersUsing;
+            if (this.world == null) return;
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
+            if (this.getBlockType() == Blocks.TRAPPED_CHEST) {
+                int newPower = Math.max(0, Math.min(15, this.numPlayersUsing));
+
+                if (oldPower != newPower) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos.getX(), pos.getY(), pos.getZ(), oldPower, newPower);
+                }
+            }
             this.world.notifyNeighborsOfStateChange(this.pos, this.getBlockType(), false);
 
-            if (this.getChestType() == BlockChest.Type.TRAP)
-            {
+            if (this.getChestType() == BlockChest.Type.TRAP) {
                 this.world.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType(), false);
             }
         }
     }
 
-    public void closeInventory(EntityPlayer player)
-    {
-        if (!player.isSpectator() && this.getBlockType() instanceof BlockChest)
-        {
+    public void closeInventory(EntityPlayer player) {
+        if (!player.isSpectator() && this.getBlockType() instanceof BlockChest) {
             --this.numPlayersUsing;
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
             this.world.notifyNeighborsOfStateChange(this.pos, this.getBlockType(), false);
 
-            if (this.getChestType() == BlockChest.Type.TRAP)
-            {
+            if (this.getChestType() == BlockChest.Type.TRAP) {
                 this.world.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType(), false);
             }
         }
@@ -356,11 +329,9 @@
     @SuppressWarnings("unchecked")
     @Override
     @Nullable
-    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
-    {
-        if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
-        {
-            if(doubleChestHandler == null || doubleChestHandler.needsRefresh())
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable EnumFacing facing) {
+        if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+            if (doubleChestHandler == null || doubleChestHandler.needsRefresh())
                 doubleChestHandler = net.minecraftforge.items.VanillaDoubleChestItemHandler.get(this);
             if (doubleChestHandler != null && doubleChestHandler != net.minecraftforge.items.VanillaDoubleChestItemHandler.NO_ADJACENT_CHESTS_INSTANCE)
                 return (T) doubleChestHandler;
@@ -368,47 +339,39 @@
         return super.getCapability(capability, facing);
     }
 
-    public net.minecraftforge.items.IItemHandler getSingleChestHandler()
-    {
+    public net.minecraftforge.items.IItemHandler getSingleChestHandler() {
         return super.getCapability(net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null);
     }
 
 
-    public void invalidate()
-    {
+    public void invalidate() {
         super.invalidate();
         this.updateContainingBlockInfo();
         this.checkForAdjacentChests();
     }
 
-    public BlockChest.Type getChestType()
-    {
-        if (this.cachedChestType == null)
-        {
-            if (this.world == null || !(this.getBlockType() instanceof BlockChest))
-            {
+    public BlockChest.Type getChestType() {
+        if (this.cachedChestType == null) {
+            if (this.world == null || !(this.getBlockType() instanceof BlockChest)) {
                 return BlockChest.Type.BASIC;
             }
 
-            this.cachedChestType = ((BlockChest)this.getBlockType()).chestType;
+            this.cachedChestType = ((BlockChest) this.getBlockType()).chestType;
         }
 
         return this.cachedChestType;
     }
 
-    public String getGuiID()
-    {
+    public String getGuiID() {
         return "minecraft:chest";
     }
 
-    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
-    {
+    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn) {
         this.fillWithLoot(playerIn);
         return new ContainerChest(playerInventory, this, playerIn);
     }
 
-    protected NonNullList<ItemStack> getItems()
-    {
+    protected NonNullList<ItemStack> getItems() {
         return this.chestContents;
     }
 }
