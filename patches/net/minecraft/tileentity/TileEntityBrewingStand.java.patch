--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityBrewingStand.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityBrewingStand.java
@@ -1,20 +1,16 @@
 package net.minecraft.tileentity;
 
-import java.util.Arrays;
 import net.minecraft.block.BlockBrewingStand;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Items;
-import net.minecraft.inventory.Container;
-import net.minecraft.inventory.ContainerBrewingStand;
-import net.minecraft.inventory.ISidedInventory;
-import net.minecraft.inventory.InventoryHelper;
-import net.minecraft.inventory.ItemStackHelper;
+import net.minecraft.inventory.*;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.potion.PotionHelper;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ITickable;
 import net.minecraft.util.NonNullList;
@@ -22,12 +18,20 @@
 import net.minecraft.util.datafix.FixTypes;
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
 import net.minecraft.util.math.BlockPos;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.BrewEvent;
+import org.bukkit.event.inventory.BrewingStandFuelEvent;
+import org.bukkit.inventory.InventoryHolder;
 
-public class TileEntityBrewingStand extends TileEntityLockable implements ITickable, ISidedInventory
-{
-    private static final int[] SLOTS_FOR_UP = new int[] {3};
-    private static final int[] SLOTS_FOR_DOWN = new int[] {0, 1, 2, 3};
-    private static final int[] OUTPUT_SLOTS = new int[] {0, 1, 2, 4};
+import java.util.Arrays;
+import java.util.List;
+
+public class TileEntityBrewingStand extends TileEntityLockable implements ITickable, ISidedInventory {
+    private static final int[] SLOTS_FOR_UP = new int[]{3};
+    private static final int[] SLOTS_FOR_DOWN = new int[]{0, 1, 2, 3};
+    private static final int[] OUTPUT_SLOTS = new int[]{0, 1, 2, 4};
     private NonNullList<ItemStack> brewingItemStacks = NonNullList.<ItemStack>withSize(5, ItemStack.EMPTY);
     private int brewTime;
     private boolean[] filledSlots;
@@ -35,32 +39,51 @@
     private String customName;
     private int fuel;
 
-    public String getName()
-    {
+    private int lastTick = MinecraftServer.currentTick;
+    private int maxStack = 64;
+
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+
+    public List<ItemStack> getContents() {
+        return this.brewingItemStacks;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public String getName() {
         return this.hasCustomName() ? this.customName : "container.brewing";
     }
 
-    public boolean hasCustomName()
-    {
+    public boolean hasCustomName() {
         return this.customName != null && !this.customName.isEmpty();
     }
 
-    public void setName(String name)
-    {
+    public void setName(String name) {
         this.customName = name;
     }
 
-    public int getSizeInventory()
-    {
+    public int getSizeInventory() {
         return this.brewingItemStacks.size();
     }
 
-    public boolean isEmpty()
-    {
-        for (ItemStack itemstack : this.brewingItemStacks)
-        {
-            if (!itemstack.isEmpty())
-            {
+    public boolean isEmpty() {
+        for (ItemStack itemstack : this.brewingItemStacks) {
+            if (!itemstack.isEmpty()) {
                 return false;
             }
         }
@@ -68,14 +91,23 @@
         return true;
     }
 
-    public void update()
-    {
+    public void update() {
         ItemStack itemstack = this.brewingItemStacks.get(4);
 
-        if (this.fuel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER)
-        {
-            this.fuel = 20;
-            itemstack.shrink(1);
+        if (this.fuel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER) {
+            // this.fuel = 20;
+            // itemstack.shrink(1);
+            BrewingStandFuelEvent event = new BrewingStandFuelEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), CraftItemStack.asCraftMirror(itemstack), 20);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            this.fuel = event.getFuelPower();
+            if (this.fuel > 0 && event.isConsuming()) {
+                itemstack.shrink(1);
+            }
             this.markDirty();
         }
 
@@ -83,51 +115,43 @@
         boolean flag1 = this.brewTime > 0;
         ItemStack itemstack1 = this.brewingItemStacks.get(3);
 
-        if (flag1)
-        {
-            --this.brewTime;
-            boolean flag2 = this.brewTime == 0;
+        // CraftBukkit start - Use wall time instead of ticks for brewing
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
 
-            if (flag2 && flag)
-            {
+        if (flag1) {
+            this.brewTime -= elapsedTicks;
+            boolean flag2 = this.brewTime <= 0; // == -> <=
+
+            if (flag2 && flag) {
                 this.brewPotions();
                 this.markDirty();
-            }
-            else if (!flag)
-            {
+            } else if (!flag) {
                 this.brewTime = 0;
                 this.markDirty();
-            }
-            else if (this.ingredientID != itemstack1.getItem())
-            {
+            } else if (this.ingredientID != itemstack1.getItem()) {
                 this.brewTime = 0;
                 this.markDirty();
             }
-        }
-        else if (flag && this.fuel > 0)
-        {
+        } else if (flag && this.fuel > 0) {
             --this.fuel;
             this.brewTime = 400;
             this.ingredientID = itemstack1.getItem();
             this.markDirty();
         }
 
-        if (!this.world.isRemote)
-        {
+        if (!this.world.isRemote) {
             boolean[] aboolean = this.createFilledSlotsArray();
 
-            if (!Arrays.equals(aboolean, this.filledSlots))
-            {
+            if (!Arrays.equals(aboolean, this.filledSlots)) {
                 this.filledSlots = aboolean;
                 IBlockState iblockstate = this.world.getBlockState(this.getPos());
 
-                if (!(iblockstate.getBlock() instanceof BlockBrewingStand))
-                {
+                if (!(iblockstate.getBlock() instanceof BlockBrewingStand)) {
                     return;
                 }
 
-                for (int i = 0; i < BlockBrewingStand.HAS_BOTTLE.length; ++i)
-                {
+                for (int i = 0; i < BlockBrewingStand.HAS_BOTTLE.length; ++i) {
                     iblockstate = iblockstate.withProperty(BlockBrewingStand.HAS_BOTTLE[i], Boolean.valueOf(aboolean[i]));
                 }
 
@@ -136,14 +160,11 @@
         }
     }
 
-    public boolean[] createFilledSlotsArray()
-    {
+    public boolean[] createFilledSlotsArray() {
         boolean[] aboolean = new boolean[3];
 
-        for (int i = 0; i < 3; ++i)
-        {
-            if (!((ItemStack)this.brewingItemStacks.get(i)).isEmpty())
-            {
+        for (int i = 0; i < 3; ++i) {
+            if (!((ItemStack) this.brewingItemStacks.get(i)).isEmpty()) {
                 aboolean[i] = true;
             }
         }
@@ -151,27 +172,20 @@
         return aboolean;
     }
 
-    private boolean canBrew()
-    {
-        if (1 == 1) return net.minecraftforge.common.brewing.BrewingRecipeRegistry.canBrew(brewingItemStacks, brewingItemStacks.get(3), OUTPUT_SLOTS); // divert to VanillaBrewingRegistry
+    private boolean canBrew() {
+        if (1 == 1)
+            return net.minecraftforge.common.brewing.BrewingRecipeRegistry.canBrew(brewingItemStacks, brewingItemStacks.get(3), OUTPUT_SLOTS); // divert to VanillaBrewingRegistry
         ItemStack itemstack = this.brewingItemStacks.get(3);
 
-        if (itemstack.isEmpty())
-        {
+        if (itemstack.isEmpty()) {
             return false;
-        }
-        else if (!PotionHelper.isReagent(itemstack))
-        {
+        } else if (!PotionHelper.isReagent(itemstack)) {
             return false;
-        }
-        else
-        {
-            for (int i = 0; i < 3; ++i)
-            {
+        } else {
+            for (int i = 0; i < 3; ++i) {
                 ItemStack itemstack1 = this.brewingItemStacks.get(i);
 
-                if (!itemstack1.isEmpty() && PotionHelper.hasConversions(itemstack1, itemstack))
-                {
+                if (!itemstack1.isEmpty() && PotionHelper.hasConversions(itemstack1, itemstack)) {
                     return true;
                 }
             }
@@ -180,28 +194,32 @@
         }
     }
 
-    private void brewPotions()
-    {
+    private void brewPotions() {
         if (net.minecraftforge.event.ForgeEventFactory.onPotionAttemptBrew(brewingItemStacks)) return;
         ItemStack itemstack = this.brewingItemStacks.get(3);
 
+        InventoryHolder owner = this.getOwner();
+        if (owner != null) {
+            BrewEvent event = new BrewEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), this.fuel);
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+        }
+
         net.minecraftforge.common.brewing.BrewingRecipeRegistry.brewPotions(brewingItemStacks, brewingItemStacks.get(3), OUTPUT_SLOTS);
 
         itemstack.shrink(1);
         BlockPos blockpos = this.getPos();
 
-        if (itemstack.getItem().hasContainerItem(itemstack))
-        {
+        if (itemstack.getItem().hasContainerItem(itemstack)) {
             ItemStack itemstack1 = itemstack.getItem().getContainerItem(itemstack);
 
-            if (itemstack.isEmpty())
-            {
+            if (itemstack.isEmpty()) {
                 itemstack = itemstack1;
+            } else {
+                InventoryHelper.spawnItemStack(this.world, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), itemstack1);
             }
-            else
-            {
-                InventoryHelper.spawnItemStack(this.world, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), itemstack1);
-            }
         }
 
         this.brewingItemStacks.set(3, itemstack);
@@ -209,153 +227,116 @@
         net.minecraftforge.event.ForgeEventFactory.onPotionBrewed(brewingItemStacks);
     }
 
-    public static void registerFixesBrewingStand(DataFixer fixer)
-    {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityBrewingStand.class, new String[] {"Items"}));
+    public static void registerFixesBrewingStand(DataFixer fixer) {
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityBrewingStand.class, new String[]{"Items"}));
     }
 
-    public void readFromNBT(NBTTagCompound compound)
-    {
+    public void readFromNBT(NBTTagCompound compound) {
         super.readFromNBT(compound);
         this.brewingItemStacks = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
         ItemStackHelper.loadAllItems(compound, this.brewingItemStacks);
         this.brewTime = compound.getShort("BrewTime");
 
-        if (compound.hasKey("CustomName", 8))
-        {
+        if (compound.hasKey("CustomName", 8)) {
             this.customName = compound.getString("CustomName");
         }
 
         this.fuel = compound.getByte("Fuel");
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound compound)
-    {
+    public NBTTagCompound writeToNBT(NBTTagCompound compound) {
         super.writeToNBT(compound);
-        compound.setShort("BrewTime", (short)this.brewTime);
+        compound.setShort("BrewTime", (short) this.brewTime);
         ItemStackHelper.saveAllItems(compound, this.brewingItemStacks);
 
-        if (this.hasCustomName())
-        {
+        if (this.hasCustomName()) {
             compound.setString("CustomName", this.customName);
         }
 
-        compound.setByte("Fuel", (byte)this.fuel);
+        compound.setByte("Fuel", (byte) this.fuel);
         return compound;
     }
 
-    public ItemStack getStackInSlot(int index)
-    {
-        return index >= 0 && index < this.brewingItemStacks.size() ? (ItemStack)this.brewingItemStacks.get(index) : ItemStack.EMPTY;
+    public ItemStack getStackInSlot(int index) {
+        return index >= 0 && index < this.brewingItemStacks.size() ? (ItemStack) this.brewingItemStacks.get(index) : ItemStack.EMPTY;
     }
 
-    public ItemStack decrStackSize(int index, int count)
-    {
+    public ItemStack decrStackSize(int index, int count) {
         return ItemStackHelper.getAndSplit(this.brewingItemStacks, index, count);
     }
 
-    public ItemStack removeStackFromSlot(int index)
-    {
+    public ItemStack removeStackFromSlot(int index) {
         return ItemStackHelper.getAndRemove(this.brewingItemStacks, index);
     }
 
-    public void setInventorySlotContents(int index, ItemStack stack)
-    {
-        if (index >= 0 && index < this.brewingItemStacks.size())
-        {
+    public void setInventorySlotContents(int index, ItemStack stack) {
+        if (index >= 0 && index < this.brewingItemStacks.size()) {
             this.brewingItemStacks.set(index, stack);
         }
     }
 
-    public int getInventoryStackLimit()
-    {
-        return 64;
+    public int getInventoryStackLimit() {
+        return this.maxStack;
     }
 
-    public boolean isUsableByPlayer(EntityPlayer player)
-    {
-        if (this.world.getTileEntity(this.pos) != this)
-        {
+    public boolean isUsableByPlayer(EntityPlayer player) {
+        if (this.world.getTileEntity(this.pos) != this) {
             return false;
+        } else {
+            return player.getDistanceSq((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.5D, (double) this.pos.getZ() + 0.5D) <= 64.0D;
         }
-        else
-        {
-            return player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
-        }
     }
 
-    public void openInventory(EntityPlayer player)
-    {
+    public void openInventory(EntityPlayer player) {
     }
 
-    public void closeInventory(EntityPlayer player)
-    {
+    public void closeInventory(EntityPlayer player) {
     }
 
-    public boolean isItemValidForSlot(int index, ItemStack stack)
-    {
-        if (index == 3)
-        {
+    public boolean isItemValidForSlot(int index, ItemStack stack) {
+        if (index == 3) {
             return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidIngredient(stack);
-        }
-        else
-        {
+        } else {
             Item item = stack.getItem();
 
-            if (index == 4)
-            {
+            if (index == 4) {
                 return item == Items.BLAZE_POWDER;
-            }
-            else
-            {
+            } else {
                 return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidInput(stack) && this.getStackInSlot(index).isEmpty();
             }
         }
     }
 
-    public int[] getSlotsForFace(EnumFacing side)
-    {
-        if (side == EnumFacing.UP)
-        {
+    public int[] getSlotsForFace(EnumFacing side) {
+        if (side == EnumFacing.UP) {
             return SLOTS_FOR_UP;
-        }
-        else
-        {
+        } else {
             return side == EnumFacing.DOWN ? SLOTS_FOR_DOWN : OUTPUT_SLOTS;
         }
     }
 
-    public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
-    {
+    public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction) {
         return this.isItemValidForSlot(index, itemStackIn);
     }
 
-    public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
-    {
-        if (index == 3)
-        {
+    public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction) {
+        if (index == 3) {
             return stack.getItem() == Items.GLASS_BOTTLE;
-        }
-        else
-        {
+        } else {
             return true;
         }
     }
 
-    public String getGuiID()
-    {
+    public String getGuiID() {
         return "minecraft:brewing_stand";
     }
 
-    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
-    {
+    public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn) {
         return new ContainerBrewingStand(playerInventory, this);
     }
 
-    public int getField(int id)
-    {
-        switch (id)
-        {
+    public int getField(int id) {
+        switch (id) {
             case 0:
                 return this.brewTime;
             case 1:
@@ -365,10 +346,8 @@
         }
     }
 
-    public void setField(int id, int value)
-    {
-        switch (id)
-        {
+    public void setField(int id, int value) {
+        switch (id) {
             case 0:
                 this.brewTime = value;
                 break;
@@ -377,17 +356,15 @@
         }
     }
 
-    net.minecraftforge.items.IItemHandler handlerInput = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.UP);
-    net.minecraftforge.items.IItemHandler handlerOutput = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.DOWN);
-    net.minecraftforge.items.IItemHandler handlerSides = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.NORTH);
+    net.minecraftforge.items.IItemHandler handlerInput = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.UP);
+    net.minecraftforge.items.IItemHandler handlerOutput = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.DOWN);
+    net.minecraftforge.items.IItemHandler handlerSides = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.NORTH);
 
     @SuppressWarnings("unchecked")
     @Override
     @javax.annotation.Nullable
-    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable net.minecraft.util.EnumFacing facing)
-    {
-        if (facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
-        {
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable EnumFacing facing) {
+        if (facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
             if (facing == EnumFacing.UP)
                 return (T) handlerInput;
             else if (facing == EnumFacing.DOWN)
@@ -398,13 +375,11 @@
         return super.getCapability(capability, facing);
     }
 
-    public int getFieldCount()
-    {
+    public int getFieldCount() {
         return 2;
     }
 
-    public void clear()
-    {
+    public void clear() {
         this.brewingItemStacks.clear();
     }
 }
