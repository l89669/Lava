--- ../src-base/minecraft/net/minecraft/nbt/NBTTagIntArray.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTTagIntArray.java
@@ -6,30 +6,24 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class NBTTagIntArray extends NBTBase
-{
+public class NBTTagIntArray extends NBTBase {
     private int[] intArray;
 
-    NBTTagIntArray()
-    {
+    NBTTagIntArray() {
     }
 
-    public NBTTagIntArray(int[] p_i45132_1_)
-    {
+    public NBTTagIntArray(int[] p_i45132_1_) {
         this.intArray = p_i45132_1_;
     }
 
-    public NBTTagIntArray(List<Integer> p_i47528_1_)
-    {
+    public NBTTagIntArray(List<Integer> p_i47528_1_) {
         this(toArray(p_i47528_1_));
     }
 
-    private static int[] toArray(List<Integer> p_193584_0_)
-    {
+    private static int[] toArray(List<Integer> p_193584_0_) {
         int[] aint = new int[p_193584_0_.size()];
 
-        for (int i = 0; i < p_193584_0_.size(); ++i)
-        {
+        for (int i = 0; i < p_193584_0_.size(); ++i) {
             Integer integer = p_193584_0_.get(i);
             aint[i] = integer == null ? 0 : integer.intValue();
         }
@@ -37,42 +31,34 @@
         return aint;
     }
 
-    void write(DataOutput output) throws IOException
-    {
+    public void write(DataOutput output) throws IOException {
         output.writeInt(this.intArray.length);
 
-        for (int i : this.intArray)
-        {
+        for (int i : this.intArray) {
             output.writeInt(i);
         }
     }
 
-    void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
-    {
+    void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException {
         sizeTracker.read(192L);
         int i = input.readInt();
-        sizeTracker.read((long)(32 * i));
+        sizeTracker.read((long) (32 * i));
         this.intArray = new int[i];
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             this.intArray[j] = input.readInt();
         }
     }
 
-    public byte getId()
-    {
+    public byte getId() {
         return 11;
     }
 
-    public String toString()
-    {
+    public String toString() {
         StringBuilder stringbuilder = new StringBuilder("[I;");
 
-        for (int i = 0; i < this.intArray.length; ++i)
-        {
-            if (i != 0)
-            {
+        for (int i = 0; i < this.intArray.length; ++i) {
+            if (i != 0) {
                 stringbuilder.append(',');
             }
 
@@ -82,25 +68,21 @@
         return stringbuilder.append(']').toString();
     }
 
-    public NBTTagIntArray copy()
-    {
+    public NBTTagIntArray copy() {
         int[] aint = new int[this.intArray.length];
         System.arraycopy(this.intArray, 0, aint, 0, this.intArray.length);
         return new NBTTagIntArray(aint);
     }
 
-    public boolean equals(Object p_equals_1_)
-    {
-        return super.equals(p_equals_1_) && Arrays.equals(this.intArray, ((NBTTagIntArray)p_equals_1_).intArray);
+    public boolean equals(Object p_equals_1_) {
+        return super.equals(p_equals_1_) && Arrays.equals(this.intArray, ((NBTTagIntArray) p_equals_1_).intArray);
     }
 
-    public int hashCode()
-    {
+    public int hashCode() {
         return super.hashCode() ^ Arrays.hashCode(this.intArray);
     }
 
-    public int[] getIntArray()
-    {
+    public int[] getIntArray() {
         return this.intArray;
     }
 }
