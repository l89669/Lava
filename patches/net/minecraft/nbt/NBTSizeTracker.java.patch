--- ../src-base/minecraft/net/minecraft/nbt/NBTSizeTracker.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTSizeTracker.java
@@ -1,27 +1,21 @@
 package net.minecraft.nbt;
 
-public class NBTSizeTracker
-{
-    public static final NBTSizeTracker INFINITE = new NBTSizeTracker(0L)
-    {
-        public void read(long bits)
-        {
+public class NBTSizeTracker {
+    public static final NBTSizeTracker INFINITE = new NBTSizeTracker(0L) {
+        public void read(long bits) {
         }
     };
     private final long max;
     private long read;
 
-    public NBTSizeTracker(long max)
-    {
+    public NBTSizeTracker(long max) {
         this.max = max;
     }
 
-    public void read(long bits)
-    {
+    public void read(long bits) {
         this.read += bits / 8L;
 
-        if (this.read > this.max)
-        {
+        if (this.read > this.max) {
             throw new RuntimeException("Tried to read NBT tag that was too big; tried to allocate: " + this.read + "bytes where max allowed: " + this.max);
         }
     }
@@ -37,8 +31,7 @@
      *
      * This will accurately count the correct byte length to encode this string, plus the 2 bytes for it's length prefix.
      */
-    public static void readUTF(NBTSizeTracker tracker, String data)
-    {
+    public static void readUTF(NBTSizeTracker tracker, String data) {
         tracker.read(16); //Header length
         if (data == null)
             return;
@@ -46,12 +39,11 @@
         int len = data.length();
         int utflen = 0;
 
-        for (int i = 0; i < len; i++)
-        {
+        for (int i = 0; i < len; i++) {
             int c = data.charAt(i);
             if ((c >= 0x0001) && (c <= 0x007F)) utflen += 1;
-            else if (c > 0x07FF)                utflen += 3;
-            else                                utflen += 2;
+            else if (c > 0x07FF) utflen += 3;
+            else utflen += 2;
         }
         tracker.read(8 * utflen);
     }
