--- ../src-base/minecraft/net/minecraft/nbt/NBTTagLongArray.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTTagLongArray.java
@@ -6,30 +6,24 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class NBTTagLongArray extends NBTBase
-{
+public class NBTTagLongArray extends NBTBase {
     private long[] data;
 
-    NBTTagLongArray()
-    {
+    NBTTagLongArray() {
     }
 
-    public NBTTagLongArray(long[] p_i47524_1_)
-    {
+    public NBTTagLongArray(long[] p_i47524_1_) {
         this.data = p_i47524_1_;
     }
 
-    public NBTTagLongArray(List<Long> p_i47525_1_)
-    {
+    public NBTTagLongArray(List<Long> p_i47525_1_) {
         this(toArray(p_i47525_1_));
     }
 
-    private static long[] toArray(List<Long> p_193586_0_)
-    {
+    private static long[] toArray(List<Long> p_193586_0_) {
         long[] along = new long[p_193586_0_.size()];
 
-        for (int i = 0; i < p_193586_0_.size(); ++i)
-        {
+        for (int i = 0; i < p_193586_0_.size(); ++i) {
             Long olong = p_193586_0_.get(i);
             along[i] = olong == null ? 0L : olong.longValue();
         }
@@ -37,42 +31,34 @@
         return along;
     }
 
-    void write(DataOutput output) throws IOException
-    {
+    public void write(DataOutput output) throws IOException {
         output.writeInt(this.data.length);
 
-        for (long i : this.data)
-        {
+        for (long i : this.data) {
             output.writeLong(i);
         }
     }
 
-    void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
-    {
+    void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException {
         sizeTracker.read(192L);
         int i = input.readInt();
-        sizeTracker.read((long)(64 * i));
+        sizeTracker.read((long) (64 * i));
         this.data = new long[i];
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             this.data[j] = input.readLong();
         }
     }
 
-    public byte getId()
-    {
+    public byte getId() {
         return 12;
     }
 
-    public String toString()
-    {
+    public String toString() {
         StringBuilder stringbuilder = new StringBuilder("[L;");
 
-        for (int i = 0; i < this.data.length; ++i)
-        {
-            if (i != 0)
-            {
+        for (int i = 0; i < this.data.length; ++i) {
+            if (i != 0) {
                 stringbuilder.append(',');
             }
 
@@ -82,20 +68,17 @@
         return stringbuilder.append(']').toString();
     }
 
-    public NBTTagLongArray copy()
-    {
+    public NBTTagLongArray copy() {
         long[] along = new long[this.data.length];
         System.arraycopy(this.data, 0, along, 0, this.data.length);
         return new NBTTagLongArray(along);
     }
 
-    public boolean equals(Object p_equals_1_)
-    {
-        return super.equals(p_equals_1_) && Arrays.equals(this.data, ((NBTTagLongArray)p_equals_1_).data);
+    public boolean equals(Object p_equals_1_) {
+        return super.equals(p_equals_1_) && Arrays.equals(this.data, ((NBTTagLongArray) p_equals_1_).data);
     }
 
-    public int hashCode()
-    {
+    public int hashCode() {
         return super.hashCode() ^ Arrays.hashCode(this.data);
     }
 }
