--- ../src-base/minecraft/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -5,31 +5,28 @@
 import com.google.common.collect.Sets;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import net.minecraft.advancements.ICriterionTrigger;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.ResourceLocation;
 
-public class ConsumeItemTrigger implements ICriterionTrigger<ConsumeItemTrigger.Instance>
-{
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+public class ConsumeItemTrigger implements ICriterionTrigger<ConsumeItemTrigger.Instance> {
     private static final ResourceLocation ID = new ResourceLocation("consume_item");
     private final Map<PlayerAdvancements, ConsumeItemTrigger.Listeners> listeners = Maps.<PlayerAdvancements, ConsumeItemTrigger.Listeners>newHashMap();
 
-    public ResourceLocation getId()
-    {
+    public ResourceLocation getId() {
         return ID;
     }
 
-    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener)
-    {
+    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener) {
         ConsumeItemTrigger.Listeners consumeitemtrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
-        if (consumeitemtrigger$listeners == null)
-        {
+        if (consumeitemtrigger$listeners == null) {
             consumeitemtrigger$listeners = new ConsumeItemTrigger.Listeners(playerAdvancementsIn);
             this.listeners.put(playerAdvancementsIn, consumeitemtrigger$listeners);
         }
@@ -37,107 +34,86 @@
         consumeitemtrigger$listeners.add(listener);
     }
 
-    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener)
-    {
+    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener) {
         ConsumeItemTrigger.Listeners consumeitemtrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
-        if (consumeitemtrigger$listeners != null)
-        {
+        if (consumeitemtrigger$listeners != null) {
             consumeitemtrigger$listeners.remove(listener);
 
-            if (consumeitemtrigger$listeners.isEmpty())
-            {
+            if (consumeitemtrigger$listeners.isEmpty()) {
                 this.listeners.remove(playerAdvancementsIn);
             }
         }
     }
 
-    public void removeAllListeners(PlayerAdvancements playerAdvancementsIn)
-    {
+    public void removeAllListeners(PlayerAdvancements playerAdvancementsIn) {
         this.listeners.remove(playerAdvancementsIn);
     }
 
-    public ConsumeItemTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
-    {
+    public ConsumeItemTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context) {
         ItemPredicate itempredicate = ItemPredicate.deserialize(json.get("item"));
         return new ConsumeItemTrigger.Instance(itempredicate);
     }
 
-    public void trigger(EntityPlayerMP player, ItemStack item)
-    {
+    public void trigger(EntityPlayerMP player, ItemStack item) {
         ConsumeItemTrigger.Listeners consumeitemtrigger$listeners = this.listeners.get(player.getAdvancements());
 
-        if (consumeitemtrigger$listeners != null)
-        {
+        if (consumeitemtrigger$listeners != null) {
             consumeitemtrigger$listeners.trigger(item);
         }
     }
 
-    public static class Instance extends AbstractCriterionInstance
-        {
-            private final ItemPredicate item;
+    public static class Instance extends AbstractCriterionInstance {
+        private final ItemPredicate item;
 
-            public Instance(ItemPredicate item)
-            {
-                super(ConsumeItemTrigger.ID);
-                this.item = item;
-            }
+        public Instance(ItemPredicate item) {
+            super(ConsumeItemTrigger.ID);
+            this.item = item;
+        }
 
-            public boolean test(ItemStack item)
-            {
-                return this.item.test(item);
-            }
+        public boolean test(ItemStack item) {
+            return this.item.test(item);
         }
+    }
 
-    static class Listeners
-        {
-            private final PlayerAdvancements playerAdvancements;
-            private final Set<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>>newHashSet();
+    static class Listeners {
+        private final PlayerAdvancements playerAdvancements;
+        private final Set<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>>newHashSet();
 
-            public Listeners(PlayerAdvancements playerAdvancementsIn)
-            {
-                this.playerAdvancements = playerAdvancementsIn;
-            }
+        public Listeners(PlayerAdvancements playerAdvancementsIn) {
+            this.playerAdvancements = playerAdvancementsIn;
+        }
 
-            public boolean isEmpty()
-            {
-                return this.listeners.isEmpty();
-            }
+        public boolean isEmpty() {
+            return this.listeners.isEmpty();
+        }
 
-            public void add(ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener)
-            {
-                this.listeners.add(listener);
-            }
+        public void add(ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener) {
+            this.listeners.add(listener);
+        }
 
-            public void remove(ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener)
-            {
-                this.listeners.remove(listener);
-            }
+        public void remove(ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener) {
+            this.listeners.remove(listener);
+        }
 
-            public void trigger(ItemStack item)
-            {
-                List<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>> list = null;
+        public void trigger(ItemStack item) {
+            List<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>> list = null;
 
-                for (ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener : this.listeners)
-                {
-                    if (((ConsumeItemTrigger.Instance)listener.getCriterionInstance()).test(item))
-                    {
-                        if (list == null)
-                        {
-                            list = Lists.<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>>newArrayList();
-                        }
-
-                        list.add(listener);
+            for (ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener : this.listeners) {
+                if (((ConsumeItemTrigger.Instance) listener.getCriterionInstance()).test(item)) {
+                    if (list == null) {
+                        list = Lists.<ICriterionTrigger.Listener<ConsumeItemTrigger.Instance>>newArrayList();
                     }
+
+                    list.add(listener);
                 }
+            }
 
-                if (list != null)
-                {
-                    for (ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener1 : list)
-                    {
-                        listener1.grantCriterion(this.playerAdvancements);
-                    }
+            if (list != null) {
+                for (ICriterionTrigger.Listener<ConsumeItemTrigger.Instance> listener1 : list) {
+                    listener1.grantCriterion(this.playerAdvancements);
                 }
             }
         }
+    }
 }
