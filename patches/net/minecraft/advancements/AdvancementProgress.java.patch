--- ../src-base/minecraft/net/minecraft/advancements/AdvancementProgress.java
+++ ../src-work/minecraft/net/minecraft/advancements/AdvancementProgress.java
@@ -2,51 +2,35 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import java.lang.reflect.Type;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
+import com.google.gson.*;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.util.JsonUtils;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class AdvancementProgress implements Comparable<AdvancementProgress>
-{
+import javax.annotation.Nullable;
+import java.lang.reflect.Type;
+import java.util.*;
+import java.util.Map.Entry;
+
+public class AdvancementProgress implements Comparable<AdvancementProgress> {
     private final Map<String, CriterionProgress> criteria = Maps.<String, CriterionProgress>newHashMap();
     private String[][] requirements = new String[0][];
 
-    public void update(Map<String, Criterion> criteriaIn, String[][] requirements)
-    {
+    public void update(Map<String, Criterion> criteriaIn, String[][] requirements) {
         Set<String> set = criteriaIn.keySet();
         Iterator<Entry<String, CriterionProgress>> iterator = this.criteria.entrySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            Entry<String, CriterionProgress> entry = (Entry)iterator.next();
+        while (iterator.hasNext()) {
+            Entry<String, CriterionProgress> entry = (Entry) iterator.next();
 
-            if (!set.contains(entry.getKey()))
-            {
+            if (!set.contains(entry.getKey())) {
                 iterator.remove();
             }
         }
 
-        for (String s : set)
-        {
-            if (!this.criteria.containsKey(s))
-            {
+        for (String s : set) {
+            if (!this.criteria.containsKey(s)) {
                 this.criteria.put(s, new CriterionProgress(this));
             }
         }
@@ -54,31 +38,23 @@
         this.requirements = requirements;
     }
 
-    public boolean isDone()
-    {
-        if (this.requirements.length == 0)
-        {
+    public boolean isDone() {
+        if (this.requirements.length == 0) {
             return false;
-        }
-        else
-        {
-            for (String[] astring : this.requirements)
-            {
+        } else {
+            for (String[] astring : this.requirements) {
                 boolean flag = false;
 
-                for (String s : astring)
-                {
+                for (String s : astring) {
                     CriterionProgress criterionprogress = this.getCriterionProgress(s);
 
-                    if (criterionprogress != null && criterionprogress.isObtained())
-                    {
+                    if (criterionprogress != null && criterionprogress.isObtained()) {
                         flag = true;
                         break;
                     }
                 }
 
-                if (!flag)
-                {
+                if (!flag) {
                     return false;
                 }
             }
@@ -87,12 +63,9 @@
         }
     }
 
-    public boolean hasProgress()
-    {
-        for (CriterionProgress criterionprogress : this.criteria.values())
-        {
-            if (criterionprogress.isObtained())
-            {
+    public boolean hasProgress() {
+        for (CriterionProgress criterionprogress : this.criteria.values()) {
+            if (criterionprogress.isObtained()) {
                 return true;
             }
         }
@@ -100,59 +73,46 @@
         return false;
     }
 
-    public boolean grantCriterion(String criterionIn)
-    {
+    public boolean grantCriterion(String criterionIn) {
         CriterionProgress criterionprogress = this.criteria.get(criterionIn);
 
-        if (criterionprogress != null && !criterionprogress.isObtained())
-        {
+        if (criterionprogress != null && !criterionprogress.isObtained()) {
             criterionprogress.obtain();
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public boolean revokeCriterion(String criterionIn)
-    {
+    public boolean revokeCriterion(String criterionIn) {
         CriterionProgress criterionprogress = this.criteria.get(criterionIn);
 
-        if (criterionprogress != null && criterionprogress.isObtained())
-        {
+        if (criterionprogress != null && criterionprogress.isObtained()) {
             criterionprogress.reset();
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public String toString()
-    {
+    public String toString() {
         return "AdvancementProgress{criteria=" + this.criteria + ", requirements=" + Arrays.deepToString(this.requirements) + '}';
     }
 
-    public void serializeToNetwork(PacketBuffer p_192104_1_)
-    {
+    public void serializeToNetwork(PacketBuffer p_192104_1_) {
         p_192104_1_.writeVarInt(this.criteria.size());
 
-        for (Entry<String, CriterionProgress> entry : this.criteria.entrySet())
-        {
+        for (Entry<String, CriterionProgress> entry : this.criteria.entrySet()) {
             p_192104_1_.writeString(entry.getKey());
-            ((CriterionProgress)entry.getValue()).write(p_192104_1_);
+            ((CriterionProgress) entry.getValue()).write(p_192104_1_);
         }
     }
 
-    public static AdvancementProgress fromNetwork(PacketBuffer p_192100_0_)
-    {
+    public static AdvancementProgress fromNetwork(PacketBuffer p_192100_0_) {
         AdvancementProgress advancementprogress = new AdvancementProgress();
         int i = p_192100_0_.readVarInt();
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             advancementprogress.criteria.put(p_192100_0_.readString(32767), CriterionProgress.read(p_192100_0_, advancementprogress));
         }
 
@@ -160,44 +120,32 @@
     }
 
     @Nullable
-    public CriterionProgress getCriterionProgress(String criterionIn)
-    {
+    public CriterionProgress getCriterionProgress(String criterionIn) {
         return this.criteria.get(criterionIn);
     }
 
     @SideOnly(Side.CLIENT)
-    public float getPercent()
-    {
-        if (this.criteria.isEmpty())
-        {
+    public float getPercent() {
+        if (this.criteria.isEmpty()) {
             return 0.0F;
-        }
-        else
-        {
-            float f = (float)this.requirements.length;
-            float f1 = (float)this.countCompletedRequirements();
+        } else {
+            float f = (float) this.requirements.length;
+            float f1 = (float) this.countCompletedRequirements();
             return f1 / f;
         }
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
-    public String getProgressText()
-    {
-        if (this.criteria.isEmpty())
-        {
+    public String getProgressText() {
+        if (this.criteria.isEmpty()) {
             return null;
-        }
-        else
-        {
+        } else {
             int i = this.requirements.length;
 
-            if (i <= 1)
-            {
+            if (i <= 1) {
                 return null;
-            }
-            else
-            {
+            } else {
                 int j = this.countCompletedRequirements();
                 return j + "/" + i;
             }
@@ -205,27 +153,22 @@
     }
 
     @SideOnly(Side.CLIENT)
-    private int countCompletedRequirements()
-    {
+    private int countCompletedRequirements() {
         int i = 0;
 
-        for (String[] astring : this.requirements)
-        {
+        for (String[] astring : this.requirements) {
             boolean flag = false;
 
-            for (String s : astring)
-            {
+            for (String s : astring) {
                 CriterionProgress criterionprogress = this.getCriterionProgress(s);
 
-                if (criterionprogress != null && criterionprogress.isObtained())
-                {
+                if (criterionprogress != null && criterionprogress.isObtained()) {
                     flag = true;
                     break;
                 }
             }
 
-            if (flag)
-            {
+            if (flag) {
                 ++i;
             }
         }
@@ -233,14 +176,11 @@
         return i;
     }
 
-    public Iterable<String> getRemaningCriteria()
-    {
+    public Iterable<String> getRemaningCriteria() {
         List<String> list = Lists.<String>newArrayList();
 
-        for (Entry<String, CriterionProgress> entry : this.criteria.entrySet())
-        {
-            if (!((CriterionProgress)entry.getValue()).isObtained())
-            {
+        for (Entry<String, CriterionProgress> entry : this.criteria.entrySet()) {
+            if (!((CriterionProgress) entry.getValue()).isObtained()) {
                 list.add(entry.getKey());
             }
         }
@@ -248,14 +188,11 @@
         return list;
     }
 
-    public Iterable<String> getCompletedCriteria()
-    {
+    public Iterable<String> getCompletedCriteria() {
         List<String> list = Lists.<String>newArrayList();
 
-        for (Entry<String, CriterionProgress> entry : this.criteria.entrySet())
-        {
-            if (((CriterionProgress)entry.getValue()).isObtained())
-            {
+        for (Entry<String, CriterionProgress> entry : this.criteria.entrySet()) {
+            if (((CriterionProgress) entry.getValue()).isObtained()) {
                 list.add(entry.getKey());
             }
         }
@@ -264,14 +201,11 @@
     }
 
     @Nullable
-    public Date getFirstProgressDate()
-    {
+    public Date getFirstProgressDate() {
         Date date = null;
 
-        for (CriterionProgress criterionprogress : this.criteria.values())
-        {
-            if (criterionprogress.isObtained() && (date == null || criterionprogress.getObtained().before(date)))
-            {
+        for (CriterionProgress criterionprogress : this.criteria.values()) {
+            if (criterionprogress.isObtained() && (date == null || criterionprogress.getObtained().before(date))) {
                 date = criterionprogress.getObtained();
             }
         }
@@ -279,64 +213,51 @@
         return date;
     }
 
-    public int compareTo(AdvancementProgress p_compareTo_1_)
-    {
+    public int compareTo(AdvancementProgress p_compareTo_1_) {
         Date date = this.getFirstProgressDate();
         Date date1 = p_compareTo_1_.getFirstProgressDate();
 
-        if (date == null && date1 != null)
-        {
+        if (date == null && date1 != null) {
             return 1;
-        }
-        else if (date != null && date1 == null)
-        {
+        } else if (date != null && date1 == null) {
             return -1;
-        }
-        else
-        {
+        } else {
             return date == null && date1 == null ? 0 : date.compareTo(date1);
         }
     }
 
-    public static class Serializer implements JsonDeserializer<AdvancementProgress>, JsonSerializer<AdvancementProgress>
-        {
-            public JsonElement serialize(AdvancementProgress p_serialize_1_, Type p_serialize_2_, JsonSerializationContext p_serialize_3_)
-            {
-                JsonObject jsonobject = new JsonObject();
-                JsonObject jsonobject1 = new JsonObject();
+    public static class Serializer implements JsonDeserializer<AdvancementProgress>, JsonSerializer<AdvancementProgress> {
+        public JsonElement serialize(AdvancementProgress p_serialize_1_, Type p_serialize_2_, JsonSerializationContext p_serialize_3_) {
+            JsonObject jsonobject = new JsonObject();
+            JsonObject jsonobject1 = new JsonObject();
 
-                for (Entry<String, CriterionProgress> entry : p_serialize_1_.criteria.entrySet())
-                {
-                    CriterionProgress criterionprogress = entry.getValue();
+            for (Entry<String, CriterionProgress> entry : p_serialize_1_.criteria.entrySet()) {
+                CriterionProgress criterionprogress = entry.getValue();
 
-                    if (criterionprogress.isObtained())
-                    {
-                        jsonobject1.add(entry.getKey(), criterionprogress.serialize());
-                    }
+                if (criterionprogress.isObtained()) {
+                    jsonobject1.add(entry.getKey(), criterionprogress.serialize());
                 }
+            }
 
-                if (!jsonobject1.entrySet().isEmpty())
-                {
-                    jsonobject.add("criteria", jsonobject1);
-                }
-
-                jsonobject.addProperty("done", Boolean.valueOf(p_serialize_1_.isDone()));
-                return jsonobject;
+            if (!jsonobject1.entrySet().isEmpty()) {
+                jsonobject.add("criteria", jsonobject1);
             }
 
-            public AdvancementProgress deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
-            {
-                JsonObject jsonobject = JsonUtils.getJsonObject(p_deserialize_1_, "advancement");
-                JsonObject jsonobject1 = JsonUtils.getJsonObject(jsonobject, "criteria", new JsonObject());
-                AdvancementProgress advancementprogress = new AdvancementProgress();
+            jsonobject.addProperty("done", Boolean.valueOf(p_serialize_1_.isDone()));
+            return jsonobject;
+        }
 
-                for (Entry<String, JsonElement> entry : jsonobject1.entrySet())
-                {
-                    String s = entry.getKey();
-                    advancementprogress.criteria.put(s, CriterionProgress.fromDateTime(advancementprogress, JsonUtils.getString(entry.getValue(), s)));
-                }
+        public AdvancementProgress deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException {
+            JsonObject jsonobject = JsonUtils.getJsonObject(p_deserialize_1_, "advancement");
+            JsonObject jsonobject1 = JsonUtils.getJsonObject(jsonobject, "criteria", new JsonObject());
+            AdvancementProgress advancementprogress = new AdvancementProgress();
 
-                return advancementprogress;
+            for (Entry<String, JsonElement> entry : jsonobject1.entrySet()) {
+                String s = entry.getKey();
+                advancementprogress.criteria.put(s, CriterionProgress.fromDateTime(advancementprogress, JsonUtils.getString(entry.getValue(), s)));
             }
+
+            return advancementprogress;
         }
+    }
 }
