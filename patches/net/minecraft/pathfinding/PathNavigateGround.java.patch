--- ../src-base/minecraft/net/minecraft/pathfinding/PathNavigateGround.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/PathNavigateGround.java
@@ -10,66 +10,52 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.World;
 
-public class PathNavigateGround extends PathNavigate
-{
+public class PathNavigateGround extends PathNavigate {
     private boolean shouldAvoidSun;
 
-    public PathNavigateGround(EntityLiving entitylivingIn, World worldIn)
-    {
+    public PathNavigateGround(EntityLiving entitylivingIn, World worldIn) {
         super(entitylivingIn, worldIn);
     }
 
-    protected PathFinder getPathFinder()
-    {
+    protected PathFinder getPathFinder() {
         this.nodeProcessor = new WalkNodeProcessor();
         this.nodeProcessor.setCanEnterDoors(true);
         return new PathFinder(this.nodeProcessor);
     }
 
-    protected boolean canNavigate()
-    {
+    protected boolean canNavigate() {
         return this.entity.onGround || this.getCanSwim() && this.isInLiquid() || this.entity.isRiding();
     }
 
-    protected Vec3d getEntityPosition()
-    {
-        return new Vec3d(this.entity.posX, (double)this.getPathablePosY(), this.entity.posZ);
+    protected Vec3d getEntityPosition() {
+        return new Vec3d(this.entity.posX, (double) this.getPathablePosY(), this.entity.posZ);
     }
 
-    public Path getPathToPos(BlockPos pos)
-    {
-        if (this.world.getBlockState(pos).getMaterial() == Material.AIR)
-        {
+    public Path getPathToPos(BlockPos pos) {
+        if (this.world.getBlockState(pos).getMaterial() == Material.AIR) {
             BlockPos blockpos;
 
-            for (blockpos = pos.down(); blockpos.getY() > 0 && this.world.getBlockState(blockpos).getMaterial() == Material.AIR; blockpos = blockpos.down())
-            {
+            for (blockpos = pos.down(); blockpos.getY() > 0 && this.world.getBlockState(blockpos).getMaterial() == Material.AIR; blockpos = blockpos.down()) {
                 ;
             }
 
-            if (blockpos.getY() > 0)
-            {
+            if (blockpos.getY() > 0) {
                 return super.getPathToPos(blockpos.up());
             }
 
-            while (blockpos.getY() < this.world.getHeight() && this.world.getBlockState(blockpos).getMaterial() == Material.AIR)
-            {
+            while (blockpos.getY() < this.world.getHeight() && this.world.getBlockState(blockpos).getMaterial() == Material.AIR) {
                 blockpos = blockpos.up();
             }
 
             pos = blockpos;
         }
 
-        if (!this.world.getBlockState(pos).getMaterial().isSolid())
-        {
+        if (!this.world.getBlockState(pos).getMaterial().isSolid()) {
             return super.getPathToPos(pos);
-        }
-        else
-        {
+        } else {
             BlockPos blockpos1;
 
-            for (blockpos1 = pos.up(); blockpos1.getY() < this.world.getHeight() && this.world.getBlockState(blockpos1).getMaterial().isSolid(); blockpos1 = blockpos1.up())
-            {
+            for (blockpos1 = pos.up(); blockpos1.getY() < this.world.getHeight() && this.world.getBlockState(blockpos1).getMaterial().isSolid(); blockpos1 = blockpos1.up()) {
                 ;
             }
 
@@ -77,56 +63,44 @@
         }
     }
 
-    public Path getPathToEntityLiving(Entity entityIn)
-    {
+    public Path getPathToEntityLiving(Entity entityIn) {
         return this.getPathToPos(new BlockPos(entityIn));
     }
 
-    private int getPathablePosY()
-    {
-        if (this.entity.isInWater() && this.getCanSwim())
-        {
-            int i = (int)this.entity.getEntityBoundingBox().minY;
+    private int getPathablePosY() {
+        if (this.entity.isInWater() && this.getCanSwim()) {
+            int i = (int) this.entity.getEntityBoundingBox().minY;
             Block block = this.world.getBlockState(new BlockPos(MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ))).getBlock();
             int j = 0;
 
-            while (block == Blocks.FLOWING_WATER || block == Blocks.WATER)
-            {
+            while (block == Blocks.FLOWING_WATER || block == Blocks.WATER) {
                 ++i;
                 block = this.world.getBlockState(new BlockPos(MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ))).getBlock();
                 ++j;
 
-                if (j > 16)
-                {
-                    return (int)this.entity.getEntityBoundingBox().minY;
+                if (j > 16) {
+                    return (int) this.entity.getEntityBoundingBox().minY;
                 }
             }
 
             return i;
+        } else {
+            return (int) (this.entity.getEntityBoundingBox().minY + 0.5D);
         }
-        else
-        {
-            return (int)(this.entity.getEntityBoundingBox().minY + 0.5D);
-        }
     }
 
-    protected void removeSunnyPath()
-    {
+    protected void removeSunnyPath() {
         super.removeSunnyPath();
 
-        if (this.shouldAvoidSun)
-        {
-            if (this.world.canSeeSky(new BlockPos(MathHelper.floor(this.entity.posX), (int)(this.entity.getEntityBoundingBox().minY + 0.5D), MathHelper.floor(this.entity.posZ))))
-            {
+        if (this.shouldAvoidSun) {
+            if (this.world.canSeeSky(new BlockPos(MathHelper.floor(this.entity.posX), (int) (this.entity.getEntityBoundingBox().minY + 0.5D), MathHelper.floor(this.entity.posZ)))) {
                 return;
             }
 
-            for (int i = 0; i < this.currentPath.getCurrentPathLength(); ++i)
-            {
+            for (int i = 0; i < this.currentPath.getCurrentPathLength(); ++i) {
                 PathPoint pathpoint = this.currentPath.getPathPointFromIndex(i);
 
-                if (this.world.canSeeSky(new BlockPos(pathpoint.x, pathpoint.y, pathpoint.z)))
-                {
+                if (this.world.canSeeSky(new BlockPos(pathpoint.x, pathpoint.y, pathpoint.z))) {
                     this.currentPath.setCurrentPathLength(i - 1);
                     return;
                 }
@@ -134,46 +108,37 @@
         }
     }
 
-    protected boolean isDirectPathBetweenPoints(Vec3d posVec31, Vec3d posVec32, int sizeX, int sizeY, int sizeZ)
-    {
+    protected boolean isDirectPathBetweenPoints(Vec3d posVec31, Vec3d posVec32, int sizeX, int sizeY, int sizeZ) {
         int i = MathHelper.floor(posVec31.x);
         int j = MathHelper.floor(posVec31.z);
         double d0 = posVec32.x - posVec31.x;
         double d1 = posVec32.z - posVec31.z;
         double d2 = d0 * d0 + d1 * d1;
 
-        if (d2 < 1.0E-8D)
-        {
+        if (d2 < 1.0E-8D) {
             return false;
-        }
-        else
-        {
+        } else {
             double d3 = 1.0D / Math.sqrt(d2);
             d0 = d0 * d3;
             d1 = d1 * d3;
             sizeX = sizeX + 2;
             sizeZ = sizeZ + 2;
 
-            if (!this.isSafeToStandAt(i, (int)posVec31.y, j, sizeX, sizeY, sizeZ, posVec31, d0, d1))
-            {
+            if (!this.isSafeToStandAt(i, (int) posVec31.y, j, sizeX, sizeY, sizeZ, posVec31, d0, d1)) {
                 return false;
-            }
-            else
-            {
+            } else {
                 sizeX = sizeX - 2;
                 sizeZ = sizeZ - 2;
                 double d4 = 1.0D / Math.abs(d0);
                 double d5 = 1.0D / Math.abs(d1);
-                double d6 = (double)i - posVec31.x;
-                double d7 = (double)j - posVec31.z;
+                double d6 = (double) i - posVec31.x;
+                double d7 = (double) j - posVec31.z;
 
-                if (d0 >= 0.0D)
-                {
+                if (d0 >= 0.0D) {
                     ++d6;
                 }
 
-                if (d1 >= 0.0D)
-                {
+                if (d1 >= 0.0D) {
                     ++d7;
                 }
 
@@ -186,23 +151,18 @@
                 int k1 = i1 - i;
                 int l1 = j1 - j;
 
-                while (k1 * k > 0 || l1 * l > 0)
-                {
-                    if (d6 < d7)
-                    {
+                while (k1 * k > 0 || l1 * l > 0) {
+                    if (d6 < d7) {
                         d6 += d4;
                         i += k;
                         k1 = i1 - i;
-                    }
-                    else
-                    {
+                    } else {
                         d7 += d5;
                         j += l;
                         l1 = j1 - j;
                     }
 
-                    if (!this.isSafeToStandAt(i, (int)posVec31.y, j, sizeX, sizeY, sizeZ, posVec31, d0, d1))
-                    {
+                    if (!this.isSafeToStandAt(i, (int) posVec31.y, j, sizeX, sizeY, sizeZ, posVec31, d0, d1)) {
                         return false;
                     }
                 }
@@ -212,53 +172,41 @@
         }
     }
 
-    private boolean isSafeToStandAt(int x, int y, int z, int sizeX, int sizeY, int sizeZ, Vec3d vec31, double p_179683_8_, double p_179683_10_)
-    {
+    private boolean isSafeToStandAt(int x, int y, int z, int sizeX, int sizeY, int sizeZ, Vec3d vec31, double p_179683_8_, double p_179683_10_) {
         int i = x - sizeX / 2;
         int j = z - sizeZ / 2;
 
-        if (!this.isPositionClear(i, y, j, sizeX, sizeY, sizeZ, vec31, p_179683_8_, p_179683_10_))
-        {
+        if (!this.isPositionClear(i, y, j, sizeX, sizeY, sizeZ, vec31, p_179683_8_, p_179683_10_)) {
             return false;
-        }
-        else
-        {
-            for (int k = i; k < i + sizeX; ++k)
-            {
-                for (int l = j; l < j + sizeZ; ++l)
-                {
-                    double d0 = (double)k + 0.5D - vec31.x;
-                    double d1 = (double)l + 0.5D - vec31.z;
+        } else {
+            for (int k = i; k < i + sizeX; ++k) {
+                for (int l = j; l < j + sizeZ; ++l) {
+                    double d0 = (double) k + 0.5D - vec31.x;
+                    double d1 = (double) l + 0.5D - vec31.z;
 
-                    if (d0 * p_179683_8_ + d1 * p_179683_10_ >= 0.0D)
-                    {
+                    if (d0 * p_179683_8_ + d1 * p_179683_10_ >= 0.0D) {
                         PathNodeType pathnodetype = this.nodeProcessor.getPathNodeType(this.world, k, y - 1, l, this.entity, sizeX, sizeY, sizeZ, true, true);
 
-                        if (pathnodetype == PathNodeType.WATER)
-                        {
+                        if (pathnodetype == PathNodeType.WATER) {
                             return false;
                         }
 
-                        if (pathnodetype == PathNodeType.LAVA)
-                        {
+                        if (pathnodetype == PathNodeType.LAVA) {
                             return false;
                         }
 
-                        if (pathnodetype == PathNodeType.OPEN)
-                        {
+                        if (pathnodetype == PathNodeType.OPEN) {
                             return false;
                         }
 
                         pathnodetype = this.nodeProcessor.getPathNodeType(this.world, k, y, l, this.entity, sizeX, sizeY, sizeZ, true, true);
                         float f = this.entity.getPathPriority(pathnodetype);
 
-                        if (f < 0.0F || f >= 8.0F)
-                        {
+                        if (f < 0.0F || f >= 8.0F) {
                             return false;
                         }
 
-                        if (pathnodetype == PathNodeType.DAMAGE_FIRE || pathnodetype == PathNodeType.DANGER_FIRE || pathnodetype == PathNodeType.DAMAGE_OTHER)
-                        {
+                        if (pathnodetype == PathNodeType.DAMAGE_FIRE || pathnodetype == PathNodeType.DANGER_FIRE || pathnodetype == PathNodeType.DAMAGE_OTHER) {
                             return false;
                         }
                     }
@@ -269,19 +217,15 @@
         }
     }
 
-    private boolean isPositionClear(int x, int y, int z, int sizeX, int sizeY, int sizeZ, Vec3d p_179692_7_, double p_179692_8_, double p_179692_10_)
-    {
-        for (BlockPos blockpos : BlockPos.getAllInBox(new BlockPos(x, y, z), new BlockPos(x + sizeX - 1, y + sizeY - 1, z + sizeZ - 1)))
-        {
-            double d0 = (double)blockpos.getX() + 0.5D - p_179692_7_.x;
-            double d1 = (double)blockpos.getZ() + 0.5D - p_179692_7_.z;
+    private boolean isPositionClear(int x, int y, int z, int sizeX, int sizeY, int sizeZ, Vec3d p_179692_7_, double p_179692_8_, double p_179692_10_) {
+        for (BlockPos blockpos : BlockPos.getAllInBox(new BlockPos(x, y, z), new BlockPos(x + sizeX - 1, y + sizeY - 1, z + sizeZ - 1))) {
+            double d0 = (double) blockpos.getX() + 0.5D - p_179692_7_.x;
+            double d1 = (double) blockpos.getZ() + 0.5D - p_179692_7_.z;
 
-            if (d0 * p_179692_8_ + d1 * p_179692_10_ >= 0.0D)
-            {
+            if (d0 * p_179692_8_ + d1 * p_179692_10_ >= 0.0D) {
                 Block block = this.world.getBlockState(blockpos).getBlock();
 
-                if (!block.isPassable(this.world, blockpos))
-                {
+                if (!block.isPassable(this.world, blockpos)) {
                     return false;
                 }
             }
@@ -290,33 +234,27 @@
         return true;
     }
 
-    public void setBreakDoors(boolean canBreakDoors)
-    {
+    public void setBreakDoors(boolean canBreakDoors) {
         this.nodeProcessor.setCanOpenDoors(canBreakDoors);
     }
 
-    public void setEnterDoors(boolean enterDoors)
-    {
+    public void setEnterDoors(boolean enterDoors) {
         this.nodeProcessor.setCanEnterDoors(enterDoors);
     }
 
-    public boolean getEnterDoors()
-    {
+    public boolean getEnterDoors() {
         return this.nodeProcessor.getCanEnterDoors();
     }
 
-    public void setCanSwim(boolean canSwim)
-    {
+    public void setCanSwim(boolean canSwim) {
         this.nodeProcessor.setCanSwim(canSwim);
     }
 
-    public boolean getCanSwim()
-    {
+    public boolean getCanSwim() {
         return this.nodeProcessor.getCanSwim();
     }
 
-    public void setAvoidSun(boolean avoidSun)
-    {
+    public void setAvoidSun(boolean avoidSun) {
         this.shouldAvoidSun = avoidSun;
     }
 }
