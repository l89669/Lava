--- ../src-base/minecraft/net/minecraft/pathfinding/PathNavigate.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/PathNavigate.java
@@ -1,6 +1,5 @@
 package net.minecraft.pathfinding;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
@@ -15,8 +14,9 @@
 import net.minecraft.world.ChunkCache;
 import net.minecraft.world.World;
 
-public abstract class PathNavigate
-{
+import javax.annotation.Nullable;
+
+public abstract class PathNavigate {
     protected EntityLiving entity;
     protected World world;
     @Nullable
@@ -37,8 +37,7 @@
     private BlockPos targetPos;
     private final PathFinder pathFinder;
 
-    public PathNavigate(EntityLiving entityIn, World worldIn)
-    {
+    public PathNavigate(EntityLiving entityIn, World worldIn) {
         this.entity = entityIn;
         this.world = worldIn;
         this.pathSearchRange = entityIn.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE);
@@ -47,63 +46,48 @@
 
     protected abstract PathFinder getPathFinder();
 
-    public void setSpeed(double speedIn)
-    {
+    public void setSpeed(double speedIn) {
         this.speed = speedIn;
     }
 
-    public float getPathSearchRange()
-    {
-        return (float)this.pathSearchRange.getAttributeValue();
+    public float getPathSearchRange() {
+        return (float) this.pathSearchRange.getAttributeValue();
     }
 
-    public boolean canUpdatePathOnTimeout()
-    {
+    public boolean canUpdatePathOnTimeout() {
         return this.tryUpdatePath;
     }
 
-    public void updatePath()
-    {
-        if (this.world.getTotalWorldTime() - this.lastTimeUpdated > 20L)
-        {
-            if (this.targetPos != null)
-            {
+    public void updatePath() {
+        if (this.world.getTotalWorldTime() - this.lastTimeUpdated > 20L) {
+            if (this.targetPos != null) {
                 this.currentPath = null;
                 this.currentPath = this.getPathToPos(this.targetPos);
                 this.lastTimeUpdated = this.world.getTotalWorldTime();
                 this.tryUpdatePath = false;
             }
-        }
-        else
-        {
+        } else {
             this.tryUpdatePath = true;
         }
     }
 
     @Nullable
-    public final Path getPathToXYZ(double x, double y, double z)
-    {
+    public final Path getPathToXYZ(double x, double y, double z) {
         return this.getPathToPos(new BlockPos(x, y, z));
     }
 
     @Nullable
-    public Path getPathToPos(BlockPos pos)
-    {
-        if (!this.canNavigate())
-        {
+    public Path getPathToPos(BlockPos pos) {
+        if (!this.canNavigate()) {
             return null;
-        }
-        else if (this.currentPath != null && !this.currentPath.isFinished() && pos.equals(this.targetPos))
-        {
+        } else if (this.currentPath != null && !this.currentPath.isFinished() && pos.equals(this.targetPos)) {
             return this.currentPath;
-        }
-        else
-        {
+        } else {
             this.targetPos = pos;
             float f = this.getPathSearchRange();
             this.world.profiler.startSection("pathfind");
             BlockPos blockpos = new BlockPos(this.entity);
-            int i = (int)(f + 8.0F);
+            int i = (int) (f + 8.0F);
             ChunkCache chunkcache = new ChunkCache(this.world, blockpos.add(-i, -i, -i), blockpos.add(i, i, i), 0);
             Path path = this.pathFinder.findPath(chunkcache, this.entity, this.targetPos, f);
             this.world.profiler.endSection();
@@ -112,27 +96,20 @@
     }
 
     @Nullable
-    public Path getPathToEntityLiving(Entity entityIn)
-    {
-        if (!this.canNavigate())
-        {
+    public Path getPathToEntityLiving(Entity entityIn) {
+        if (!this.canNavigate()) {
             return null;
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = new BlockPos(entityIn);
 
-            if (this.currentPath != null && !this.currentPath.isFinished() && blockpos.equals(this.targetPos))
-            {
+            if (this.currentPath != null && !this.currentPath.isFinished() && blockpos.equals(this.targetPos)) {
                 return this.currentPath;
-            }
-            else
-            {
+            } else {
                 this.targetPos = blockpos;
                 float f = this.getPathSearchRange();
                 this.world.profiler.startSection("pathfind");
                 BlockPos blockpos1 = (new BlockPos(this.entity)).up();
-                int i = (int)(f + 16.0F);
+                int i = (int) (f + 16.0F);
                 ChunkCache chunkcache = new ChunkCache(this.world, blockpos1.add(-i, -i, -i), blockpos1.add(i, i, i), 0);
                 Path path = this.pathFinder.findPath(chunkcache, this.entity, entityIn, f);
                 this.world.profiler.endSection();
@@ -141,39 +118,29 @@
         }
     }
 
-    public boolean tryMoveToXYZ(double x, double y, double z, double speedIn)
-    {
+    public boolean tryMoveToXYZ(double x, double y, double z, double speedIn) {
         return this.setPath(this.getPathToXYZ(x, y, z), speedIn);
     }
 
-    public boolean tryMoveToEntityLiving(Entity entityIn, double speedIn)
-    {
+    public boolean tryMoveToEntityLiving(Entity entityIn, double speedIn) {
         Path path = this.getPathToEntityLiving(entityIn);
         return path != null && this.setPath(path, speedIn);
     }
 
-    public boolean setPath(@Nullable Path pathentityIn, double speedIn)
-    {
-        if (pathentityIn == null)
-        {
+    public boolean setPath(@Nullable Path pathentityIn, double speedIn) {
+        if (pathentityIn == null) {
             this.currentPath = null;
             return false;
-        }
-        else
-        {
-            if (!pathentityIn.isSamePath(this.currentPath))
-            {
+        } else {
+            if (!pathentityIn.isSamePath(this.currentPath)) {
                 this.currentPath = pathentityIn;
             }
 
             this.removeSunnyPath();
 
-            if (this.currentPath.getCurrentPathLength() <= 0)
-            {
+            if (this.currentPath.getCurrentPathLength() <= 0) {
                 return false;
-            }
-            else
-            {
+            } else {
                 this.speed = speedIn;
                 Vec3d vec3d = this.getEntityPosition();
                 this.ticksAtLastPos = this.totalTicks;
@@ -184,41 +151,32 @@
     }
 
     @Nullable
-    public Path getPath()
-    {
+    public Path getPath() {
         return this.currentPath;
     }
 
-    public void onUpdateNavigation()
-    {
+    public void onUpdateNavigation() {
         ++this.totalTicks;
 
-        if (this.tryUpdatePath)
-        {
+        if (this.tryUpdatePath) {
             this.updatePath();
         }
 
-        if (!this.noPath())
-        {
-            if (this.canNavigate())
-            {
+        if (!this.noPath()) {
+            if (this.canNavigate()) {
                 this.pathFollow();
-            }
-            else if (this.currentPath != null && this.currentPath.getCurrentPathIndex() < this.currentPath.getCurrentPathLength())
-            {
+            } else if (this.currentPath != null && this.currentPath.getCurrentPathIndex() < this.currentPath.getCurrentPathLength()) {
                 Vec3d vec3d = this.getEntityPosition();
                 Vec3d vec3d1 = this.currentPath.getVectorFromIndex(this.entity, this.currentPath.getCurrentPathIndex());
 
-                if (vec3d.y > vec3d1.y && !this.entity.onGround && MathHelper.floor(vec3d.x) == MathHelper.floor(vec3d1.x) && MathHelper.floor(vec3d.z) == MathHelper.floor(vec3d1.z))
-                {
+                if (vec3d.y > vec3d1.y && !this.entity.onGround && MathHelper.floor(vec3d.x) == MathHelper.floor(vec3d1.x) && MathHelper.floor(vec3d.z) == MathHelper.floor(vec3d1.z)) {
                     this.currentPath.setCurrentPathIndex(this.currentPath.getCurrentPathIndex() + 1);
                 }
             }
 
             this.debugPathFinding();
 
-            if (!this.noPath())
-            {
+            if (!this.noPath()) {
                 Vec3d vec3d2 = this.currentPath.getPosition(this.entity);
                 BlockPos blockpos = (new BlockPos(vec3d2)).down();
                 AxisAlignedBB axisalignedbb = this.world.getBlockState(blockpos).getBoundingBox(this.world, blockpos);
@@ -228,19 +186,15 @@
         }
     }
 
-    protected void debugPathFinding()
-    {
+    protected void debugPathFinding() {
     }
 
-    protected void pathFollow()
-    {
+    protected void pathFollow() {
         Vec3d vec3d = this.getEntityPosition();
         int i = this.currentPath.getCurrentPathLength();
 
-        for (int j = this.currentPath.getCurrentPathIndex(); j < this.currentPath.getCurrentPathLength(); ++j)
-        {
-            if ((double)this.currentPath.getPathPointFromIndex(j).y != Math.floor(vec3d.y))
-            {
+        for (int j = this.currentPath.getCurrentPathIndex(); j < this.currentPath.getCurrentPathLength(); ++j) {
+            if ((double) this.currentPath.getPathPointFromIndex(j).y != Math.floor(vec3d.y)) {
                 i = j;
                 break;
             }
@@ -249,8 +203,7 @@
         this.maxDistanceToWaypoint = this.entity.width > 0.75F ? this.entity.width / 2.0F : 0.75F - this.entity.width / 2.0F;
         Vec3d vec3d1 = this.currentPath.getCurrentPos();
 
-        if (MathHelper.abs((float)(this.entity.posX - (vec3d1.x + 0.5D))) < this.maxDistanceToWaypoint && MathHelper.abs((float)(this.entity.posZ - (vec3d1.z + 0.5D))) < this.maxDistanceToWaypoint && Math.abs(this.entity.posY - vec3d1.y) < 1.0D)
-        {
+        if (MathHelper.abs((float) (this.entity.posX - (vec3d1.x + 0.5D))) < this.maxDistanceToWaypoint && MathHelper.abs((float) (this.entity.posZ - (vec3d1.z + 0.5D))) < this.maxDistanceToWaypoint && Math.abs(this.entity.posY - vec3d1.y) < 1.0D) {
             this.currentPath.setCurrentPathIndex(this.currentPath.getCurrentPathIndex() + 1);
         }
 
@@ -258,10 +211,8 @@
         int l = MathHelper.ceil(this.entity.height);
         int i1 = k;
 
-        for (int j1 = i - 1; j1 >= this.currentPath.getCurrentPathIndex(); --j1)
-        {
-            if (this.isDirectPathBetweenPoints(vec3d, this.currentPath.getVectorFromIndex(this.entity, j1), k, l, i1))
-            {
+        for (int j1 = i - 1; j1 >= this.currentPath.getCurrentPathIndex(); --j1) {
+            if (this.isDirectPathBetweenPoints(vec3d, this.currentPath.getVectorFromIndex(this.entity, j1), k, l, i1)) {
                 this.currentPath.setCurrentPathIndex(j1);
                 break;
             }
@@ -270,12 +221,9 @@
         this.checkForStuck(vec3d);
     }
 
-    protected void checkForStuck(Vec3d positionVec3)
-    {
-        if (this.totalTicks - this.ticksAtLastPos > 100)
-        {
-            if (positionVec3.squareDistanceTo(this.lastPosCheck) < 2.25D)
-            {
+    protected void checkForStuck(Vec3d positionVec3) {
+        if (this.totalTicks - this.ticksAtLastPos > 100) {
+            if (positionVec3.squareDistanceTo(this.lastPosCheck) < 2.25D) {
                 this.clearPath();
             }
 
@@ -283,23 +231,18 @@
             this.lastPosCheck = positionVec3;
         }
 
-        if (this.currentPath != null && !this.currentPath.isFinished())
-        {
+        if (this.currentPath != null && !this.currentPath.isFinished()) {
             Vec3d vec3d = this.currentPath.getCurrentPos();
 
-            if (vec3d.equals(this.timeoutCachedNode))
-            {
+            if (vec3d.equals(this.timeoutCachedNode)) {
                 this.timeoutTimer += System.currentTimeMillis() - this.lastTimeoutCheck;
-            }
-            else
-            {
+            } else {
                 this.timeoutCachedNode = vec3d;
                 double d0 = positionVec3.distanceTo(this.timeoutCachedNode);
-                this.timeoutLimit = this.entity.getAIMoveSpeed() > 0.0F ? d0 / (double)this.entity.getAIMoveSpeed() * 1000.0D : 0.0D;
+                this.timeoutLimit = this.entity.getAIMoveSpeed() > 0.0F ? d0 / (double) this.entity.getAIMoveSpeed() * 1000.0D : 0.0D;
             }
 
-            if (this.timeoutLimit > 0.0D && (double)this.timeoutTimer > this.timeoutLimit * 3.0D)
-            {
+            if (this.timeoutLimit > 0.0D && (double) this.timeoutTimer > this.timeoutLimit * 3.0D) {
                 this.timeoutCachedNode = Vec3d.ZERO;
                 this.timeoutTimer = 0L;
                 this.timeoutLimit = 0.0D;
@@ -310,13 +253,11 @@
         }
     }
 
-    public boolean noPath()
-    {
+    public boolean noPath() {
         return this.currentPath == null || this.currentPath.isFinished();
     }
 
-    public void clearPath()
-    {
+    public void clearPath() {
         this.currentPath = null;
     }
 
@@ -324,28 +265,22 @@
 
     protected abstract boolean canNavigate();
 
-    protected boolean isInLiquid()
-    {
+    protected boolean isInLiquid() {
         return this.entity.isInWater() || this.entity.isInLava();
     }
 
-    protected void removeSunnyPath()
-    {
-        if (this.currentPath != null)
-        {
-            for (int i = 0; i < this.currentPath.getCurrentPathLength(); ++i)
-            {
+    protected void removeSunnyPath() {
+        if (this.currentPath != null) {
+            for (int i = 0; i < this.currentPath.getCurrentPathLength(); ++i) {
                 PathPoint pathpoint = this.currentPath.getPathPointFromIndex(i);
                 PathPoint pathpoint1 = i + 1 < this.currentPath.getCurrentPathLength() ? this.currentPath.getPathPointFromIndex(i + 1) : null;
                 IBlockState iblockstate = this.world.getBlockState(new BlockPos(pathpoint.x, pathpoint.y, pathpoint.z));
                 Block block = iblockstate.getBlock();
 
-                if (block == Blocks.CAULDRON)
-                {
+                if (block == Blocks.CAULDRON) {
                     this.currentPath.setPoint(i, pathpoint.cloneMove(pathpoint.x, pathpoint.y + 1, pathpoint.z));
 
-                    if (pathpoint1 != null && pathpoint.y >= pathpoint1.y)
-                    {
+                    if (pathpoint1 != null && pathpoint.y >= pathpoint1.y) {
                         this.currentPath.setPoint(i + 1, pathpoint1.cloneMove(pathpoint1.x, pathpoint.y + 1, pathpoint1.z));
                     }
                 }
@@ -355,13 +290,11 @@
 
     protected abstract boolean isDirectPathBetweenPoints(Vec3d posVec31, Vec3d posVec32, int sizeX, int sizeY, int sizeZ);
 
-    public boolean canEntityStandOnPos(BlockPos pos)
-    {
+    public boolean canEntityStandOnPos(BlockPos pos) {
         return this.world.getBlockState(pos.down()).isFullBlock();
     }
 
-    public NodeProcessor getNodeProcessor()
-    {
+    public NodeProcessor getNodeProcessor() {
         return this.nodeProcessor;
     }
 }
