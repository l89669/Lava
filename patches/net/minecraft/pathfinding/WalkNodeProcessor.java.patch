--- ../src-base/minecraft/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -1,15 +1,7 @@
 package net.minecraft.pathfinding;
 
 import com.google.common.collect.Sets;
-import java.util.EnumSet;
-import java.util.Set;
-import javax.annotation.Nullable;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockDoor;
-import net.minecraft.block.BlockFence;
-import net.minecraft.block.BlockFenceGate;
-import net.minecraft.block.BlockRailBase;
-import net.minecraft.block.BlockWall;
+import net.minecraft.block.*;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EntityLiving;
@@ -20,48 +12,40 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.IBlockAccess;
 
-public class WalkNodeProcessor extends NodeProcessor
-{
+import javax.annotation.Nullable;
+import java.util.EnumSet;
+import java.util.Set;
+
+public class WalkNodeProcessor extends NodeProcessor {
     protected float avoidsWater;
-    protected EntityLiving currentEntity;
 
-    public void init(IBlockAccess sourceIn, EntityLiving mob)
-    {
+    public void init(IBlockAccess sourceIn, EntityLiving mob) {
         super.init(sourceIn, mob);
         this.avoidsWater = mob.getPathPriority(PathNodeType.WATER);
     }
 
-    public void postProcess()
-    {
+    public void postProcess() {
         this.entity.setPathPriority(PathNodeType.WATER, this.avoidsWater);
         super.postProcess();
     }
 
-    public PathPoint getStart()
-    {
+    public PathPoint getStart() {
         int i;
 
-        if (this.getCanSwim() && this.entity.isInWater())
-        {
-            i = (int)this.entity.getEntityBoundingBox().minY;
+        if (this.getCanSwim() && this.entity.isInWater()) {
+            i = (int) this.entity.getEntityBoundingBox().minY;
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos(MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ));
 
-            for (Block block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock(); block == Blocks.FLOWING_WATER || block == Blocks.WATER; block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock())
-            {
+            for (Block block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock(); block == Blocks.FLOWING_WATER || block == Blocks.WATER; block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock()) {
                 ++i;
                 blockpos$mutableblockpos.setPos(MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ));
             }
-        }
-        else if (this.entity.onGround)
-        {
+        } else if (this.entity.onGround) {
             i = MathHelper.floor(this.entity.getEntityBoundingBox().minY + 0.5D);
-        }
-        else
-        {
+        } else {
             BlockPos blockpos;
 
-            for (blockpos = new BlockPos(this.entity); (this.blockaccess.getBlockState(blockpos).getMaterial() == Material.AIR || this.blockaccess.getBlockState(blockpos).getBlock().isPassable(this.blockaccess, blockpos)) && blockpos.getY() > 0; blockpos = blockpos.down())
-            {
+            for (blockpos = new BlockPos(this.entity); (this.blockaccess.getBlockState(blockpos).getMaterial() == Material.AIR || this.blockaccess.getBlockState(blockpos).getBlock().isPassable(this.blockaccess, blockpos)) && blockpos.getY() > 0; blockpos = blockpos.down()) {
                 ;
             }
 
@@ -71,20 +55,17 @@
         BlockPos blockpos2 = new BlockPos(this.entity);
         PathNodeType pathnodetype1 = this.getPathNodeType(this.entity, blockpos2.getX(), i, blockpos2.getZ());
 
-        if (this.entity.getPathPriority(pathnodetype1) < 0.0F)
-        {
+        if (this.entity.getPathPriority(pathnodetype1) < 0.0F) {
             Set<BlockPos> set = Sets.<BlockPos>newHashSet();
-            set.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double)i, this.entity.getEntityBoundingBox().minZ));
-            set.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double)i, this.entity.getEntityBoundingBox().maxZ));
-            set.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double)i, this.entity.getEntityBoundingBox().minZ));
-            set.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double)i, this.entity.getEntityBoundingBox().maxZ));
+            set.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double) i, this.entity.getEntityBoundingBox().minZ));
+            set.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double) i, this.entity.getEntityBoundingBox().maxZ));
+            set.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double) i, this.entity.getEntityBoundingBox().minZ));
+            set.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double) i, this.entity.getEntityBoundingBox().maxZ));
 
-            for (BlockPos blockpos1 : set)
-            {
+            for (BlockPos blockpos1 : set) {
                 PathNodeType pathnodetype = this.getPathNodeType(this.entity, blockpos1);
 
-                if (this.entity.getPathPriority(pathnodetype) >= 0.0F)
-                {
+                if (this.entity.getPathPriority(pathnodetype) >= 0.0F) {
                     return this.openPoint(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ());
                 }
             }
@@ -93,46 +74,39 @@
         return this.openPoint(blockpos2.getX(), i, blockpos2.getZ());
     }
 
-    public PathPoint getPathPointToCoords(double x, double y, double z)
-    {
+    public PathPoint getPathPointToCoords(double x, double y, double z) {
         return this.openPoint(MathHelper.floor(x), MathHelper.floor(y), MathHelper.floor(z));
     }
 
-    public int findPathOptions(PathPoint[] pathOptions, PathPoint currentPoint, PathPoint targetPoint, float maxDistance)
-    {
+    public int findPathOptions(PathPoint[] pathOptions, PathPoint currentPoint, PathPoint targetPoint, float maxDistance) {
         int i = 0;
         int j = 0;
         PathNodeType pathnodetype = this.getPathNodeType(this.entity, currentPoint.x, currentPoint.y + 1, currentPoint.z);
 
-        if (this.entity.getPathPriority(pathnodetype) >= 0.0F)
-        {
+        if (this.entity.getPathPriority(pathnodetype) >= 0.0F) {
             j = MathHelper.floor(Math.max(1.0F, this.entity.stepHeight));
         }
 
         BlockPos blockpos = (new BlockPos(currentPoint.x, currentPoint.y, currentPoint.z)).down();
-        double d0 = (double)currentPoint.y - (1.0D - this.blockaccess.getBlockState(blockpos).getBoundingBox(this.blockaccess, blockpos).maxY);
+        double d0 = (double) currentPoint.y - (1.0D - this.blockaccess.getBlockState(blockpos).getBoundingBox(this.blockaccess, blockpos).maxY);
         PathPoint pathpoint = this.getSafePoint(currentPoint.x, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH);
         PathPoint pathpoint1 = this.getSafePoint(currentPoint.x - 1, currentPoint.y, currentPoint.z, j, d0, EnumFacing.WEST);
         PathPoint pathpoint2 = this.getSafePoint(currentPoint.x + 1, currentPoint.y, currentPoint.z, j, d0, EnumFacing.EAST);
         PathPoint pathpoint3 = this.getSafePoint(currentPoint.x, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH);
 
-        if (pathpoint != null && !pathpoint.visited && pathpoint.distanceTo(targetPoint) < maxDistance)
-        {
+        if (pathpoint != null && !pathpoint.visited && pathpoint.distanceTo(targetPoint) < maxDistance) {
             pathOptions[i++] = pathpoint;
         }
 
-        if (pathpoint1 != null && !pathpoint1.visited && pathpoint1.distanceTo(targetPoint) < maxDistance)
-        {
+        if (pathpoint1 != null && !pathpoint1.visited && pathpoint1.distanceTo(targetPoint) < maxDistance) {
             pathOptions[i++] = pathpoint1;
         }
 
-        if (pathpoint2 != null && !pathpoint2.visited && pathpoint2.distanceTo(targetPoint) < maxDistance)
-        {
+        if (pathpoint2 != null && !pathpoint2.visited && pathpoint2.distanceTo(targetPoint) < maxDistance) {
             pathOptions[i++] = pathpoint2;
         }
 
-        if (pathpoint3 != null && !pathpoint3.visited && pathpoint3.distanceTo(targetPoint) < maxDistance)
-        {
+        if (pathpoint3 != null && !pathpoint3.visited && pathpoint3.distanceTo(targetPoint) < maxDistance) {
             pathOptions[i++] = pathpoint3;
         }
 
@@ -141,42 +115,34 @@
         boolean flag2 = pathpoint2 == null || pathpoint2.nodeType == PathNodeType.OPEN || pathpoint2.costMalus != 0.0F;
         boolean flag3 = pathpoint1 == null || pathpoint1.nodeType == PathNodeType.OPEN || pathpoint1.costMalus != 0.0F;
 
-        if (flag && flag3)
-        {
+        if (flag && flag3) {
             PathPoint pathpoint4 = this.getSafePoint(currentPoint.x - 1, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH);
 
-            if (pathpoint4 != null && !pathpoint4.visited && pathpoint4.distanceTo(targetPoint) < maxDistance)
-            {
+            if (pathpoint4 != null && !pathpoint4.visited && pathpoint4.distanceTo(targetPoint) < maxDistance) {
                 pathOptions[i++] = pathpoint4;
             }
         }
 
-        if (flag && flag2)
-        {
+        if (flag && flag2) {
             PathPoint pathpoint5 = this.getSafePoint(currentPoint.x + 1, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH);
 
-            if (pathpoint5 != null && !pathpoint5.visited && pathpoint5.distanceTo(targetPoint) < maxDistance)
-            {
+            if (pathpoint5 != null && !pathpoint5.visited && pathpoint5.distanceTo(targetPoint) < maxDistance) {
                 pathOptions[i++] = pathpoint5;
             }
         }
 
-        if (flag1 && flag3)
-        {
+        if (flag1 && flag3) {
             PathPoint pathpoint6 = this.getSafePoint(currentPoint.x - 1, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH);
 
-            if (pathpoint6 != null && !pathpoint6.visited && pathpoint6.distanceTo(targetPoint) < maxDistance)
-            {
+            if (pathpoint6 != null && !pathpoint6.visited && pathpoint6.distanceTo(targetPoint) < maxDistance) {
                 pathOptions[i++] = pathpoint6;
             }
         }
 
-        if (flag1 && flag2)
-        {
+        if (flag1 && flag2) {
             PathPoint pathpoint7 = this.getSafePoint(currentPoint.x + 1, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH);
 
-            if (pathpoint7 != null && !pathpoint7.visited && pathpoint7.distanceTo(targetPoint) < maxDistance)
-            {
+            if (pathpoint7 != null && !pathpoint7.visited && pathpoint7.distanceTo(targetPoint) < maxDistance) {
                 pathOptions[i++] = pathpoint7;
             }
         }
@@ -185,70 +151,55 @@
     }
 
     @Nullable
-    private PathPoint getSafePoint(int x, int y, int z, int p_186332_4_, double p_186332_5_, EnumFacing facing)
-    {
+    private PathPoint getSafePoint(int x, int y, int z, int p_186332_4_, double p_186332_5_, EnumFacing facing) {
         PathPoint pathpoint = null;
         BlockPos blockpos = new BlockPos(x, y, z);
         BlockPos blockpos1 = blockpos.down();
-        double d0 = (double)y - (1.0D - this.blockaccess.getBlockState(blockpos1).getBoundingBox(this.blockaccess, blockpos1).maxY);
+        double d0 = (double) y - (1.0D - this.blockaccess.getBlockState(blockpos1).getBoundingBox(this.blockaccess, blockpos1).maxY);
 
-        if (d0 - p_186332_5_ > 1.125D)
-        {
+        if (d0 - p_186332_5_ > 1.125D) {
             return null;
-        }
-        else
-        {
+        } else {
             PathNodeType pathnodetype = this.getPathNodeType(this.entity, x, y, z);
             float f = this.entity.getPathPriority(pathnodetype);
-            double d1 = (double)this.entity.width / 2.0D;
+            double d1 = (double) this.entity.width / 2.0D;
 
-            if (f >= 0.0F)
-            {
+            if (f >= 0.0F) {
                 pathpoint = this.openPoint(x, y, z);
                 pathpoint.nodeType = pathnodetype;
                 pathpoint.costMalus = Math.max(pathpoint.costMalus, f);
             }
 
-            if (pathnodetype == PathNodeType.WALKABLE)
-            {
+            if (pathnodetype == PathNodeType.WALKABLE) {
                 return pathpoint;
-            }
-            else
-            {
-                if (pathpoint == null && p_186332_4_ > 0 && pathnodetype != PathNodeType.FENCE && pathnodetype != PathNodeType.TRAPDOOR)
-                {
+            } else {
+                if (pathpoint == null && p_186332_4_ > 0 && pathnodetype != PathNodeType.FENCE && pathnodetype != PathNodeType.TRAPDOOR) {
                     pathpoint = this.getSafePoint(x, y + 1, z, p_186332_4_ - 1, p_186332_5_, facing);
 
-                    if (pathpoint != null && (pathpoint.nodeType == PathNodeType.OPEN || pathpoint.nodeType == PathNodeType.WALKABLE) && this.entity.width < 1.0F)
-                    {
-                        double d2 = (double)(x - facing.getFrontOffsetX()) + 0.5D;
-                        double d3 = (double)(z - facing.getFrontOffsetZ()) + 0.5D;
-                        AxisAlignedBB axisalignedbb = new AxisAlignedBB(d2 - d1, (double)y + 0.001D, d3 - d1, d2 + d1, (double)((float)y + this.entity.height), d3 + d1);
+                    if (pathpoint != null && (pathpoint.nodeType == PathNodeType.OPEN || pathpoint.nodeType == PathNodeType.WALKABLE) && this.entity.width < 1.0F) {
+                        double d2 = (double) (x - facing.getFrontOffsetX()) + 0.5D;
+                        double d3 = (double) (z - facing.getFrontOffsetZ()) + 0.5D;
+                        AxisAlignedBB axisalignedbb = new AxisAlignedBB(d2 - d1, (double) y + 0.001D, d3 - d1, d2 + d1, (double) ((float) y + this.entity.height), d3 + d1);
                         AxisAlignedBB axisalignedbb1 = this.blockaccess.getBlockState(blockpos).getBoundingBox(this.blockaccess, blockpos);
                         AxisAlignedBB axisalignedbb2 = axisalignedbb.expand(0.0D, axisalignedbb1.maxY - 0.002D, 0.0D);
 
-                        if (this.entity.world.collidesWithAnyBlock(axisalignedbb2))
-                        {
+                        if (this.entity.world.collidesWithAnyBlock(axisalignedbb2)) {
                             pathpoint = null;
                         }
                     }
                 }
 
-                if (pathnodetype == PathNodeType.OPEN)
-                {
-                    AxisAlignedBB axisalignedbb3 = new AxisAlignedBB((double)x - d1 + 0.5D, (double)y + 0.001D, (double)z - d1 + 0.5D, (double)x + d1 + 0.5D, (double)((float)y + this.entity.height), (double)z + d1 + 0.5D);
+                if (pathnodetype == PathNodeType.OPEN) {
+                    AxisAlignedBB axisalignedbb3 = new AxisAlignedBB((double) x - d1 + 0.5D, (double) y + 0.001D, (double) z - d1 + 0.5D, (double) x + d1 + 0.5D, (double) ((float) y + this.entity.height), (double) z + d1 + 0.5D);
 
-                    if (this.entity.world.collidesWithAnyBlock(axisalignedbb3))
-                    {
+                    if (this.entity.world.collidesWithAnyBlock(axisalignedbb3)) {
                         return null;
                     }
 
-                    if (this.entity.width >= 1.0F)
-                    {
+                    if (this.entity.width >= 1.0F) {
                         PathNodeType pathnodetype1 = this.getPathNodeType(this.entity, x, y - 1, z);
 
-                        if (pathnodetype1 == PathNodeType.BLOCKED)
-                        {
+                        if (pathnodetype1 == PathNodeType.BLOCKED) {
                             pathpoint = this.openPoint(x, y, z);
                             pathpoint.nodeType = PathNodeType.WALKABLE;
                             pathpoint.costMalus = Math.max(pathpoint.costMalus, f);
@@ -258,28 +209,24 @@
 
                     int i = 0;
 
-                    while (y > 0 && pathnodetype == PathNodeType.OPEN)
-                    {
+                    while (y > 0 && pathnodetype == PathNodeType.OPEN) {
                         --y;
 
-                        if (i++ >= this.entity.getMaxFallHeight())
-                        {
+                        if (i++ >= this.entity.getMaxFallHeight()) {
                             return null;
                         }
 
                         pathnodetype = this.getPathNodeType(this.entity, x, y, z);
                         f = this.entity.getPathPriority(pathnodetype);
 
-                        if (pathnodetype != PathNodeType.OPEN && f >= 0.0F)
-                        {
+                        if (pathnodetype != PathNodeType.OPEN && f >= 0.0F) {
                             pathpoint = this.openPoint(x, y, z);
                             pathpoint.nodeType = pathnodetype;
                             pathpoint.costMalus = Math.max(pathpoint.costMalus, f);
                             break;
                         }
 
-                        if (f < 0.0F)
-                        {
+                        if (f < 0.0F) {
                             return null;
                         }
                     }
@@ -290,78 +237,58 @@
         }
     }
 
-    public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z, EntityLiving entitylivingIn, int xSize, int ySize, int zSize, boolean canBreakDoorsIn, boolean canEnterDoorsIn)
-    {
+    public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z, EntityLiving entitylivingIn, int xSize, int ySize, int zSize, boolean canBreakDoorsIn, boolean canEnterDoorsIn) {
         EnumSet<PathNodeType> enumset = EnumSet.<PathNodeType>noneOf(PathNodeType.class);
         PathNodeType pathnodetype = PathNodeType.BLOCKED;
-        double d0 = (double)entitylivingIn.width / 2.0D;
+        double d0 = (double) entitylivingIn.width / 2.0D;
         BlockPos blockpos = new BlockPos(entitylivingIn);
-        this.currentEntity = entitylivingIn;
         pathnodetype = this.getPathNodeType(blockaccessIn, x, y, z, xSize, ySize, zSize, canBreakDoorsIn, canEnterDoorsIn, enumset, pathnodetype, blockpos);
-        this.currentEntity = null;
 
-        if (enumset.contains(PathNodeType.FENCE))
-        {
+        if (enumset.contains(PathNodeType.FENCE)) {
             return PathNodeType.FENCE;
-        }
-        else
-        {
+        } else {
             PathNodeType pathnodetype1 = PathNodeType.BLOCKED;
 
-            for (PathNodeType pathnodetype2 : enumset)
-            {
-                if (entitylivingIn.getPathPriority(pathnodetype2) < 0.0F)
-                {
+            for (PathNodeType pathnodetype2 : enumset) {
+                if (entitylivingIn.getPathPriority(pathnodetype2) < 0.0F) {
                     return pathnodetype2;
                 }
 
-                if (entitylivingIn.getPathPriority(pathnodetype2) >= entitylivingIn.getPathPriority(pathnodetype1))
-                {
+                if (entitylivingIn.getPathPriority(pathnodetype2) >= entitylivingIn.getPathPriority(pathnodetype1)) {
                     pathnodetype1 = pathnodetype2;
                 }
             }
 
-            if (pathnodetype == PathNodeType.OPEN && entitylivingIn.getPathPriority(pathnodetype1) == 0.0F)
-            {
+            if (pathnodetype == PathNodeType.OPEN && entitylivingIn.getPathPriority(pathnodetype1) == 0.0F) {
                 return PathNodeType.OPEN;
-            }
-            else
-            {
+            } else {
                 return pathnodetype1;
             }
         }
     }
 
-    public PathNodeType getPathNodeType(IBlockAccess p_193577_1_, int x, int y, int z, int xSize, int ySize, int zSize, boolean canOpenDoorsIn, boolean canEnterDoorsIn, EnumSet<PathNodeType> p_193577_10_, PathNodeType p_193577_11_, BlockPos p_193577_12_)
-    {
-        for (int i = 0; i < xSize; ++i)
-        {
-            for (int j = 0; j < ySize; ++j)
-            {
-                for (int k = 0; k < zSize; ++k)
-                {
+    public PathNodeType getPathNodeType(IBlockAccess p_193577_1_, int x, int y, int z, int xSize, int ySize, int zSize, boolean canOpenDoorsIn, boolean canEnterDoorsIn, EnumSet<PathNodeType> p_193577_10_, PathNodeType p_193577_11_, BlockPos p_193577_12_) {
+        for (int i = 0; i < xSize; ++i) {
+            for (int j = 0; j < ySize; ++j) {
+                for (int k = 0; k < zSize; ++k) {
                     int l = i + x;
                     int i1 = j + y;
                     int j1 = k + z;
                     PathNodeType pathnodetype = this.getPathNodeType(p_193577_1_, l, i1, j1);
 
-                    if (pathnodetype == PathNodeType.DOOR_WOOD_CLOSED && canOpenDoorsIn && canEnterDoorsIn)
-                    {
+                    if (pathnodetype == PathNodeType.DOOR_WOOD_CLOSED && canOpenDoorsIn && canEnterDoorsIn) {
                         pathnodetype = PathNodeType.WALKABLE;
                     }
 
-                    if (pathnodetype == PathNodeType.DOOR_OPEN && !canEnterDoorsIn)
-                    {
+                    if (pathnodetype == PathNodeType.DOOR_OPEN && !canEnterDoorsIn) {
                         pathnodetype = PathNodeType.BLOCKED;
                     }
 
-                    if (pathnodetype == PathNodeType.RAIL && !(p_193577_1_.getBlockState(p_193577_12_).getBlock() instanceof BlockRailBase) && !(p_193577_1_.getBlockState(p_193577_12_.down()).getBlock() instanceof BlockRailBase))
-                    {
+                    if (pathnodetype == PathNodeType.RAIL && !(p_193577_1_.getBlockState(p_193577_12_).getBlock() instanceof BlockRailBase) && !(p_193577_1_.getBlockState(p_193577_12_.down()).getBlock() instanceof BlockRailBase)) {
                         pathnodetype = PathNodeType.FENCE;
                     }
 
-                    if (i == 0 && j == 0 && k == 0)
-                    {
+                    if (i == 0 && j == 0 && k == 0) {
                         p_193577_11_ = pathnodetype;
                     }
 
@@ -373,68 +300,50 @@
         return p_193577_11_;
     }
 
-    private PathNodeType getPathNodeType(EntityLiving entitylivingIn, BlockPos pos)
-    {
+    private PathNodeType getPathNodeType(EntityLiving entitylivingIn, BlockPos pos) {
         return this.getPathNodeType(entitylivingIn, pos.getX(), pos.getY(), pos.getZ());
     }
 
-    private PathNodeType getPathNodeType(EntityLiving entitylivingIn, int x, int y, int z)
-    {
+    private PathNodeType getPathNodeType(EntityLiving entitylivingIn, int x, int y, int z) {
         return this.getPathNodeType(this.blockaccess, x, y, z, entitylivingIn, this.entitySizeX, this.entitySizeY, this.entitySizeZ, this.getCanOpenDoors(), this.getCanEnterDoors());
     }
 
-    public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z)
-    {
+    public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z) {
         PathNodeType pathnodetype = this.getPathNodeTypeRaw(blockaccessIn, x, y, z);
 
-        if (pathnodetype == PathNodeType.OPEN && y >= 1)
-        {
+        if (pathnodetype == PathNodeType.OPEN && y >= 1) {
             Block block = blockaccessIn.getBlockState(new BlockPos(x, y - 1, z)).getBlock();
             PathNodeType pathnodetype1 = this.getPathNodeTypeRaw(blockaccessIn, x, y - 1, z);
             pathnodetype = pathnodetype1 != PathNodeType.WALKABLE && pathnodetype1 != PathNodeType.OPEN && pathnodetype1 != PathNodeType.WATER && pathnodetype1 != PathNodeType.LAVA ? PathNodeType.WALKABLE : PathNodeType.OPEN;
 
-            if (pathnodetype1 == PathNodeType.DAMAGE_FIRE || block == Blocks.MAGMA)
-            {
+            if (pathnodetype1 == PathNodeType.DAMAGE_FIRE || block == Blocks.MAGMA) {
                 pathnodetype = PathNodeType.DAMAGE_FIRE;
             }
 
-            if (pathnodetype1 == PathNodeType.DAMAGE_CACTUS)
-            {
+            if (pathnodetype1 == PathNodeType.DAMAGE_CACTUS) {
                 pathnodetype = PathNodeType.DAMAGE_CACTUS;
             }
-
-            if (pathnodetype1 == PathNodeType.DAMAGE_OTHER) pathnodetype = PathNodeType.DAMAGE_OTHER;
         }
 
         pathnodetype = this.checkNeighborBlocks(blockaccessIn, x, y, z, pathnodetype);
         return pathnodetype;
     }
 
-    public PathNodeType checkNeighborBlocks(IBlockAccess p_193578_1_, int p_193578_2_, int p_193578_3_, int p_193578_4_, PathNodeType p_193578_5_)
-    {
+    public PathNodeType checkNeighborBlocks(IBlockAccess p_193578_1_, int p_193578_2_, int p_193578_3_, int p_193578_4_, PathNodeType p_193578_5_) {
         BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
 
-        if (p_193578_5_ == PathNodeType.WALKABLE)
-        {
-            for (int i = -1; i <= 1; ++i)
-            {
-                for (int j = -1; j <= 1; ++j)
-                {
-                    if (i != 0 || j != 0)
-                    {
-                        IBlockState state = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_));
-                        Block block = state.getBlock();
-                        PathNodeType type = block.getAiPathNodeType(state, p_193578_1_, blockpos$pooledmutableblockpos, this.currentEntity);
+        if (p_193578_5_ == PathNodeType.WALKABLE) {
+            for (int i = -1; i <= 1; ++i) {
+                for (int j = -1; j <= 1; ++j) {
+                    if (i != 0 || j != 0) {
+                        Block block = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_)).getBlock();
 
-                        if (block == Blocks.CACTUS || type == PathNodeType.DAMAGE_CACTUS)
-                        {
+                        if (block == Blocks.CACTUS) {
                             p_193578_5_ = PathNodeType.DANGER_CACTUS;
-                        }
-                        else if (block == Blocks.FIRE || type == PathNodeType.DAMAGE_FIRE)
-                        {
+                        } else if (block == Blocks.FIRE) {
                             p_193578_5_ = PathNodeType.DANGER_FIRE;
-                        }
-                        else if (type == PathNodeType.DAMAGE_OTHER) p_193578_5_ = PathNodeType.DANGER_OTHER;
+                        } else if (block.isBurning(p_193578_1_, blockpos$pooledmutableblockpos))
+                            p_193578_5_ = PathNodeType.DAMAGE_FIRE;
                     }
                 }
             }
@@ -444,68 +353,42 @@
         return p_193578_5_;
     }
 
-    protected PathNodeType getPathNodeTypeRaw(IBlockAccess p_189553_1_, int p_189553_2_, int p_189553_3_, int p_189553_4_)
-    {
+    protected PathNodeType getPathNodeTypeRaw(IBlockAccess p_189553_1_, int p_189553_2_, int p_189553_3_, int p_189553_4_) {
         BlockPos blockpos = new BlockPos(p_189553_2_, p_189553_3_, p_189553_4_);
         IBlockState iblockstate = p_189553_1_.getBlockState(blockpos);
         Block block = iblockstate.getBlock();
         Material material = iblockstate.getMaterial();
 
-        PathNodeType type = block.getAiPathNodeType(iblockstate, p_189553_1_, blockpos, this.currentEntity);
+        PathNodeType type = block.getAiPathNodeType(iblockstate, p_189553_1_, blockpos);
         if (type != null) return type;
 
-        if (material == Material.AIR)
-        {
+        if (material == Material.AIR) {
             return PathNodeType.OPEN;
-        }
-        else if (block != Blocks.TRAPDOOR && block != Blocks.IRON_TRAPDOOR && block != Blocks.WATERLILY)
-        {
-            if (block == Blocks.FIRE)
-            {
+        } else if (block != Blocks.TRAPDOOR && block != Blocks.IRON_TRAPDOOR && block != Blocks.WATERLILY) {
+            if (block == Blocks.FIRE) {
                 return PathNodeType.DAMAGE_FIRE;
-            }
-            else if (block == Blocks.CACTUS)
-            {
+            } else if (block == Blocks.CACTUS) {
                 return PathNodeType.DAMAGE_CACTUS;
-            }
-            else if (block instanceof BlockDoor && material == Material.WOOD && !((Boolean)iblockstate.getValue(BlockDoor.OPEN)).booleanValue())
-            {
+            } else if (block instanceof BlockDoor && material == Material.WOOD && !((Boolean) iblockstate.getValue(BlockDoor.OPEN)).booleanValue()) {
                 return PathNodeType.DOOR_WOOD_CLOSED;
-            }
-            else if (block instanceof BlockDoor && material == Material.IRON && !((Boolean)iblockstate.getValue(BlockDoor.OPEN)).booleanValue())
-            {
+            } else if (block instanceof BlockDoor && material == Material.IRON && !((Boolean) iblockstate.getValue(BlockDoor.OPEN)).booleanValue()) {
                 return PathNodeType.DOOR_IRON_CLOSED;
-            }
-            else if (block instanceof BlockDoor && ((Boolean)iblockstate.getValue(BlockDoor.OPEN)).booleanValue())
-            {
+            } else if (block instanceof BlockDoor && ((Boolean) iblockstate.getValue(BlockDoor.OPEN)).booleanValue()) {
                 return PathNodeType.DOOR_OPEN;
-            }
-            else if (block instanceof BlockRailBase)
-            {
+            } else if (block instanceof BlockRailBase) {
                 return PathNodeType.RAIL;
-            }
-            else if (!(block instanceof BlockFence) && !(block instanceof BlockWall) && (!(block instanceof BlockFenceGate) || ((Boolean)iblockstate.getValue(BlockFenceGate.OPEN)).booleanValue()))
-            {
-                if (material == Material.WATER)
-                {
+            } else if (!(block instanceof BlockFence) && !(block instanceof BlockWall) && (!(block instanceof BlockFenceGate) || ((Boolean) iblockstate.getValue(BlockFenceGate.OPEN)).booleanValue())) {
+                if (material == Material.WATER) {
                     return PathNodeType.WATER;
-                }
-                else if (material == Material.LAVA)
-                {
+                } else if (material == Material.LAVA) {
                     return PathNodeType.LAVA;
-                }
-                else
-                {
+                } else {
                     return block.isPassable(p_189553_1_, blockpos) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
                 }
-            }
-            else
-            {
+            } else {
                 return PathNodeType.FENCE;
             }
-        }
-        else
-        {
+        } else {
             return PathNodeType.TRAPDOOR;
         }
     }
