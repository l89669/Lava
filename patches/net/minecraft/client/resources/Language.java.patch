--- ../src-base/minecraft/net/minecraft/client/resources/Language.java
+++ ../src-work/minecraft/net/minecraft/client/resources/Language.java
@@ -4,15 +4,13 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class Language implements Comparable<Language>
-{
+public class Language implements Comparable<Language> {
     private final String languageCode;
     private final String region;
     private final String name;
     private final boolean bidirectional;
 
-    public Language(String languageCodeIn, String regionIn, String nameIn, boolean bidirectionalIn)
-    {
+    public Language(String languageCodeIn, String regionIn, String nameIn, boolean bidirectionalIn) {
         this.languageCode = languageCodeIn;
         this.region = regionIn;
         this.name = nameIn;
@@ -25,44 +23,38 @@
         }
     }
 
-    public String getLanguageCode()
-    {
+    public String getLanguageCode() {
         return this.languageCode;
     }
 
-    public boolean isBidirectional()
-    {
+    public boolean isBidirectional() {
         return this.bidirectional;
     }
 
-    public String toString()
-    {
+    public String toString() {
         return String.format("%s (%s)", this.name, this.region);
     }
 
-    public boolean equals(Object p_equals_1_)
-    {
-        if (this == p_equals_1_)
-        {
+    public boolean equals(Object p_equals_1_) {
+        if (this == p_equals_1_) {
             return true;
+        } else {
+            return !(p_equals_1_ instanceof Language) ? false : this.languageCode.equals(((Language) p_equals_1_).languageCode);
         }
-        else
-        {
-            return !(p_equals_1_ instanceof Language) ? false : this.languageCode.equals(((Language)p_equals_1_).languageCode);
-        }
     }
 
-    public int hashCode()
-    {
+    public int hashCode() {
         return this.languageCode.hashCode();
     }
 
-    public int compareTo(Language p_compareTo_1_)
-    {
+    public int compareTo(Language p_compareTo_1_) {
         return this.languageCode.compareTo(p_compareTo_1_.languageCode);
     }
 
     // Forge: add access to Locale so modders can create correct string and number formatters
     private final java.util.Locale javaLocale;
-    public java.util.Locale getJavaLocale() { return javaLocale; }
+
+    public java.util.Locale getJavaLocale() {
+        return javaLocale;
+    }
 }
