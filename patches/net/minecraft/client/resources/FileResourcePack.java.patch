--- ../src-base/minecraft/net/minecraft/client/resources/FileResourcePack.java
+++ ../src-work/minecraft/net/minecraft/client/resources/FileResourcePack.java
@@ -3,6 +3,9 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.fml.relauncher.SideOnly;
+
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
@@ -13,92 +16,68 @@
 import java.util.Set;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class FileResourcePack extends AbstractResourcePack implements Closeable
-{
+public class FileResourcePack extends AbstractResourcePack implements Closeable {
     public static final Splitter ENTRY_NAME_SPLITTER = Splitter.on('/').omitEmptyStrings().limit(3);
     private ZipFile resourcePackZipFile;
 
-    public FileResourcePack(File resourcePackFileIn)
-    {
+    public FileResourcePack(File resourcePackFileIn) {
         super(resourcePackFileIn);
     }
 
-    private ZipFile getResourcePackZipFile() throws IOException
-    {
-        if (this.resourcePackZipFile == null)
-        {
+    private ZipFile getResourcePackZipFile() throws IOException {
+        if (this.resourcePackZipFile == null) {
             this.resourcePackZipFile = new ZipFile(this.resourcePackFile);
         }
 
         return this.resourcePackZipFile;
     }
 
-    protected InputStream getInputStreamByName(String name) throws IOException
-    {
+    protected InputStream getInputStreamByName(String name) throws IOException {
         ZipFile zipfile = this.getResourcePackZipFile();
         ZipEntry zipentry = zipfile.getEntry(name);
 
-        if (zipentry == null)
-        {
+        if (zipentry == null) {
             throw new ResourcePackFileNotFoundException(this.resourcePackFile, name);
-        }
-        else
-        {
+        } else {
             return zipfile.getInputStream(zipentry);
         }
     }
 
-    public boolean hasResourceName(String name)
-    {
-        try
-        {
+    public boolean hasResourceName(String name) {
+        try {
             return this.getResourcePackZipFile().getEntry(name) != null;
-        }
-        catch (IOException var3)
-        {
+        } catch (IOException var3) {
             return false;
         }
     }
 
-    public Set<String> getResourceDomains()
-    {
+    public Set<String> getResourceDomains() {
         ZipFile zipfile;
 
-        try
-        {
+        try {
             zipfile = this.getResourcePackZipFile();
-        }
-        catch (IOException var8)
-        {
+        } catch (IOException var8) {
             return Collections.<String>emptySet();
         }
 
-        Enumeration <? extends ZipEntry > enumeration = zipfile.entries();
+        Enumeration<? extends ZipEntry> enumeration = zipfile.entries();
         Set<String> set = Sets.<String>newHashSet();
 
-        while (enumeration.hasMoreElements())
-        {
+        while (enumeration.hasMoreElements()) {
             ZipEntry zipentry = enumeration.nextElement();
             String s = zipentry.getName();
 
-            if (s.startsWith("assets/"))
-            {
+            if (s.startsWith("assets/")) {
                 List<String> list = Lists.newArrayList(ENTRY_NAME_SPLITTER.split(s));
 
-                if (list.size() > 1)
-                {
+                if (list.size() > 1) {
                     String s1 = list.get(1);
 
-                    if (s1.equals(s1.toLowerCase(java.util.Locale.ROOT)))
-                    {
+                    if (s1.equals(s1.toLowerCase(java.util.Locale.ROOT))) {
                         set.add(s1);
-                    }
-                    else
-                    {
+                    } else {
                         this.logNameNotLowercase(s1);
                     }
                 }
@@ -108,16 +87,13 @@
         return set;
     }
 
-    protected void finalize() throws Throwable
-    {
+    protected void finalize() throws Throwable {
         this.close();
         super.finalize();
     }
 
-    public void close() throws IOException
-    {
-        if (this.resourcePackZipFile != null)
-        {
+    public void close() throws IOException {
+        if (this.resourcePackZipFile != null) {
             this.resourcePackZipFile.close();
             this.resourcePackZipFile = null;
         }
