--- ../src-base/minecraft/net/minecraft/client/resources/LanguageManager.java
+++ ../src-work/minecraft/net/minecraft/client/resources/LanguageManager.java
@@ -3,10 +3,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.SortedSet;
 import net.minecraft.client.resources.data.LanguageMetadataSection;
 import net.minecraft.client.resources.data.MetadataSerializer;
 import net.minecraft.util.text.translation.LanguageMap;
@@ -15,60 +11,51 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.SortedSet;
+
 @SideOnly(Side.CLIENT)
-public class LanguageManager implements IResourceManagerReloadListener
-{
+public class LanguageManager implements IResourceManagerReloadListener {
     private static final Logger LOGGER = LogManager.getLogger();
     private final MetadataSerializer metadataSerializer;
     private String currentLanguage;
     protected static final Locale CURRENT_LOCALE = new Locale();
     private final Map<String, Language> languageMap = Maps.<String, Language>newHashMap();
 
-    public LanguageManager(MetadataSerializer theMetadataSerializerIn, String currentLanguageIn)
-    {
+    public LanguageManager(MetadataSerializer theMetadataSerializerIn, String currentLanguageIn) {
         this.metadataSerializer = theMetadataSerializerIn;
         this.currentLanguage = currentLanguageIn;
         I18n.setLocale(CURRENT_LOCALE);
     }
 
-    public void parseLanguageMetadata(List<IResourcePack> resourcesPacks)
-    {
+    public void parseLanguageMetadata(List<IResourcePack> resourcesPacks) {
         this.languageMap.clear();
 
-        for (IResourcePack iresourcepack : resourcesPacks)
-        {
-            try
-            {
-                LanguageMetadataSection languagemetadatasection = (LanguageMetadataSection)iresourcepack.getPackMetadata(this.metadataSerializer, "language");
+        for (IResourcePack iresourcepack : resourcesPacks) {
+            try {
+                LanguageMetadataSection languagemetadatasection = (LanguageMetadataSection) iresourcepack.getPackMetadata(this.metadataSerializer, "language");
 
-                if (languagemetadatasection != null)
-                {
-                    for (Language language : languagemetadatasection.getLanguages())
-                    {
-                        if (!this.languageMap.containsKey(language.getLanguageCode()))
-                        {
+                if (languagemetadatasection != null) {
+                    for (Language language : languagemetadatasection.getLanguages()) {
+                        if (!this.languageMap.containsKey(language.getLanguageCode())) {
                             this.languageMap.put(language.getLanguageCode(), language);
                         }
                     }
                 }
-            }
-            catch (RuntimeException runtimeexception)
-            {
+            } catch (RuntimeException runtimeexception) {
                 LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", iresourcepack.getPackName(), runtimeexception);
-            }
-            catch (IOException ioexception)
-            {
+            } catch (IOException ioexception) {
                 LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", iresourcepack.getPackName(), ioexception);
             }
         }
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         List<String> list = Lists.newArrayList("en_us");
 
-        if (!"en_us".equals(this.currentLanguage))
-        {
+        if (!"en_us".equals(this.currentLanguage)) {
             list.add(this.currentLanguage);
         }
 
@@ -76,34 +63,28 @@
         LanguageMap.replaceWith(CURRENT_LOCALE.properties);
     }
 
-    public boolean isCurrentLocaleUnicode()
-    {
+    public boolean isCurrentLocaleUnicode() {
         return CURRENT_LOCALE.isUnicode();
     }
 
-    public boolean isCurrentLanguageBidirectional()
-    {
+    public boolean isCurrentLanguageBidirectional() {
         return this.getCurrentLanguage() != null && this.getCurrentLanguage().isBidirectional();
     }
 
-    public void setCurrentLanguage(Language currentLanguageIn)
-    {
+    public void setCurrentLanguage(Language currentLanguageIn) {
         this.currentLanguage = currentLanguageIn.getLanguageCode();
     }
 
-    public Language getCurrentLanguage()
-    {
+    public Language getCurrentLanguage() {
         String s = this.languageMap.containsKey(this.currentLanguage) ? this.currentLanguage : "en_us";
         return this.languageMap.get(s);
     }
 
-    public SortedSet<Language> getLanguages()
-    {
+    public SortedSet<Language> getLanguages() {
         return Sets.newTreeSet(this.languageMap.values());
     }
 
-    public Language getLanguage(String p_191960_1_)
-    {
+    public Language getLanguage(String p_191960_1_) {
         return this.languageMap.get(p_191960_1_);
     }
 }
