--- ../src-base/minecraft/net/minecraft/client/resources/data/LanguageMetadataSectionSerializer.java
+++ ../src-work/minecraft/net/minecraft/client/resources/data/LanguageMetadataSectionSerializer.java
@@ -5,28 +5,25 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
-import java.lang.reflect.Type;
-import java.util.Set;
-import java.util.Map.Entry;
 import net.minecraft.client.resources.Language;
 import net.minecraft.util.JsonUtils;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.lang.reflect.Type;
+import java.util.Map.Entry;
+import java.util.Set;
+
 @SideOnly(Side.CLIENT)
-public class LanguageMetadataSectionSerializer extends BaseMetadataSectionSerializer<LanguageMetadataSection>
-{
-    public LanguageMetadataSection deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
-    {
+public class LanguageMetadataSectionSerializer extends BaseMetadataSectionSerializer<LanguageMetadataSection> {
+    public LanguageMetadataSection deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException {
         JsonObject jsonobject = p_deserialize_1_.getAsJsonObject();
         Set<Language> set = Sets.<Language>newHashSet();
 
-        for (Entry<String, JsonElement> entry : jsonobject.entrySet())
-        {
+        for (Entry<String, JsonElement> entry : jsonobject.entrySet()) {
             String s = entry.getKey();
 
-            if (s.length() > 16)
-            {
+            if (s.length() > 16) {
                 throw new JsonParseException("Invalid language->'" + s + "': language code must not be more than " + 16 + " characters long");
             }
 
@@ -35,18 +32,15 @@
             String s2 = JsonUtils.getString(jsonobject1, "name");
             boolean flag = JsonUtils.getBoolean(jsonobject1, "bidirectional", false);
 
-            if (s1.isEmpty())
-            {
+            if (s1.isEmpty()) {
                 throw new JsonParseException("Invalid language->'" + s + "'->region: empty value");
             }
 
-            if (s2.isEmpty())
-            {
+            if (s2.isEmpty()) {
                 throw new JsonParseException("Invalid language->'" + s + "'->name: empty value");
             }
 
-            if (!set.add(new Language(s, s1, s2, flag)))
-            {
+            if (!set.add(new Language(s, s1, s2, flag))) {
                 throw new JsonParseException("Duplicate language->'" + s + "' defined");
             }
         }
@@ -54,8 +48,7 @@
         return new LanguageMetadataSection(set);
     }
 
-    public String getSectionName()
-    {
+    public String getSectionName() {
         return "language";
     }
 }
