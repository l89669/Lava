--- ../src-base/minecraft/net/minecraft/client/resources/ResourcePackRepository.java
+++ ../src-work/minecraft/net/minecraft/client/resources/ResourcePackRepository.java
@@ -7,21 +7,6 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
-import java.awt.image.BufferedImage;
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.regex.Pattern;
-import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreenWorking;
 import net.minecraft.client.renderer.texture.DynamicTexture;
@@ -44,14 +29,18 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.util.*;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.regex.Pattern;
+
 @SideOnly(Side.CLIENT)
-public class ResourcePackRepository
-{
+public class ResourcePackRepository {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final FileFilter RESOURCE_PACK_FILTER = new FileFilter()
-    {
-        public boolean accept(File p_accept_1_)
-        {
+    private static final FileFilter RESOURCE_PACK_FILTER = new FileFilter() {
+        public boolean accept(File p_accept_1_) {
             boolean flag = p_accept_1_.isFile() && p_accept_1_.getName().endsWith(".zip");
             boolean flag1 = p_accept_1_.isDirectory() && (new File(p_accept_1_, "pack.mcmeta")).isFile();
             return flag || flag1;
@@ -69,8 +58,7 @@
     private List<ResourcePackRepository.Entry> repositoryEntriesAll = Lists.<ResourcePackRepository.Entry>newArrayList();
     private final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
 
-    public ResourcePackRepository(File dirResourcepacksIn, File dirServerResourcepacksIn, IResourcePack rprDefaultResourcePackIn, MetadataSerializer rprMetadataSerializerIn, GameSettings settings)
-    {
+    public ResourcePackRepository(File dirResourcepacksIn, File dirServerResourcepacksIn, IResourcePack rprDefaultResourcePackIn, MetadataSerializer rprMetadataSerializerIn, GameSettings settings) {
         this.dirResourcepacks = dirResourcepacksIn;
         this.dirServerResourcepacks = dirServerResourcepacksIn;
         this.rprDefaultResourcePack = rprDefaultResourcePackIn;
@@ -79,29 +67,24 @@
         this.updateRepositoryEntriesAll();
         Iterator<String> iterator = settings.resourcePacks.iterator();
 
-        while (iterator.hasNext())
-        {
+        while (iterator.hasNext()) {
             String s = iterator.next();
 
-            for (ResourcePackRepository.Entry resourcepackrepository$entry : this.repositoryEntriesAll)
-            {
-                if (resourcepackrepository$entry.getResourcePackName().equals(s))
-                {
-                    if (resourcepackrepository$entry.getPackFormat() == 3 || settings.incompatibleResourcePacks.contains(resourcepackrepository$entry.getResourcePackName()))
-                    {
+            for (ResourcePackRepository.Entry resourcepackrepository$entry : this.repositoryEntriesAll) {
+                if (resourcepackrepository$entry.getResourcePackName().equals(s)) {
+                    if (resourcepackrepository$entry.getPackFormat() == 3 || settings.incompatibleResourcePacks.contains(resourcepackrepository$entry.getResourcePackName())) {
                         this.repositoryEntries.add(resourcepackrepository$entry);
                         break;
                     }
 
                     iterator.remove();
-                    LOGGER.warn("Removed selected resource pack {} because it's no longer compatible", (Object)resourcepackrepository$entry.getResourcePackName());
+                    LOGGER.warn("Removed selected resource pack {} because it's no longer compatible", (Object) resourcepackrepository$entry.getResourcePackName());
                 }
             }
         }
     }
 
-    public static Map<String, String> getDownloadHeaders()
-    {
+    public static Map<String, String> getDownloadHeaders() {
         Map<String, String> map = Maps.<String, String>newHashMap();
         map.put("X-Minecraft-Username", Minecraft.getMinecraft().getSession().getUsername());
         map.put("X-Minecraft-UUID", Minecraft.getMinecraft().getSession().getPlayerID());
@@ -109,82 +92,59 @@
         return map;
     }
 
-    private void fixDirResourcepacks()
-    {
-        if (this.dirResourcepacks.exists())
-        {
-            if (!this.dirResourcepacks.isDirectory() && (!this.dirResourcepacks.delete() || !this.dirResourcepacks.mkdirs()))
-            {
-                LOGGER.warn("Unable to recreate resourcepack folder, it exists but is not a directory: {}", (Object)this.dirResourcepacks);
+    private void fixDirResourcepacks() {
+        if (this.dirResourcepacks.exists()) {
+            if (!this.dirResourcepacks.isDirectory() && (!this.dirResourcepacks.delete() || !this.dirResourcepacks.mkdirs())) {
+                LOGGER.warn("Unable to recreate resourcepack folder, it exists but is not a directory: {}", (Object) this.dirResourcepacks);
             }
+        } else if (!this.dirResourcepacks.mkdirs()) {
+            LOGGER.warn("Unable to create resourcepack folder: {}", (Object) this.dirResourcepacks);
         }
-        else if (!this.dirResourcepacks.mkdirs())
-        {
-            LOGGER.warn("Unable to create resourcepack folder: {}", (Object)this.dirResourcepacks);
-        }
     }
 
-    private List<File> getResourcePackFiles()
-    {
+    private List<File> getResourcePackFiles() {
         return this.dirResourcepacks.isDirectory() ? Arrays.asList(this.dirResourcepacks.listFiles(RESOURCE_PACK_FILTER)) : Collections.emptyList();
     }
 
-    private IResourcePack getResourcePack(File p_191399_1_)
-    {
+    private IResourcePack getResourcePack(File p_191399_1_) {
         IResourcePack iresourcepack;
 
-        if (p_191399_1_.isDirectory())
-        {
+        if (p_191399_1_.isDirectory()) {
             iresourcepack = new FolderResourcePack(p_191399_1_);
-        }
-        else
-        {
+        } else {
             iresourcepack = new FileResourcePack(p_191399_1_);
         }
 
-        try
-        {
-            PackMetadataSection packmetadatasection = (PackMetadataSection)iresourcepack.getPackMetadata(this.rprMetadataSerializer, "pack");
+        try {
+            PackMetadataSection packmetadatasection = (PackMetadataSection) iresourcepack.getPackMetadata(this.rprMetadataSerializer, "pack");
 
-            if (packmetadatasection != null && packmetadatasection.getPackFormat() == 2)
-            {
+            if (packmetadatasection != null && packmetadatasection.getPackFormat() == 2) {
                 return new LegacyV2Adapter(iresourcepack);
             }
-        }
-        catch (Exception var4)
-        {
+        } catch (Exception var4) {
             ;
         }
 
         return iresourcepack;
     }
 
-    public void updateRepositoryEntriesAll()
-    {
+    public void updateRepositoryEntriesAll() {
         List<ResourcePackRepository.Entry> list = Lists.<ResourcePackRepository.Entry>newArrayList();
 
-        for (File file1 : this.getResourcePackFiles())
-        {
+        for (File file1 : this.getResourcePackFiles()) {
             ResourcePackRepository.Entry resourcepackrepository$entry = new ResourcePackRepository.Entry(file1);
 
-            if (this.repositoryEntriesAll.contains(resourcepackrepository$entry))
-            {
+            if (this.repositoryEntriesAll.contains(resourcepackrepository$entry)) {
                 int i = this.repositoryEntriesAll.indexOf(resourcepackrepository$entry);
 
-                if (i > -1 && i < this.repositoryEntriesAll.size())
-                {
+                if (i > -1 && i < this.repositoryEntriesAll.size()) {
                     list.add(this.repositoryEntriesAll.get(i));
                 }
-            }
-            else
-            {
-                try
-                {
+            } else {
+                try {
                     resourcepackrepository$entry.updateResourcePack();
                     list.add(resourcepackrepository$entry);
-                }
-                catch (Exception var6)
-                {
+                } catch (Exception var6) {
                     list.remove(resourcepackrepository$entry);
                 }
             }
@@ -192,8 +152,7 @@
 
         this.repositoryEntriesAll.removeAll(list);
 
-        for (ResourcePackRepository.Entry resourcepackrepository$entry1 : this.repositoryEntriesAll)
-        {
+        for (ResourcePackRepository.Entry resourcepackrepository$entry1 : this.repositoryEntriesAll) {
             resourcepackrepository$entry1.closeResourcePack();
         }
 
@@ -201,19 +160,14 @@
     }
 
     @Nullable
-    public ResourcePackRepository.Entry getResourcePackEntry()
-    {
-        if (this.serverResourcePack != null)
-        {
+    public ResourcePackRepository.Entry getResourcePackEntry() {
+        if (this.serverResourcePack != null) {
             ResourcePackRepository.Entry resourcepackrepository$entry = new ResourcePackRepository.Entry(this.serverResourcePack);
 
-            try
-            {
+            try {
                 resourcepackrepository$entry.updateResourcePack();
                 return resourcepackrepository$entry;
-            }
-            catch (IOException var3)
-            {
+            } catch (IOException var3) {
                 ;
             }
         }
@@ -221,47 +175,39 @@
         return null;
     }
 
-    public List<ResourcePackRepository.Entry> getRepositoryEntriesAll()
-    {
+    public List<ResourcePackRepository.Entry> getRepositoryEntriesAll() {
         return ImmutableList.copyOf(this.repositoryEntriesAll);
     }
 
-    public List<ResourcePackRepository.Entry> getRepositoryEntries()
-    {
+    public List<ResourcePackRepository.Entry> getRepositoryEntries() {
         return ImmutableList.copyOf(this.repositoryEntries);
     }
 
-    public void setRepositories(List<ResourcePackRepository.Entry> repositories)
-    {
+    public void setRepositories(List<ResourcePackRepository.Entry> repositories) {
         this.repositoryEntries.clear();
         this.repositoryEntries.addAll(repositories);
     }
 
-    public File getDirResourcepacks()
-    {
+    public File getDirResourcepacks() {
         return this.dirResourcepacks;
     }
 
-    public ListenableFuture<Object> downloadResourcePack(String url, String hash)
-    {
+    public ListenableFuture<Object> downloadResourcePack(String url, String hash) {
         String s = DigestUtils.sha1Hex(url);
         final String s1 = SHA1.matcher(hash).matches() ? hash : "";
         final File file1 = new File(this.dirServerResourcepacks, s);
         this.lock.lock();
 
-        try
-        {
+        try {
             this.clearResourcePack();
 
-            if (file1.exists())
-            {
-                if (this.checkHash(s1, file1))
-                {
+            if (file1.exists()) {
+                if (this.checkHash(s1, file1)) {
                     ListenableFuture listenablefuture1 = this.setServerResourcePack(file1);
                     return listenablefuture1;
                 }
 
-                LOGGER.warn("Deleting file {}", (Object)file1);
+                LOGGER.warn("Deleting file {}", (Object) file1);
                 FileUtils.deleteQuietly(file1);
             }
 
