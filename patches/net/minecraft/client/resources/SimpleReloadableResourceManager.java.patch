--- ../src-base/minecraft/net/minecraft/client/resources/SimpleReloadableResourceManager.java
+++ ../src-work/minecraft/net/minecraft/client/resources/SimpleReloadableResourceManager.java
@@ -6,12 +6,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.client.resources.data.MetadataSerializer;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.relauncher.Side;
@@ -19,9 +13,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 @SideOnly(Side.CLIENT)
-public class SimpleReloadableResourceManager implements IReloadableResourceManager
-{
+public class SimpleReloadableResourceManager implements IReloadableResourceManager {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Joiner JOINER_RESOURCE_PACKS = Joiner.on(", ");
     private final Map<String, FallbackResourceManager> domainResourceManagers = Maps.<String, FallbackResourceManager>newHashMap();
@@ -29,20 +29,16 @@
     private final Set<String> setResourceDomains = Sets.<String>newLinkedHashSet();
     private final MetadataSerializer rmMetadataSerializer;
 
-    public SimpleReloadableResourceManager(MetadataSerializer rmMetadataSerializerIn)
-    {
+    public SimpleReloadableResourceManager(MetadataSerializer rmMetadataSerializerIn) {
         this.rmMetadataSerializer = rmMetadataSerializerIn;
     }
 
-    public void reloadResourcePack(IResourcePack resourcePack)
-    {
-        for (String s : resourcePack.getResourceDomains())
-        {
+    public void reloadResourcePack(IResourcePack resourcePack) {
+        for (String s : resourcePack.getResourceDomains()) {
             this.setResourceDomains.add(s);
             FallbackResourceManager fallbackresourcemanager = this.domainResourceManagers.get(s);
 
-            if (fallbackresourcemanager == null)
-            {
+            if (fallbackresourcemanager == null) {
                 fallbackresourcemanager = new FallbackResourceManager(this.rmMetadataSerializer);
                 this.domainResourceManagers.put(s, fallbackresourcemanager);
             }
@@ -51,59 +47,45 @@
         }
     }
 
-    public Set<String> getResourceDomains()
-    {
+    public Set<String> getResourceDomains() {
         return this.setResourceDomains;
     }
 
-    public IResource getResource(ResourceLocation location) throws IOException
-    {
+    public IResource getResource(ResourceLocation location) throws IOException {
         IResourceManager iresourcemanager = this.domainResourceManagers.get(location.getResourceDomain());
 
-        if (iresourcemanager != null)
-        {
+        if (iresourcemanager != null) {
             return iresourcemanager.getResource(location);
-        }
-        else
-        {
+        } else {
             throw new FileNotFoundException(location.toString());
         }
     }
 
-    public List<IResource> getAllResources(ResourceLocation location) throws IOException
-    {
+    public List<IResource> getAllResources(ResourceLocation location) throws IOException {
         IResourceManager iresourcemanager = this.domainResourceManagers.get(location.getResourceDomain());
 
-        if (iresourcemanager != null)
-        {
+        if (iresourcemanager != null) {
             return iresourcemanager.getAllResources(location);
-        }
-        else
-        {
+        } else {
             throw new FileNotFoundException(location.toString());
         }
     }
 
-    private void clearResources()
-    {
+    private void clearResources() {
         this.domainResourceManagers.clear();
         this.setResourceDomains.clear();
     }
 
-    public void reloadResources(List<IResourcePack> resourcesPacksList)
-    {
-        net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Loading Resources", resourcesPacksList.size()+1, true);
+    public void reloadResources(List<IResourcePack> resourcesPacksList) {
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Loading Resources", resourcesPacksList.size() + 1, true);
         this.clearResources();
-        LOGGER.info("Reloading ResourceManager: {}", (Object)JOINER_RESOURCE_PACKS.join(Iterables.transform(resourcesPacksList, new Function<IResourcePack, String>()
-        {
-            public String apply(@Nullable IResourcePack p_apply_1_)
-            {
+        LOGGER.info("Reloading ResourceManager: {}", (Object) JOINER_RESOURCE_PACKS.join(Iterables.transform(resourcesPacksList, new Function<IResourcePack, String>() {
+            public String apply(@Nullable IResourcePack p_apply_1_) {
                 return p_apply_1_ == null ? "<NULL>" : p_apply_1_.getPackName();
             }
         })));
 
-        for (IResourcePack iresourcepack : resourcesPacksList)
-        {
+        for (IResourcePack iresourcepack : resourcesPacksList) {
             resReload.step(iresourcepack.getPackName());
             this.reloadResourcePack(iresourcepack);
         }
@@ -113,8 +95,7 @@
         net.minecraftforge.fml.common.ProgressManager.pop(resReload);
     }
 
-    public void registerReloadListener(IResourceManagerReloadListener reloadListener)
-    {
+    public void registerReloadListener(IResourceManagerReloadListener reloadListener) {
         net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Loading Resource", 1);
         resReload.step(reloadListener.getClass());
         this.reloadListeners.add(reloadListener);
@@ -122,13 +103,12 @@
         net.minecraftforge.fml.common.ProgressManager.pop(resReload);
     }
 
-    private void notifyReloadListeners()
-    {
+    private void notifyReloadListeners() {
         net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Reloading", this.reloadListeners.size());
-        for (IResourceManagerReloadListener iresourcemanagerreloadlistener : this.reloadListeners)
-        {
+        for (IResourceManagerReloadListener iresourcemanagerreloadlistener : this.reloadListeners) {
             resReload.step(iresourcemanagerreloadlistener.getClass());
-            if (!net.minecraftforge.client.ForgeHooksClient.shouldUseVanillaReloadableListener(iresourcemanagerreloadlistener)) continue; // Forge: Selective reloading for vanilla listeners
+            if (!net.minecraftforge.client.ForgeHooksClient.shouldUseVanillaReloadableListener(iresourcemanagerreloadlistener))
+                continue; // Forge: Selective reloading for vanilla listeners
             iresourcemanagerreloadlistener.onResourceManagerReload(this);
         }
         net.minecraftforge.fml.common.ProgressManager.pop(resReload);
