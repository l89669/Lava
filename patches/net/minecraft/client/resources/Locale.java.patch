--- ../src-base/minecraft/net/minecraft/client/resources/Locale.java
+++ ../src-work/minecraft/net/minecraft/client/resources/Locale.java
@@ -3,6 +3,11 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Maps;
+import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.fml.relauncher.SideOnly;
+import org.apache.commons.io.IOUtils;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
@@ -10,35 +15,24 @@
 import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
-import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
-import org.apache.commons.io.IOUtils;
 
 @SideOnly(Side.CLIENT)
-public class Locale
-{
+public class Locale {
     private static final Splitter SPLITTER = Splitter.on('=').limit(2);
     private static final Pattern PATTERN = Pattern.compile("%(\\d+\\$)?[\\d\\.]*[df]");
     Map<String, String> properties = Maps.<String, String>newHashMap();
     private boolean unicode;
 
-    public synchronized void loadLocaleDataFiles(IResourceManager resourceManager, List<String> languageList)
-    {
+    public synchronized void loadLocaleDataFiles(IResourceManager resourceManager, List<String> languageList) {
         this.properties.clear();
 
-        for (String s : languageList)
-        {
+        for (String s : languageList) {
             String s1 = String.format("lang/%s.lang", s);
 
-            for (String s2 : resourceManager.getResourceDomains())
-            {
-                try
-                {
+            for (String s2 : resourceManager.getResourceDomains()) {
+                try {
                     this.loadLocaleData(resourceManager.getAllResources(new ResourceLocation(s2, s1)));
-                }
-                catch (IOException var9)
-                {
+                } catch (IOException var9) {
                     ;
                 }
             }
@@ -47,64 +41,50 @@
         this.checkUnicode();
     }
 
-    public boolean isUnicode()
-    {
+    public boolean isUnicode() {
         return this.unicode;
     }
 
-    private void checkUnicode()
-    {
+    private void checkUnicode() {
         this.unicode = false;
         int i = 0;
         int j = 0;
 
-        for (String s : this.properties.values())
-        {
+        for (String s : this.properties.values()) {
             int k = s.length();
             j += k;
 
-            for (int l = 0; l < k; ++l)
-            {
-                if (s.charAt(l) >= 256)
-                {
+            for (int l = 0; l < k; ++l) {
+                if (s.charAt(l) >= 256) {
                     ++i;
                 }
             }
         }
 
-        float f = (float)i / (float)j;
-        this.unicode = (double)f > 0.1D;
+        float f = (float) i / (float) j;
+        this.unicode = (double) f > 0.1D;
     }
 
-    private void loadLocaleData(List<IResource> resourcesList) throws IOException
-    {
-        for (IResource iresource : resourcesList)
-        {
+    private void loadLocaleData(List<IResource> resourcesList) throws IOException {
+        for (IResource iresource : resourcesList) {
             InputStream inputstream = iresource.getInputStream();
 
-            try
-            {
+            try {
                 this.loadLocaleData(inputstream);
-            }
-            finally
-            {
+            } finally {
                 IOUtils.closeQuietly(inputstream);
             }
         }
     }
 
-    private void loadLocaleData(InputStream inputStreamIn) throws IOException
-    {
+    private void loadLocaleData(InputStream inputStreamIn) throws IOException {
         inputStreamIn = net.minecraftforge.fml.common.FMLCommonHandler.instance().loadLanguage(properties, inputStreamIn);
         if (inputStreamIn == null) return;
-        for (String s : IOUtils.readLines(inputStreamIn, StandardCharsets.UTF_8))
-        {
-            if (!s.isEmpty() && s.charAt(0) != '#')
-            {
-                String[] astring = (String[])Iterables.toArray(SPLITTER.split(s), String.class);
+        for (String s : IOUtils.readLines(inputStreamIn, StandardCharsets.UTF_8)) {
+            if (!s.isEmpty() && s.charAt(0) != '#') {
+                String[] astring = (String[]) Iterables.toArray(SPLITTER.split(s), String.class);
 
-                if (astring != null && astring.length == 2)
-                {
+                if (astring != null && astring.length == 2) {
                     String s1 = astring[0];
                     String s2 = PATTERN.matcher(astring[1]).replaceAll("%$1s");
                     this.properties.put(s1, s2);
@@ -113,28 +93,22 @@
         }
     }
 
-    private String translateKeyPrivate(String translateKey)
-    {
+    private String translateKeyPrivate(String translateKey) {
         String s = this.properties.get(translateKey);
         return s == null ? translateKey : s;
     }
 
-    public String formatMessage(String translateKey, Object[] parameters)
-    {
+    public String formatMessage(String translateKey, Object[] parameters) {
         String s = this.translateKeyPrivate(translateKey);
 
-        try
-        {
+        try {
             return String.format(s, parameters);
-        }
-        catch (IllegalFormatException var5)
-        {
+        } catch (IllegalFormatException var5) {
             return "Format error: " + s;
         }
     }
 
-    public boolean hasKey(String key)
-    {
+    public boolean hasKey(String key) {
         return this.properties.containsKey(key);
     }
 }
