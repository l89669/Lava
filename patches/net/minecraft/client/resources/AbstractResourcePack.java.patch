--- ../src-base/minecraft/net/minecraft/client/resources/AbstractResourcePack.java
+++ ../src-work/minecraft/net/minecraft/client/resources/AbstractResourcePack.java
@@ -3,14 +3,6 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonParser;
-import java.awt.image.BufferedImage;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.nio.charset.StandardCharsets;
 import net.minecraft.client.renderer.texture.TextureUtil;
 import net.minecraft.client.resources.data.IMetadataSection;
 import net.minecraft.client.resources.data.MetadataSerializer;
@@ -21,34 +13,32 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.nio.charset.StandardCharsets;
+
 @SideOnly(Side.CLIENT)
-public abstract class AbstractResourcePack implements IResourcePack
-{
+public abstract class AbstractResourcePack implements IResourcePack {
     private static final Logger LOGGER = LogManager.getLogger();
     protected final File resourcePackFile;
 
-    public AbstractResourcePack(File resourcePackFileIn)
-    {
+    public AbstractResourcePack(File resourcePackFileIn) {
         this.resourcePackFile = resourcePackFileIn;
     }
 
-    private static String locationToName(ResourceLocation location)
-    {
+    private static String locationToName(ResourceLocation location) {
         return String.format("%s/%s/%s", "assets", location.getResourceDomain(), location.getResourcePath());
     }
 
-    protected static String getRelativeName(File p_110595_0_, File p_110595_1_)
-    {
+    protected static String getRelativeName(File p_110595_0_, File p_110595_1_) {
         return p_110595_0_.toURI().relativize(p_110595_1_.toURI()).getPath();
     }
 
-    public InputStream getInputStream(ResourceLocation location) throws IOException
-    {
+    public InputStream getInputStream(ResourceLocation location) throws IOException {
         return this.getInputStreamByName(locationToName(location));
     }
 
-    public boolean resourceExists(ResourceLocation location)
-    {
+    public boolean resourceExists(ResourceLocation location) {
         return this.hasResourceName(locationToName(location));
     }
 
@@ -56,45 +46,35 @@
 
     protected abstract boolean hasResourceName(String name);
 
-    protected void logNameNotLowercase(String name)
-    {
+    protected void logNameNotLowercase(String name) {
         LOGGER.warn("ResourcePack: ignored non-lowercase namespace: {} in {}", name, this.resourcePackFile);
     }
 
-    public <T extends IMetadataSection> T getPackMetadata(MetadataSerializer metadataSerializer, String metadataSectionName) throws IOException
-    {
-        return (T)readMetadata(metadataSerializer, this.getInputStreamByName("pack.mcmeta"), metadataSectionName);
+    public <T extends IMetadataSection> T getPackMetadata(MetadataSerializer metadataSerializer, String metadataSectionName) throws IOException {
+        return (T) readMetadata(metadataSerializer, this.getInputStreamByName("pack.mcmeta"), metadataSectionName);
     }
 
-    static <T extends IMetadataSection> T readMetadata(MetadataSerializer metadataSerializer, InputStream p_110596_1_, String sectionName)
-    {
+    static <T extends IMetadataSection> T readMetadata(MetadataSerializer metadataSerializer, InputStream p_110596_1_, String sectionName) {
         JsonObject jsonobject = null;
         BufferedReader bufferedreader = null;
 
-        try
-        {
+        try {
             bufferedreader = new BufferedReader(new InputStreamReader(p_110596_1_, StandardCharsets.UTF_8));
             jsonobject = (new JsonParser()).parse(bufferedreader).getAsJsonObject();
-        }
-        catch (RuntimeException runtimeexception)
-        {
+        } catch (RuntimeException runtimeexception) {
             throw new JsonParseException(runtimeexception);
+        } finally {
+            IOUtils.closeQuietly((Reader) bufferedreader);
         }
-        finally
-        {
-            IOUtils.closeQuietly((Reader)bufferedreader);
-        }
 
-        return (T)metadataSerializer.parseMetadataSection(sectionName, jsonobject);
+        return (T) metadataSerializer.parseMetadataSection(sectionName, jsonobject);
     }
 
-    public BufferedImage getPackImage() throws IOException
-    {
+    public BufferedImage getPackImage() throws IOException {
         return TextureUtil.readBufferedImage(this.getInputStreamByName("pack.png"));
     }
 
-    public String getPackName()
-    {
+    public String getPackName() {
         return this.resourcePackFile.getName();
     }
 }
