--- ../src-base/minecraft/net/minecraft/client/resources/SkinManager.java
+++ ../src-work/minecraft/net/minecraft/client/resources/SkinManager.java
@@ -7,16 +7,8 @@
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.minecraft.InsecureTextureException;
 import com.mojang.authlib.minecraft.MinecraftProfileTexture;
-import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.minecraft.MinecraftProfileTexture.Type;
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.util.Map;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.IImageBuffer;
 import net.minecraft.client.renderer.ImageBufferDownload;
@@ -27,78 +19,69 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.util.Map;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
 @SideOnly(Side.CLIENT)
-public class SkinManager
-{
+public class SkinManager {
     private static final ExecutorService THREAD_POOL = new ThreadPoolExecutor(0, 2, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue());
     private final TextureManager textureManager;
     private final File skinCacheDir;
     private final MinecraftSessionService sessionService;
     private final LoadingCache<GameProfile, Map<Type, MinecraftProfileTexture>> skinCacheLoader;
 
-    public SkinManager(TextureManager textureManagerInstance, File skinCacheDirectory, MinecraftSessionService sessionService)
-    {
+    public SkinManager(TextureManager textureManagerInstance, File skinCacheDirectory, MinecraftSessionService sessionService) {
         this.textureManager = textureManagerInstance;
         this.skinCacheDir = skinCacheDirectory;
         this.sessionService = sessionService;
-        this.skinCacheLoader = CacheBuilder.newBuilder().expireAfterAccess(15L, TimeUnit.SECONDS).<GameProfile, Map<Type, MinecraftProfileTexture>>build(new CacheLoader<GameProfile, Map<Type, MinecraftProfileTexture>>()
-        {
-            public Map<Type, MinecraftProfileTexture> load(GameProfile p_load_1_) throws Exception
-            {
-                try
-                {
+        this.skinCacheLoader = CacheBuilder.newBuilder().expireAfterAccess(15L, TimeUnit.SECONDS).<GameProfile, Map<Type, MinecraftProfileTexture>>build(new CacheLoader<GameProfile, Map<Type, MinecraftProfileTexture>>() {
+            public Map<Type, MinecraftProfileTexture> load(GameProfile p_load_1_) throws Exception {
+                try {
                     return Minecraft.getMinecraft().getSessionService().getTextures(p_load_1_, false);
-                }
-                catch (Throwable var3)
-                {
+                } catch (Throwable var3) {
                     return Maps.<Type, MinecraftProfileTexture>newHashMap();
                 }
             }
         });
     }
 
-    public ResourceLocation loadSkin(MinecraftProfileTexture profileTexture, Type textureType)
-    {
-        return this.loadSkin(profileTexture, textureType, (SkinManager.SkinAvailableCallback)null);
+    public ResourceLocation loadSkin(MinecraftProfileTexture profileTexture, Type textureType) {
+        return this.loadSkin(profileTexture, textureType, (SkinManager.SkinAvailableCallback) null);
     }
 
-    public ResourceLocation loadSkin(final MinecraftProfileTexture profileTexture, final Type textureType, @Nullable final SkinManager.SkinAvailableCallback skinAvailableCallback)
-    {
+    public ResourceLocation loadSkin(final MinecraftProfileTexture profileTexture, final Type textureType, @Nullable final SkinManager.SkinAvailableCallback skinAvailableCallback) {
         final ResourceLocation resourcelocation = new ResourceLocation("skins/" + profileTexture.getHash());
         ITextureObject itextureobject = this.textureManager.getTexture(resourcelocation);
 
-        if (itextureobject != null)
-        {
-            if (skinAvailableCallback != null)
-            {
+        if (itextureobject != null) {
+            if (skinAvailableCallback != null) {
                 skinAvailableCallback.skinAvailable(textureType, resourcelocation, profileTexture);
             }
-        }
-        else
-        {
+        } else {
             File file1 = new File(this.skinCacheDir, profileTexture.getHash().length() > 2 ? profileTexture.getHash().substring(0, 2) : "xx");
             File file2 = new File(file1, profileTexture.getHash());
             final IImageBuffer iimagebuffer = textureType == Type.SKIN ? new ImageBufferDownload() : null;
-            ThreadDownloadImageData threaddownloadimagedata = new ThreadDownloadImageData(file2, profileTexture.getUrl(), DefaultPlayerSkin.getDefaultSkinLegacy(), new IImageBuffer()
-            {
-                public BufferedImage parseUserSkin(BufferedImage image)
-                {
-                    if (iimagebuffer != null)
-                    {
+            ThreadDownloadImageData threaddownloadimagedata = new ThreadDownloadImageData(file2, profileTexture.getUrl(), DefaultPlayerSkin.getDefaultSkinLegacy(), new IImageBuffer() {
+                public BufferedImage parseUserSkin(BufferedImage image) {
+                    if (iimagebuffer != null) {
                         image = iimagebuffer.parseUserSkin(image);
                     }
 
                     return image;
                 }
-                public void skinAvailable()
-                {
-                    if (iimagebuffer != null)
-                    {
+
+                public void skinAvailable() {
+                    if (iimagebuffer != null) {
                         iimagebuffer.skinAvailable();
                     }
 
-                    if (skinAvailableCallback != null)
-                    {
+                    if (skinAvailableCallback != null) {
                         skinAvailableCallback.skinAvailable(textureType, resourcelocation, profileTexture);
                     }
                 }
@@ -109,41 +92,30 @@
         return resourcelocation;
     }
 
-    public void loadProfileTextures(final GameProfile profile, final SkinManager.SkinAvailableCallback skinAvailableCallback, final boolean requireSecure)
-    {
-        THREAD_POOL.submit(new Runnable()
-        {
-            public void run()
-            {
+    public void loadProfileTextures(final GameProfile profile, final SkinManager.SkinAvailableCallback skinAvailableCallback, final boolean requireSecure) {
+        THREAD_POOL.submit(new Runnable() {
+            public void run() {
                 final Map<Type, MinecraftProfileTexture> map = Maps.<Type, MinecraftProfileTexture>newHashMap();
 
-                try
-                {
+                try {
                     map.putAll(SkinManager.this.sessionService.getTextures(profile, requireSecure));
-                }
-                catch (InsecureTextureException var3)
-                {
+                } catch (InsecureTextureException var3) {
                     ;
                 }
 
-                if (map.isEmpty() && profile.getId().equals(Minecraft.getMinecraft().getSession().getProfile().getId()))
-                {
+                if (map.isEmpty() && profile.getId().equals(Minecraft.getMinecraft().getSession().getProfile().getId())) {
                     profile.getProperties().clear();
                     profile.getProperties().putAll(Minecraft.getMinecraft().getProfileProperties());
                     map.putAll(SkinManager.this.sessionService.getTextures(profile, false));
                 }
 
-                Minecraft.getMinecraft().addScheduledTask(new Runnable()
-                {
-                    public void run()
-                    {
-                        if (map.containsKey(Type.SKIN))
-                        {
+                Minecraft.getMinecraft().addScheduledTask(new Runnable() {
+                    public void run() {
+                        if (map.containsKey(Type.SKIN)) {
                             SkinManager.this.loadSkin(map.get(Type.SKIN), Type.SKIN, skinAvailableCallback);
                         }
 
-                        if (map.containsKey(Type.CAPE))
-                        {
+                        if (map.containsKey(Type.CAPE)) {
                             SkinManager.this.loadSkin(map.get(Type.CAPE), Type.CAPE, skinAvailableCallback);
                         }
                     }
@@ -152,14 +124,12 @@
         });
     }
 
-    public Map<Type, MinecraftProfileTexture> loadSkinFromCache(GameProfile profile)
-    {
-        return (Map)this.skinCacheLoader.getUnchecked(profile);
+    public Map<Type, MinecraftProfileTexture> loadSkinFromCache(GameProfile profile) {
+        return (Map) this.skinCacheLoader.getUnchecked(profile);
     }
 
     @SideOnly(Side.CLIENT)
-    public interface SkinAvailableCallback
-    {
+    public interface SkinAvailableCallback {
         void skinAvailable(Type typeIn, ResourceLocation location, MinecraftProfileTexture profileTexture);
     }
 }
