--- ../src-base/minecraft/net/minecraft/client/audio/MusicTicker.java
+++ ../src-work/minecraft/net/minecraft/client/audio/MusicTicker.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.audio;
 
-import java.util.Random;
 import net.minecraft.client.Minecraft;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.util.ITickable;
@@ -9,33 +8,29 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class MusicTicker implements ITickable
-{
+public class MusicTicker implements ITickable {
     private final Random rand = new Random();
     private final Minecraft mc;
     private ISound currentMusic;
     private int timeUntilNextMusic = 100;
 
-    public MusicTicker(Minecraft mcIn)
-    {
+    public MusicTicker(Minecraft mcIn) {
         this.mc = mcIn;
     }
 
-    public void update()
-    {
+    public void update() {
         MusicTicker.MusicType musicticker$musictype = this.mc.getAmbientMusicType();
 
-        if (this.currentMusic != null)
-        {
-            if (!musicticker$musictype.getMusicLocation().getSoundName().equals(this.currentMusic.getSoundLocation()))
-            {
+        if (this.currentMusic != null) {
+            if (!musicticker$musictype.getMusicLocation().getSoundName().equals(this.currentMusic.getSoundLocation())) {
                 this.mc.getSoundHandler().stopSound(this.currentMusic);
                 this.timeUntilNextMusic = MathHelper.getInt(this.rand, 0, musicticker$musictype.getMinDelay() / 2);
             }
 
-            if (!this.mc.getSoundHandler().isSoundPlaying(this.currentMusic))
-            {
+            if (!this.mc.getSoundHandler().isSoundPlaying(this.currentMusic)) {
                 this.currentMusic = null;
                 this.timeUntilNextMusic = Math.min(MathHelper.getInt(this.rand, musicticker$musictype.getMinDelay(), musicticker$musictype.getMaxDelay()), this.timeUntilNextMusic);
             }
@@ -43,22 +38,19 @@
 
         this.timeUntilNextMusic = Math.min(this.timeUntilNextMusic, musicticker$musictype.getMaxDelay());
 
-        if (this.currentMusic == null && this.timeUntilNextMusic-- <= 0)
-        {
+        if (this.currentMusic == null && this.timeUntilNextMusic-- <= 0) {
             this.playMusic(musicticker$musictype);
         }
     }
 
-    public void playMusic(MusicTicker.MusicType requestedMusicType)
-    {
+    public void playMusic(MusicTicker.MusicType requestedMusicType) {
         this.currentMusic = PositionedSoundRecord.getMusicRecord(requestedMusicType.getMusicLocation());
         this.mc.getSoundHandler().playSound(this.currentMusic);
         this.timeUntilNextMusic = Integer.MAX_VALUE;
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum MusicType
-    {
+    public static enum MusicType {
         MENU(SoundEvents.MUSIC_MENU, 20, 600),
         GAME(SoundEvents.MUSIC_GAME, 12000, 24000),
         CREATIVE(SoundEvents.MUSIC_CREATIVE, 1200, 3600),
@@ -71,25 +63,21 @@
         private final int minDelay;
         private final int maxDelay;
 
-        private MusicType(SoundEvent musicLocationIn, int minDelayIn, int maxDelayIn)
-        {
+        private MusicType(SoundEvent musicLocationIn, int minDelayIn, int maxDelayIn) {
             this.musicLocation = musicLocationIn;
             this.minDelay = minDelayIn;
             this.maxDelay = maxDelayIn;
         }
 
-        public SoundEvent getMusicLocation()
-        {
+        public SoundEvent getMusicLocation() {
             return this.musicLocation;
         }
 
-        public int getMinDelay()
-        {
+        public int getMinDelay() {
             return this.minDelay;
         }
 
-        public int getMaxDelay()
-        {
+        public int getMaxDelay() {
             return this.maxDelay;
         }
     }
