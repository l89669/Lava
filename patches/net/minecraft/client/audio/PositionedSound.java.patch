--- ../src-base/minecraft/net/minecraft/client/audio/PositionedSound.java
+++ ../src-work/minecraft/net/minecraft/client/audio/PositionedSound.java
@@ -1,15 +1,15 @@
 package net.minecraft.client.audio;
 
-import javax.annotation.Nullable;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.SoundEvent;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+
 @SideOnly(Side.CLIENT)
-public abstract class PositionedSound implements ISound
-{
+public abstract class PositionedSound implements ISound {
     protected Sound sound;
     @Nullable
     private SoundEventAccessor soundEvent;
@@ -24,13 +24,11 @@
     protected int repeatDelay;
     protected ISound.AttenuationType attenuationType;
 
-    protected PositionedSound(SoundEvent soundIn, SoundCategory categoryIn)
-    {
+    protected PositionedSound(SoundEvent soundIn, SoundCategory categoryIn) {
         this(soundIn.getSoundName(), categoryIn);
     }
 
-    protected PositionedSound(ResourceLocation soundId, SoundCategory categoryIn)
-    {
+    protected PositionedSound(ResourceLocation soundId, SoundCategory categoryIn) {
         this.volume = 1.0F;
         this.pitch = 1.0F;
         this.attenuationType = ISound.AttenuationType.LINEAR;
@@ -38,74 +36,59 @@
         this.category = categoryIn;
     }
 
-    public ResourceLocation getSoundLocation()
-    {
+    public ResourceLocation getSoundLocation() {
         return this.positionedSoundLocation;
     }
 
-    public SoundEventAccessor createAccessor(SoundHandler handler)
-    {
+    public SoundEventAccessor createAccessor(SoundHandler handler) {
         this.soundEvent = handler.getAccessor(this.positionedSoundLocation);
 
-        if (this.soundEvent == null)
-        {
+        if (this.soundEvent == null) {
             this.sound = SoundHandler.MISSING_SOUND;
-        }
-        else
-        {
+        } else {
             this.sound = this.soundEvent.cloneEntry();
         }
 
         return this.soundEvent;
     }
 
-    public Sound getSound()
-    {
+    public Sound getSound() {
         return this.sound;
     }
 
-    public SoundCategory getCategory()
-    {
+    public SoundCategory getCategory() {
         return this.category;
     }
 
-    public boolean canRepeat()
-    {
+    public boolean canRepeat() {
         return this.repeat;
     }
 
-    public int getRepeatDelay()
-    {
+    public int getRepeatDelay() {
         return this.repeatDelay;
     }
 
-    public float getVolume()
-    {
+    public float getVolume() {
         return this.volume * this.sound.getVolume();
     }
 
-    public float getPitch()
-    {
+    public float getPitch() {
         return this.pitch * this.sound.getPitch();
     }
 
-    public float getXPosF()
-    {
+    public float getXPosF() {
         return this.xPosF;
     }
 
-    public float getYPosF()
-    {
+    public float getYPosF() {
         return this.yPosF;
     }
 
-    public float getZPosF()
-    {
+    public float getZPosF() {
         return this.zPosF;
     }
 
-    public ISound.AttenuationType getAttenuationType()
-    {
+    public ISound.AttenuationType getAttenuationType() {
         return this.attenuationType;
     }
 }
