--- ../src-base/minecraft/net/minecraft/client/network/ServerPinger.java
+++ ../src-work/minecraft/net/minecraft/client/network/ServerPinger.java
@@ -7,20 +7,8 @@
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.*;
 import io.netty.channel.socket.nio.NioSocketChannel;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.multiplayer.ServerAddress;
 import net.minecraft.client.multiplayer.ServerData;
@@ -45,79 +33,68 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.nio.charset.StandardCharsets;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class ServerPinger
-{
+public class ServerPinger {
     private static final Splitter PING_RESPONSE_SPLITTER = Splitter.on('\u0000').limit(6);
     private static final Logger LOGGER = LogManager.getLogger();
     private final List<NetworkManager> pingDestinations = Collections.<NetworkManager>synchronizedList(Lists.newArrayList());
 
-    public void ping(final ServerData server) throws UnknownHostException
-    {
+    public void ping(final ServerData server) throws UnknownHostException {
         ServerAddress serveraddress = ServerAddress.fromString(server.serverIP);
         final NetworkManager networkmanager = NetworkManager.createNetworkManagerAndConnect(InetAddress.getByName(serveraddress.getIP()), serveraddress.getPort(), false);
         this.pingDestinations.add(networkmanager);
         server.serverMOTD = I18n.format("multiplayer.status.pinging");
         server.pingToServer = -1L;
         server.playerList = null;
-        networkmanager.setNetHandler(new INetHandlerStatusClient()
-        {
+        networkmanager.setNetHandler(new INetHandlerStatusClient() {
             private boolean successful;
             private boolean receivedStatus;
             private long pingSentAt;
-            public void handleServerInfo(SPacketServerInfo packetIn)
-            {
-                if (this.receivedStatus)
-                {
+
+            public void handleServerInfo(SPacketServerInfo packetIn) {
+                if (this.receivedStatus) {
                     networkmanager.closeChannel(new TextComponentTranslation("multiplayer.status.unrequested", new Object[0]));
-                }
-                else
-                {
+                } else {
                     this.receivedStatus = true;
                     ServerStatusResponse serverstatusresponse = packetIn.getResponse();
 
-                    if (serverstatusresponse.getServerDescription() != null)
-                    {
+                    if (serverstatusresponse.getServerDescription() != null) {
                         server.serverMOTD = serverstatusresponse.getServerDescription().getFormattedText();
-                    }
-                    else
-                    {
+                    } else {
                         server.serverMOTD = "";
                     }
 
-                    if (serverstatusresponse.getVersion() != null)
-                    {
+                    if (serverstatusresponse.getVersion() != null) {
                         server.gameVersion = serverstatusresponse.getVersion().getName();
                         server.version = serverstatusresponse.getVersion().getProtocol();
-                    }
-                    else
-                    {
+                    } else {
                         server.gameVersion = I18n.format("multiplayer.status.old");
                         server.version = 0;
                     }
 
-                    if (serverstatusresponse.getPlayers() != null)
-                    {
+                    if (serverstatusresponse.getPlayers() != null) {
                         server.populationInfo = TextFormatting.GRAY + "" + serverstatusresponse.getPlayers().getOnlinePlayerCount() + "" + TextFormatting.DARK_GRAY + "/" + TextFormatting.GRAY + serverstatusresponse.getPlayers().getMaxPlayers();
 
-                        if (ArrayUtils.isNotEmpty(serverstatusresponse.getPlayers().getPlayers()))
-                        {
+                        if (ArrayUtils.isNotEmpty(serverstatusresponse.getPlayers().getPlayers())) {
                             StringBuilder stringbuilder = new StringBuilder();
 
-                            for (GameProfile gameprofile : serverstatusresponse.getPlayers().getPlayers())
-                            {
-                                if (stringbuilder.length() > 0)
-                                {
+                            for (GameProfile gameprofile : serverstatusresponse.getPlayers().getPlayers()) {
+                                if (stringbuilder.length() > 0) {
                                     stringbuilder.append("\n");
                                 }
 
                                 stringbuilder.append(gameprofile.getName());
                             }
 
-                            if (serverstatusresponse.getPlayers().getPlayers().length < serverstatusresponse.getPlayers().getOnlinePlayerCount())
-                            {
-                                if (stringbuilder.length() > 0)
-                                {
+                            if (serverstatusresponse.getPlayers().getPlayers().length < serverstatusresponse.getPlayers().getOnlinePlayerCount()) {
+                                if (stringbuilder.length() > 0) {
                                     stringbuilder.append("\n");
                                 }
 
@@ -126,29 +103,21 @@
 
                             server.playerList = stringbuilder.toString();
                         }
-                    }
-                    else
-                    {
+                    } else {
                         server.populationInfo = TextFormatting.DARK_GRAY + I18n.format("multiplayer.status.unknown");
                     }
 
-                    if (serverstatusresponse.getFavicon() != null)
-                    {
+                    if (serverstatusresponse.getFavicon() != null) {
                         String s = serverstatusresponse.getFavicon();
 
-                        if (s.startsWith("data:image/png;base64,"))
-                        {
+                        if (s.startsWith("data:image/png;base64,")) {
                             server.setBase64EncodedIconData(s.substring("data:image/png;base64,".length()));
-                        }
-                        else
-                        {
+                        } else {
                             ServerPinger.LOGGER.error("Invalid server icon (unknown format)");
                         }
+                    } else {
+                        server.setBase64EncodedIconData((String) null);
                     }
-                    else
-                    {
-                        server.setBase64EncodedIconData((String)null);
-                    }
 
                     net.minecraftforge.fml.client.FMLClientHandler.instance().bindServerListData(server, serverstatusresponse);
                     this.pingSentAt = Minecraft.getSystemTime();
@@ -156,17 +125,16 @@
                     this.successful = true;
                 }
             }
-            public void handlePong(SPacketPong packetIn)
-            {
+
+            public void handlePong(SPacketPong packetIn) {
                 long i = this.pingSentAt;
                 long j = Minecraft.getSystemTime();
                 server.pingToServer = j - i;
                 networkmanager.closeChannel(new TextComponentString("Finished"));
             }
-            public void onDisconnect(ITextComponent reason)
-            {
-                if (!this.successful)
-                {
+
+            public void onDisconnect(ITextComponent reason) {
+                if (!this.successful) {
                     ServerPinger.LOGGER.error("Can't ping {}: {}", server.serverIP, reason.getUnformattedText());
                     server.serverMOTD = TextFormatting.DARK_RED + I18n.format("multiplayer.status.cannot_connect");
                     server.populationInfo = "";
@@ -175,50 +143,37 @@
             }
         });
 
-        try
-        {
+        try {
             networkmanager.sendPacket(new C00Handshake(serveraddress.getIP(), serveraddress.getPort(), EnumConnectionState.STATUS, true));
             networkmanager.sendPacket(new CPacketServerQuery());
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             LOGGER.error(throwable);
         }
     }
 
-    private void tryCompatibilityPing(final ServerData server)
-    {
+    private void tryCompatibilityPing(final ServerData server) {
         final ServerAddress serveraddress = ServerAddress.fromString(server.serverIP);
-        ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group(NetworkManager.CLIENT_NIO_EVENTLOOP.getValue())).handler(new ChannelInitializer<Channel>()
-        {
-            protected void initChannel(Channel p_initChannel_1_) throws Exception
-            {
-                try
-                {
+        ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group(NetworkManager.CLIENT_NIO_EVENTLOOP.getValue())).handler(new ChannelInitializer<Channel>() {
+            protected void initChannel(Channel p_initChannel_1_) throws Exception {
+                try {
                     p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
-                }
-                catch (ChannelException var3)
-                {
+                } catch (ChannelException var3) {
                     ;
                 }
 
-                p_initChannel_1_.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>()
-                {
-                    public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception
-                    {
+                p_initChannel_1_.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>() {
+                    public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception {
                         super.channelActive(p_channelActive_1_);
                         ByteBuf bytebuf = Unpooled.buffer();
 
-                        try
-                        {
+                        try {
                             bytebuf.writeByte(254);
                             bytebuf.writeByte(1);
                             bytebuf.writeByte(250);
                             char[] achar = "MC|PingHost".toCharArray();
                             bytebuf.writeShort(achar.length);
 
-                            for (char c0 : achar)
-                            {
+                            for (char c0 : achar) {
                                 bytebuf.writeChar(c0);
                             }
 
@@ -227,30 +182,25 @@
                             achar = serveraddress.getIP().toCharArray();
                             bytebuf.writeShort(achar.length);
 
-                            for (char c1 : achar)
-                            {
+                            for (char c1 : achar) {
                                 bytebuf.writeChar(c1);
                             }
 
                             bytebuf.writeInt(serveraddress.getPort());
                             p_channelActive_1_.channel().writeAndFlush(bytebuf).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
-                        }
-                        finally
-                        {
+                        } finally {
                             bytebuf.release();
                         }
                     }
-                    protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, ByteBuf p_channelRead0_2_) throws Exception
-                    {
+
+                    protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, ByteBuf p_channelRead0_2_) throws Exception {
                         short short1 = p_channelRead0_2_.readUnsignedByte();
 
-                        if (short1 == 255)
-                        {
+                        if (short1 == 255) {
                             String s = new String(p_channelRead0_2_.readBytes(p_channelRead0_2_.readShort() * 2).array(), StandardCharsets.UTF_16BE);
-                            String[] astring = (String[])Iterables.toArray(ServerPinger.PING_RESPONSE_SPLITTER.split(s), String.class);
+                            String[] astring = (String[]) Iterables.toArray(ServerPinger.PING_RESPONSE_SPLITTER.split(s), String.class);
 
-                            if ("\u00a71".equals(astring[0]))
-                            {
+                            if ("\u00a71".equals(astring[0])) {
                                 int i = MathHelper.getInt(astring[1], 0);
                                 String s1 = astring[2];
                                 String s2 = astring[3];
@@ -265,8 +215,8 @@
 
                         p_channelRead0_1_.close();
                     }
-                    public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_) throws Exception
-                    {
+
+                    public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_) throws Exception {
                         p_exceptionCaught_1_.close();
                     }
                 });
@@ -274,22 +224,16 @@
         })).channel(NioSocketChannel.class)).connect(serveraddress.getIP(), serveraddress.getPort());
     }
 
-    public void pingPendingNetworks()
-    {
-        synchronized (this.pingDestinations)
-        {
+    public void pingPendingNetworks() {
+        synchronized (this.pingDestinations) {
             Iterator<NetworkManager> iterator = this.pingDestinations.iterator();
 
-            while (iterator.hasNext())
-            {
+            while (iterator.hasNext()) {
                 NetworkManager networkmanager = iterator.next();
 
-                if (networkmanager.isChannelOpen())
-                {
+                if (networkmanager.isChannelOpen()) {
                     networkmanager.processReceivedPackets();
-                }
-                else
-                {
+                } else {
                     iterator.remove();
                     networkmanager.checkDisconnected();
                 }
@@ -297,18 +241,14 @@
         }
     }
 
-    public void clearPendingNetworks()
-    {
-        synchronized (this.pingDestinations)
-        {
+    public void clearPendingNetworks() {
+        synchronized (this.pingDestinations) {
             Iterator<NetworkManager> iterator = this.pingDestinations.iterator();
 
-            while (iterator.hasNext())
-            {
+            while (iterator.hasNext()) {
                 NetworkManager networkmanager = iterator.next();
 
-                if (networkmanager.isChannelOpen())
-                {
+                if (networkmanager.isChannelOpen()) {
                     iterator.remove();
                     networkmanager.closeChannel(new TextComponentTranslation("multiplayer.status.cancelled", new Object[0]));
                 }
