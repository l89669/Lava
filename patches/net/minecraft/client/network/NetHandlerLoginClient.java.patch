--- ../src-base/minecraft/net/minecraft/client/network/NetHandlerLoginClient.java
+++ ../src-work/minecraft/net/minecraft/client/network/NetHandlerLoginClient.java
@@ -7,10 +7,6 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.math.BigInteger;
-import java.security.PublicKey;
-import javax.annotation.Nullable;
-import javax.crypto.SecretKey;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiDisconnected;
 import net.minecraft.client.gui.GuiScreen;
@@ -32,9 +28,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import javax.crypto.SecretKey;
+import java.math.BigInteger;
+import java.security.PublicKey;
+
 @SideOnly(Side.CLIENT)
-public class NetHandlerLoginClient implements INetHandlerLoginClient
-{
+public class NetHandlerLoginClient implements INetHandlerLoginClient {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Minecraft mc;
     @Nullable
@@ -42,70 +42,51 @@
     private final NetworkManager networkManager;
     private GameProfile gameProfile;
 
-    public NetHandlerLoginClient(NetworkManager networkManagerIn, Minecraft mcIn, @Nullable GuiScreen previousScreenIn)
-    {
+    public NetHandlerLoginClient(NetworkManager networkManagerIn, Minecraft mcIn, @Nullable GuiScreen previousScreenIn) {
         this.networkManager = networkManagerIn;
         this.mc = mcIn;
         this.previousGuiScreen = previousScreenIn;
     }
 
-    public void handleEncryptionRequest(SPacketEncryptionRequest packetIn)
-    {
+    public void handleEncryptionRequest(SPacketEncryptionRequest packetIn) {
         final SecretKey secretkey = CryptManager.createNewSharedKey();
         String s = packetIn.getServerId();
         PublicKey publickey = packetIn.getPublicKey();
         String s1 = (new BigInteger(CryptManager.getServerIdHash(s, publickey, secretkey))).toString(16);
 
-        if (this.mc.getCurrentServerData() != null && this.mc.getCurrentServerData().isOnLAN())
-        {
-            try
-            {
+        if (this.mc.getCurrentServerData() != null && this.mc.getCurrentServerData().isOnLAN()) {
+            try {
                 this.getSessionService().joinServer(this.mc.getSession().getProfile(), this.mc.getSession().getToken(), s1);
-            }
-            catch (AuthenticationException var10)
-            {
+            } catch (AuthenticationException var10) {
                 LOGGER.warn("Couldn't connect to auth servers but will continue to join LAN");
             }
-        }
-        else
-        {
-            try
-            {
+        } else {
+            try {
                 this.getSessionService().joinServer(this.mc.getSession().getProfile(), this.mc.getSession().getToken(), s1);
-            }
-            catch (AuthenticationUnavailableException var7)
-            {
-                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[] {new TextComponentTranslation("disconnect.loginFailedInfo.serversUnavailable", new Object[0])}));
+            } catch (AuthenticationUnavailableException var7) {
+                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[]{new TextComponentTranslation("disconnect.loginFailedInfo.serversUnavailable", new Object[0])}));
                 return;
-            }
-            catch (InvalidCredentialsException var8)
-            {
-                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[] {new TextComponentTranslation("disconnect.loginFailedInfo.invalidSession", new Object[0])}));
+            } catch (InvalidCredentialsException var8) {
+                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[]{new TextComponentTranslation("disconnect.loginFailedInfo.invalidSession", new Object[0])}));
                 return;
-            }
-            catch (AuthenticationException authenticationexception)
-            {
-                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[] {authenticationexception.getMessage()}));
+            } catch (AuthenticationException authenticationexception) {
+                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[]{authenticationexception.getMessage()}));
                 return;
             }
         }
 
-        this.networkManager.sendPacket(new CPacketEncryptionResponse(secretkey, publickey, packetIn.getVerifyToken()), new GenericFutureListener < Future <? super Void >> ()
-        {
-            public void operationComplete(Future <? super Void > p_operationComplete_1_) throws Exception
-            {
+        this.networkManager.sendPacket(new CPacketEncryptionResponse(secretkey, publickey, packetIn.getVerifyToken()), new GenericFutureListener<Future<? super Void>>() {
+            public void operationComplete(Future<? super Void> p_operationComplete_1_) throws Exception {
                 NetHandlerLoginClient.this.networkManager.enableEncryption(secretkey);
             }
         });
     }
 
-    private MinecraftSessionService getSessionService()
-    {
+    private MinecraftSessionService getSessionService() {
         return this.mc.getSessionService();
     }
 
-    public void handleLoginSuccess(SPacketLoginSuccess packetIn)
-    {
+    public void handleLoginSuccess(SPacketLoginSuccess packetIn) {
         this.gameProfile = packetIn.getProfile();
         this.networkManager.setConnectionState(EnumConnectionState.PLAY);
         NetHandlerPlayClient nhpc = new NetHandlerPlayClient(this.mc, this.previousGuiScreen, this.networkManager, this.gameProfile);
@@ -114,27 +95,20 @@
         net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.fmlClientHandshake(this.networkManager);
     }
 
-    public void onDisconnect(ITextComponent reason)
-    {
-        if (this.previousGuiScreen != null && this.previousGuiScreen instanceof GuiScreenRealmsProxy)
-        {
-            this.mc.displayGuiScreen((new DisconnectedRealmsScreen(((GuiScreenRealmsProxy)this.previousGuiScreen).getProxy(), "connect.failed", reason)).getProxy());
-        }
-        else
-        {
+    public void onDisconnect(ITextComponent reason) {
+        if (this.previousGuiScreen != null && this.previousGuiScreen instanceof GuiScreenRealmsProxy) {
+            this.mc.displayGuiScreen((new DisconnectedRealmsScreen(((GuiScreenRealmsProxy) this.previousGuiScreen).getProxy(), "connect.failed", reason)).getProxy());
+        } else {
             this.mc.displayGuiScreen(new GuiDisconnected(this.previousGuiScreen, "connect.failed", reason));
         }
     }
 
-    public void handleDisconnect(SPacketDisconnect packetIn)
-    {
+    public void handleDisconnect(SPacketDisconnect packetIn) {
         this.networkManager.closeChannel(packetIn.getReason());
     }
 
-    public void handleEnableCompression(SPacketEnableCompression packetIn)
-    {
-        if (!this.networkManager.isLocalChannel())
-        {
+    public void handleEnableCompression(SPacketEnableCompression packetIn) {
+        if (!this.networkManager.isLocalChannel()) {
             this.networkManager.setCompressionThreshold(packetIn.getCompressionThreshold());
         }
     }
