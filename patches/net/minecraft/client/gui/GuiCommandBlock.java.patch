--- ../src-base/minecraft/net/minecraft/client/gui/GuiCommandBlock.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiCommandBlock.java
@@ -1,8 +1,6 @@
 package net.minecraft.client.gui;
 
 import io.netty.buffer.Unpooled;
-import java.io.IOException;
-import javax.annotation.Nullable;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.client.CPacketCustomPayload;
@@ -16,9 +14,11 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.lwjgl.input.Keyboard;
 
+import javax.annotation.Nullable;
+import java.io.IOException;
+
 @SideOnly(Side.CLIENT)
-public class GuiCommandBlock extends GuiScreen implements ITabCompleter
-{
+public class GuiCommandBlock extends GuiScreen implements ITabCompleter {
     private GuiTextField commandTextField;
     private GuiTextField previousOutputTextField;
     private final TileEntityCommandBlock commandBlock;
@@ -34,18 +34,15 @@
     private boolean conditional;
     private boolean automatic;
 
-    public GuiCommandBlock(TileEntityCommandBlock commandBlockIn)
-    {
+    public GuiCommandBlock(TileEntityCommandBlock commandBlockIn) {
         this.commandBlock = commandBlockIn;
     }
 
-    public void updateScreen()
-    {
+    public void updateScreen() {
         this.commandTextField.updateCursorCounter();
     }
 
-    public void initGui()
-    {
+    public void initGui() {
         final CommandBlockBaseLogic commandblockbaselogic = this.commandBlock.getCommandBlockLogic();
         Keyboard.enableRepeatEvents(true);
         this.buttonList.clear();
@@ -67,18 +64,15 @@
         this.modeBtn.enabled = false;
         this.conditionalBtn.enabled = false;
         this.autoExecBtn.enabled = false;
-        this.tabCompleter = new TabCompleter(this.commandTextField, true)
-        {
+        this.tabCompleter = new TabCompleter(this.commandTextField, true) {
             @Nullable
-            public BlockPos getTargetBlockPos()
-            {
+            public BlockPos getTargetBlockPos() {
                 return commandblockbaselogic.getPosition();
             }
         };
     }
 
-    public void updateGui()
-    {
+    public void updateGui() {
         CommandBlockBaseLogic commandblockbaselogic = this.commandBlock.getCommandBlockLogic();
         this.commandTextField.setText(commandblockbaselogic.getCommand());
         this.trackOutput = commandblockbaselogic.shouldTrackOutput();
@@ -96,24 +90,18 @@
         this.autoExecBtn.enabled = true;
     }
 
-    public void onGuiClosed()
-    {
+    public void onGuiClosed() {
         Keyboard.enableRepeatEvents(false);
     }
 
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.enabled) {
             CommandBlockBaseLogic commandblockbaselogic = this.commandBlock.getCommandBlockLogic();
 
-            if (button.id == 1)
-            {
+            if (button.id == 1) {
                 commandblockbaselogic.setTrackOutput(this.trackOutput);
-                this.mc.displayGuiScreen((GuiScreen)null);
-            }
-            else if (button.id == 0)
-            {
+                this.mc.displayGuiScreen((GuiScreen) null);
+            } else if (button.id == 0) {
                 PacketBuffer packetbuffer = new PacketBuffer(Unpooled.buffer());
                 commandblockbaselogic.fillInInfo(packetbuffer);
                 packetbuffer.writeString(this.commandTextField.getText());
@@ -123,74 +111,55 @@
                 packetbuffer.writeBoolean(this.automatic);
                 this.mc.getConnection().sendPacket(new CPacketCustomPayload("MC|AutoCmd", packetbuffer));
 
-                if (!commandblockbaselogic.shouldTrackOutput())
-                {
-                    commandblockbaselogic.setLastOutput((ITextComponent)null);
+                if (!commandblockbaselogic.shouldTrackOutput()) {
+                    commandblockbaselogic.setLastOutput((ITextComponent) null);
                 }
 
-                this.mc.displayGuiScreen((GuiScreen)null);
-            }
-            else if (button.id == 4)
-            {
+                this.mc.displayGuiScreen((GuiScreen) null);
+            } else if (button.id == 4) {
                 commandblockbaselogic.setTrackOutput(!commandblockbaselogic.shouldTrackOutput());
                 this.updateCmdOutput();
-            }
-            else if (button.id == 5)
-            {
+            } else if (button.id == 5) {
                 this.nextMode();
                 this.updateMode();
-            }
-            else if (button.id == 6)
-            {
+            } else if (button.id == 6) {
                 this.conditional = !this.conditional;
                 this.updateConditional();
-            }
-            else if (button.id == 7)
-            {
+            } else if (button.id == 7) {
                 this.automatic = !this.automatic;
                 this.updateAutoExec();
             }
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
         this.tabCompleter.resetRequested();
 
-        if (keyCode == 15)
-        {
+        if (keyCode == 15) {
             this.tabCompleter.complete();
-        }
-        else
-        {
+        } else {
             this.tabCompleter.resetDidComplete();
         }
 
         this.commandTextField.textboxKeyTyped(typedChar, keyCode);
         this.previousOutputTextField.textboxKeyTyped(typedChar, keyCode);
 
-        if (keyCode != 28 && keyCode != 156)
-        {
-            if (keyCode == 1)
-            {
+        if (keyCode != 28 && keyCode != 156) {
+            if (keyCode == 1) {
                 this.actionPerformed(this.cancelBtn);
             }
-        }
-        else
-        {
+        } else {
             this.actionPerformed(this.doneBtn);
         }
     }
 
-    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
-    {
+    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
         super.mouseClicked(mouseX, mouseY, mouseButton);
         this.commandTextField.mouseClicked(mouseX, mouseY, mouseButton);
         this.previousOutputTextField.mouseClicked(mouseX, mouseY, mouseButton);
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.drawDefaultBackground();
         this.drawCenteredString(this.fontRenderer, I18n.format("advMode.setCommand"), this.width / 2, 20, 16777215);
         this.drawString(this.fontRenderer, I18n.format("advMode.command"), this.width / 2 - 150, 40, 10526880);
@@ -203,8 +172,7 @@
         this.drawString(this.fontRenderer, I18n.format("advMode.allEntities"), this.width / 2 - 140, i + j++ * this.fontRenderer.FONT_HEIGHT, 10526880);
         this.drawString(this.fontRenderer, I18n.format("advMode.self"), this.width / 2 - 140, i + j++ * this.fontRenderer.FONT_HEIGHT, 10526880);
 
-        if (!this.previousOutputTextField.getText().isEmpty())
-        {
+        if (!this.previousOutputTextField.getText().isEmpty()) {
             i = i + j * this.fontRenderer.FONT_HEIGHT + 1;
             this.drawString(this.fontRenderer, I18n.format("advMode.previousOutput"), this.width / 2 - 150, i + 4, 10526880);
             this.previousOutputTextField.drawTextBox();
@@ -213,30 +181,23 @@
         super.drawScreen(mouseX, mouseY, partialTicks);
     }
 
-    private void updateCmdOutput()
-    {
+    private void updateCmdOutput() {
         CommandBlockBaseLogic commandblockbaselogic = this.commandBlock.getCommandBlockLogic();
 
-        if (commandblockbaselogic.shouldTrackOutput())
-        {
+        if (commandblockbaselogic.shouldTrackOutput()) {
             this.outputBtn.displayString = "O";
 
-            if (commandblockbaselogic.getLastOutput() != null)
-            {
+            if (commandblockbaselogic.getLastOutput() != null) {
                 this.previousOutputTextField.setText(commandblockbaselogic.getLastOutput().getUnformattedText());
             }
-        }
-        else
-        {
+        } else {
             this.outputBtn.displayString = "X";
             this.previousOutputTextField.setText("-");
         }
     }
 
-    private void updateMode()
-    {
-        switch (this.commandBlockMode)
-        {
+    private void updateMode() {
+        switch (this.commandBlockMode) {
             case SEQUENCE:
                 this.modeBtn.displayString = I18n.format("advMode.mode.sequence");
                 break;
@@ -248,10 +209,8 @@
         }
     }
 
-    private void nextMode()
-    {
-        switch (this.commandBlockMode)
-        {
+    private void nextMode() {
+        switch (this.commandBlockMode) {
             case SEQUENCE:
                 this.commandBlockMode = TileEntityCommandBlock.Mode.AUTO;
                 break;
@@ -263,32 +222,23 @@
         }
     }
 
-    private void updateConditional()
-    {
-        if (this.conditional)
-        {
+    private void updateConditional() {
+        if (this.conditional) {
             this.conditionalBtn.displayString = I18n.format("advMode.mode.conditional");
-        }
-        else
-        {
+        } else {
             this.conditionalBtn.displayString = I18n.format("advMode.mode.unconditional");
         }
     }
 
-    private void updateAutoExec()
-    {
-        if (this.automatic)
-        {
+    private void updateAutoExec() {
+        if (this.automatic) {
             this.autoExecBtn.displayString = I18n.format("advMode.mode.autoexec.bat");
-        }
-        else
-        {
+        } else {
             this.autoExecBtn.displayString = I18n.format("advMode.mode.redstoneTriggered");
         }
     }
 
-    public void setCompletions(String... newCompletions)
-    {
+    public void setCompletions(String... newCompletions) {
         this.tabCompleter.setCompletions(newCompletions);
     }
 }
