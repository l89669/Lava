--- ../src-base/minecraft/net/minecraft/client/gui/inventory/GuiEditStructure.java
+++ ../src-work/minecraft/net/minecraft/client/gui/inventory/GuiEditStructure.java
@@ -2,11 +2,6 @@
 
 import com.google.common.collect.Lists;
 import io.netty.buffer.Unpooled;
-import java.io.IOException;
-import java.text.DecimalFormat;
-import java.text.DecimalFormatSymbols;
-import java.util.List;
-import java.util.Locale;
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.gui.GuiTextField;
@@ -24,11 +19,16 @@
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Keyboard;
 
+import java.io.IOException;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.util.List;
+import java.util.Locale;
+
 @SideOnly(Side.CLIENT)
-public class GuiEditStructure extends GuiScreen
-{
+public class GuiEditStructure extends GuiScreen {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final int[] LEGAL_KEY_CODES = new int[] {203, 205, 14, 211, 199, 207};
+    public static final int[] LEGAL_KEY_CODES = new int[]{203, 205, 14, 211, 199, 207};
     private final TileEntityStructure tileStructure;
     private Mirror mirror = Mirror.NONE;
     private Rotation rotation = Rotation.NONE;
@@ -63,14 +63,12 @@
     private final List<GuiTextField> tabOrder = Lists.<GuiTextField>newArrayList();
     private final DecimalFormat decimalFormat = new DecimalFormat("0.0###");
 
-    public GuiEditStructure(TileEntityStructure p_i47142_1_)
-    {
+    public GuiEditStructure(TileEntityStructure p_i47142_1_) {
         this.tileStructure = p_i47142_1_;
         this.decimalFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
     }
 
-    public void updateScreen()
-    {
+    public void updateScreen() {
         this.nameEdit.updateCursorCounter();
         this.posXEdit.updateCursorCounter();
         this.posYEdit.updateCursorCounter();
@@ -83,8 +81,7 @@
         this.dataEdit.updateCursorCounter();
     }
 
-    public void initGui()
-    {
+    public void initGui() {
         Keyboard.enableRepeatEvents(true);
         this.buttonList.clear();
         this.doneButton = this.addButton(new GuiButton(0, this.width / 2 - 4 - 150, 210, 150, 20, I18n.format("gui.done")));
@@ -133,7 +130,7 @@
         this.tabOrder.add(this.sizeZEdit);
         this.integrityEdit = new GuiTextField(15, this.fontRenderer, this.width / 2 - 152, 120, 80, 20);
         this.integrityEdit.setMaxStringLength(15);
-        this.integrityEdit.setText(this.decimalFormat.format((double)this.tileStructure.getIntegrity()));
+        this.integrityEdit.setText(this.decimalFormat.format((double) this.tileStructure.getIntegrity()));
         this.tabOrder.add(this.integrityEdit);
         this.seedEdit = new GuiTextField(16, this.fontRenderer, this.width / 2 - 72, 120, 80, 20);
         this.seedEdit.setMaxStringLength(31);
@@ -157,100 +154,65 @@
         this.updateToggleBoundingBox();
     }
 
-    public void onGuiClosed()
-    {
+    public void onGuiClosed() {
         Keyboard.enableRepeatEvents(false);
     }
 
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
-            if (button.id == 1)
-            {
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.enabled) {
+            if (button.id == 1) {
                 this.tileStructure.setMirror(this.mirror);
                 this.tileStructure.setRotation(this.rotation);
                 this.tileStructure.setMode(this.mode);
                 this.tileStructure.setIgnoresEntities(this.ignoreEntities);
                 this.tileStructure.setShowAir(this.showAir);
                 this.tileStructure.setShowBoundingBox(this.showBoundingBox);
-                this.mc.displayGuiScreen((GuiScreen)null);
-            }
-            else if (button.id == 0)
-            {
-                if (this.sendToServer(1))
-                {
-                    this.mc.displayGuiScreen((GuiScreen)null);
+                this.mc.displayGuiScreen((GuiScreen) null);
+            } else if (button.id == 0) {
+                if (this.sendToServer(1)) {
+                    this.mc.displayGuiScreen((GuiScreen) null);
                 }
-            }
-            else if (button.id == 9)
-            {
-                if (this.tileStructure.getMode() == TileEntityStructure.Mode.SAVE)
-                {
+            } else if (button.id == 9) {
+                if (this.tileStructure.getMode() == TileEntityStructure.Mode.SAVE) {
                     this.sendToServer(2);
-                    this.mc.displayGuiScreen((GuiScreen)null);
+                    this.mc.displayGuiScreen((GuiScreen) null);
                 }
-            }
-            else if (button.id == 10)
-            {
-                if (this.tileStructure.getMode() == TileEntityStructure.Mode.LOAD)
-                {
+            } else if (button.id == 10) {
+                if (this.tileStructure.getMode() == TileEntityStructure.Mode.LOAD) {
                     this.sendToServer(3);
-                    this.mc.displayGuiScreen((GuiScreen)null);
+                    this.mc.displayGuiScreen((GuiScreen) null);
                 }
-            }
-            else if (button.id == 11)
-            {
+            } else if (button.id == 11) {
                 this.tileStructure.setRotation(Rotation.NONE);
                 this.updateDirectionButtons();
-            }
-            else if (button.id == 12)
-            {
+            } else if (button.id == 12) {
                 this.tileStructure.setRotation(Rotation.CLOCKWISE_90);
                 this.updateDirectionButtons();
-            }
-            else if (button.id == 13)
-            {
+            } else if (button.id == 13) {
                 this.tileStructure.setRotation(Rotation.CLOCKWISE_180);
                 this.updateDirectionButtons();
-            }
-            else if (button.id == 14)
-            {
+            } else if (button.id == 14) {
                 this.tileStructure.setRotation(Rotation.COUNTERCLOCKWISE_90);
                 this.updateDirectionButtons();
-            }
-            else if (button.id == 18)
-            {
+            } else if (button.id == 18) {
                 this.tileStructure.nextMode();
                 this.updateMode();
-            }
-            else if (button.id == 19)
-            {
-                if (this.tileStructure.getMode() == TileEntityStructure.Mode.SAVE)
-                {
+            } else if (button.id == 19) {
+                if (this.tileStructure.getMode() == TileEntityStructure.Mode.SAVE) {
                     this.sendToServer(4);
-                    this.mc.displayGuiScreen((GuiScreen)null);
+                    this.mc.displayGuiScreen((GuiScreen) null);
                 }
-            }
-            else if (button.id == 20)
-            {
+            } else if (button.id == 20) {
                 this.tileStructure.setIgnoresEntities(!this.tileStructure.ignoresEntities());
                 this.updateEntitiesButton();
-            }
-            else if (button.id == 22)
-            {
+            } else if (button.id == 22) {
                 this.tileStructure.setShowAir(!this.tileStructure.showsAir());
                 this.updateToggleAirButton();
-            }
-            else if (button.id == 23)
-            {
+            } else if (button.id == 23) {
                 this.tileStructure.setShowBoundingBox(!this.tileStructure.showsBoundingBox());
                 this.updateToggleBoundingBox();
-            }
-            else if (button.id == 21)
-            {
-                switch (this.tileStructure.getMirror())
-                {
+            } else if (button.id == 21) {
+                switch (this.tileStructure.getMirror()) {
                     case NONE:
                         this.tileStructure.setMirror(Mirror.LEFT_RIGHT);
                         break;
@@ -266,54 +228,40 @@
         }
     }
 
-    private void updateEntitiesButton()
-    {
+    private void updateEntitiesButton() {
         boolean flag = !this.tileStructure.ignoresEntities();
 
-        if (flag)
-        {
+        if (flag) {
             this.showEntitiesButton.displayString = I18n.format("options.on");
-        }
-        else
-        {
+        } else {
             this.showEntitiesButton.displayString = I18n.format("options.off");
         }
     }
 
-    private void updateToggleAirButton()
-    {
+    private void updateToggleAirButton() {
         boolean flag = this.tileStructure.showsAir();
 
-        if (flag)
-        {
+        if (flag) {
             this.showAirButton.displayString = I18n.format("options.on");
-        }
-        else
-        {
+        } else {
             this.showAirButton.displayString = I18n.format("options.off");
         }
     }
 
-    private void updateToggleBoundingBox()
-    {
+    private void updateToggleBoundingBox() {
         boolean flag = this.tileStructure.showsBoundingBox();
 
-        if (flag)
-        {
+        if (flag) {
             this.showBoundingBoxButton.displayString = I18n.format("options.on");
-        }
-        else
-        {
+        } else {
             this.showBoundingBoxButton.displayString = I18n.format("options.off");
         }
     }
 
-    private void updateMirrorButton()
-    {
+    private void updateMirrorButton() {
         Mirror mirror = this.tileStructure.getMirror();
 
-        switch (mirror)
-        {
+        switch (mirror) {
             case NONE:
                 this.mirrorButton.displayString = "|";
                 break;
@@ -325,15 +273,13 @@
         }
     }
 
-    private void updateDirectionButtons()
-    {
+    private void updateDirectionButtons() {
         this.rotateZeroDegreesButton.enabled = true;
         this.rotateNinetyDegreesButton.enabled = true;
         this.rotate180DegreesButton.enabled = true;
         this.rotate270DegressButton.enabled = true;
 
-        switch (this.tileStructure.getRotation())
-        {
+        switch (this.tileStructure.getRotation()) {
             case NONE:
                 this.rotateZeroDegreesButton.enabled = false;
                 break;
@@ -348,8 +294,7 @@
         }
     }
 
-    private void updateMode()
-    {
+    private void updateMode() {
         this.nameEdit.setFocused(false);
         this.posXEdit.setFocused(false);
         this.posYEdit.setFocused(false);
@@ -383,8 +328,7 @@
         this.showAirButton.visible = false;
         this.showBoundingBoxButton.visible = false;
 
-        switch (this.tileStructure.getMode())
-        {
+        switch (this.tileStructure.getMode()) {
             case SAVE:
                 this.nameEdit.setVisible(true);
                 this.nameEdit.setFocused(true);
@@ -429,10 +373,8 @@
         this.modeButton.displayString = I18n.format("structure_block.mode." + this.tileStructure.getMode().getName());
     }
 
-    private boolean sendToServer(int p_189820_1_)
-    {
-        try
-        {
+    private boolean sendToServer(int p_189820_1_) {
+        try {
             PacketBuffer packetbuffer = new PacketBuffer(Unpooled.buffer());
             this.tileStructure.writeCoordinates(packetbuffer);
             packetbuffer.writeByte(p_189820_1_);
@@ -454,169 +396,127 @@
             packetbuffer.writeVarLong(this.parseSeed(this.seedEdit.getText()));
             this.mc.getConnection().sendPacket(new CPacketCustomPayload("MC|Struct", packetbuffer));
             return true;
-        }
-        catch (Exception exception)
-        {
-            LOGGER.warn("Could not send structure block info", (Throwable)exception);
+        } catch (Exception exception) {
+            LOGGER.warn("Could not send structure block info", (Throwable) exception);
             return false;
         }
     }
 
-    private long parseSeed(String p_189821_1_)
-    {
-        try
-        {
+    private long parseSeed(String p_189821_1_) {
+        try {
             return Long.valueOf(p_189821_1_).longValue();
-        }
-        catch (NumberFormatException var3)
-        {
+        } catch (NumberFormatException var3) {
             return 0L;
         }
     }
 
-    private float parseIntegrity(String p_189819_1_)
-    {
-        try
-        {
+    private float parseIntegrity(String p_189819_1_) {
+        try {
             return Float.valueOf(p_189819_1_).floatValue();
-        }
-        catch (NumberFormatException var3)
-        {
+        } catch (NumberFormatException var3) {
             return 1.0F;
         }
     }
 
-    private int parseCoordinate(String p_189817_1_)
-    {
-        try
-        {
+    private int parseCoordinate(String p_189817_1_) {
+        try {
             return Integer.parseInt(p_189817_1_);
-        }
-        catch (NumberFormatException var3)
-        {
+        } catch (NumberFormatException var3) {
             return 0;
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
-        if (this.nameEdit.getVisible() && isValidCharacterForName(typedChar, keyCode))
-        {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
+        if (this.nameEdit.getVisible() && isValidCharacterForName(typedChar, keyCode)) {
             this.nameEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.posXEdit.getVisible())
-        {
+        if (this.posXEdit.getVisible()) {
             this.posXEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.posYEdit.getVisible())
-        {
+        if (this.posYEdit.getVisible()) {
             this.posYEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.posZEdit.getVisible())
-        {
+        if (this.posZEdit.getVisible()) {
             this.posZEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.sizeXEdit.getVisible())
-        {
+        if (this.sizeXEdit.getVisible()) {
             this.sizeXEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.sizeYEdit.getVisible())
-        {
+        if (this.sizeYEdit.getVisible()) {
             this.sizeYEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.sizeZEdit.getVisible())
-        {
+        if (this.sizeZEdit.getVisible()) {
             this.sizeZEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.integrityEdit.getVisible())
-        {
+        if (this.integrityEdit.getVisible()) {
             this.integrityEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.seedEdit.getVisible())
-        {
+        if (this.seedEdit.getVisible()) {
             this.seedEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (this.dataEdit.getVisible())
-        {
+        if (this.dataEdit.getVisible()) {
             this.dataEdit.textboxKeyTyped(typedChar, keyCode);
         }
 
-        if (keyCode == 15)
-        {
+        if (keyCode == 15) {
             GuiTextField guitextfield = null;
             GuiTextField guitextfield1 = null;
 
-            for (GuiTextField guitextfield2 : this.tabOrder)
-            {
-                if (guitextfield != null && guitextfield2.getVisible())
-                {
+            for (GuiTextField guitextfield2 : this.tabOrder) {
+                if (guitextfield != null && guitextfield2.getVisible()) {
                     guitextfield1 = guitextfield2;
                     break;
                 }
 
-                if (guitextfield2.isFocused() && guitextfield2.getVisible())
-                {
+                if (guitextfield2.isFocused() && guitextfield2.getVisible()) {
                     guitextfield = guitextfield2;
                 }
             }
 
-            if (guitextfield != null && guitextfield1 == null)
-            {
-                for (GuiTextField guitextfield3 : this.tabOrder)
-                {
-                    if (guitextfield3.getVisible() && guitextfield3 != guitextfield)
-                    {
+            if (guitextfield != null && guitextfield1 == null) {
+                for (GuiTextField guitextfield3 : this.tabOrder) {
+                    if (guitextfield3.getVisible() && guitextfield3 != guitextfield) {
                         guitextfield1 = guitextfield3;
                         break;
                     }
                 }
             }
 
-            if (guitextfield1 != null && guitextfield1 != guitextfield)
-            {
+            if (guitextfield1 != null && guitextfield1 != guitextfield) {
                 guitextfield.setFocused(false);
                 guitextfield1.setFocused(true);
             }
         }
 
-        if (keyCode != 28 && keyCode != 156)
-        {
-            if (keyCode == 1)
-            {
+        if (keyCode != 28 && keyCode != 156) {
+            if (keyCode == 1) {
                 this.actionPerformed(this.cancelButton);
             }
-        }
-        else
-        {
+        } else {
             this.actionPerformed(this.doneButton);
         }
     }
 
-    private static boolean isValidCharacterForName(char p_190301_0_, int p_190301_1_)
-    {
+    private static boolean isValidCharacterForName(char p_190301_0_, int p_190301_1_) {
         boolean flag = true;
 
-        for (int i : LEGAL_KEY_CODES)
-        {
-            if (i == p_190301_1_)
-            {
+        for (int i : LEGAL_KEY_CODES) {
+            if (i == p_190301_1_) {
                 return true;
             }
         }
 
-        for (char c0 : ChatAllowedCharacters.ILLEGAL_STRUCTURE_CHARACTERS)
-        {
-            if (c0 == p_190301_0_)
-            {
+        for (char c0 : ChatAllowedCharacters.ILLEGAL_STRUCTURE_CHARACTERS) {
+            if (c0 == p_190301_0_) {
                 flag = false;
                 break;
             }
@@ -625,75 +525,61 @@
         return flag;
     }
 
-    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
-    {
+    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
         super.mouseClicked(mouseX, mouseY, mouseButton);
 
-        if (this.nameEdit.getVisible())
-        {
+        if (this.nameEdit.getVisible()) {
             this.nameEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.posXEdit.getVisible())
-        {
+        if (this.posXEdit.getVisible()) {
             this.posXEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.posYEdit.getVisible())
-        {
+        if (this.posYEdit.getVisible()) {
             this.posYEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.posZEdit.getVisible())
-        {
+        if (this.posZEdit.getVisible()) {
             this.posZEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.sizeXEdit.getVisible())
-        {
+        if (this.sizeXEdit.getVisible()) {
             this.sizeXEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.sizeYEdit.getVisible())
-        {
+        if (this.sizeYEdit.getVisible()) {
             this.sizeYEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.sizeZEdit.getVisible())
-        {
+        if (this.sizeZEdit.getVisible()) {
             this.sizeZEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.integrityEdit.getVisible())
-        {
+        if (this.integrityEdit.getVisible()) {
             this.integrityEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.seedEdit.getVisible())
-        {
+        if (this.seedEdit.getVisible()) {
             this.seedEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
 
-        if (this.dataEdit.getVisible())
-        {
+        if (this.dataEdit.getVisible()) {
             this.dataEdit.mouseClicked(mouseX, mouseY, mouseButton);
         }
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.drawDefaultBackground();
         TileEntityStructure.Mode tileentitystructure$mode = this.tileStructure.getMode();
         this.drawCenteredString(this.fontRenderer, I18n.format("tile.structureBlock.name"), this.width / 2, 10, 16777215);
 
-        if (tileentitystructure$mode != TileEntityStructure.Mode.DATA)
-        {
+        if (tileentitystructure$mode != TileEntityStructure.Mode.DATA) {
             this.drawString(this.fontRenderer, I18n.format("structure_block.structure_name"), this.width / 2 - 153, 30, 10526880);
             this.nameEdit.drawTextBox();
         }
 
-        if (tileentitystructure$mode == TileEntityStructure.Mode.LOAD || tileentitystructure$mode == TileEntityStructure.Mode.SAVE)
-        {
+        if (tileentitystructure$mode == TileEntityStructure.Mode.LOAD || tileentitystructure$mode == TileEntityStructure.Mode.SAVE) {
             this.drawString(this.fontRenderer, I18n.format("structure_block.position"), this.width / 2 - 153, 70, 10526880);
             this.posXEdit.drawTextBox();
             this.posYEdit.drawTextBox();
@@ -703,8 +589,7 @@
             this.drawString(this.fontRenderer, s, this.width / 2 + 154 - i, 150, 10526880);
         }
 
-        if (tileentitystructure$mode == TileEntityStructure.Mode.SAVE)
-        {
+        if (tileentitystructure$mode == TileEntityStructure.Mode.SAVE) {
             this.drawString(this.fontRenderer, I18n.format("structure_block.size"), this.width / 2 - 153, 110, 10526880);
             this.sizeXEdit.drawTextBox();
             this.sizeYEdit.drawTextBox();
@@ -717,8 +602,7 @@
             this.drawString(this.fontRenderer, s1, this.width / 2 + 154 - j, 70, 10526880);
         }
 
-        if (tileentitystructure$mode == TileEntityStructure.Mode.LOAD)
-        {
+        if (tileentitystructure$mode == TileEntityStructure.Mode.LOAD) {
             this.drawString(this.fontRenderer, I18n.format("structure_block.integrity"), this.width / 2 - 153, 110, 10526880);
             this.integrityEdit.drawTextBox();
             this.seedEdit.drawTextBox();
@@ -727,8 +611,7 @@
             this.drawString(this.fontRenderer, s3, this.width / 2 + 154 - l, 70, 10526880);
         }
 
-        if (tileentitystructure$mode == TileEntityStructure.Mode.DATA)
-        {
+        if (tileentitystructure$mode == TileEntityStructure.Mode.DATA) {
             this.drawString(this.fontRenderer, I18n.format("structure_block.custom_data"), this.width / 2 - 153, 110, 10526880);
             this.dataEdit.drawTextBox();
         }
@@ -738,8 +621,7 @@
         super.drawScreen(mouseX, mouseY, partialTicks);
     }
 
-    public boolean doesGuiPauseGame()
-    {
+    public boolean doesGuiPauseGame() {
         return false;
     }
 }
