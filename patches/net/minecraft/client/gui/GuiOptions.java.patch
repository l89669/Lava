--- ../src-base/minecraft/net/minecraft/client/gui/GuiOptions.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiOptions.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.gui;
 
-import java.io.IOException;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.util.text.ITextComponent;
@@ -10,35 +9,30 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.io.IOException;
+
 @SideOnly(Side.CLIENT)
-public class GuiOptions extends GuiScreen
-{
-    private static final GameSettings.Options[] SCREEN_OPTIONS = new GameSettings.Options[] {GameSettings.Options.FOV};
+public class GuiOptions extends GuiScreen {
+    private static final GameSettings.Options[] SCREEN_OPTIONS = new GameSettings.Options[]{GameSettings.Options.FOV};
     private final GuiScreen lastScreen;
     private final GameSettings settings;
     private GuiButton difficultyButton;
     private GuiLockIconButton lockButton;
     protected String title = "Options";
 
-    public GuiOptions(GuiScreen p_i1046_1_, GameSettings p_i1046_2_)
-    {
+    public GuiOptions(GuiScreen p_i1046_1_, GameSettings p_i1046_2_) {
         this.lastScreen = p_i1046_1_;
         this.settings = p_i1046_2_;
     }
 
-    public void initGui()
-    {
+    public void initGui() {
         this.title = I18n.format("options.title");
         int i = 0;
 
-        for (GameSettings.Options gamesettings$options : SCREEN_OPTIONS)
-        {
-            if (gamesettings$options.isFloat())
-            {
+        for (GameSettings.Options gamesettings$options : SCREEN_OPTIONS) {
+            if (gamesettings$options.isFloat()) {
                 this.buttonList.add(new GuiOptionSlider(gamesettings$options.getOrdinal(), this.width / 2 - 155 + i % 2 * 160, this.height / 6 - 12 + 24 * (i >> 1), gamesettings$options));
-            }
-            else
-            {
+            } else {
                 GuiOptionButton guioptionbutton = new GuiOptionButton(gamesettings$options.getOrdinal(), this.width / 2 - 155 + i % 2 * 160, this.height / 6 - 12 + 24 * (i >> 1), gamesettings$options, this.settings.getKeyBinding(gamesettings$options));
                 this.buttonList.add(guioptionbutton);
             }
@@ -46,28 +40,22 @@
             ++i;
         }
 
-        if (this.mc.world != null)
-        {
+        if (this.mc.world != null) {
             EnumDifficulty enumdifficulty = this.mc.world.getDifficulty();
             this.difficultyButton = new GuiButton(108, this.width / 2 - 155 + i % 2 * 160, this.height / 6 - 12 + 24 * (i >> 1), 150, 20, this.getDifficultyText(enumdifficulty));
             this.buttonList.add(this.difficultyButton);
 
-            if (this.mc.isSingleplayer() && !this.mc.world.getWorldInfo().isHardcoreModeEnabled())
-            {
+            if (this.mc.isSingleplayer() && !this.mc.world.getWorldInfo().isHardcoreModeEnabled()) {
                 this.difficultyButton.setWidth(this.difficultyButton.getButtonWidth() - 20);
                 this.lockButton = new GuiLockIconButton(109, this.difficultyButton.x + this.difficultyButton.getButtonWidth(), this.difficultyButton.y);
                 this.buttonList.add(this.lockButton);
                 this.lockButton.setLocked(this.mc.world.getWorldInfo().isDifficultyLocked());
                 this.lockButton.enabled = !this.lockButton.isLocked();
                 this.difficultyButton.enabled = !this.lockButton.isLocked();
-            }
-            else
-            {
+            } else {
                 this.difficultyButton.enabled = false;
             }
-        }
-        else
-        {
+        } else {
             this.buttonList.add(new GuiOptionButton(GameSettings.Options.REALMS_NOTIFICATIONS.getOrdinal(), this.width / 2 - 155 + i % 2 * 160, this.height / 6 - 12 + 24 * (i >> 1), GameSettings.Options.REALMS_NOTIFICATIONS, this.settings.getKeyBinding(GameSettings.Options.REALMS_NOTIFICATIONS)));
         }
 
@@ -82,8 +70,7 @@
         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, I18n.format("gui.done")));
     }
 
-    public String getDifficultyText(EnumDifficulty p_175355_1_)
-    {
+    public String getDifficultyText(EnumDifficulty p_175355_1_) {
         ITextComponent itextcomponent = new TextComponentString("");
         itextcomponent.appendSibling(new TextComponentTranslation("options.difficulty", new Object[0]));
         itextcomponent.appendText(": ");
@@ -91,12 +78,10 @@
         return itextcomponent.getFormattedText();
     }
 
-    public void confirmClicked(boolean result, int id)
-    {
+    public void confirmClicked(boolean result, int id) {
         this.mc.displayGuiScreen(this);
 
-        if (id == 109 && result && this.mc.world != null)
-        {
+        if (id == 109 && result && this.mc.world != null) {
             this.mc.world.getWorldInfo().setDifficultyLocked(true);
             this.lockButton.setLocked(true);
             this.lockButton.enabled = false;
@@ -104,96 +89,79 @@
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
-        if (keyCode == 1)
-        {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
+        if (keyCode == 1) {
             this.mc.gameSettings.saveOptions();
         }
 
         super.keyTyped(typedChar, keyCode);
     }
 
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
-            if (button.id < 100 && button instanceof GuiOptionButton)
-            {
-                GameSettings.Options gamesettings$options = ((GuiOptionButton)button).getOption();
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.enabled) {
+            if (button.id < 100 && button instanceof GuiOptionButton) {
+                GameSettings.Options gamesettings$options = ((GuiOptionButton) button).getOption();
                 this.settings.setOptionValue(gamesettings$options, 1);
                 button.displayString = this.settings.getKeyBinding(GameSettings.Options.byOrdinal(button.id));
             }
 
-            if (button.id == 108)
-            {
+            if (button.id == 108) {
                 this.mc.world.getWorldInfo().setDifficulty(EnumDifficulty.getDifficultyEnum(this.mc.world.getDifficulty().getDifficultyId() + 1));
                 this.difficultyButton.displayString = this.getDifficultyText(this.mc.world.getDifficulty());
             }
 
-            if (button.id == 109)
-            {
-                this.mc.displayGuiScreen(new GuiYesNo(this, (new TextComponentTranslation("difficulty.lock.title", new Object[0])).getFormattedText(), (new TextComponentTranslation("difficulty.lock.question", new Object[] {new TextComponentTranslation(this.mc.world.getWorldInfo().getDifficulty().getDifficultyResourceKey(), new Object[0])})).getFormattedText(), 109));
+            if (button.id == 109) {
+                this.mc.displayGuiScreen(new GuiYesNo(this, (new TextComponentTranslation("difficulty.lock.title", new Object[0])).getFormattedText(), (new TextComponentTranslation("difficulty.lock.question", new Object[]{new TextComponentTranslation(this.mc.world.getWorldInfo().getDifficulty().getDifficultyResourceKey(), new Object[0])})).getFormattedText(), 109));
             }
 
-            if (button.id == 110)
-            {
+            if (button.id == 110) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiCustomizeSkin(this));
             }
 
-            if (button.id == 101)
-            {
+            if (button.id == 101) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiVideoSettings(this, this.settings));
             }
 
-            if (button.id == 100)
-            {
+            if (button.id == 100) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiControls(this, this.settings));
             }
 
-            if (button.id == 102)
-            {
+            if (button.id == 102) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiLanguage(this, this.settings, this.mc.getLanguageManager()));
             }
 
-            if (button.id == 103)
-            {
+            if (button.id == 103) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new ScreenChatOptions(this, this.settings));
             }
 
-            if (button.id == 104)
-            {
+            if (button.id == 104) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiSnooper(this, this.settings));
             }
 
-            if (button.id == 200)
-            {
+            if (button.id == 200) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(this.lastScreen);
             }
 
-            if (button.id == 105)
-            {
+            if (button.id == 105) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiScreenResourcePacks(this));
             }
 
-            if (button.id == 106)
-            {
+            if (button.id == 106) {
                 this.mc.gameSettings.saveOptions();
                 this.mc.displayGuiScreen(new GuiScreenOptionsSounds(this, this.settings));
             }
         }
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.drawDefaultBackground();
         this.drawCenteredString(this.fontRenderer, this.title, this.width / 2, 15, 16777215);
         super.drawScreen(mouseX, mouseY, partialTicks);
