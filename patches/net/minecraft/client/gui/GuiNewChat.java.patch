--- ../src-base/minecraft/net/minecraft/client/gui/GuiNewChat.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiNewChat.java
@@ -1,9 +1,6 @@
 package net.minecraft.client.gui;
 
 import com.google.common.collect.Lists;
-import java.util.Iterator;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.player.EntityPlayer;
@@ -15,9 +12,12 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class GuiNewChat extends Gui
-{
+public class GuiNewChat extends Gui {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Minecraft mc;
     private final List<String> sentMessages = Lists.<String>newArrayList();
@@ -26,68 +26,58 @@
     private int scrollPos;
     private boolean isScrolled;
 
-    public GuiNewChat(Minecraft mcIn)
-    {
+    public GuiNewChat(Minecraft mcIn) {
         this.mc = mcIn;
     }
 
-    public void drawChat(int updateCounter)
-    {
-        if (this.mc.gameSettings.chatVisibility != EntityPlayer.EnumChatVisibility.HIDDEN)
-        {
+    public void drawChat(int updateCounter) {
+        if (this.mc.gameSettings.chatVisibility != EntityPlayer.EnumChatVisibility.HIDDEN) {
             int i = this.getLineCount();
             int j = this.drawnChatLines.size();
             float f = this.mc.gameSettings.chatOpacity * 0.9F + 0.1F;
 
-            if (j > 0)
-            {
+            if (j > 0) {
                 boolean flag = false;
 
-                if (this.getChatOpen())
-                {
+                if (this.getChatOpen()) {
                     flag = true;
                 }
 
                 float f1 = this.getChatScale();
-                int k = MathHelper.ceil((float)this.getChatWidth() / f1);
+                int k = MathHelper.ceil((float) this.getChatWidth() / f1);
                 GlStateManager.pushMatrix();
                 GlStateManager.translate(2.0F, 8.0F, 0.0F);
                 GlStateManager.scale(f1, f1, 1.0F);
                 int l = 0;
 
-                for (int i1 = 0; i1 + this.scrollPos < this.drawnChatLines.size() && i1 < i; ++i1)
-                {
+                for (int i1 = 0; i1 + this.scrollPos < this.drawnChatLines.size() && i1 < i; ++i1) {
                     ChatLine chatline = this.drawnChatLines.get(i1 + this.scrollPos);
 
-                    if (chatline != null)
-                    {
+                    if (chatline != null) {
                         int j1 = updateCounter - chatline.getUpdatedCounter();
 
-                        if (j1 < 200 || flag)
-                        {
-                            double d0 = (double)j1 / 200.0D;
+                        if (j1 < 200 || flag) {
+                            double d0 = (double) j1 / 200.0D;
                             d0 = 1.0D - d0;
                             d0 = d0 * 10.0D;
                             d0 = MathHelper.clamp(d0, 0.0D, 1.0D);
                             d0 = d0 * d0;
-                            int l1 = (int)(255.0D * d0);
+                            int l1 = (int) (255.0D * d0);
 
-                            if (flag)
-                            {
+                            if (flag) {
                                 l1 = 255;
                             }
 
-                            l1 = (int)((float)l1 * f);
+                            l1 = (int) ((float) l1 * f);
                             ++l;
 
-                            if (l1 > 3)
-                            {
+                            if (l1 > 3) {
                                 int i2 = 0;
                                 int j2 = -i1 * 9;
                                 drawRect(-2, j2 - 9, 0 + k + 4, j2, l1 / 2 << 24);
                                 String s = chatline.getChatComponent().getFormattedText();
                                 GlStateManager.enableBlend();
-                                this.mc.fontRenderer.drawStringWithShadow(s, 0.0F, (float)(j2 - 8), 16777215 + (l1 << 24));
+                                this.mc.fontRenderer.drawStringWithShadow(s, 0.0F, (float) (j2 - 8), 16777215 + (l1 << 24));
                                 GlStateManager.disableAlpha();
                                 GlStateManager.disableBlend();
                             }
@@ -95,8 +85,7 @@
                     }
                 }
 
-                if (flag)
-                {
+                if (flag) {
                     int k2 = this.mc.fontRenderer.FONT_HEIGHT;
                     GlStateManager.translate(-3.0F, 0.0F, 0.0F);
                     int l2 = j * k2 + j;
@@ -104,8 +93,7 @@
                     int j3 = this.scrollPos * i3 / j;
                     int k1 = i3 * i3 / l2;
 
-                    if (l2 != i3)
-                    {
+                    if (l2 != i3) {
                         int k3 = j3 > 0 ? 170 : 96;
                         int l3 = this.isScrolled ? 13382451 : 3355562;
                         drawRect(0, -j3, 2, -j3 - k1, l3 + (k3 << 24));
@@ -118,43 +106,35 @@
         }
     }
 
-    public void clearChatMessages(boolean p_146231_1_)
-    {
+    public void clearChatMessages(boolean p_146231_1_) {
         this.drawnChatLines.clear();
         this.chatLines.clear();
 
-        if (p_146231_1_)
-        {
+        if (p_146231_1_) {
             this.sentMessages.clear();
         }
     }
 
-    public void printChatMessage(ITextComponent chatComponent)
-    {
+    public void printChatMessage(ITextComponent chatComponent) {
         this.printChatMessageWithOptionalDeletion(chatComponent, 0);
     }
 
-    public void printChatMessageWithOptionalDeletion(ITextComponent chatComponent, int chatLineId)
-    {
+    public void printChatMessageWithOptionalDeletion(ITextComponent chatComponent, int chatLineId) {
         this.setChatLine(chatComponent, chatLineId, this.mc.ingameGUI.getUpdateCounter(), false);
-        LOGGER.info("[CHAT] {}", (Object)chatComponent.getUnformattedText().replaceAll("\r", "\\\\r").replaceAll("\n", "\\\\n"));
+        LOGGER.info("[CHAT] {}", (Object) chatComponent.getUnformattedText().replaceAll("\r", "\\\\r").replaceAll("\n", "\\\\n"));
     }
 
-    private void setChatLine(ITextComponent chatComponent, int chatLineId, int updateCounter, boolean displayOnly)
-    {
-        if (chatLineId != 0)
-        {
+    private void setChatLine(ITextComponent chatComponent, int chatLineId, int updateCounter, boolean displayOnly) {
+        if (chatLineId != 0) {
             this.deleteChatLine(chatLineId);
         }
 
-        int i = MathHelper.floor((float)this.getChatWidth() / this.getChatScale());
+        int i = MathHelper.floor((float) this.getChatWidth() / this.getChatScale());
         List<ITextComponent> list = GuiUtilRenderComponents.splitText(chatComponent, i, this.mc.fontRenderer, false, false);
         boolean flag = this.getChatOpen();
 
-        for (ITextComponent itextcomponent : list)
-        {
-            if (flag && this.scrollPos > 0)
-            {
+        for (ITextComponent itextcomponent : list) {
+            if (flag && this.scrollPos > 0) {
                 this.isScrolled = true;
                 this.scroll(1);
             }
@@ -162,108 +142,86 @@
             this.drawnChatLines.add(0, new ChatLine(updateCounter, itextcomponent, chatLineId));
         }
 
-        while (this.drawnChatLines.size() > 100)
-        {
+        while (this.drawnChatLines.size() > 100) {
             this.drawnChatLines.remove(this.drawnChatLines.size() - 1);
         }
 
-        if (!displayOnly)
-        {
+        if (!displayOnly) {
             this.chatLines.add(0, new ChatLine(updateCounter, chatComponent, chatLineId));
 
-            while (this.chatLines.size() > 100)
-            {
+            while (this.chatLines.size() > 100) {
                 this.chatLines.remove(this.chatLines.size() - 1);
             }
         }
     }
 
-    public void refreshChat()
-    {
+    public void refreshChat() {
         this.drawnChatLines.clear();
         this.resetScroll();
 
-        for (int i = this.chatLines.size() - 1; i >= 0; --i)
-        {
+        for (int i = this.chatLines.size() - 1; i >= 0; --i) {
             ChatLine chatline = this.chatLines.get(i);
             this.setChatLine(chatline.getChatComponent(), chatline.getChatLineID(), chatline.getUpdatedCounter(), true);
         }
     }
 
-    public List<String> getSentMessages()
-    {
+    public List<String> getSentMessages() {
         return this.sentMessages;
     }
 
-    public void addToSentMessages(String message)
-    {
-        if (this.sentMessages.isEmpty() || !((String)this.sentMessages.get(this.sentMessages.size() - 1)).equals(message))
-        {
+    public void addToSentMessages(String message) {
+        if (this.sentMessages.isEmpty() || !((String) this.sentMessages.get(this.sentMessages.size() - 1)).equals(message)) {
             this.sentMessages.add(message);
         }
     }
 
-    public void resetScroll()
-    {
+    public void resetScroll() {
         this.scrollPos = 0;
         this.isScrolled = false;
     }
 
-    public void scroll(int amount)
-    {
+    public void scroll(int amount) {
         this.scrollPos += amount;
         int i = this.drawnChatLines.size();
 
-        if (this.scrollPos > i - this.getLineCount())
-        {
+        if (this.scrollPos > i - this.getLineCount()) {
             this.scrollPos = i - this.getLineCount();
         }
 
-        if (this.scrollPos <= 0)
-        {
+        if (this.scrollPos <= 0) {
             this.scrollPos = 0;
             this.isScrolled = false;
         }
     }
 
     @Nullable
-    public ITextComponent getChatComponent(int mouseX, int mouseY)
-    {
-        if (!this.getChatOpen())
-        {
+    public ITextComponent getChatComponent(int mouseX, int mouseY) {
+        if (!this.getChatOpen()) {
             return null;
-        }
-        else
-        {
+        } else {
             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
             int i = scaledresolution.getScaleFactor();
             float f = this.getChatScale();
             int j = mouseX / i - 2;
             int k = mouseY / i - 40;
-            j = MathHelper.floor((float)j / f);
-            k = MathHelper.floor((float)k / f);
+            j = MathHelper.floor((float) j / f);
+            k = MathHelper.floor((float) k / f);
 
-            if (j >= 0 && k >= 0)
-            {
+            if (j >= 0 && k >= 0) {
                 int l = Math.min(this.getLineCount(), this.drawnChatLines.size());
 
-                if (j <= MathHelper.floor((float)this.getChatWidth() / this.getChatScale()) && k < this.mc.fontRenderer.FONT_HEIGHT * l + l)
-                {
+                if (j <= MathHelper.floor((float) this.getChatWidth() / this.getChatScale()) && k < this.mc.fontRenderer.FONT_HEIGHT * l + l) {
                     int i1 = k / this.mc.fontRenderer.FONT_HEIGHT + this.scrollPos;
 
-                    if (i1 >= 0 && i1 < this.drawnChatLines.size())
-                    {
+                    if (i1 >= 0 && i1 < this.drawnChatLines.size()) {
                         ChatLine chatline = this.drawnChatLines.get(i1);
                         int j1 = 0;
 
-                        for (ITextComponent itextcomponent : chatline.getChatComponent())
-                        {
-                            if (itextcomponent instanceof TextComponentString)
-                            {
-                                j1 += this.mc.fontRenderer.getStringWidth(GuiUtilRenderComponents.removeTextColorsIfConfigured(((TextComponentString)itextcomponent).getText(), false));
+                        for (ITextComponent itextcomponent : chatline.getChatComponent()) {
+                            if (itextcomponent instanceof TextComponentString) {
+                                j1 += this.mc.fontRenderer.getStringWidth(GuiUtilRenderComponents.removeTextColorsIfConfigured(((TextComponentString) itextcomponent).getText(), false));
 
-                                if (j1 > j)
-                                {
+                                if (j1 > j) {
                                     return itextcomponent;
                                 }
                             }
@@ -271,83 +229,67 @@
                     }
 
                     return null;
-                }
-                else
-                {
+                } else {
                     return null;
                 }
-            }
-            else
-            {
+            } else {
                 return null;
             }
         }
     }
 
-    public boolean getChatOpen()
-    {
+    public boolean getChatOpen() {
         return this.mc.currentScreen instanceof GuiChat;
     }
 
-    public void deleteChatLine(int id)
-    {
+    public void deleteChatLine(int id) {
         Iterator<ChatLine> iterator = this.drawnChatLines.iterator();
 
-        while (iterator.hasNext())
-        {
+        while (iterator.hasNext()) {
             ChatLine chatline = iterator.next();
 
-            if (chatline.getChatLineID() == id)
-            {
+            if (chatline.getChatLineID() == id) {
                 iterator.remove();
             }
         }
 
         iterator = this.chatLines.iterator();
 
-        while (iterator.hasNext())
-        {
+        while (iterator.hasNext()) {
             ChatLine chatline1 = iterator.next();
 
-            if (chatline1.getChatLineID() == id)
-            {
+            if (chatline1.getChatLineID() == id) {
                 iterator.remove();
                 break;
             }
         }
     }
 
-    public int getChatWidth()
-    {
+    public int getChatWidth() {
         return calculateChatboxWidth(this.mc.gameSettings.chatWidth);
     }
 
-    public int getChatHeight()
-    {
+    public int getChatHeight() {
         return calculateChatboxHeight(this.getChatOpen() ? this.mc.gameSettings.chatHeightFocused : this.mc.gameSettings.chatHeightUnfocused);
     }
 
-    public float getChatScale()
-    {
+    public float getChatScale() {
         return this.mc.gameSettings.chatScale;
     }
 
-    public static int calculateChatboxWidth(float scale)
-    {
+    public static int calculateChatboxWidth(float scale) {
         int i = 320;
         int j = 40;
         return MathHelper.floor(scale * 280.0F + 40.0F);
     }
 
-    public static int calculateChatboxHeight(float scale)
-    {
+    public static int calculateChatboxHeight(float scale) {
         int i = 180;
         int j = 20;
         return MathHelper.floor(scale * 160.0F + 20.0F);
     }
 
-    public int getLineCount()
-    {
+    public int getLineCount() {
         return this.getChatHeight() / 9;
     }
 }
