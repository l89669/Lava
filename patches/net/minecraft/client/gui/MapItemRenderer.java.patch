--- ../src-base/minecraft/net/minecraft/client/gui/MapItemRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/gui/MapItemRenderer.java
@@ -1,8 +1,6 @@
 package net.minecraft.client.gui;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
@@ -16,34 +14,31 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.Map;
+
 @SideOnly(Side.CLIENT)
-public class MapItemRenderer
-{
+public class MapItemRenderer {
     private static final ResourceLocation TEXTURE_MAP_ICONS = new ResourceLocation("textures/map/map_icons.png");
     private final TextureManager textureManager;
     private final Map<String, MapItemRenderer.Instance> loadedMaps = Maps.<String, MapItemRenderer.Instance>newHashMap();
 
-    public MapItemRenderer(TextureManager textureManagerIn)
-    {
+    public MapItemRenderer(TextureManager textureManagerIn) {
         this.textureManager = textureManagerIn;
     }
 
-    public void updateMapTexture(MapData mapdataIn)
-    {
+    public void updateMapTexture(MapData mapdataIn) {
         this.getMapRendererInstance(mapdataIn).updateMapTexture();
     }
 
-    public void renderMap(MapData mapdataIn, boolean noOverlayRendering)
-    {
+    public void renderMap(MapData mapdataIn, boolean noOverlayRendering) {
         this.getMapRendererInstance(mapdataIn).render(noOverlayRendering);
     }
 
-    private MapItemRenderer.Instance getMapRendererInstance(MapData mapdataIn)
-    {
+    private MapItemRenderer.Instance getMapRendererInstance(MapData mapdataIn) {
         MapItemRenderer.Instance mapitemrenderer$instance = this.loadedMaps.get(mapdataIn.mapName);
 
-        if (mapitemrenderer$instance == null)
-        {
+        if (mapitemrenderer$instance == null) {
             mapitemrenderer$instance = new MapItemRenderer.Instance(mapdataIn);
             this.loadedMaps.put(mapdataIn.mapName, mapitemrenderer$instance);
         }
@@ -52,15 +47,12 @@
     }
 
     @Nullable
-    public MapItemRenderer.Instance getMapInstanceIfExists(String p_191205_1_)
-    {
+    public MapItemRenderer.Instance getMapInstanceIfExists(String p_191205_1_) {
         return this.loadedMaps.get(p_191205_1_);
     }
 
-    public void clearLoadedMaps()
-    {
-        for (MapItemRenderer.Instance mapitemrenderer$instance : this.loadedMaps.values())
-        {
+    public void clearLoadedMaps() {
+        for (MapItemRenderer.Instance mapitemrenderer$instance : this.loadedMaps.values()) {
             this.textureManager.deleteTexture(mapitemrenderer$instance.location);
         }
 
@@ -68,44 +60,35 @@
     }
 
     @Nullable
-    public MapData getData(@Nullable MapItemRenderer.Instance p_191207_1_)
-    {
+    public MapData getData(@Nullable MapItemRenderer.Instance p_191207_1_) {
         return p_191207_1_ != null ? p_191207_1_.mapData : null;
     }
 
     @SideOnly(Side.CLIENT)
-    class Instance
-    {
+    class Instance {
         private final MapData mapData;
         private final DynamicTexture mapTexture;
         private final ResourceLocation location;
         private final int[] mapTextureData;
 
-        private Instance(MapData mapdataIn)
-        {
+        private Instance(MapData mapdataIn) {
             this.mapData = mapdataIn;
             this.mapTexture = new DynamicTexture(128, 128);
             this.mapTextureData = this.mapTexture.getTextureData();
             this.location = MapItemRenderer.this.textureManager.getDynamicTextureLocation("map/" + mapdataIn.mapName, this.mapTexture);
 
-            for (int i = 0; i < this.mapTextureData.length; ++i)
-            {
+            for (int i = 0; i < this.mapTextureData.length; ++i) {
                 this.mapTextureData[i] = 0;
             }
         }
 
-        private void updateMapTexture()
-        {
-            for (int i = 0; i < 16384; ++i)
-            {
+        private void updateMapTexture() {
+            for (int i = 0; i < 16384; ++i) {
                 int j = this.mapData.colors[i] & 255;
 
-                if (j / 4 == 0)
-                {
+                if (j / 4 == 0) {
                     this.mapTextureData[i] = (i + i / 128 & 1) * 8 + 16 << 24;
-                }
-                else
-                {
+                } else {
                     this.mapTextureData[i] = MapColor.COLORS[j / 4].getMapColor(j & 3);
                 }
             }
@@ -113,8 +96,7 @@
             this.mapTexture.updateDynamicTexture();
         }
 
-        private void render(boolean noOverlayRendering)
-        {
+        private void render(boolean noOverlayRendering) {
             int i = 0;
             int j = 0;
             Tessellator tessellator = Tessellator.getInstance();
@@ -135,28 +117,29 @@
             MapItemRenderer.this.textureManager.bindTexture(MapItemRenderer.TEXTURE_MAP_ICONS);
             int k = 0;
 
-            for (MapDecoration mapdecoration : this.mapData.mapDecorations.values())
-            {
-                if (!noOverlayRendering || mapdecoration.renderOnFrame())
-                {
-                    if (mapdecoration.render(k)) { k++; continue; }
+            for (MapDecoration mapdecoration : this.mapData.mapDecorations.values()) {
+                if (!noOverlayRendering || mapdecoration.renderOnFrame()) {
+                    if (mapdecoration.render(k)) {
+                        k++;
+                        continue;
+                    }
                     MapItemRenderer.this.textureManager.bindTexture(MapItemRenderer.TEXTURE_MAP_ICONS); // Rebind in case custom render changes it
                     GlStateManager.pushMatrix();
-                    GlStateManager.translate(0.0F + (float)mapdecoration.getX() / 2.0F + 64.0F, 0.0F + (float)mapdecoration.getY() / 2.0F + 64.0F, -0.02F);
-                    GlStateManager.rotate((float)(mapdecoration.getRotation() * 360) / 16.0F, 0.0F, 0.0F, 1.0F);
+                    GlStateManager.translate(0.0F + (float) mapdecoration.getX() / 2.0F + 64.0F, 0.0F + (float) mapdecoration.getY() / 2.0F + 64.0F, -0.02F);
+                    GlStateManager.rotate((float) (mapdecoration.getRotation() * 360) / 16.0F, 0.0F, 0.0F, 1.0F);
                     GlStateManager.scale(4.0F, 4.0F, 3.0F);
                     GlStateManager.translate(-0.125F, 0.125F, 0.0F);
                     byte b0 = mapdecoration.getImage();
-                    float f1 = (float)(b0 % 4 + 0) / 4.0F;
-                    float f2 = (float)(b0 / 4 + 0) / 4.0F;
-                    float f3 = (float)(b0 % 4 + 1) / 4.0F;
-                    float f4 = (float)(b0 / 4 + 1) / 4.0F;
+                    float f1 = (float) (b0 % 4 + 0) / 4.0F;
+                    float f2 = (float) (b0 / 4 + 0) / 4.0F;
+                    float f3 = (float) (b0 % 4 + 1) / 4.0F;
+                    float f4 = (float) (b0 / 4 + 1) / 4.0F;
                     bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
                     float f5 = -0.001F;
-                    bufferbuilder.pos(-1.0D, 1.0D, (double)((float)k * -0.001F)).tex((double)f1, (double)f2).endVertex();
-                    bufferbuilder.pos(1.0D, 1.0D, (double)((float)k * -0.001F)).tex((double)f3, (double)f2).endVertex();
-                    bufferbuilder.pos(1.0D, -1.0D, (double)((float)k * -0.001F)).tex((double)f3, (double)f4).endVertex();
-                    bufferbuilder.pos(-1.0D, -1.0D, (double)((float)k * -0.001F)).tex((double)f1, (double)f4).endVertex();
+                    bufferbuilder.pos(-1.0D, 1.0D, (double) ((float) k * -0.001F)).tex((double) f1, (double) f2).endVertex();
+                    bufferbuilder.pos(1.0D, 1.0D, (double) ((float) k * -0.001F)).tex((double) f3, (double) f2).endVertex();
+                    bufferbuilder.pos(1.0D, -1.0D, (double) ((float) k * -0.001F)).tex((double) f3, (double) f4).endVertex();
+                    bufferbuilder.pos(-1.0D, -1.0D, (double) ((float) k * -0.001F)).tex((double) f1, (double) f4).endVertex();
                     tessellator.draw();
                     GlStateManager.popMatrix();
                     ++k;
