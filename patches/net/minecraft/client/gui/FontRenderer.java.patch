--- ../src-base/minecraft/net/minecraft/client/gui/FontRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/gui/FontRenderer.java
@@ -3,13 +3,6 @@
 import com.ibm.icu.text.ArabicShaping;
 import com.ibm.icu.text.ArabicShapingException;
 import com.ibm.icu.text.Bidi;
-import java.awt.image.BufferedImage;
-import java.io.Closeable;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Locale;
-import java.util.Random;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
@@ -26,9 +19,16 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.io.IOUtils;
 
+import java.awt.image.BufferedImage;
+import java.io.Closeable;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Locale;
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class FontRenderer implements IResourceManagerReloadListener
-{
+public class FontRenderer implements IResourceManagerReloadListener {
     private static final ResourceLocation[] UNICODE_PAGE_LOCATIONS = new ResourceLocation[256];
     protected final int[] charWidth = new int[256];
     public int FONT_HEIGHT = 9;
@@ -52,27 +52,23 @@
     private boolean underlineStyle;
     private boolean strikethroughStyle;
 
-    public FontRenderer(GameSettings gameSettingsIn, ResourceLocation location, TextureManager textureManagerIn, boolean unicode)
-    {
+    public FontRenderer(GameSettings gameSettingsIn, ResourceLocation location, TextureManager textureManagerIn, boolean unicode) {
         this.locationFontTexture = location;
         this.renderEngine = textureManagerIn;
         this.unicodeFlag = unicode;
         bindTexture(this.locationFontTexture);
 
-        for (int i = 0; i < 32; ++i)
-        {
+        for (int i = 0; i < 32; ++i) {
             int j = (i >> 3 & 1) * 85;
             int k = (i >> 2 & 1) * 170 + j;
             int l = (i >> 1 & 1) * 170 + j;
             int i1 = (i >> 0 & 1) * 170 + j;
 
-            if (i == 6)
-            {
+            if (i == 6) {
                 k += 85;
             }
 
-            if (gameSettingsIn.anaglyph)
-            {
+            if (gameSettingsIn.anaglyph) {
                 int j1 = (k * 30 + l * 59 + i1 * 11) / 100;
                 int k1 = (k * 30 + l * 70) / 100;
                 int l1 = (k * 30 + i1 * 70) / 100;
@@ -81,8 +77,7 @@
                 i1 = l1;
             }
 
-            if (i >= 16)
-            {
+            if (i >= 16) {
                 k /= 4;
                 l /= 4;
                 i1 /= 4;
@@ -94,30 +89,23 @@
         this.readGlyphSizes();
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         this.readFontTexture();
         this.readGlyphSizes();
     }
 
-    private void readFontTexture()
-    {
+    private void readFontTexture() {
         IResource iresource = null;
         BufferedImage bufferedimage;
 
-        try
-        {
+        try {
             iresource = getResource(this.locationFontTexture);
             bufferedimage = TextureUtil.readBufferedImage(iresource.getInputStream());
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             throw new RuntimeException(ioexception);
+        } finally {
+            IOUtils.closeQuietly((Closeable) iresource);
         }
-        finally
-        {
-            IOUtils.closeQuietly((Closeable)iresource);
-        }
 
         int lvt_3_2_ = bufferedimage.getWidth();
         int lvt_4_1_ = bufferedimage.getHeight();
@@ -126,133 +114,109 @@
         int lvt_6_1_ = lvt_4_1_ / 16;
         int lvt_7_1_ = lvt_3_2_ / 16;
         boolean lvt_8_1_ = true;
-        float lvt_9_1_ = 8.0F / (float)lvt_7_1_;
+        float lvt_9_1_ = 8.0F / (float) lvt_7_1_;
 
-        for (int lvt_10_1_ = 0; lvt_10_1_ < 256; ++lvt_10_1_)
-        {
+        for (int lvt_10_1_ = 0; lvt_10_1_ < 256; ++lvt_10_1_) {
             int j1 = lvt_10_1_ % 16;
             int k1 = lvt_10_1_ / 16;
 
-            if (lvt_10_1_ == 32)
-            {
+            if (lvt_10_1_ == 32) {
                 this.charWidth[lvt_10_1_] = 4;
             }
 
             int l1;
 
-            for (l1 = lvt_7_1_ - 1; l1 >= 0; --l1)
-            {
+            for (l1 = lvt_7_1_ - 1; l1 >= 0; --l1) {
                 int i2 = j1 * lvt_7_1_ + l1;
                 boolean flag1 = true;
 
-                for (int j2 = 0; j2 < lvt_6_1_ && flag1; ++j2)
-                {
+                for (int j2 = 0; j2 < lvt_6_1_ && flag1; ++j2) {
                     int k2 = (k1 * lvt_7_1_ + j2) * lvt_3_2_;
 
-                    if ((lvt_5_1_[i2 + k2] >> 24 & 255) != 0)
-                    {
+                    if ((lvt_5_1_[i2 + k2] >> 24 & 255) != 0) {
                         flag1 = false;
                     }
                 }
 
-                if (!flag1)
-                {
+                if (!flag1) {
                     break;
                 }
             }
 
             ++l1;
-            this.charWidth[lvt_10_1_] = (int)(0.5D + (double)((float)l1 * lvt_9_1_)) + 1;
+            this.charWidth[lvt_10_1_] = (int) (0.5D + (double) ((float) l1 * lvt_9_1_)) + 1;
         }
     }
 
-    private void readGlyphSizes()
-    {
+    private void readGlyphSizes() {
         IResource iresource = null;
 
-        try
-        {
+        try {
             iresource = getResource(new ResourceLocation("font/glyph_sizes.bin"));
             iresource.getInputStream().read(this.glyphWidth);
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             throw new RuntimeException(ioexception);
+        } finally {
+            IOUtils.closeQuietly((Closeable) iresource);
         }
-        finally
-        {
-            IOUtils.closeQuietly((Closeable)iresource);
-        }
     }
 
-    private float renderChar(char ch, boolean italic)
-    {
+    private float renderChar(char ch, boolean italic) {
         if (ch == 160) return 4.0F; // forge: display nbsp as space. MC-2595
-        if (ch == ' ')
-        {
+        if (ch == ' ') {
             return 4.0F;
-        }
-        else
-        {
+        } else {
             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(ch);
             return i != -1 && !this.unicodeFlag ? this.renderDefaultChar(i, italic) : this.renderUnicodeChar(ch, italic);
         }
     }
 
-    protected float renderDefaultChar(int ch, boolean italic)
-    {
+    protected float renderDefaultChar(int ch, boolean italic) {
         int i = ch % 16 * 8;
         int j = ch / 16 * 8;
         int k = italic ? 1 : 0;
         bindTexture(this.locationFontTexture);
         int l = this.charWidth[ch];
-        float f = (float)l - 0.01F;
+        float f = (float) l - 0.01F;
         GlStateManager.glBegin(5);
-        GlStateManager.glTexCoord2f((float)i / 128.0F, (float)j / 128.0F);
-        GlStateManager.glVertex3f(this.posX + (float)k, this.posY, 0.0F);
-        GlStateManager.glTexCoord2f((float)i / 128.0F, ((float)j + 7.99F) / 128.0F);
-        GlStateManager.glVertex3f(this.posX - (float)k, this.posY + 7.99F, 0.0F);
-        GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, (float)j / 128.0F);
-        GlStateManager.glVertex3f(this.posX + f - 1.0F + (float)k, this.posY, 0.0F);
-        GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
-        GlStateManager.glVertex3f(this.posX + f - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
+        GlStateManager.glTexCoord2f((float) i / 128.0F, (float) j / 128.0F);
+        GlStateManager.glVertex3f(this.posX + (float) k, this.posY, 0.0F);
+        GlStateManager.glTexCoord2f((float) i / 128.0F, ((float) j + 7.99F) / 128.0F);
+        GlStateManager.glVertex3f(this.posX - (float) k, this.posY + 7.99F, 0.0F);
+        GlStateManager.glTexCoord2f(((float) i + f - 1.0F) / 128.0F, (float) j / 128.0F);
+        GlStateManager.glVertex3f(this.posX + f - 1.0F + (float) k, this.posY, 0.0F);
+        GlStateManager.glTexCoord2f(((float) i + f - 1.0F) / 128.0F, ((float) j + 7.99F) / 128.0F);
+        GlStateManager.glVertex3f(this.posX + f - 1.0F - (float) k, this.posY + 7.99F, 0.0F);
         GlStateManager.glEnd();
-        return (float)l;
+        return (float) l;
     }
 
-    private ResourceLocation getUnicodePageLocation(int page)
-    {
-        if (UNICODE_PAGE_LOCATIONS[page] == null)
-        {
+    private ResourceLocation getUnicodePageLocation(int page) {
+        if (UNICODE_PAGE_LOCATIONS[page] == null) {
             UNICODE_PAGE_LOCATIONS[page] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", page));
         }
 
         return UNICODE_PAGE_LOCATIONS[page];
     }
 
-    private void loadGlyphTexture(int page)
-    {
+    private void loadGlyphTexture(int page) {
         bindTexture(this.getUnicodePageLocation(page));
     }
 
-    protected float renderUnicodeChar(char ch, boolean italic)
-    {
+    protected float renderUnicodeChar(char ch, boolean italic) {
         int i = this.glyphWidth[ch] & 255;
 
-        if (i == 0)
-        {
+        if (i == 0) {
             return 0.0F;
-        }
-        else
-        {
+        } else {
             int j = ch / 256;
             this.loadGlyphTexture(j);
             int k = i >>> 4;
             int l = i & 15;
-            float f = (float)k;
-            float f1 = (float)(l + 1);
-            float f2 = (float)(ch % 16 * 16) + f;
-            float f3 = (float)((ch & 255) / 16 * 16);
+            float f = (float) k;
+            float f1 = (float) (l + 1);
+            float f2 = (float) (ch % 16 * 16) + f;
+            float f3 = (float) ((ch & 255) / 16 * 16);
             float f4 = f1 - f - 0.02F;
             float f5 = italic ? 1.0F : 0.0F;
             GlStateManager.glBegin(5);
@@ -269,51 +233,40 @@
         }
     }
 
-    public int drawStringWithShadow(String text, float x, float y, int color)
-    {
+    public int drawStringWithShadow(String text, float x, float y, int color) {
         return this.drawString(text, x, y, color, true);
     }
 
-    public int drawString(String text, int x, int y, int color)
-    {
-        return this.drawString(text, (float)x, (float)y, color, false);
+    public int drawString(String text, int x, int y, int color) {
+        return this.drawString(text, (float) x, (float) y, color, false);
     }
 
-    public int drawString(String text, float x, float y, int color, boolean dropShadow)
-    {
+    public int drawString(String text, float x, float y, int color, boolean dropShadow) {
         enableAlpha();
         this.resetStyles();
         int i;
 
-        if (dropShadow)
-        {
+        if (dropShadow) {
             i = this.renderString(text, x + 1.0F, y + 1.0F, color, true);
             i = Math.max(i, this.renderString(text, x, y, color, false));
-        }
-        else
-        {
+        } else {
             i = this.renderString(text, x, y, color, false);
         }
 
         return i;
     }
 
-    private String bidiReorder(String text)
-    {
-        try
-        {
+    private String bidiReorder(String text) {
+        try {
             Bidi bidi = new Bidi((new ArabicShaping(8)).shape(text), 127);
             bidi.setReorderingMode(0);
             return bidi.writeReordered(2);
-        }
-        catch (ArabicShapingException var3)
-        {
+        } catch (ArabicShapingException var3) {
             return text;
         }
     }
 
-    private void resetStyles()
-    {
+    private void resetStyles() {
         this.randomStyle = false;
         this.boldStyle = false;
         this.italicStyle = false;
@@ -321,60 +274,42 @@
         this.strikethroughStyle = false;
     }
 
-    private void renderStringAtPos(String text, boolean shadow)
-    {
-        for (int i = 0; i < text.length(); ++i)
-        {
+    private void renderStringAtPos(String text, boolean shadow) {
+        for (int i = 0; i < text.length(); ++i) {
             char c0 = text.charAt(i);
 
-            if (c0 == 167 && i + 1 < text.length())
-            {
+            if (c0 == 167 && i + 1 < text.length()) {
                 int i1 = "0123456789abcdefklmnor".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
 
-                if (i1 < 16)
-                {
+                if (i1 < 16) {
                     this.randomStyle = false;
                     this.boldStyle = false;
                     this.strikethroughStyle = false;
                     this.underlineStyle = false;
                     this.italicStyle = false;
 
-                    if (i1 < 0 || i1 > 15)
-                    {
+                    if (i1 < 0 || i1 > 15) {
                         i1 = 15;
                     }
 
-                    if (shadow)
-                    {
+                    if (shadow) {
                         i1 += 16;
                     }
 
                     int j1 = this.colorCode[i1];
                     this.textColor = j1;
-                    setColor((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
-                }
-                else if (i1 == 16)
-                {
+                    setColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);
+                } else if (i1 == 16) {
                     this.randomStyle = true;
-                }
-                else if (i1 == 17)
-                {
+                } else if (i1 == 17) {
                     this.boldStyle = true;
-                }
-                else if (i1 == 18)
-                {
+                } else if (i1 == 18) {
                     this.strikethroughStyle = true;
-                }
-                else if (i1 == 19)
-                {
+                } else if (i1 == 19) {
                     this.underlineStyle = true;
-                }
-                else if (i1 == 20)
-                {
+                } else if (i1 == 20) {
                     this.italicStyle = true;
-                }
-                else if (i1 == 21)
-                {
+                } else if (i1 == 21) {
                     this.randomStyle = false;
                     this.boldStyle = false;
                     this.strikethroughStyle = false;
@@ -384,23 +319,18 @@
                 }
 
                 ++i;
-            }
-            else
-            {
+            } else {
                 int j = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(c0);
 
-                if (this.randomStyle && j != -1)
-                {
+                if (this.randomStyle && j != -1) {
                     int k = this.getCharWidth(c0);
                     char c1;
 
-                    while (true)
-                    {
+                    while (true) {
                         j = this.fontRandom.nextInt("\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".length());
                         c1 = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".charAt(j);
 
-                        if (k == this.getCharWidth(c1))
-                        {
+                        if (k == this.getCharWidth(c1)) {
                             break;
                         }
                     }
@@ -411,26 +341,22 @@
                 float f1 = j == -1 || this.unicodeFlag ? 0.5f : 1f;
                 boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;
 
-                if (flag)
-                {
+                if (flag) {
                     this.posX -= f1;
                     this.posY -= f1;
                 }
 
                 float f = this.renderChar(c0, this.italicStyle);
 
-                if (flag)
-                {
+                if (flag) {
                     this.posX += f1;
                     this.posY += f1;
                 }
 
-                if (this.boldStyle)
-                {
+                if (this.boldStyle) {
                     this.posX += f1;
 
-                    if (flag)
-                    {
+                    if (flag) {
                         this.posX -= f1;
                         this.posY -= f1;
                     }
@@ -438,8 +364,7 @@
                     this.renderChar(c0, this.italicStyle);
                     this.posX -= f1;
 
-                    if (flag)
-                    {
+                    if (flag) {
                         this.posX += f1;
                         this.posY += f1;
                     }
@@ -451,121 +376,99 @@
         }
     }
 
-    protected void doDraw(float f)
-    {
+    protected void doDraw(float f) {
         {
             {
 
-                if (this.strikethroughStyle)
-                {
+                if (this.strikethroughStyle) {
                     Tessellator tessellator = Tessellator.getInstance();
                     BufferBuilder bufferbuilder = tessellator.getBuffer();
                     GlStateManager.disableTexture2D();
                     bufferbuilder.begin(7, DefaultVertexFormats.POSITION);
-                    bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
-                    bufferbuilder.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
-                    bufferbuilder.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
-                    bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
+                    bufferbuilder.pos((double) this.posX, (double) (this.posY + (float) (this.FONT_HEIGHT / 2)), 0.0D).endVertex();
+                    bufferbuilder.pos((double) (this.posX + f), (double) (this.posY + (float) (this.FONT_HEIGHT / 2)), 0.0D).endVertex();
+                    bufferbuilder.pos((double) (this.posX + f), (double) (this.posY + (float) (this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
+                    bufferbuilder.pos((double) this.posX, (double) (this.posY + (float) (this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
                     tessellator.draw();
                     GlStateManager.enableTexture2D();
                 }
 
-                if (this.underlineStyle)
-                {
+                if (this.underlineStyle) {
                     Tessellator tessellator1 = Tessellator.getInstance();
                     BufferBuilder bufferbuilder1 = tessellator1.getBuffer();
                     GlStateManager.disableTexture2D();
                     bufferbuilder1.begin(7, DefaultVertexFormats.POSITION);
                     int l = this.underlineStyle ? -1 : 0;
-                    bufferbuilder1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
-                    bufferbuilder1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
-                    bufferbuilder1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
-                    bufferbuilder1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
+                    bufferbuilder1.pos((double) (this.posX + (float) l), (double) (this.posY + (float) this.FONT_HEIGHT), 0.0D).endVertex();
+                    bufferbuilder1.pos((double) (this.posX + f), (double) (this.posY + (float) this.FONT_HEIGHT), 0.0D).endVertex();
+                    bufferbuilder1.pos((double) (this.posX + f), (double) (this.posY + (float) this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
+                    bufferbuilder1.pos((double) (this.posX + (float) l), (double) (this.posY + (float) this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
                     tessellator1.draw();
                     GlStateManager.enableTexture2D();
                 }
 
-                this.posX += (float)((int)f);
+                this.posX += (float) ((int) f);
             }
         }
     }
 
-    private int renderStringAligned(String text, int x, int y, int width, int color, boolean dropShadow)
-    {
-        if (this.bidiFlag)
-        {
+    private int renderStringAligned(String text, int x, int y, int width, int color, boolean dropShadow) {
+        if (this.bidiFlag) {
             int i = this.getStringWidth(this.bidiReorder(text));
             x = x + width - i;
         }
 
-        return this.renderString(text, (float)x, (float)y, color, dropShadow);
+        return this.renderString(text, (float) x, (float) y, color, dropShadow);
     }
 
-    private int renderString(String text, float x, float y, int color, boolean dropShadow)
-    {
-        if (text == null)
-        {
+    private int renderString(String text, float x, float y, int color, boolean dropShadow) {
+        if (text == null) {
             return 0;
-        }
-        else
-        {
-            if (this.bidiFlag)
-            {
+        } else {
+            if (this.bidiFlag) {
                 text = this.bidiReorder(text);
             }
 
-            if ((color & -67108864) == 0)
-            {
+            if ((color & -67108864) == 0) {
                 color |= -16777216;
             }
 
-            if (dropShadow)
-            {
+            if (dropShadow) {
                 color = (color & 16579836) >> 2 | color & -16777216;
             }
 
-            this.red = (float)(color >> 16 & 255) / 255.0F;
-            this.blue = (float)(color >> 8 & 255) / 255.0F;
-            this.green = (float)(color & 255) / 255.0F;
-            this.alpha = (float)(color >> 24 & 255) / 255.0F;
+            this.red = (float) (color >> 16 & 255) / 255.0F;
+            this.blue = (float) (color >> 8 & 255) / 255.0F;
+            this.green = (float) (color & 255) / 255.0F;
+            this.alpha = (float) (color >> 24 & 255) / 255.0F;
             setColor(this.red, this.blue, this.green, this.alpha);
             this.posX = x;
             this.posY = y;
             this.renderStringAtPos(text, dropShadow);
-            return (int)this.posX;
+            return (int) this.posX;
         }
     }
 
-    public int getStringWidth(String text)
-    {
-        if (text == null)
-        {
+    public int getStringWidth(String text) {
+        if (text == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             int i = 0;
             boolean flag = false;
 
-            for (int j = 0; j < text.length(); ++j)
-            {
+            for (int j = 0; j < text.length(); ++j) {
                 char c0 = text.charAt(j);
                 int k = this.getCharWidth(c0);
 
-                if (k < 0 && j < text.length() - 1)
-                {
+                if (k < 0 && j < text.length() - 1) {
                     ++j;
                     c0 = text.charAt(j);
 
-                    if (c0 != 'l' && c0 != 'L')
-                    {
-                        if (c0 == 'r' || c0 == 'R')
-                        {
+                    if (c0 != 'l' && c0 != 'L') {
+                        if (c0 == 'r' || c0 == 'R') {
                             flag = false;
                         }
-                    }
-                    else
-                    {
+                    } else {
                         flag = true;
                     }
 
@@ -574,8 +477,7 @@
 
                 i += k;
 
-                if (flag && k > 0)
-                {
+                if (flag && k > 0) {
                     ++i;
                 }
             }
@@ -584,47 +486,34 @@
         }
     }
 
-    public int getCharWidth(char character)
-    {
+    public int getCharWidth(char character) {
         if (character == 160) return 4; // forge: display nbsp as space. MC-2595
-        if (character == 167)
-        {
+        if (character == 167) {
             return -1;
-        }
-        else if (character == ' ')
-        {
+        } else if (character == ' ') {
             return 4;
-        }
-        else
-        {
+        } else {
             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(character);
 
-            if (character > 0 && i != -1 && !this.unicodeFlag)
-            {
+            if (character > 0 && i != -1 && !this.unicodeFlag) {
                 return this.charWidth[i];
-            }
-            else if (this.glyphWidth[character] != 0)
-            {
+            } else if (this.glyphWidth[character] != 0) {
                 int j = this.glyphWidth[character] & 255;
                 int k = j >>> 4;
                 int l = j & 15;
                 ++l;
                 return (l - k) / 2 + 1;
-            }
-            else
-            {
+            } else {
                 return 0;
             }
         }
     }
 
-    public String trimStringToWidth(String text, int width)
-    {
+    public String trimStringToWidth(String text, int width) {
         return this.trimStringToWidth(text, width, false);
     }
 
-    public String trimStringToWidth(String text, int width, boolean reverse)
-    {
+    public String trimStringToWidth(String text, int width, boolean reverse) {
         StringBuilder stringbuilder = new StringBuilder();
         int i = 0;
         int j = reverse ? text.length() - 1 : 0;
@@ -632,52 +521,37 @@
         boolean flag = false;
         boolean flag1 = false;
 
-        for (int l = j; l >= 0 && l < text.length() && i < width; l += k)
-        {
+        for (int l = j; l >= 0 && l < text.length() && i < width; l += k) {
             char c0 = text.charAt(l);
             int i1 = this.getCharWidth(c0);
 
-            if (flag)
-            {
+            if (flag) {
                 flag = false;
 
-                if (c0 != 'l' && c0 != 'L')
-                {
-                    if (c0 == 'r' || c0 == 'R')
-                    {
+                if (c0 != 'l' && c0 != 'L') {
+                    if (c0 == 'r' || c0 == 'R') {
                         flag1 = false;
                     }
-                }
-                else
-                {
+                } else {
                     flag1 = true;
                 }
-            }
-            else if (i1 < 0)
-            {
+            } else if (i1 < 0) {
                 flag = true;
-            }
-            else
-            {
+            } else {
                 i += i1;
 
-                if (flag1)
-                {
+                if (flag1) {
                     ++i;
                 }
             }
 
-            if (i > width)
-            {
+            if (i > width) {
                 break;
             }
 
-            if (reverse)
-            {
+            if (reverse) {
                 stringbuilder.insert(0, c0);
-            }
-            else
-            {
+            } else {
                 stringbuilder.append(c0);
             }
         }
@@ -685,68 +559,54 @@
         return stringbuilder.toString();
     }
 
-    private String trimStringNewline(String text)
-    {
-        while (text != null && text.endsWith("\n"))
-        {
+    private String trimStringNewline(String text) {
+        while (text != null && text.endsWith("\n")) {
             text = text.substring(0, text.length() - 1);
         }
 
         return text;
     }
 
-    public void drawSplitString(String str, int x, int y, int wrapWidth, int textColor)
-    {
+    public void drawSplitString(String str, int x, int y, int wrapWidth, int textColor) {
         this.resetStyles();
         this.textColor = textColor;
         str = this.trimStringNewline(str);
         this.renderSplitString(str, x, y, wrapWidth, false);
     }
 
-    private void renderSplitString(String str, int x, int y, int wrapWidth, boolean addShadow)
-    {
-        for (String s : this.listFormattedStringToWidth(str, wrapWidth))
-        {
+    private void renderSplitString(String str, int x, int y, int wrapWidth, boolean addShadow) {
+        for (String s : this.listFormattedStringToWidth(str, wrapWidth)) {
             this.renderStringAligned(s, x, y, wrapWidth, this.textColor, addShadow);
             y += this.FONT_HEIGHT;
         }
     }
 
-    public int getWordWrappedHeight(String str, int maxLength)
-    {
+    public int getWordWrappedHeight(String str, int maxLength) {
         return this.FONT_HEIGHT * this.listFormattedStringToWidth(str, maxLength).size();
     }
 
-    public void setUnicodeFlag(boolean unicodeFlagIn)
-    {
+    public void setUnicodeFlag(boolean unicodeFlagIn) {
         this.unicodeFlag = unicodeFlagIn;
     }
 
-    public boolean getUnicodeFlag()
-    {
+    public boolean getUnicodeFlag() {
         return this.unicodeFlag;
     }
 
-    public void setBidiFlag(boolean bidiFlagIn)
-    {
+    public void setBidiFlag(boolean bidiFlagIn) {
         this.bidiFlag = bidiFlagIn;
     }
 
-    public List<String> listFormattedStringToWidth(String str, int wrapWidth)
-    {
+    public List<String> listFormattedStringToWidth(String str, int wrapWidth) {
         return Arrays.<String>asList(this.wrapFormattedStringToWidth(str, wrapWidth).split("\n"));
     }
 
-    String wrapFormattedStringToWidth(String str, int wrapWidth)
-    {
+    String wrapFormattedStringToWidth(String str, int wrapWidth) {
         int i = this.sizeStringToWidth(str, wrapWidth);
 
-        if (str.length() <= i)
-        {
+        if (str.length() <= i) {
             return str;
-        }
-        else
-        {
+        } else {
             String s = str.substring(0, i);
             char c0 = str.charAt(i);
             boolean flag = c0 == ' ' || c0 == '\n';
@@ -755,19 +615,16 @@
         }
     }
 
-    private int sizeStringToWidth(String str, int wrapWidth)
-    {
+    private int sizeStringToWidth(String str, int wrapWidth) {
         int i = str.length();
         int j = 0;
         int k = 0;
         int l = -1;
 
-        for (boolean flag = false; k < i; ++k)
-        {
+        for (boolean flag = false; k < i; ++k) {
             char c0 = str.charAt(k);
 
-            switch (c0)
-            {
+            switch (c0) {
                 case '\n':
                     --k;
                     break;
@@ -776,42 +633,34 @@
                 default:
                     j += this.getCharWidth(c0);
 
-                    if (flag)
-                    {
+                    if (flag) {
                         ++j;
                     }
 
                     break;
                 case '\u00a7':
 
-                    if (k < i - 1)
-                    {
+                    if (k < i - 1) {
                         ++k;
                         char c1 = str.charAt(k);
 
-                        if (c1 != 'l' && c1 != 'L')
-                        {
-                            if (c1 == 'r' || c1 == 'R' || isFormatColor(c1))
-                            {
+                        if (c1 != 'l' && c1 != 'L') {
+                            if (c1 == 'r' || c1 == 'R' || isFormatColor(c1)) {
                                 flag = false;
                             }
-                        }
-                        else
-                        {
+                        } else {
                             flag = true;
                         }
                     }
             }
 
-            if (c0 == '\n')
-            {
+            if (c0 == '\n') {
                 ++k;
                 l = k;
                 break;
             }
 
-            if (j > wrapWidth)
-            {
+            if (j > wrapWidth) {
                 break;
             }
         }
@@ -819,34 +668,26 @@
         return k != i && l != -1 && l < k ? l : k;
     }
 
-    private static boolean isFormatColor(char colorChar)
-    {
+    private static boolean isFormatColor(char colorChar) {
         return colorChar >= '0' && colorChar <= '9' || colorChar >= 'a' && colorChar <= 'f' || colorChar >= 'A' && colorChar <= 'F';
     }
 
-    private static boolean isFormatSpecial(char formatChar)
-    {
+    private static boolean isFormatSpecial(char formatChar) {
         return formatChar >= 'k' && formatChar <= 'o' || formatChar >= 'K' && formatChar <= 'O' || formatChar == 'r' || formatChar == 'R';
     }
 
-    public static String getFormatFromString(String text)
-    {
+    public static String getFormatFromString(String text) {
         String s = "";
         int i = -1;
         int j = text.length();
 
-        while ((i = text.indexOf(167, i + 1)) != -1)
-        {
-            if (i < j - 1)
-            {
+        while ((i = text.indexOf(167, i + 1)) != -1) {
+            if (i < j - 1) {
                 char c0 = text.charAt(i + 1);
 
-                if (isFormatColor(c0))
-                {
+                if (isFormatColor(c0)) {
                     s = "\u00a7" + c0;
-                }
-                else if (isFormatSpecial(c0))
-                {
+                } else if (isFormatSpecial(c0)) {
                     s = s + "\u00a7" + c0;
                 }
             }
@@ -855,33 +696,27 @@
         return s;
     }
 
-    public boolean getBidiFlag()
-    {
+    public boolean getBidiFlag() {
         return this.bidiFlag;
     }
 
-    protected void setColor(float r, float g, float b, float a)
-    {
-        GlStateManager.color(r,g,b,a);
+    protected void setColor(float r, float g, float b, float a) {
+        GlStateManager.color(r, g, b, a);
     }
 
-    protected void enableAlpha()
-    {
+    protected void enableAlpha() {
         GlStateManager.enableAlpha();
     }
 
-    protected void bindTexture(ResourceLocation location)
-    {
+    protected void bindTexture(ResourceLocation location) {
         renderEngine.bindTexture(location);
     }
 
-    protected IResource getResource(ResourceLocation location) throws IOException
-    {
+    protected IResource getResource(ResourceLocation location) throws IOException {
         return Minecraft.getMinecraft().getResourceManager().getResource(location);
     }
 
-    public int getColorCode(char character)
-    {
+    public int getColorCode(char character) {
         int i = "0123456789abcdef".indexOf(character);
         return i >= 0 && i < this.colorCode.length ? this.colorCode[i] : -1;
     }
