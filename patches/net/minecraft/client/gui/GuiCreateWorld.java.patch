--- ../src-base/minecraft/net/minecraft/client/gui/GuiCreateWorld.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiCreateWorld.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.gui;
 
-import java.io.IOException;
-import java.util.Random;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.util.ChatAllowedCharacters;
 import net.minecraft.world.GameType;
@@ -14,9 +12,11 @@
 import org.apache.commons.lang3.StringUtils;
 import org.lwjgl.input.Keyboard;
 
+import java.io.IOException;
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class GuiCreateWorld extends GuiScreen
-{
+public class GuiCreateWorld extends GuiScreen {
     private final GuiScreen parentScreen;
     private GuiTextField worldNameField;
     private GuiTextField worldSeedField;
@@ -43,23 +43,20 @@
     private String worldName;
     private int selectedIndex;
     public String chunkProviderSettingsJson = "";
-    private static final String[] DISALLOWED_FILENAMES = new String[] {"CON", "COM", "PRN", "AUX", "CLOCK$", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"};
+    private static final String[] DISALLOWED_FILENAMES = new String[]{"CON", "COM", "PRN", "AUX", "CLOCK$", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"};
 
-    public GuiCreateWorld(GuiScreen p_i46320_1_)
-    {
+    public GuiCreateWorld(GuiScreen p_i46320_1_) {
         this.parentScreen = p_i46320_1_;
         this.worldSeed = "";
         this.worldName = I18n.format("selectWorld.newWorld");
     }
 
-    public void updateScreen()
-    {
+    public void updateScreen() {
         this.worldNameField.updateCursorCounter();
         this.worldSeedField.updateCursorCounter();
     }
 
-    public void initGui()
-    {
+    public void initGui() {
         Keyboard.enableRepeatEvents(true);
         this.buttonList.clear();
         this.buttonList.add(new GuiButton(0, this.width / 2 - 155, this.height - 28, 150, 20, I18n.format("selectWorld.create")));
@@ -86,102 +83,78 @@
         this.updateDisplayState();
     }
 
-    private void calcSaveDirName()
-    {
+    private void calcSaveDirName() {
         this.saveDirName = this.worldNameField.getText().trim();
 
-        for (char c0 : ChatAllowedCharacters.ILLEGAL_FILE_CHARACTERS)
-        {
+        for (char c0 : ChatAllowedCharacters.ILLEGAL_FILE_CHARACTERS) {
             this.saveDirName = this.saveDirName.replace(c0, '_');
         }
 
-        if (StringUtils.isEmpty(this.saveDirName))
-        {
+        if (StringUtils.isEmpty(this.saveDirName)) {
             this.saveDirName = "World";
         }
 
         this.saveDirName = getUncollidingSaveDirName(this.mc.getSaveLoader(), this.saveDirName);
     }
 
-    private void updateDisplayState()
-    {
+    private void updateDisplayState() {
         this.btnGameMode.displayString = I18n.format("selectWorld.gameMode") + ": " + I18n.format("selectWorld.gameMode." + this.gameMode);
         this.gameModeDesc1 = I18n.format("selectWorld.gameMode." + this.gameMode + ".line1");
         this.gameModeDesc2 = I18n.format("selectWorld.gameMode." + this.gameMode + ".line2");
         this.btnMapFeatures.displayString = I18n.format("selectWorld.mapFeatures") + " ";
 
-        if (this.generateStructuresEnabled)
-        {
+        if (this.generateStructuresEnabled) {
             this.btnMapFeatures.displayString = this.btnMapFeatures.displayString + I18n.format("options.on");
-        }
-        else
-        {
+        } else {
             this.btnMapFeatures.displayString = this.btnMapFeatures.displayString + I18n.format("options.off");
         }
 
         this.btnBonusItems.displayString = I18n.format("selectWorld.bonusItems") + " ";
 
-        if (this.bonusChestEnabled && !this.hardCoreMode)
-        {
+        if (this.bonusChestEnabled && !this.hardCoreMode) {
             this.btnBonusItems.displayString = this.btnBonusItems.displayString + I18n.format("options.on");
-        }
-        else
-        {
+        } else {
             this.btnBonusItems.displayString = this.btnBonusItems.displayString + I18n.format("options.off");
         }
 
         this.btnMapType.displayString = I18n.format("selectWorld.mapType") + " " + I18n.format(WorldType.WORLD_TYPES[this.selectedIndex].getTranslationKey());
         this.btnAllowCommands.displayString = I18n.format("selectWorld.allowCommands") + " ";
 
-        if (this.allowCheats && !this.hardCoreMode)
-        {
+        if (this.allowCheats && !this.hardCoreMode) {
             this.btnAllowCommands.displayString = this.btnAllowCommands.displayString + I18n.format("options.on");
-        }
-        else
-        {
+        } else {
             this.btnAllowCommands.displayString = this.btnAllowCommands.displayString + I18n.format("options.off");
         }
     }
 
-    public static String getUncollidingSaveDirName(ISaveFormat saveLoader, String name)
-    {
+    public static String getUncollidingSaveDirName(ISaveFormat saveLoader, String name) {
         name = name.replaceAll("[\\./\"]", "_");
 
-        for (String s : DISALLOWED_FILENAMES)
-        {
-            if (name.equalsIgnoreCase(s))
-            {
+        for (String s : DISALLOWED_FILENAMES) {
+            if (name.equalsIgnoreCase(s)) {
                 name = "_" + name + "_";
             }
         }
 
-        while (saveLoader.getWorldInfo(name) != null)
-        {
+        while (saveLoader.getWorldInfo(name) != null) {
             name = name + "-";
         }
 
         return name;
     }
 
-    public void onGuiClosed()
-    {
+    public void onGuiClosed() {
         Keyboard.enableRepeatEvents(false);
     }
 
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
-            if (button.id == 1)
-            {
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.enabled) {
+            if (button.id == 1) {
                 this.mc.displayGuiScreen(this.parentScreen);
-            }
-            else if (button.id == 0)
-            {
-                this.mc.displayGuiScreen((GuiScreen)null);
+            } else if (button.id == 0) {
+                this.mc.displayGuiScreen((GuiScreen) null);
 
-                if (this.alreadyGenerated)
-                {
+                if (this.alreadyGenerated) {
                     return;
                 }
 
@@ -189,21 +162,16 @@
                 long i = (new Random()).nextLong();
                 String s = this.worldSeedField.getText();
 
-                if (!StringUtils.isEmpty(s))
-                {
-                    try
-                    {
+                if (!StringUtils.isEmpty(s)) {
+                    try {
                         long j = Long.parseLong(s);
 
-                        if (j != 0L)
-                        {
+                        if (j != 0L) {
                             i = j;
                         }
+                    } catch (NumberFormatException var7) {
+                        i = (long) s.hashCode();
                     }
-                    catch (NumberFormatException var7)
-                    {
-                        i = (long)s.hashCode();
-                    }
                 }
 
                 WorldType.WORLD_TYPES[this.selectedIndex].onGUICreateWorldPress();
@@ -211,28 +179,20 @@
                 WorldSettings worldsettings = new WorldSettings(i, GameType.getByName(this.gameMode), this.generateStructuresEnabled, this.hardCoreMode, WorldType.WORLD_TYPES[this.selectedIndex]);
                 worldsettings.setGeneratorOptions(this.chunkProviderSettingsJson);
 
-                if (this.bonusChestEnabled && !this.hardCoreMode)
-                {
+                if (this.bonusChestEnabled && !this.hardCoreMode) {
                     worldsettings.enableBonusChest();
                 }
 
-                if (this.allowCheats && !this.hardCoreMode)
-                {
+                if (this.allowCheats && !this.hardCoreMode) {
                     worldsettings.enableCommands();
                 }
 
                 this.mc.launchIntegratedServer(this.saveDirName, this.worldNameField.getText().trim(), worldsettings);
-            }
-            else if (button.id == 3)
-            {
+            } else if (button.id == 3) {
                 this.toggleMoreWorldOptions();
-            }
-            else if (button.id == 2)
-            {
-                if ("survival".equals(this.gameMode))
-                {
-                    if (!this.allowCheatsWasSetByUser)
-                    {
+            } else if (button.id == 2) {
+                if ("survival".equals(this.gameMode)) {
+                    if (!this.allowCheatsWasSetByUser) {
                         this.allowCheats = false;
                     }
 
@@ -242,11 +202,8 @@
                     this.btnAllowCommands.enabled = false;
                     this.btnBonusItems.enabled = false;
                     this.updateDisplayState();
-                }
-                else if ("hardcore".equals(this.gameMode))
-                {
-                    if (!this.allowCheatsWasSetByUser)
-                    {
+                } else if ("hardcore".equals(this.gameMode)) {
+                    if (!this.allowCheatsWasSetByUser) {
                         this.allowCheats = true;
                     }
 
@@ -256,11 +213,8 @@
                     this.hardCoreMode = false;
                     this.btnAllowCommands.enabled = true;
                     this.btnBonusItems.enabled = true;
-                }
-                else
-                {
-                    if (!this.allowCheatsWasSetByUser)
-                    {
+                } else {
+                    if (!this.allowCheatsWasSetByUser) {
                         this.allowCheats = false;
                     }
 
@@ -272,32 +226,23 @@
                 }
 
                 this.updateDisplayState();
-            }
-            else if (button.id == 4)
-            {
+            } else if (button.id == 4) {
                 this.generateStructuresEnabled = !this.generateStructuresEnabled;
                 this.updateDisplayState();
-            }
-            else if (button.id == 7)
-            {
+            } else if (button.id == 7) {
                 this.bonusChestEnabled = !this.bonusChestEnabled;
                 this.updateDisplayState();
-            }
-            else if (button.id == 5)
-            {
+            } else if (button.id == 5) {
                 ++this.selectedIndex;
 
-                if (this.selectedIndex >= WorldType.WORLD_TYPES.length)
-                {
+                if (this.selectedIndex >= WorldType.WORLD_TYPES.length) {
                     this.selectedIndex = 0;
                 }
 
-                while (!this.canSelectCurWorldType())
-                {
+                while (!this.canSelectCurWorldType()) {
                     ++this.selectedIndex;
 
-                    if (this.selectedIndex >= WorldType.WORLD_TYPES.length)
-                    {
+                    if (this.selectedIndex >= WorldType.WORLD_TYPES.length) {
                         this.selectedIndex = 0;
                     }
                 }
@@ -305,50 +250,38 @@
                 this.chunkProviderSettingsJson = "";
                 this.updateDisplayState();
                 this.showMoreWorldOptions(this.inMoreWorldOptionsDisplay);
-            }
-            else if (button.id == 6)
-            {
+            } else if (button.id == 6) {
                 this.allowCheatsWasSetByUser = true;
                 this.allowCheats = !this.allowCheats;
                 this.updateDisplayState();
-            }
-            else if (button.id == 8)
-            {
+            } else if (button.id == 8) {
                 WorldType.WORLD_TYPES[this.selectedIndex].onCustomizeButton(mc, this);
             }
         }
     }
 
-    private boolean canSelectCurWorldType()
-    {
+    private boolean canSelectCurWorldType() {
         WorldType worldtype = WorldType.WORLD_TYPES[this.selectedIndex];
 
-        if (worldtype != null && worldtype.canBeCreated())
-        {
+        if (worldtype != null && worldtype.canBeCreated()) {
             return worldtype == WorldType.DEBUG_ALL_BLOCK_STATES ? isShiftKeyDown() : true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    private void toggleMoreWorldOptions()
-    {
+    private void toggleMoreWorldOptions() {
         this.showMoreWorldOptions(!this.inMoreWorldOptionsDisplay);
     }
 
-    private void showMoreWorldOptions(boolean toggle)
-    {
+    private void showMoreWorldOptions(boolean toggle) {
         this.inMoreWorldOptionsDisplay = toggle;
 
-        if (WorldType.WORLD_TYPES[this.selectedIndex] == WorldType.DEBUG_ALL_BLOCK_STATES)
-        {
+        if (WorldType.WORLD_TYPES[this.selectedIndex] == WorldType.DEBUG_ALL_BLOCK_STATES) {
             this.btnGameMode.visible = !this.inMoreWorldOptionsDisplay;
             this.btnGameMode.enabled = false;
 
-            if (this.savedGameMode == null)
-            {
+            if (this.savedGameMode == null) {
                 this.savedGameMode = this.gameMode;
             }
 
@@ -358,14 +291,11 @@
             this.btnMapType.visible = this.inMoreWorldOptionsDisplay;
             this.btnAllowCommands.visible = false;
             this.btnCustomizeType.visible = false;
-        }
-        else
-        {
+        } else {
             this.btnGameMode.visible = !this.inMoreWorldOptionsDisplay;
             this.btnGameMode.enabled = true;
 
-            if (this.savedGameMode != null)
-            {
+            if (this.savedGameMode != null) {
                 this.gameMode = this.savedGameMode;
                 this.savedGameMode = null;
             }
@@ -379,31 +309,23 @@
 
         this.updateDisplayState();
 
-        if (this.inMoreWorldOptionsDisplay)
-        {
+        if (this.inMoreWorldOptionsDisplay) {
             this.btnMoreOptions.displayString = I18n.format("gui.done");
-        }
-        else
-        {
+        } else {
             this.btnMoreOptions.displayString = I18n.format("selectWorld.moreWorldOptions");
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
-        if (this.worldNameField.isFocused() && !this.inMoreWorldOptionsDisplay)
-        {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
+        if (this.worldNameField.isFocused() && !this.inMoreWorldOptionsDisplay) {
             this.worldNameField.textboxKeyTyped(typedChar, keyCode);
             this.worldName = this.worldNameField.getText();
-        }
-        else if (this.worldSeedField.isFocused() && this.inMoreWorldOptionsDisplay)
-        {
+        } else if (this.worldSeedField.isFocused() && this.inMoreWorldOptionsDisplay) {
             this.worldSeedField.textboxKeyTyped(typedChar, keyCode);
             this.worldSeed = this.worldSeedField.getText();
         }
 
-        if (keyCode == 28 || keyCode == 156)
-        {
+        if (keyCode == 28 || keyCode == 156) {
             this.actionPerformed(this.buttonList.get(0));
         }
 
@@ -411,49 +333,38 @@
         this.calcSaveDirName();
     }
 
-    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
-    {
+    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
         super.mouseClicked(mouseX, mouseY, mouseButton);
 
-        if (this.inMoreWorldOptionsDisplay)
-        {
+        if (this.inMoreWorldOptionsDisplay) {
             this.worldSeedField.mouseClicked(mouseX, mouseY, mouseButton);
-        }
-        else
-        {
+        } else {
             this.worldNameField.mouseClicked(mouseX, mouseY, mouseButton);
         }
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.drawDefaultBackground();
         this.drawCenteredString(this.fontRenderer, I18n.format("selectWorld.create"), this.width / 2, 20, -1);
 
-        if (this.inMoreWorldOptionsDisplay)
-        {
+        if (this.inMoreWorldOptionsDisplay) {
             this.drawString(this.fontRenderer, I18n.format("selectWorld.enterSeed"), this.width / 2 - 100, 47, -6250336);
             this.drawString(this.fontRenderer, I18n.format("selectWorld.seedInfo"), this.width / 2 - 100, 85, -6250336);
 
-            if (this.btnMapFeatures.visible)
-            {
+            if (this.btnMapFeatures.visible) {
                 this.drawString(this.fontRenderer, I18n.format("selectWorld.mapFeatures.info"), this.width / 2 - 150, 122, -6250336);
             }
 
-            if (this.btnAllowCommands.visible)
-            {
+            if (this.btnAllowCommands.visible) {
                 this.drawString(this.fontRenderer, I18n.format("selectWorld.allowCommands.info"), this.width / 2 - 150, 172, -6250336);
             }
 
             this.worldSeedField.drawTextBox();
 
-            if (WorldType.WORLD_TYPES[this.selectedIndex].hasInfoNotice())
-            {
+            if (WorldType.WORLD_TYPES[this.selectedIndex].hasInfoNotice()) {
                 this.fontRenderer.drawSplitString(I18n.format(WorldType.WORLD_TYPES[this.selectedIndex].getInfoTranslationKey()), this.btnMapType.x + 2, this.btnMapType.y + 22, this.btnMapType.getButtonWidth(), 10526880);
             }
-        }
-        else
-        {
+        } else {
             this.drawString(this.fontRenderer, I18n.format("selectWorld.enterName"), this.width / 2 - 100, 47, -6250336);
             this.drawString(this.fontRenderer, I18n.format("selectWorld.resultFolder") + " " + this.saveDirName, this.width / 2 - 100, 85, -6250336);
             this.worldNameField.drawTextBox();
@@ -464,8 +375,7 @@
         super.drawScreen(mouseX, mouseY, partialTicks);
     }
 
-    public void recreateFromExistingWorld(WorldInfo original)
-    {
+    public void recreateFromExistingWorld(WorldInfo original) {
         this.worldName = I18n.format("selectWorld.newWorld.copyOf", original.getWorldName());
         this.worldSeed = original.getSeed() + "";
         this.selectedIndex = original.getTerrainType().getId();
@@ -473,16 +383,11 @@
         this.generateStructuresEnabled = original.isMapFeaturesEnabled();
         this.allowCheats = original.areCommandsAllowed();
 
-        if (original.isHardcoreModeEnabled())
-        {
+        if (original.isHardcoreModeEnabled()) {
             this.gameMode = "hardcore";
-        }
-        else if (original.getGameType().isSurvivalOrAdventure())
-        {
+        } else if (original.getGameType().isSurvivalOrAdventure()) {
             this.gameMode = "survival";
-        }
-        else if (original.getGameType().isCreative())
-        {
+        } else if (original.getGameType().isCreative()) {
             this.gameMode = "creative";
         }
     }
