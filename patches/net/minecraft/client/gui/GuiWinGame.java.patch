--- ../src-base/minecraft/net/minecraft/client/gui/GuiWinGame.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiWinGame.java
@@ -1,14 +1,6 @@
 package net.minecraft.client.gui;
 
 import com.google.common.collect.Lists;
-import java.io.BufferedReader;
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.nio.charset.StandardCharsets;
-import java.util.List;
-import java.util.Random;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
@@ -22,9 +14,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.io.*;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class GuiWinGame extends GuiScreen
-{
+public class GuiWinGame extends GuiScreen {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ResourceLocation MINECRAFT_LOGO = new ResourceLocation("textures/gui/title/minecraft.png");
     private static final ResourceLocation field_194401_g = new ResourceLocation("textures/gui/title/edition.png");
@@ -36,75 +32,61 @@
     private int totalScrollLength;
     private float scrollSpeed = 0.5F;
 
-    public GuiWinGame(boolean poemIn, Runnable onFinishedIn)
-    {
+    public GuiWinGame(boolean poemIn, Runnable onFinishedIn) {
         this.poem = poemIn;
         this.onFinished = onFinishedIn;
 
-        if (!poemIn)
-        {
+        if (!poemIn) {
             this.scrollSpeed = 0.75F;
         }
     }
 
-    public void updateScreen()
-    {
+    public void updateScreen() {
         this.mc.getMusicTicker().update();
         this.mc.getSoundHandler().update();
-        float f = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
+        float f = (float) (this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
 
-        if (this.time > f)
-        {
+        if (this.time > f) {
             this.sendRespawnPacket();
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
-        if (keyCode == 1)
-        {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
+        if (keyCode == 1) {
             this.sendRespawnPacket();
         }
     }
 
-    private void sendRespawnPacket()
-    {
+    private void sendRespawnPacket() {
         this.onFinished.run();
-        this.mc.displayGuiScreen((GuiScreen)null);
+        this.mc.displayGuiScreen((GuiScreen) null);
     }
 
-    public boolean doesGuiPauseGame()
-    {
+    public boolean doesGuiPauseGame() {
         return true;
     }
 
-    public void initGui()
-    {
-        if (this.lines == null)
-        {
+    public void initGui() {
+        if (this.lines == null) {
             this.lines = Lists.<String>newArrayList();
             IResource iresource = null;
 
-            try
-            {
+            try {
                 String s = "" + TextFormatting.WHITE + TextFormatting.OBFUSCATED + TextFormatting.GREEN + TextFormatting.AQUA;
                 int i = 274;
 
-                if (this.poem)
-                {
+                if (this.poem) {
                     iresource = this.mc.getResourceManager().getResource(new ResourceLocation("texts/end.txt"));
                     InputStream inputstream = iresource.getInputStream();
                     BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8));
                     Random random = new Random(8124371L);
                     String s1;
 
-                    while ((s1 = bufferedreader.readLine()) != null)
-                    {
+                    while ((s1 = bufferedreader.readLine()) != null) {
                         String s2;
                         String s3;
 
-                        for (s1 = s1.replaceAll("PLAYERNAME", this.mc.getSession().getUsername()); s1.contains(s); s1 = s2 + TextFormatting.WHITE + TextFormatting.OBFUSCATED + "XXXXXXXX".substring(0, random.nextInt(4) + 3) + s3)
-                        {
+                        for (s1 = s1.replaceAll("PLAYERNAME", this.mc.getSession().getUsername()); s1.contains(s); s1 = s2 + TextFormatting.WHITE + TextFormatting.OBFUSCATED + "XXXXXXXX".substring(0, random.nextInt(4) + 3) + s3) {
                             int j = s1.indexOf(s);
                             s2 = s1.substring(0, j);
                             s3 = s1.substring(j + s.length());
@@ -116,8 +98,7 @@
 
                     inputstream.close();
 
-                    for (int k = 0; k < 8; ++k)
-                    {
+                    for (int k = 0; k < 8; ++k) {
                         this.lines.add("");
                     }
                 }
@@ -126,8 +107,7 @@
                 BufferedReader bufferedreader1 = new BufferedReader(new InputStreamReader(inputstream1, StandardCharsets.UTF_8));
                 String s4;
 
-                while ((s4 = bufferedreader1.readLine()) != null)
-                {
+                while ((s4 = bufferedreader1.readLine()) != null) {
                     s4 = s4.replaceAll("PLAYERNAME", this.mc.getSession().getUsername());
                     s4 = s4.replaceAll("\t", "    ");
                     this.lines.addAll(this.mc.fontRenderer.listFormattedStringToWidth(s4, 274));
@@ -136,53 +116,45 @@
 
                 inputstream1.close();
                 this.totalScrollLength = this.lines.size() * 12;
+            } catch (Exception exception) {
+                LOGGER.error("Couldn't load credits", (Throwable) exception);
+            } finally {
+                IOUtils.closeQuietly((Closeable) iresource);
             }
-            catch (Exception exception)
-            {
-                LOGGER.error("Couldn't load credits", (Throwable)exception);
-            }
-            finally
-            {
-                IOUtils.closeQuietly((Closeable)iresource);
-            }
         }
     }
 
-    private void drawWinGameScreen(int p_146575_1_, int p_146575_2_, float p_146575_3_)
-    {
+    private void drawWinGameScreen(int p_146575_1_, int p_146575_2_, float p_146575_3_) {
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
         int i = this.width;
         float f = -this.time * 0.5F * this.scrollSpeed;
-        float f1 = (float)this.height - this.time * 0.5F * this.scrollSpeed;
+        float f1 = (float) this.height - this.time * 0.5F * this.scrollSpeed;
         float f2 = 0.015625F;
         float f3 = this.time * 0.02F;
-        float f4 = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
+        float f4 = (float) (this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
         float f5 = (f4 - 20.0F - this.time) * 0.005F;
 
-        if (f5 < f3)
-        {
+        if (f5 < f3) {
             f3 = f5;
         }
 
-        if (f3 > 1.0F)
-        {
+        if (f3 > 1.0F) {
             f3 = 1.0F;
         }
 
         f3 = f3 * f3;
         f3 = f3 * 96.0F / 255.0F;
-        bufferbuilder.pos(0.0D, (double)this.height, (double)this.zLevel).tex(0.0D, (double)(f * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
-        bufferbuilder.pos((double)i, (double)this.height, (double)this.zLevel).tex((double)((float)i * 0.015625F), (double)(f * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
-        bufferbuilder.pos((double)i, 0.0D, (double)this.zLevel).tex((double)((float)i * 0.015625F), (double)(f1 * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
-        bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex(0.0D, (double)(f1 * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
+        bufferbuilder.pos(0.0D, (double) this.height, (double) this.zLevel).tex(0.0D, (double) (f * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
+        bufferbuilder.pos((double) i, (double) this.height, (double) this.zLevel).tex((double) ((float) i * 0.015625F), (double) (f * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
+        bufferbuilder.pos((double) i, 0.0D, (double) this.zLevel).tex((double) ((float) i * 0.015625F), (double) (f1 * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, (double) this.zLevel).tex(0.0D, (double) (f1 * 0.015625F)).color(f3, f3, f3, 1.0F).endVertex();
         tessellator.draw();
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.drawWinGameScreen(mouseX, mouseY, partialTicks);
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
@@ -203,31 +175,24 @@
         GlStateManager.disableAlpha();
         int l = k + 100;
 
-        for (int i1 = 0; i1 < this.lines.size(); ++i1)
-        {
-            if (i1 == this.lines.size() - 1)
-            {
-                float f1 = (float)l + f - (float)(this.height / 2 - 6);
+        for (int i1 = 0; i1 < this.lines.size(); ++i1) {
+            if (i1 == this.lines.size() - 1) {
+                float f1 = (float) l + f - (float) (this.height / 2 - 6);
 
-                if (f1 < 0.0F)
-                {
+                if (f1 < 0.0F) {
                     GlStateManager.translate(0.0F, -f1, 0.0F);
                 }
             }
 
-            if ((float)l + f + 12.0F + 8.0F > 0.0F && (float)l + f < (float)this.height)
-            {
+            if ((float) l + f + 12.0F + 8.0F > 0.0F && (float) l + f < (float) this.height) {
                 String s = this.lines.get(i1);
 
-                if (s.startsWith("[C]"))
-                {
-                    this.fontRenderer.drawStringWithShadow(s.substring(3), (float)(j + (274 - this.fontRenderer.getStringWidth(s.substring(3))) / 2), (float)l, 16777215);
+                if (s.startsWith("[C]")) {
+                    this.fontRenderer.drawStringWithShadow(s.substring(3), (float) (j + (274 - this.fontRenderer.getStringWidth(s.substring(3))) / 2), (float) l, 16777215);
+                } else {
+                    this.fontRenderer.fontRandom.setSeed((long) ((float) ((long) i1 * 4238972211L) + this.time / 4.0F));
+                    this.fontRenderer.drawStringWithShadow(s, (float) j, (float) l, 16777215);
                 }
-                else
-                {
-                    this.fontRenderer.fontRandom.setSeed((long)((float)((long)i1 * 4238972211L) + this.time / 4.0F));
-                    this.fontRenderer.drawStringWithShadow(s, (float)j, (float)l, 16777215);
-                }
             }
 
             l += 12;
@@ -240,10 +205,10 @@
         int j1 = this.width;
         int k1 = this.height;
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        bufferbuilder.pos(0.0D, (double)k1, (double)this.zLevel).tex(0.0D, 1.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-        bufferbuilder.pos((double)j1, (double)k1, (double)this.zLevel).tex(1.0D, 1.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-        bufferbuilder.pos((double)j1, 0.0D, (double)this.zLevel).tex(1.0D, 0.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
-        bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex(0.0D, 0.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+        bufferbuilder.pos(0.0D, (double) k1, (double) this.zLevel).tex(0.0D, 1.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+        bufferbuilder.pos((double) j1, (double) k1, (double) this.zLevel).tex(1.0D, 1.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+        bufferbuilder.pos((double) j1, 0.0D, (double) this.zLevel).tex(1.0D, 0.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, (double) this.zLevel).tex(0.0D, 0.0D).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
         tessellator.draw();
         GlStateManager.disableBlend();
         super.drawScreen(mouseX, mouseY, partialTicks);
