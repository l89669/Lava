--- ../src-base/minecraft/net/minecraft/client/gui/GuiOverlayDebug.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiOverlayDebug.java
@@ -3,8 +3,6 @@
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.UnmodifiableIterator;
-import java.util.List;
-import java.util.Map.Entry;
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.IBlockState;
@@ -28,47 +26,43 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.lwjgl.opengl.Display;
 
+import java.util.List;
+import java.util.Map.Entry;
+
 @SideOnly(Side.CLIENT)
-public class GuiOverlayDebug extends Gui
-{
+public class GuiOverlayDebug extends Gui {
     private final Minecraft mc;
     private final FontRenderer fontRenderer;
 
-    public GuiOverlayDebug(Minecraft mc)
-    {
+    public GuiOverlayDebug(Minecraft mc) {
         this.mc = mc;
         this.fontRenderer = mc.fontRenderer;
     }
 
-    public void renderDebugInfo(ScaledResolution scaledResolutionIn)
-    {
+    public void renderDebugInfo(ScaledResolution scaledResolutionIn) {
         this.mc.mcProfiler.startSection("debug");
         GlStateManager.pushMatrix();
         this.renderDebugInfoLeft();
         this.renderDebugInfoRight(scaledResolutionIn);
         GlStateManager.popMatrix();
 
-        if (this.mc.gameSettings.showLagometer)
-        {
+        if (this.mc.gameSettings.showLagometer) {
             this.renderLagometer();
         }
 
         this.mc.mcProfiler.endSection();
     }
 
-    protected void renderDebugInfoLeft()
-    {
+    protected void renderDebugInfoLeft() {
         List<String> list = this.call();
         list.add("");
         list.add("Debug: Pie [shift]: " + (this.mc.gameSettings.showDebugProfilerChart ? "visible" : "hidden") + " FPS [alt]: " + (this.mc.gameSettings.showLagometer ? "visible" : "hidden"));
         list.add("For help: press F3 + Q");
 
-        for (int i = 0; i < list.size(); ++i)
-        {
+        for (int i = 0; i < list.size(); ++i) {
             String s = list.get(i);
 
-            if (!Strings.isNullOrEmpty(s))
-            {
+            if (!Strings.isNullOrEmpty(s)) {
                 int j = this.fontRenderer.FONT_HEIGHT;
                 int k = this.fontRenderer.getStringWidth(s);
                 int l = 2;
@@ -79,16 +73,13 @@
         }
     }
 
-    protected void renderDebugInfoRight(ScaledResolution scaledRes)
-    {
+    protected void renderDebugInfoRight(ScaledResolution scaledRes) {
         List<String> list = this.getDebugInfoRight();
 
-        for (int i = 0; i < list.size(); ++i)
-        {
+        for (int i = 0; i < list.size(); ++i) {
             String s = list.get(i);
 
-            if (!Strings.isNullOrEmpty(s))
-            {
+            if (!Strings.isNullOrEmpty(s)) {
                 int j = this.fontRenderer.FONT_HEIGHT;
                 int k = this.fontRenderer.getStringWidth(s);
                 int l = scaledRes.getScaledWidth() - 2 - k;
@@ -100,22 +91,17 @@
     }
 
     @SuppressWarnings("incomplete-switch")
-    protected List<String> call()
-    {
+    protected List<String> call() {
         BlockPos blockpos = new BlockPos(this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ);
 
-        if (this.mc.isReducedDebug())
-        {
+        if (this.mc.isReducedDebug()) {
             return Lists.newArrayList("Minecraft 1.12.2 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("Chunk-relative: %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15));
-        }
-        else
-        {
+        } else {
             Entity entity = this.mc.getRenderViewEntity();
             EnumFacing enumfacing = entity.getHorizontalFacing();
             String s = "Invalid";
 
-            switch (enumfacing)
-            {
+            switch (enumfacing) {
                 case NORTH:
                     s = "Towards negative Z";
                     break;
@@ -131,48 +117,37 @@
 
             List<String> list = Lists.newArrayList("Minecraft 1.12.2 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType()) + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ), String.format("Block: %d %d %d", blockpos.getX(), blockpos.getY(), blockpos.getZ()), String.format("Chunk: %d %d %d in %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15, blockpos.getX() >> 4, blockpos.getY() >> 4, blockpos.getZ() >> 4), String.format("Facing: %s (%s) (%.1f / %.1f)", enumfacing, s, MathHelper.wrapDegrees(entity.rotationYaw), MathHelper.wrapDegrees(entity.rotationPitch)));
 
-            if (this.mc.world != null)
-            {
+            if (this.mc.world != null) {
                 Chunk chunk = this.mc.world.getChunkFromBlockCoords(blockpos);
 
-                if (this.mc.world.isBlockLoaded(blockpos) && blockpos.getY() >= 0 && blockpos.getY() < 256)
-                {
-                    if (!chunk.isEmpty())
-                    {
+                if (this.mc.world.isBlockLoaded(blockpos) && blockpos.getY() >= 0 && blockpos.getY() < 256) {
+                    if (!chunk.isEmpty()) {
                         list.add("Biome: " + chunk.getBiome(blockpos, this.mc.world.getBiomeProvider()).getBiomeName());
                         list.add("Light: " + chunk.getLightSubtracted(blockpos, 0) + " (" + chunk.getLightFor(EnumSkyBlock.SKY, blockpos) + " sky, " + chunk.getLightFor(EnumSkyBlock.BLOCK, blockpos) + " block)");
                         DifficultyInstance difficultyinstance = this.mc.world.getDifficultyForLocation(blockpos);
 
-                        if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
-                        {
+                        if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null) {
                             EntityPlayerMP entityplayermp = this.mc.getIntegratedServer().getPlayerList().getPlayerByUUID(this.mc.player.getUniqueID());
 
-                            if (entityplayermp != null)
-                            {
+                            if (entityplayermp != null) {
                                 difficultyinstance = entityplayermp.world.getDifficultyForLocation(new BlockPos(entityplayermp));
                             }
                         }
 
                         list.add(String.format("Local Difficulty: %.2f // %.2f (Day %d)", difficultyinstance.getAdditionalDifficulty(), difficultyinstance.getClampedAdditionalDifficulty(), this.mc.world.getWorldTime() / 24000L));
-                    }
-                    else
-                    {
+                    } else {
                         list.add("Waiting for chunk...");
                     }
-                }
-                else
-                {
+                } else {
                     list.add("Outside of world...");
                 }
             }
 
-            if (this.mc.entityRenderer != null && this.mc.entityRenderer.isShaderActive())
-            {
+            if (this.mc.entityRenderer != null && this.mc.entityRenderer.isShaderActive()) {
                 list.add("Shader: " + this.mc.entityRenderer.getShaderGroup().getShaderGroupName());
             }
 
-            if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK && this.mc.objectMouseOver.getBlockPos() != null)
-            {
+            if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK && this.mc.objectMouseOver.getBlockPos() != null) {
                 BlockPos blockpos1 = this.mc.objectMouseOver.getBlockPos();
                 list.add(String.format("Looking at: %d %d %d", blockpos1.getX(), blockpos1.getY(), blockpos1.getZ()));
             }
@@ -181,8 +156,7 @@
         }
     }
 
-    protected <T extends Comparable<T>> List<String> getDebugInfoRight()
-    {
+    protected <T extends Comparable<T>> List<String> getDebugInfoRight() {
         long i = Runtime.getRuntime().maxMemory();
         long j = Runtime.getRuntime().totalMemory();
         long k = Runtime.getRuntime().freeMemory();
@@ -192,19 +166,14 @@
         list.add("");
         list.addAll(net.minecraftforge.fml.common.FMLCommonHandler.instance().getBrandings(false));
 
-        if (this.mc.isReducedDebug())
-        {
+        if (this.mc.isReducedDebug()) {
             return list;
-        }
-        else
-        {
-            if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK && this.mc.objectMouseOver.getBlockPos() != null)
-            {
+        } else {
+            if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK && this.mc.objectMouseOver.getBlockPos() != null) {
                 BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
                 IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
 
-                if (this.mc.world.getWorldType() != WorldType.DEBUG_ALL_BLOCK_STATES)
-                {
+                if (this.mc.world.getWorldType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
                     iblockstate = iblockstate.getActualState(this.mc.world, blockpos);
                 }
 
@@ -213,19 +182,15 @@
                 IProperty<T> iproperty;
                 String s;
 
-                for (UnmodifiableIterator unmodifiableiterator = iblockstate.getProperties().entrySet().iterator(); unmodifiableiterator.hasNext(); list.add(iproperty.getName() + ": " + s))
-                {
-                    Entry < IProperty<?>, Comparable<? >> entry = (Entry)unmodifiableiterator.next();
-                    iproperty = (IProperty)entry.getKey();
-                    T t = (T)entry.getValue();
+                for (UnmodifiableIterator unmodifiableiterator = iblockstate.getProperties().entrySet().iterator(); unmodifiableiterator.hasNext(); list.add(iproperty.getName() + ": " + s)) {
+                    Entry<IProperty<?>, Comparable<?>> entry = (Entry) unmodifiableiterator.next();
+                    iproperty = (IProperty) entry.getKey();
+                    T t = (T) entry.getValue();
                     s = iproperty.getName(t);
 
-                    if (Boolean.TRUE.equals(t))
-                    {
+                    if (Boolean.TRUE.equals(t)) {
                         s = TextFormatting.GREEN + s;
-                    }
-                    else if (Boolean.FALSE.equals(t))
-                    {
+                    } else if (Boolean.FALSE.equals(t)) {
                         s = TextFormatting.RED + s;
                     }
                 }
@@ -235,8 +200,7 @@
         }
     }
 
-    public void renderLagometer()
-    {
+    public void renderLagometer() {
         GlStateManager.disableDepth();
         FrameTimer frametimer = this.mc.getFrameTimer();
         int i = frametimer.getLastIndex();
@@ -247,8 +211,7 @@
         int l = 0;
         drawRect(0, scaledresolution.getScaledHeight() - 60, 240, scaledresolution.getScaledHeight(), -1873784752);
 
-        while (k != j)
-        {
+        while (k != j) {
             int i1 = frametimer.getLagometerValue(along[k], 30);
             int j1 = this.getFrameColor(MathHelper.clamp(i1, 0, 60), 0, 30, 60);
             this.drawVerticalLine(l, scaledresolution.getScaledHeight(), scaledresolution.getScaledHeight() - i1, j1);
@@ -266,21 +229,18 @@
         this.drawVerticalLine(0, scaledresolution.getScaledHeight() - 60, scaledresolution.getScaledHeight(), -1);
         this.drawVerticalLine(239, scaledresolution.getScaledHeight() - 60, scaledresolution.getScaledHeight(), -1);
 
-        if (this.mc.gameSettings.limitFramerate <= 120)
-        {
+        if (this.mc.gameSettings.limitFramerate <= 120) {
             this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 60 + this.mc.gameSettings.limitFramerate / 2, -16711681);
         }
 
         GlStateManager.enableDepth();
     }
 
-    private int getFrameColor(int p_181552_1_, int p_181552_2_, int p_181552_3_, int p_181552_4_)
-    {
-        return p_181552_1_ < p_181552_3_ ? this.blendColors(-16711936, -256, (float)p_181552_1_ / (float)p_181552_3_) : this.blendColors(-256, -65536, (float)(p_181552_1_ - p_181552_3_) / (float)(p_181552_4_ - p_181552_3_));
+    private int getFrameColor(int p_181552_1_, int p_181552_2_, int p_181552_3_, int p_181552_4_) {
+        return p_181552_1_ < p_181552_3_ ? this.blendColors(-16711936, -256, (float) p_181552_1_ / (float) p_181552_3_) : this.blendColors(-256, -65536, (float) (p_181552_1_ - p_181552_3_) / (float) (p_181552_4_ - p_181552_3_));
     }
 
-    private int blendColors(int p_181553_1_, int p_181553_2_, float p_181553_3_)
-    {
+    private int blendColors(int p_181553_1_, int p_181553_2_, float p_181553_3_) {
         int i = p_181553_1_ >> 24 & 255;
         int j = p_181553_1_ >> 16 & 255;
         int k = p_181553_1_ >> 8 & 255;
@@ -289,15 +249,14 @@
         int j1 = p_181553_2_ >> 16 & 255;
         int k1 = p_181553_2_ >> 8 & 255;
         int l1 = p_181553_2_ & 255;
-        int i2 = MathHelper.clamp((int)((float)i + (float)(i1 - i) * p_181553_3_), 0, 255);
-        int j2 = MathHelper.clamp((int)((float)j + (float)(j1 - j) * p_181553_3_), 0, 255);
-        int k2 = MathHelper.clamp((int)((float)k + (float)(k1 - k) * p_181553_3_), 0, 255);
-        int l2 = MathHelper.clamp((int)((float)l + (float)(l1 - l) * p_181553_3_), 0, 255);
+        int i2 = MathHelper.clamp((int) ((float) i + (float) (i1 - i) * p_181553_3_), 0, 255);
+        int j2 = MathHelper.clamp((int) ((float) j + (float) (j1 - j) * p_181553_3_), 0, 255);
+        int k2 = MathHelper.clamp((int) ((float) k + (float) (k1 - k) * p_181553_3_), 0, 255);
+        int l2 = MathHelper.clamp((int) ((float) l + (float) (l1 - l) * p_181553_3_), 0, 255);
         return i2 << 24 | j2 << 16 | k2 << 8 | l2;
     }
 
-    private static long bytesToMb(long bytes)
-    {
+    private static long bytesToMb(long bytes) {
         return bytes / 1024L / 1024L;
     }
 }
