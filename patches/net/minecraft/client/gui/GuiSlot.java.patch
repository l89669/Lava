--- ../src-base/minecraft/net/minecraft/client/gui/GuiSlot.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiSlot.java
@@ -11,8 +11,7 @@
 import org.lwjgl.input.Mouse;
 
 @SideOnly(Side.CLIENT)
-public abstract class GuiSlot
-{
+public abstract class GuiSlot {
     protected final Minecraft mc;
     public int width;
     public int height;
@@ -37,8 +36,7 @@
     public int headerPadding;
     private boolean enabled = true;
 
-    public GuiSlot(Minecraft mcIn, int width, int height, int topIn, int bottomIn, int slotHeightIn)
-    {
+    public GuiSlot(Minecraft mcIn, int width, int height, int topIn, int bottomIn, int slotHeightIn) {
         this.mc = mcIn;
         this.width = width;
         this.height = height;
@@ -49,8 +47,7 @@
         this.right = width;
     }
 
-    public void setDimensions(int widthIn, int heightIn, int topIn, int bottomIn)
-    {
+    public void setDimensions(int widthIn, int heightIn, int topIn, int bottomIn) {
         this.width = widthIn;
         this.height = heightIn;
         this.top = topIn;
@@ -59,18 +56,15 @@
         this.right = widthIn;
     }
 
-    public void setShowSelectionBox(boolean showSelectionBoxIn)
-    {
+    public void setShowSelectionBox(boolean showSelectionBoxIn) {
         this.showSelectionBox = showSelectionBoxIn;
     }
 
-    protected void setHasListHeader(boolean hasListHeaderIn, int headerPaddingIn)
-    {
+    protected void setHasListHeader(boolean hasListHeaderIn, int headerPaddingIn) {
         this.hasListHeader = hasListHeaderIn;
         this.headerPadding = headerPaddingIn;
 
-        if (!hasListHeaderIn)
-        {
+        if (!hasListHeaderIn) {
             this.headerPadding = 0;
         }
     }
@@ -81,96 +75,77 @@
 
     protected abstract boolean isSelected(int slotIndex);
 
-    protected int getContentHeight()
-    {
+    protected int getContentHeight() {
         return this.getSize() * this.slotHeight + this.headerPadding;
     }
 
     protected abstract void drawBackground();
 
-    protected void updateItemPos(int entryID, int insideLeft, int yPos, float partialTicks)
-    {
+    protected void updateItemPos(int entryID, int insideLeft, int yPos, float partialTicks) {
     }
 
     protected abstract void drawSlot(int slotIndex, int xPos, int yPos, int heightIn, int mouseXIn, int mouseYIn, float partialTicks);
 
-    protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn)
-    {
+    protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn) {
     }
 
-    protected void clickedHeader(int p_148132_1_, int p_148132_2_)
-    {
+    protected void clickedHeader(int p_148132_1_, int p_148132_2_) {
     }
 
-    protected void renderDecorations(int mouseXIn, int mouseYIn)
-    {
+    protected void renderDecorations(int mouseXIn, int mouseYIn) {
     }
 
-    public int getSlotIndexFromScreenCoords(int posX, int posY)
-    {
+    public int getSlotIndexFromScreenCoords(int posX, int posY) {
         int i = this.left + this.width / 2 - this.getListWidth() / 2;
         int j = this.left + this.width / 2 + this.getListWidth() / 2;
-        int k = posY - this.top - this.headerPadding + (int)this.amountScrolled - 4;
+        int k = posY - this.top - this.headerPadding + (int) this.amountScrolled - 4;
         int l = k / this.slotHeight;
         return posX < this.getScrollBarX() && posX >= i && posX <= j && l >= 0 && k >= 0 && l < this.getSize() ? l : -1;
     }
 
-    public void registerScrollButtons(int scrollUpButtonIDIn, int scrollDownButtonIDIn)
-    {
+    public void registerScrollButtons(int scrollUpButtonIDIn, int scrollDownButtonIDIn) {
         this.scrollUpButtonID = scrollUpButtonIDIn;
         this.scrollDownButtonID = scrollDownButtonIDIn;
     }
 
-    protected void bindAmountScrolled()
-    {
-        this.amountScrolled = MathHelper.clamp(this.amountScrolled, 0.0F, (float)this.getMaxScroll());
+    protected void bindAmountScrolled() {
+        this.amountScrolled = MathHelper.clamp(this.amountScrolled, 0.0F, (float) this.getMaxScroll());
     }
 
-    public int getMaxScroll()
-    {
+    public int getMaxScroll() {
         return Math.max(0, this.getContentHeight() - (this.bottom - this.top - 4));
     }
 
-    public int getAmountScrolled()
-    {
-        return (int)this.amountScrolled;
+    public int getAmountScrolled() {
+        return (int) this.amountScrolled;
     }
 
-    public boolean isMouseYWithinSlotBounds(int p_148141_1_)
-    {
+    public boolean isMouseYWithinSlotBounds(int p_148141_1_) {
         return p_148141_1_ >= this.top && p_148141_1_ <= this.bottom && this.mouseX >= this.left && this.mouseX <= this.right;
     }
 
-    public void scrollBy(int amount)
-    {
-        this.amountScrolled += (float)amount;
+    public void scrollBy(int amount) {
+        this.amountScrolled += (float) amount;
         this.bindAmountScrolled();
         this.initialClickY = -2;
     }
 
-    public void actionPerformed(GuiButton button)
-    {
-        if (button.enabled)
-        {
-            if (button.id == this.scrollUpButtonID)
-            {
-                this.amountScrolled -= (float)(this.slotHeight * 2 / 3);
+    public void actionPerformed(GuiButton button) {
+        if (button.enabled) {
+            if (button.id == this.scrollUpButtonID) {
+                this.amountScrolled -= (float) (this.slotHeight * 2 / 3);
                 this.initialClickY = -2;
                 this.bindAmountScrolled();
-            }
-            else if (button.id == this.scrollDownButtonID)
-            {
-                this.amountScrolled += (float)(this.slotHeight * 2 / 3);
+            } else if (button.id == this.scrollDownButtonID) {
+                this.amountScrolled += (float) (this.slotHeight * 2 / 3);
                 this.initialClickY = -2;
                 this.bindAmountScrolled();
             }
         }
     }
 
-    public void drawScreen(int mouseXIn, int mouseYIn, float partialTicks)
-    {
-        if (this.visible)
-        {
+    public void drawScreen(int mouseXIn, int mouseYIn, float partialTicks) {
+        if (this.visible) {
             this.mouseX = mouseXIn;
             this.mouseY = mouseYIn;
             this.drawBackground();
@@ -184,10 +159,9 @@
             // Forge: background rendering moved into separate method.
             this.drawContainerBackground(tessellator);
             int k = this.left + this.width / 2 - this.getListWidth() / 2 + 2;
-            int l = this.top + 4 - (int)this.amountScrolled;
+            int l = this.top + 4 - (int) this.amountScrolled;
 
-            if (this.hasListHeader)
-            {
+            if (this.hasListHeader) {
                 this.drawListHeader(k, l, tessellator);
             }
 
@@ -202,47 +176,45 @@
             GlStateManager.disableTexture2D();
             int i1 = 4;
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-            bufferbuilder.pos((double)this.left, (double)(this.top + 4), 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 0).endVertex();
-            bufferbuilder.pos((double)this.right, (double)(this.top + 4), 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 0).endVertex();
-            bufferbuilder.pos((double)this.right, (double)this.top, 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos((double)this.left, (double)this.top, 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos((double) this.left, (double) (this.top + 4), 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) this.right, (double) (this.top + 4), 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) this.right, (double) this.top, 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos((double) this.left, (double) this.top, 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
             tessellator.draw();
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-            bufferbuilder.pos((double)this.left, (double)this.bottom, 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos((double)this.right, (double)this.bottom, 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos((double)this.right, (double)(this.bottom - 4), 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 0).endVertex();
-            bufferbuilder.pos((double)this.left, (double)(this.bottom - 4), 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) this.left, (double) this.bottom, 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos((double) this.right, (double) this.bottom, 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos((double) this.right, (double) (this.bottom - 4), 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) this.left, (double) (this.bottom - 4), 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 0).endVertex();
             tessellator.draw();
             int j1 = this.getMaxScroll();
 
-            if (j1 > 0)
-            {
+            if (j1 > 0) {
                 int k1 = (this.bottom - this.top) * (this.bottom - this.top) / this.getContentHeight();
                 k1 = MathHelper.clamp(k1, 32, this.bottom - this.top - 8);
-                int l1 = (int)this.amountScrolled * (this.bottom - this.top - k1) / j1 + this.top;
+                int l1 = (int) this.amountScrolled * (this.bottom - this.top - k1) / j1 + this.top;
 
-                if (l1 < this.top)
-                {
+                if (l1 < this.top) {
                     l1 = this.top;
                 }
 
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                bufferbuilder.pos((double)i, (double)this.bottom, 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos((double)j, (double)this.bottom, 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos((double)j, (double)this.top, 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos((double)i, (double)this.top, 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) i, (double) this.bottom, 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) j, (double) this.bottom, 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) j, (double) this.top, 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) i, (double) this.top, 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
                 tessellator.draw();
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                bufferbuilder.pos((double)i, (double)(l1 + k1), 0.0D).tex(0.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)j, (double)(l1 + k1), 0.0D).tex(1.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)j, (double)l1, 0.0D).tex(1.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)i, (double)l1, 0.0D).tex(0.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) i, (double) (l1 + k1), 0.0D).tex(0.0D, 1.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) j, (double) (l1 + k1), 0.0D).tex(1.0D, 1.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) j, (double) l1, 0.0D).tex(1.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) i, (double) l1, 0.0D).tex(0.0D, 0.0D).color(128, 128, 128, 255).endVertex();
                 tessellator.draw();
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                bufferbuilder.pos((double)i, (double)(l1 + k1 - 1), 0.0D).tex(0.0D, 1.0D).color(192, 192, 192, 255).endVertex();
-                bufferbuilder.pos((double)(j - 1), (double)(l1 + k1 - 1), 0.0D).tex(1.0D, 1.0D).color(192, 192, 192, 255).endVertex();
-                bufferbuilder.pos((double)(j - 1), (double)l1, 0.0D).tex(1.0D, 0.0D).color(192, 192, 192, 255).endVertex();
-                bufferbuilder.pos((double)i, (double)l1, 0.0D).tex(0.0D, 0.0D).color(192, 192, 192, 255).endVertex();
+                bufferbuilder.pos((double) i, (double) (l1 + k1 - 1), 0.0D).tex(0.0D, 1.0D).color(192, 192, 192, 255).endVertex();
+                bufferbuilder.pos((double) (j - 1), (double) (l1 + k1 - 1), 0.0D).tex(1.0D, 1.0D).color(192, 192, 192, 255).endVertex();
+                bufferbuilder.pos((double) (j - 1), (double) l1, 0.0D).tex(1.0D, 0.0D).color(192, 192, 192, 255).endVertex();
+                bufferbuilder.pos((double) i, (double) l1, 0.0D).tex(0.0D, 0.0D).color(192, 192, 192, 255).endVertex();
                 tessellator.draw();
             }
 
@@ -254,165 +226,129 @@
         }
     }
 
-    public void handleMouseInput()
-    {
-        if (this.isMouseYWithinSlotBounds(this.mouseY))
-        {
-            if (Mouse.getEventButton() == 0 && Mouse.getEventButtonState() && this.mouseY >= this.top && this.mouseY <= this.bottom)
-            {
+    public void handleMouseInput() {
+        if (this.isMouseYWithinSlotBounds(this.mouseY)) {
+            if (Mouse.getEventButton() == 0 && Mouse.getEventButtonState() && this.mouseY >= this.top && this.mouseY <= this.bottom) {
                 int i = (this.width - this.getListWidth()) / 2;
                 int j = (this.width + this.getListWidth()) / 2;
-                int k = this.mouseY - this.top - this.headerPadding + (int)this.amountScrolled - 4;
+                int k = this.mouseY - this.top - this.headerPadding + (int) this.amountScrolled - 4;
                 int l = k / this.slotHeight;
 
-                if (l < this.getSize() && this.mouseX >= i && this.mouseX <= j && l >= 0 && k >= 0)
-                {
+                if (l < this.getSize() && this.mouseX >= i && this.mouseX <= j && l >= 0 && k >= 0) {
                     this.elementClicked(l, false, this.mouseX, this.mouseY);
                     this.selectedElement = l;
+                } else if (this.mouseX >= i && this.mouseX <= j && k < 0) {
+                    this.clickedHeader(this.mouseX - i, this.mouseY - this.top + (int) this.amountScrolled - 4);
                 }
-                else if (this.mouseX >= i && this.mouseX <= j && k < 0)
-                {
-                    this.clickedHeader(this.mouseX - i, this.mouseY - this.top + (int)this.amountScrolled - 4);
-                }
             }
 
-            if (Mouse.isButtonDown(0) && this.getEnabled())
-            {
-                if (this.initialClickY == -1)
-                {
+            if (Mouse.isButtonDown(0) && this.getEnabled()) {
+                if (this.initialClickY == -1) {
                     boolean flag1 = true;
 
-                    if (this.mouseY >= this.top && this.mouseY <= this.bottom)
-                    {
+                    if (this.mouseY >= this.top && this.mouseY <= this.bottom) {
                         int j2 = (this.width - this.getListWidth()) / 2;
                         int k2 = (this.width + this.getListWidth()) / 2;
-                        int l2 = this.mouseY - this.top - this.headerPadding + (int)this.amountScrolled - 4;
+                        int l2 = this.mouseY - this.top - this.headerPadding + (int) this.amountScrolled - 4;
                         int i1 = l2 / this.slotHeight;
 
-                        if (i1 < this.getSize() && this.mouseX >= j2 && this.mouseX <= k2 && i1 >= 0 && l2 >= 0)
-                        {
+                        if (i1 < this.getSize() && this.mouseX >= j2 && this.mouseX <= k2 && i1 >= 0 && l2 >= 0) {
                             boolean flag = i1 == this.selectedElement && Minecraft.getSystemTime() - this.lastClicked < 250L;
                             this.elementClicked(i1, flag, this.mouseX, this.mouseY);
                             this.selectedElement = i1;
                             this.lastClicked = Minecraft.getSystemTime();
-                        }
-                        else if (this.mouseX >= j2 && this.mouseX <= k2 && l2 < 0)
-                        {
-                            this.clickedHeader(this.mouseX - j2, this.mouseY - this.top + (int)this.amountScrolled - 4);
+                        } else if (this.mouseX >= j2 && this.mouseX <= k2 && l2 < 0) {
+                            this.clickedHeader(this.mouseX - j2, this.mouseY - this.top + (int) this.amountScrolled - 4);
                             flag1 = false;
                         }
 
                         int i3 = this.getScrollBarX();
                         int j1 = i3 + 6;
 
-                        if (this.mouseX >= i3 && this.mouseX <= j1)
-                        {
+                        if (this.mouseX >= i3 && this.mouseX <= j1) {
                             this.scrollMultiplier = -1.0F;
                             int k1 = this.getMaxScroll();
 
-                            if (k1 < 1)
-                            {
+                            if (k1 < 1) {
                                 k1 = 1;
                             }
 
-                            int l1 = (int)((float)((this.bottom - this.top) * (this.bottom - this.top)) / (float)this.getContentHeight());
+                            int l1 = (int) ((float) ((this.bottom - this.top) * (this.bottom - this.top)) / (float) this.getContentHeight());
                             l1 = MathHelper.clamp(l1, 32, this.bottom - this.top - 8);
-                            this.scrollMultiplier /= (float)(this.bottom - this.top - l1) / (float)k1;
-                        }
-                        else
-                        {
+                            this.scrollMultiplier /= (float) (this.bottom - this.top - l1) / (float) k1;
+                        } else {
                             this.scrollMultiplier = 1.0F;
                         }
 
-                        if (flag1)
-                        {
+                        if (flag1) {
                             this.initialClickY = this.mouseY;
-                        }
-                        else
-                        {
+                        } else {
                             this.initialClickY = -2;
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.initialClickY = -2;
                     }
-                }
-                else if (this.initialClickY >= 0)
-                {
-                    this.amountScrolled -= (float)(this.mouseY - this.initialClickY) * this.scrollMultiplier;
+                } else if (this.initialClickY >= 0) {
+                    this.amountScrolled -= (float) (this.mouseY - this.initialClickY) * this.scrollMultiplier;
                     this.initialClickY = this.mouseY;
                 }
-            }
-            else
-            {
+            } else {
                 this.initialClickY = -1;
             }
 
             int i2 = Mouse.getEventDWheel();
 
-            if (i2 != 0)
-            {
-                if (i2 > 0)
-                {
+            if (i2 != 0) {
+                if (i2 > 0) {
                     i2 = -1;
-                }
-                else if (i2 < 0)
-                {
+                } else if (i2 < 0) {
                     i2 = 1;
                 }
 
-                this.amountScrolled += (float)(i2 * this.slotHeight / 2);
+                this.amountScrolled += (float) (i2 * this.slotHeight / 2);
             }
         }
     }
 
-    public void setEnabled(boolean enabledIn)
-    {
+    public void setEnabled(boolean enabledIn) {
         this.enabled = enabledIn;
     }
 
-    public boolean getEnabled()
-    {
+    public boolean getEnabled() {
         return this.enabled;
     }
 
-    public int getListWidth()
-    {
+    public int getListWidth() {
         return 220;
     }
 
-    protected void drawSelectionBox(int insideLeft, int insideTop, int mouseXIn, int mouseYIn, float partialTicks)
-    {
+    protected void drawSelectionBox(int insideLeft, int insideTop, int mouseXIn, int mouseYIn, float partialTicks) {
         int i = this.getSize();
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             int k = insideTop + j * this.slotHeight + this.headerPadding;
             int l = this.slotHeight - 4;
 
-            if (k > this.bottom || k + l < this.top)
-            {
+            if (k > this.bottom || k + l < this.top) {
                 this.updateItemPos(j, insideLeft, k, partialTicks);
             }
 
-            if (this.showSelectionBox && this.isSelected(j))
-            {
+            if (this.showSelectionBox && this.isSelected(j)) {
                 int i1 = this.left + (this.width / 2 - this.getListWidth() / 2);
                 int j1 = this.left + this.width / 2 + this.getListWidth() / 2;
                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
                 GlStateManager.disableTexture2D();
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                bufferbuilder.pos((double)i1, (double)(k + l + 2), 0.0D).tex(0.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)j1, (double)(k + l + 2), 0.0D).tex(1.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)j1, (double)(k - 2), 0.0D).tex(1.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)i1, (double)(k - 2), 0.0D).tex(0.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                bufferbuilder.pos((double)(i1 + 1), (double)(k + l + 1), 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos((double)(j1 - 1), (double)(k + l + 1), 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos((double)(j1 - 1), (double)(k - 1), 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos((double)(i1 + 1), (double)(k - 1), 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) i1, (double) (k + l + 2), 0.0D).tex(0.0D, 1.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) j1, (double) (k + l + 2), 0.0D).tex(1.0D, 1.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) j1, (double) (k - 2), 0.0D).tex(1.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) i1, (double) (k - 2), 0.0D).tex(0.0D, 0.0D).color(128, 128, 128, 255).endVertex();
+                bufferbuilder.pos((double) (i1 + 1), (double) (k + l + 1), 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) (j1 - 1), (double) (k + l + 1), 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) (j1 - 1), (double) (k - 1), 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos((double) (i1 + 1), (double) (k - 1), 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
                 tessellator.draw();
                 GlStateManager.enableTexture2D();
             }
@@ -421,48 +357,43 @@
         }
     }
 
-    protected int getScrollBarX()
-    {
+    protected int getScrollBarX() {
         return this.width / 2 + 124;
     }
 
-    protected void overlayBackground(int startY, int endY, int startAlpha, int endAlpha)
-    {
+    protected void overlayBackground(int startY, int endY, int startAlpha, int endAlpha) {
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         float f = 32.0F;
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        bufferbuilder.pos((double)this.left, (double)endY, 0.0D).tex(0.0D, (double)((float)endY / 32.0F)).color(64, 64, 64, endAlpha).endVertex();
-        bufferbuilder.pos((double)(this.left + this.width), (double)endY, 0.0D).tex((double)((float)this.width / 32.0F), (double)((float)endY / 32.0F)).color(64, 64, 64, endAlpha).endVertex();
-        bufferbuilder.pos((double)(this.left + this.width), (double)startY, 0.0D).tex((double)((float)this.width / 32.0F), (double)((float)startY / 32.0F)).color(64, 64, 64, startAlpha).endVertex();
-        bufferbuilder.pos((double)this.left, (double)startY, 0.0D).tex(0.0D, (double)((float)startY / 32.0F)).color(64, 64, 64, startAlpha).endVertex();
+        bufferbuilder.pos((double) this.left, (double) endY, 0.0D).tex(0.0D, (double) ((float) endY / 32.0F)).color(64, 64, 64, endAlpha).endVertex();
+        bufferbuilder.pos((double) (this.left + this.width), (double) endY, 0.0D).tex((double) ((float) this.width / 32.0F), (double) ((float) endY / 32.0F)).color(64, 64, 64, endAlpha).endVertex();
+        bufferbuilder.pos((double) (this.left + this.width), (double) startY, 0.0D).tex((double) ((float) this.width / 32.0F), (double) ((float) startY / 32.0F)).color(64, 64, 64, startAlpha).endVertex();
+        bufferbuilder.pos((double) this.left, (double) startY, 0.0D).tex(0.0D, (double) ((float) startY / 32.0F)).color(64, 64, 64, startAlpha).endVertex();
         tessellator.draw();
     }
 
-    public void setSlotXBoundsFromLeft(int leftIn)
-    {
+    public void setSlotXBoundsFromLeft(int leftIn) {
         this.left = leftIn;
         this.right = leftIn + this.width;
     }
 
-    public int getSlotHeight()
-    {
+    public int getSlotHeight() {
         return this.slotHeight;
     }
 
-    protected void drawContainerBackground(Tessellator tessellator)
-    {
+    protected void drawContainerBackground(Tessellator tessellator) {
         BufferBuilder buffer = tessellator.getBuffer();
         this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         float f = 32.0F;
         buffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        buffer.pos((double)this.left,  (double)this.bottom, 0.0D).tex((double)((float)this.left  / f), (double)((float)(this.bottom + (int)this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
-        buffer.pos((double)this.right, (double)this.bottom, 0.0D).tex((double)((float)this.right / f), (double)((float)(this.bottom + (int)this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
-        buffer.pos((double)this.right, (double)this.top,    0.0D).tex((double)((float)this.right / f), (double)((float)(this.top    + (int)this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
-        buffer.pos((double)this.left,  (double)this.top,    0.0D).tex((double)((float)this.left  / f), (double)((float)(this.top    + (int)this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
+        buffer.pos((double) this.left, (double) this.bottom, 0.0D).tex((double) ((float) this.left / f), (double) ((float) (this.bottom + (int) this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
+        buffer.pos((double) this.right, (double) this.bottom, 0.0D).tex((double) ((float) this.right / f), (double) ((float) (this.bottom + (int) this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
+        buffer.pos((double) this.right, (double) this.top, 0.0D).tex((double) ((float) this.right / f), (double) ((float) (this.top + (int) this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
+        buffer.pos((double) this.left, (double) this.top, 0.0D).tex((double) ((float) this.left / f), (double) ((float) (this.top + (int) this.amountScrolled) / f)).color(32, 32, 32, 255).endVertex();
         tessellator.draw();
     }
 }
