--- ../src-base/minecraft/net/minecraft/client/gui/GuiMultiplayer.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiMultiplayer.java
@@ -2,9 +2,6 @@
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.List;
-import net.minecraft.client.multiplayer.GuiConnecting;
 import net.minecraft.client.multiplayer.ServerData;
 import net.minecraft.client.multiplayer.ServerList;
 import net.minecraft.client.network.LanServerDetector;
@@ -17,9 +14,11 @@
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Keyboard;
 
+import java.io.IOException;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class GuiMultiplayer extends GuiScreen
-{
+public class GuiMultiplayer extends GuiScreen {
     private static final Logger LOGGER = LogManager.getLogger();
     private final ServerPinger oldServerPinger = new ServerPinger();
     private final GuiScreen parentScreen;
@@ -38,37 +37,29 @@
     private LanServerDetector.ThreadLanServerFind lanServerDetector;
     private boolean initialized;
 
-    public GuiMultiplayer(GuiScreen parentScreen)
-    {
+    public GuiMultiplayer(GuiScreen parentScreen) {
         this.parentScreen = parentScreen;
         net.minecraftforge.fml.client.FMLClientHandler.instance().setupServerList();
     }
 
-    public void initGui()
-    {
+    public void initGui() {
         Keyboard.enableRepeatEvents(true);
         this.buttonList.clear();
 
-        if (this.initialized)
-        {
+        if (this.initialized) {
             this.serverListSelector.setDimensions(this.width, this.height, 32, this.height - 64);
-        }
-        else
-        {
+        } else {
             this.initialized = true;
             this.savedServerList = new ServerList(this.mc);
             this.savedServerList.loadServerList();
             this.lanServerList = new LanServerDetector.LanServerList();
 
-            try
-            {
+            try {
                 this.lanServerDetector = new LanServerDetector.ThreadLanServerFind(this.lanServerList);
                 this.lanServerDetector.start();
+            } catch (Exception exception) {
+                LOGGER.warn("Unable to start LAN server detection: {}", (Object) exception.getMessage());
             }
-            catch (Exception exception)
-            {
-                LOGGER.warn("Unable to start LAN server detection: {}", (Object)exception.getMessage());
-            }
 
             this.serverListSelector = new ServerSelectionList(this, this.mc, this.width, this.height, 32, this.height - 64, 36);
             this.serverListSelector.updateOnlineServers(this.savedServerList);
@@ -77,14 +68,12 @@
         this.createButtons();
     }
 
-    public void handleMouseInput() throws IOException
-    {
+    public void handleMouseInput() throws IOException {
         super.handleMouseInput();
         this.serverListSelector.handleMouseInput();
     }
 
-    public void createButtons()
-    {
+    public void createButtons() {
         this.btnEditServer = this.addButton(new GuiButton(7, this.width / 2 - 154, this.height - 28, 70, 20, I18n.format("selectServer.edit")));
         this.btnDeleteServer = this.addButton(new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, I18n.format("selectServer.delete")));
         this.btnSelectServer = this.addButton(new GuiButton(1, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("selectServer.select")));
@@ -95,12 +84,10 @@
         this.selectServer(this.serverListSelector.getSelected());
     }
 
-    public void updateScreen()
-    {
+    public void updateScreen() {
         super.updateScreen();
 
-        if (this.lanServerList.getWasUpdated())
-        {
+        if (this.lanServerList.getWasUpdated()) {
             List<LanServerInfo> list = this.lanServerList.getLanServers();
             this.lanServerList.setWasNotUpdated();
             this.serverListSelector.updateNetworkServers(list);
@@ -109,12 +96,10 @@
         this.oldServerPinger.pingPendingNetworks();
     }
 
-    public void onGuiClosed()
-    {
+    public void onGuiClosed() {
         Keyboard.enableRepeatEvents(false);
 
-        if (this.lanServerDetector != null)
-        {
+        if (this.lanServerDetector != null) {
             this.lanServerDetector.interrupt();
             this.lanServerDetector = null;
         }
@@ -122,18 +107,14 @@
         this.oldServerPinger.clearPendingNetworks();
     }
 
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.enabled) {
             GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
 
-            if (button.id == 2 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
-            {
-                String s4 = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData().serverName;
+            if (button.id == 2 && guilistextended$iguilistentry instanceof ServerListEntryNormal) {
+                String s4 = ((ServerListEntryNormal) guilistextended$iguilistentry).getServerData().serverName;
 
-                if (s4 != null)
-                {
+                if (s4 != null) {
                     this.deletingServer = true;
                     String s = I18n.format("selectServer.deleteQuestion");
                     String s1 = "'" + s4 + "' " + I18n.format("selectServer.deleteWarning");
@@ -142,57 +123,41 @@
                     GuiYesNo guiyesno = new GuiYesNo(this, s, s1, s2, s3, this.serverListSelector.getSelected());
                     this.mc.displayGuiScreen(guiyesno);
                 }
-            }
-            else if (button.id == 1)
-            {
+            } else if (button.id == 1) {
                 this.connectToSelected();
-            }
-            else if (button.id == 4)
-            {
+            } else if (button.id == 4) {
                 this.directConnect = true;
                 this.selectedServer = new ServerData(I18n.format("selectServer.defaultName"), "", false);
                 this.mc.displayGuiScreen(new GuiScreenServerList(this, this.selectedServer));
-            }
-            else if (button.id == 3)
-            {
+            } else if (button.id == 3) {
                 this.addingServer = true;
                 this.selectedServer = new ServerData(I18n.format("selectServer.defaultName"), "", false);
                 this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.selectedServer));
-            }
-            else if (button.id == 7 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
-            {
+            } else if (button.id == 7 && guilistextended$iguilistentry instanceof ServerListEntryNormal) {
                 this.editingServer = true;
-                ServerData serverdata = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData();
+                ServerData serverdata = ((ServerListEntryNormal) guilistextended$iguilistentry).getServerData();
                 this.selectedServer = new ServerData(serverdata.serverName, serverdata.serverIP, false);
                 this.selectedServer.copyFrom(serverdata);
                 this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.selectedServer));
-            }
-            else if (button.id == 0)
-            {
+            } else if (button.id == 0) {
                 this.mc.displayGuiScreen(this.parentScreen);
-            }
-            else if (button.id == 8)
-            {
+            } else if (button.id == 8) {
                 this.refreshServerList();
             }
         }
     }
 
-    private void refreshServerList()
-    {
+    private void refreshServerList() {
         this.mc.displayGuiScreen(new GuiMultiplayer(this.parentScreen));
     }
 
-    public void confirmClicked(boolean result, int id)
-    {
+    public void confirmClicked(boolean result, int id) {
         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
 
-        if (this.deletingServer)
-        {
+        if (this.deletingServer) {
             this.deletingServer = false;
 
-            if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal)
-            {
+            if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal) {
                 this.savedServerList.removeServerData(this.serverListSelector.getSelected());
                 this.savedServerList.saveServerList();
                 this.serverListSelector.setSelectedSlotIndex(-1);
@@ -200,26 +165,18 @@
             }
 
             this.mc.displayGuiScreen(this);
-        }
-        else if (this.directConnect)
-        {
+        } else if (this.directConnect) {
             this.directConnect = false;
 
-            if (result)
-            {
+            if (result) {
                 this.connectToServer(this.selectedServer);
-            }
-            else
-            {
+            } else {
                 this.mc.displayGuiScreen(this);
             }
-        }
-        else if (this.addingServer)
-        {
+        } else if (this.addingServer) {
             this.addingServer = false;
 
-            if (result)
-            {
+            if (result) {
                 this.savedServerList.addServerData(this.selectedServer);
                 this.savedServerList.saveServerList();
                 this.serverListSelector.setSelectedSlotIndex(-1);
@@ -227,14 +184,11 @@
             }
 
             this.mc.displayGuiScreen(this);
-        }
-        else if (this.editingServer)
-        {
+        } else if (this.editingServer) {
             this.editingServer = false;
 
-            if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal)
-            {
-                ServerData serverdata = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData();
+            if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal) {
+                ServerData serverdata = ((ServerListEntryNormal) guilistextended$iguilistentry).getServerData();
                 serverdata.serverName = this.selectedServer.serverName;
                 serverdata.serverIP = this.selectedServer.serverIP;
                 serverdata.copyFrom(this.selectedServer);
@@ -246,216 +200,161 @@
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
         int i = this.serverListSelector.getSelected();
         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = i < 0 ? null : this.serverListSelector.getListEntry(i);
 
-        if (keyCode == 63)
-        {
+        if (keyCode == 63) {
             this.refreshServerList();
-        }
-        else
-        {
-            if (i >= 0)
-            {
-                if (keyCode == 200)
-                {
-                    if (isShiftKeyDown())
-                    {
-                        if (i > 0 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
-                        {
+        } else {
+            if (i >= 0) {
+                if (keyCode == 200) {
+                    if (isShiftKeyDown()) {
+                        if (i > 0 && guilistextended$iguilistentry instanceof ServerListEntryNormal) {
                             this.savedServerList.swapServers(i, i - 1);
                             this.selectServer(this.serverListSelector.getSelected() - 1);
                             this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
                             this.serverListSelector.updateOnlineServers(this.savedServerList);
                         }
-                    }
-                    else if (i > 0)
-                    {
+                    } else if (i > 0) {
                         this.selectServer(this.serverListSelector.getSelected() - 1);
                         this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
 
-                        if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan)
-                        {
-                            if (this.serverListSelector.getSelected() > 0)
-                            {
+                        if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan) {
+                            if (this.serverListSelector.getSelected() > 0) {
                                 this.selectServer(this.serverListSelector.getSize() - 1);
                                 this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
-                            }
-                            else
-                            {
+                            } else {
                                 this.selectServer(-1);
                             }
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.selectServer(-1);
                     }
-                }
-                else if (keyCode == 208)
-                {
-                    if (isShiftKeyDown())
-                    {
-                        if (i < this.savedServerList.countServers() - 1)
-                        {
+                } else if (keyCode == 208) {
+                    if (isShiftKeyDown()) {
+                        if (i < this.savedServerList.countServers() - 1) {
                             this.savedServerList.swapServers(i, i + 1);
                             this.selectServer(i + 1);
                             this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
                             this.serverListSelector.updateOnlineServers(this.savedServerList);
                         }
-                    }
-                    else if (i < this.serverListSelector.getSize())
-                    {
+                    } else if (i < this.serverListSelector.getSize()) {
                         this.selectServer(this.serverListSelector.getSelected() + 1);
                         this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
 
-                        if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan)
-                        {
-                            if (this.serverListSelector.getSelected() < this.serverListSelector.getSize() - 1)
-                            {
+                        if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan) {
+                            if (this.serverListSelector.getSelected() < this.serverListSelector.getSize() - 1) {
                                 this.selectServer(this.serverListSelector.getSize() + 1);
                                 this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
-                            }
-                            else
-                            {
+                            } else {
                                 this.selectServer(-1);
                             }
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.selectServer(-1);
                     }
-                }
-                else if (keyCode != 28 && keyCode != 156)
-                {
+                } else if (keyCode != 28 && keyCode != 156) {
                     super.keyTyped(typedChar, keyCode);
-                }
-                else
-                {
+                } else {
                     this.actionPerformed(this.buttonList.get(2));
                 }
-            }
-            else
-            {
+            } else {
                 super.keyTyped(typedChar, keyCode);
             }
         }
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.hoveringText = null;
         this.drawDefaultBackground();
         this.serverListSelector.drawScreen(mouseX, mouseY, partialTicks);
         this.drawCenteredString(this.fontRenderer, I18n.format("multiplayer.title"), this.width / 2, 20, 16777215);
         super.drawScreen(mouseX, mouseY, partialTicks);
 
-        if (this.hoveringText != null)
-        {
+        if (this.hoveringText != null) {
             this.drawHoveringText(Lists.newArrayList(Splitter.on("\n").split(this.hoveringText)), mouseX, mouseY);
         }
     }
 
-    public void connectToSelected()
-    {
+    public void connectToSelected() {
         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
 
-        if (guilistextended$iguilistentry instanceof ServerListEntryNormal)
-        {
-            this.connectToServer(((ServerListEntryNormal)guilistextended$iguilistentry).getServerData());
-        }
-        else if (guilistextended$iguilistentry instanceof ServerListEntryLanDetected)
-        {
-            LanServerInfo lanserverinfo = ((ServerListEntryLanDetected)guilistextended$iguilistentry).getServerData();
+        if (guilistextended$iguilistentry instanceof ServerListEntryNormal) {
+            this.connectToServer(((ServerListEntryNormal) guilistextended$iguilistentry).getServerData());
+        } else if (guilistextended$iguilistentry instanceof ServerListEntryLanDetected) {
+            LanServerInfo lanserverinfo = ((ServerListEntryLanDetected) guilistextended$iguilistentry).getServerData();
             this.connectToServer(new ServerData(lanserverinfo.getServerMotd(), lanserverinfo.getServerIpPort(), true));
         }
     }
 
-    private void connectToServer(ServerData server)
-    {
+    private void connectToServer(ServerData server) {
         net.minecraftforge.fml.client.FMLClientHandler.instance().connectToServer(this, server);
     }
 
-    public void selectServer(int index)
-    {
+    public void selectServer(int index) {
         this.serverListSelector.setSelectedSlotIndex(index);
         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = index < 0 ? null : this.serverListSelector.getListEntry(index);
         this.btnSelectServer.enabled = false;
         this.btnEditServer.enabled = false;
         this.btnDeleteServer.enabled = false;
 
-        if (guilistextended$iguilistentry != null && !(guilistextended$iguilistentry instanceof ServerListEntryLanScan))
-        {
+        if (guilistextended$iguilistentry != null && !(guilistextended$iguilistentry instanceof ServerListEntryLanScan)) {
             this.btnSelectServer.enabled = true;
 
-            if (guilistextended$iguilistentry instanceof ServerListEntryNormal)
-            {
+            if (guilistextended$iguilistentry instanceof ServerListEntryNormal) {
                 this.btnEditServer.enabled = true;
                 this.btnDeleteServer.enabled = true;
             }
         }
     }
 
-    public ServerPinger getOldServerPinger()
-    {
+    public ServerPinger getOldServerPinger() {
         return this.oldServerPinger;
     }
 
-    public void setHoveringText(String p_146793_1_)
-    {
+    public void setHoveringText(String p_146793_1_) {
         this.hoveringText = p_146793_1_;
     }
 
-    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
-    {
+    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
         super.mouseClicked(mouseX, mouseY, mouseButton);
         this.serverListSelector.mouseClicked(mouseX, mouseY, mouseButton);
     }
 
-    protected void mouseReleased(int mouseX, int mouseY, int state)
-    {
+    protected void mouseReleased(int mouseX, int mouseY, int state) {
         super.mouseReleased(mouseX, mouseY, state);
         this.serverListSelector.mouseReleased(mouseX, mouseY, state);
     }
 
-    public ServerList getServerList()
-    {
+    public ServerList getServerList() {
         return this.savedServerList;
     }
 
-    public boolean canMoveUp(ServerListEntryNormal p_175392_1_, int p_175392_2_)
-    {
+    public boolean canMoveUp(ServerListEntryNormal p_175392_1_, int p_175392_2_) {
         return p_175392_2_ > 0;
     }
 
-    public boolean canMoveDown(ServerListEntryNormal p_175394_1_, int p_175394_2_)
-    {
+    public boolean canMoveDown(ServerListEntryNormal p_175394_1_, int p_175394_2_) {
         return p_175394_2_ < this.savedServerList.countServers() - 1;
     }
 
-    public void moveServerUp(ServerListEntryNormal p_175391_1_, int p_175391_2_, boolean p_175391_3_)
-    {
+    public void moveServerUp(ServerListEntryNormal p_175391_1_, int p_175391_2_, boolean p_175391_3_) {
         int i = p_175391_3_ ? 0 : p_175391_2_ - 1;
         this.savedServerList.swapServers(p_175391_2_, i);
 
-        if (this.serverListSelector.getSelected() == p_175391_2_)
-        {
+        if (this.serverListSelector.getSelected() == p_175391_2_) {
             this.selectServer(i);
         }
 
         this.serverListSelector.updateOnlineServers(this.savedServerList);
     }
 
-    public void moveServerDown(ServerListEntryNormal p_175393_1_, int p_175393_2_, boolean p_175393_3_)
-    {
+    public void moveServerDown(ServerListEntryNormal p_175393_1_, int p_175393_2_, boolean p_175393_3_) {
         int i = p_175393_3_ ? this.savedServerList.countServers() - 1 : p_175393_2_ + 1;
         this.savedServerList.swapServers(p_175393_2_, i);
 
-        if (this.serverListSelector.getSelected() == p_175393_2_)
-        {
+        if (this.serverListSelector.getSelected() == p_175393_2_) {
             this.selectServer(i);
         }
 
