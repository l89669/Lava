--- ../src-base/minecraft/net/minecraft/client/gui/GuiUtilRenderComponents.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiUtilRenderComponents.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.gui;
 
 import com.google.common.collect.Lists;
-import java.util.List;
 import net.minecraft.client.Minecraft;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
@@ -9,29 +8,26 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class GuiUtilRenderComponents
-{
-    public static String removeTextColorsIfConfigured(String text, boolean forceColor)
-    {
+public class GuiUtilRenderComponents {
+    public static String removeTextColorsIfConfigured(String text, boolean forceColor) {
         return !forceColor && !Minecraft.getMinecraft().gameSettings.chatColours ? TextFormatting.getTextWithoutFormattingCodes(text) : text;
     }
 
-    public static List<ITextComponent> splitText(ITextComponent textComponent, int maxTextLenght, FontRenderer fontRendererIn, boolean p_178908_3_, boolean forceTextColor)
-    {
+    public static List<ITextComponent> splitText(ITextComponent textComponent, int maxTextLenght, FontRenderer fontRendererIn, boolean p_178908_3_, boolean forceTextColor) {
         int i = 0;
         ITextComponent itextcomponent = new TextComponentString("");
         List<ITextComponent> list = Lists.<ITextComponent>newArrayList();
         List<ITextComponent> list1 = Lists.newArrayList(textComponent);
 
-        for (int j = 0; j < list1.size(); ++j)
-        {
+        for (int j = 0; j < list1.size(); ++j) {
             ITextComponent itextcomponent1 = list1.get(j);
             String s = itextcomponent1.getUnformattedComponentText();
             boolean flag = false;
 
-            if (s.contains("\n"))
-            {
+            if (s.contains("\n")) {
                 int k = s.indexOf(10);
                 String s1 = s.substring(k + 1);
                 s = s.substring(0, k + 1);
@@ -47,28 +43,22 @@
             TextComponentString textcomponentstring = new TextComponentString(s5);
             textcomponentstring.setStyle(itextcomponent1.getStyle().createShallowCopy());
 
-            if (i + i1 > maxTextLenght)
-            {
+            if (i + i1 > maxTextLenght) {
                 String s2 = fontRendererIn.trimStringToWidth(s4, maxTextLenght - i, false);
                 String s3 = s2.length() < s4.length() ? s4.substring(s2.length()) : null;
 
-                if (s3 != null && !s3.isEmpty())
-                {
+                if (s3 != null && !s3.isEmpty()) {
                     int l = s2.lastIndexOf(32);
 
-                    if (l >= 0 && fontRendererIn.getStringWidth(s4.substring(0, l)) > 0)
-                    {
+                    if (l >= 0 && fontRendererIn.getStringWidth(s4.substring(0, l)) > 0) {
                         s2 = s4.substring(0, l);
 
-                        if (p_178908_3_)
-                        {
+                        if (p_178908_3_) {
                             ++l;
                         }
 
                         s3 = s4.substring(l);
-                    }
-                    else if (i > 0 && !s4.contains(" "))
-                    {
+                    } else if (i > 0 && !s4.contains(" ")) {
                         s2 = "";
                         s3 = s4;
                     }
@@ -86,18 +76,14 @@
                 flag = true;
             }
 
-            if (i + i1 <= maxTextLenght)
-            {
+            if (i + i1 <= maxTextLenght) {
                 i += i1;
                 itextcomponent.appendSibling(textcomponentstring);
-            }
-            else
-            {
+            } else {
                 flag = true;
             }
 
-            if (flag)
-            {
+            if (flag) {
                 list.add(itextcomponent);
                 i = 0;
                 itextcomponent = new TextComponentString("");
