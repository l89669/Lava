--- ../src-base/minecraft/net/minecraft/client/gui/GuiBossOverlay.java
+++ ../src-work/minecraft/net/minecraft/client/gui/GuiBossOverlay.java
@@ -1,8 +1,6 @@
 package net.minecraft.client.gui;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.UUID;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.network.play.server.SPacketUpdateBossInfo;
@@ -11,100 +9,82 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Map;
+import java.util.UUID;
+
 @SideOnly(Side.CLIENT)
-public class GuiBossOverlay extends Gui
-{
+public class GuiBossOverlay extends Gui {
     private static final ResourceLocation GUI_BARS_TEXTURES = new ResourceLocation("textures/gui/bars.png");
     private final Minecraft client;
     private final Map<UUID, BossInfoClient> mapBossInfos = Maps.<UUID, BossInfoClient>newLinkedHashMap();
 
-    public GuiBossOverlay(Minecraft clientIn)
-    {
+    public GuiBossOverlay(Minecraft clientIn) {
         this.client = clientIn;
     }
 
-    public void renderBossHealth()
-    {
-        if (!this.mapBossInfos.isEmpty())
-        {
+    public void renderBossHealth() {
+        if (!this.mapBossInfos.isEmpty()) {
             ScaledResolution scaledresolution = new ScaledResolution(this.client);
             int i = scaledresolution.getScaledWidth();
             int j = 12;
 
-            for (BossInfoClient bossinfoclient : this.mapBossInfos.values())
-            {
+            for (BossInfoClient bossinfoclient : this.mapBossInfos.values()) {
                 int k = i / 2 - 91;
                 net.minecraftforge.client.event.RenderGameOverlayEvent.BossInfo event =
                         net.minecraftforge.client.ForgeHooksClient.bossBarRenderPre(scaledresolution, bossinfoclient, k, j, 10 + this.client.fontRenderer.FONT_HEIGHT);
                 if (!event.isCanceled()) {
-                GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-                this.client.getTextureManager().bindTexture(GUI_BARS_TEXTURES);
-                this.render(k, j, bossinfoclient);
-                String s = bossinfoclient.getName().getFormattedText();
-                this.client.fontRenderer.drawStringWithShadow(s, (float)(i / 2 - this.client.fontRenderer.getStringWidth(s) / 2), (float)(j - 9), 16777215);
+                    GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+                    this.client.getTextureManager().bindTexture(GUI_BARS_TEXTURES);
+                    this.render(k, j, bossinfoclient);
+                    String s = bossinfoclient.getName().getFormattedText();
+                    this.client.fontRenderer.drawStringWithShadow(s, (float) (i / 2 - this.client.fontRenderer.getStringWidth(s) / 2), (float) (j - 9), 16777215);
                 }
                 j += event.getIncrement();
 
                 net.minecraftforge.client.ForgeHooksClient.bossBarRenderPost(scaledresolution);
-                if (j >= scaledresolution.getScaledHeight() / 3)
-                {
+                if (j >= scaledresolution.getScaledHeight() / 3) {
                     break;
                 }
             }
         }
     }
 
-    private void render(int x, int y, BossInfo info)
-    {
+    private void render(int x, int y, BossInfo info) {
         this.drawTexturedModalRect(x, y, 0, info.getColor().ordinal() * 5 * 2, 182, 5);
 
-        if (info.getOverlay() != BossInfo.Overlay.PROGRESS)
-        {
+        if (info.getOverlay() != BossInfo.Overlay.PROGRESS) {
             this.drawTexturedModalRect(x, y, 0, 80 + (info.getOverlay().ordinal() - 1) * 5 * 2, 182, 5);
         }
 
-        int i = (int)(info.getPercent() * 183.0F);
+        int i = (int) (info.getPercent() * 183.0F);
 
-        if (i > 0)
-        {
+        if (i > 0) {
             this.drawTexturedModalRect(x, y, 0, info.getColor().ordinal() * 5 * 2 + 5, i, 5);
 
-            if (info.getOverlay() != BossInfo.Overlay.PROGRESS)
-            {
+            if (info.getOverlay() != BossInfo.Overlay.PROGRESS) {
                 this.drawTexturedModalRect(x, y, 0, 80 + (info.getOverlay().ordinal() - 1) * 5 * 2 + 5, i, 5);
             }
         }
     }
 
-    public void read(SPacketUpdateBossInfo packetIn)
-    {
-        if (packetIn.getOperation() == SPacketUpdateBossInfo.Operation.ADD)
-        {
+    public void read(SPacketUpdateBossInfo packetIn) {
+        if (packetIn.getOperation() == SPacketUpdateBossInfo.Operation.ADD) {
             this.mapBossInfos.put(packetIn.getUniqueId(), new BossInfoClient(packetIn));
-        }
-        else if (packetIn.getOperation() == SPacketUpdateBossInfo.Operation.REMOVE)
-        {
+        } else if (packetIn.getOperation() == SPacketUpdateBossInfo.Operation.REMOVE) {
             this.mapBossInfos.remove(packetIn.getUniqueId());
+        } else {
+            ((BossInfoClient) this.mapBossInfos.get(packetIn.getUniqueId())).updateFromPacket(packetIn);
         }
-        else
-        {
-            ((BossInfoClient)this.mapBossInfos.get(packetIn.getUniqueId())).updateFromPacket(packetIn);
-        }
     }
 
-    public void clearBossInfos()
-    {
+    public void clearBossInfos() {
         this.mapBossInfos.clear();
     }
 
-    public boolean shouldPlayEndBossMusic()
-    {
-        if (!this.mapBossInfos.isEmpty())
-        {
-            for (BossInfo bossinfo : this.mapBossInfos.values())
-            {
-                if (bossinfo.shouldPlayEndBossMusic())
-                {
+    public boolean shouldPlayEndBossMusic() {
+        if (!this.mapBossInfos.isEmpty()) {
+            for (BossInfo bossinfo : this.mapBossInfos.values()) {
+                if (bossinfo.shouldPlayEndBossMusic()) {
                     return true;
                 }
             }
@@ -113,14 +93,10 @@
         return false;
     }
 
-    public boolean shouldDarkenSky()
-    {
-        if (!this.mapBossInfos.isEmpty())
-        {
-            for (BossInfo bossinfo : this.mapBossInfos.values())
-            {
-                if (bossinfo.shouldDarkenSky())
-                {
+    public boolean shouldDarkenSky() {
+        if (!this.mapBossInfos.isEmpty()) {
+            for (BossInfo bossinfo : this.mapBossInfos.values()) {
+                if (bossinfo.shouldDarkenSky()) {
                     return true;
                 }
             }
@@ -129,14 +105,10 @@
         return false;
     }
 
-    public boolean shouldCreateFog()
-    {
-        if (!this.mapBossInfos.isEmpty())
-        {
-            for (BossInfo bossinfo : this.mapBossInfos.values())
-            {
-                if (bossinfo.shouldCreateFog())
-                {
+    public boolean shouldCreateFog() {
+        if (!this.mapBossInfos.isEmpty()) {
+            for (BossInfo bossinfo : this.mapBossInfos.values()) {
+                if (bossinfo.shouldCreateFog()) {
                     return true;
                 }
             }
