--- ../src-base/minecraft/net/minecraft/client/shader/Shader.java
+++ ../src-work/minecraft/net/minecraft/client/shader/Shader.java
@@ -1,8 +1,6 @@
 package net.minecraft.client.shader;
 
 import com.google.common.collect.Lists;
-import java.io.IOException;
-import java.util.List;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
@@ -14,9 +12,11 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.lwjgl.util.vector.Matrix4f;
 
+import java.io.IOException;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class Shader
-{
+public class Shader {
     private final ShaderManager manager;
     public final Framebuffer framebufferIn;
     public final Framebuffer framebufferOut;
@@ -26,28 +26,24 @@
     private final List<Integer> listAuxHeights = Lists.<Integer>newArrayList();
     private Matrix4f projectionMatrix;
 
-    public Shader(IResourceManager resourceManager, String programName, Framebuffer framebufferInIn, Framebuffer framebufferOutIn) throws JsonException, IOException
-    {
+    public Shader(IResourceManager resourceManager, String programName, Framebuffer framebufferInIn, Framebuffer framebufferOutIn) throws JsonException, IOException {
         this.manager = new ShaderManager(resourceManager, programName);
         this.framebufferIn = framebufferInIn;
         this.framebufferOut = framebufferOutIn;
     }
 
-    public void deleteShader()
-    {
+    public void deleteShader() {
         this.manager.deleteShader();
     }
 
-    public void addAuxFramebuffer(String auxName, Object auxFramebufferIn, int width, int height)
-    {
+    public void addAuxFramebuffer(String auxName, Object auxFramebufferIn, int width, int height) {
         this.listAuxNames.add(this.listAuxNames.size(), auxName);
         this.listAuxFramebuffers.add(this.listAuxFramebuffers.size(), auxFramebufferIn);
         this.listAuxWidths.add(this.listAuxWidths.size(), Integer.valueOf(width));
         this.listAuxHeights.add(this.listAuxHeights.size(), Integer.valueOf(height));
     }
 
-    private void preRender()
-    {
+    private void preRender() {
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableBlend();
         GlStateManager.disableDepth();
@@ -59,32 +55,29 @@
         GlStateManager.bindTexture(0);
     }
 
-    public void setProjectionMatrix(Matrix4f projectionMatrixIn)
-    {
+    public void setProjectionMatrix(Matrix4f projectionMatrixIn) {
         this.projectionMatrix = projectionMatrixIn;
     }
 
-    public void render(float partialTicks)
-    {
+    public void render(float partialTicks) {
         this.preRender();
         this.framebufferIn.unbindFramebuffer();
-        float f = (float)this.framebufferOut.framebufferTextureWidth;
-        float f1 = (float)this.framebufferOut.framebufferTextureHeight;
-        GlStateManager.viewport(0, 0, (int)f, (int)f1);
+        float f = (float) this.framebufferOut.framebufferTextureWidth;
+        float f1 = (float) this.framebufferOut.framebufferTextureHeight;
+        GlStateManager.viewport(0, 0, (int) f, (int) f1);
         this.manager.addSamplerTexture("DiffuseSampler", this.framebufferIn);
 
-        for (int i = 0; i < this.listAuxFramebuffers.size(); ++i)
-        {
+        for (int i = 0; i < this.listAuxFramebuffers.size(); ++i) {
             this.manager.addSamplerTexture(this.listAuxNames.get(i), this.listAuxFramebuffers.get(i));
-            this.manager.getShaderUniformOrDefault("AuxSize" + i).set((float)((Integer)this.listAuxWidths.get(i)).intValue(), (float)((Integer)this.listAuxHeights.get(i)).intValue());
+            this.manager.getShaderUniformOrDefault("AuxSize" + i).set((float) ((Integer) this.listAuxWidths.get(i)).intValue(), (float) ((Integer) this.listAuxHeights.get(i)).intValue());
         }
 
         this.manager.getShaderUniformOrDefault("ProjMat").set(this.projectionMatrix);
-        this.manager.getShaderUniformOrDefault("InSize").set((float)this.framebufferIn.framebufferTextureWidth, (float)this.framebufferIn.framebufferTextureHeight);
+        this.manager.getShaderUniformOrDefault("InSize").set((float) this.framebufferIn.framebufferTextureWidth, (float) this.framebufferIn.framebufferTextureHeight);
         this.manager.getShaderUniformOrDefault("OutSize").set(f, f1);
         this.manager.getShaderUniformOrDefault("Time").set(partialTicks);
         Minecraft minecraft = Minecraft.getMinecraft();
-        this.manager.getShaderUniformOrDefault("ScreenSize").set((float)minecraft.displayWidth, (float)minecraft.displayHeight);
+        this.manager.getShaderUniformOrDefault("ScreenSize").set((float) minecraft.displayWidth, (float) minecraft.displayHeight);
         this.manager.useShader();
         this.framebufferOut.framebufferClear();
         this.framebufferOut.bindFramebuffer(false);
@@ -93,9 +86,9 @@
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
-        bufferbuilder.pos(0.0D, (double)f1, 500.0D).color(255, 255, 255, 255).endVertex();
-        bufferbuilder.pos((double)f, (double)f1, 500.0D).color(255, 255, 255, 255).endVertex();
-        bufferbuilder.pos((double)f, 0.0D, 500.0D).color(255, 255, 255, 255).endVertex();
+        bufferbuilder.pos(0.0D, (double) f1, 500.0D).color(255, 255, 255, 255).endVertex();
+        bufferbuilder.pos((double) f, (double) f1, 500.0D).color(255, 255, 255, 255).endVertex();
+        bufferbuilder.pos((double) f, 0.0D, 500.0D).color(255, 255, 255, 255).endVertex();
         bufferbuilder.pos(0.0D, 0.0D, 500.0D).color(255, 255, 255, 255).endVertex();
         tessellator.draw();
         GlStateManager.depthMask(true);
@@ -104,17 +97,14 @@
         this.framebufferOut.unbindFramebuffer();
         this.framebufferIn.unbindFramebufferTexture();
 
-        for (Object object : this.listAuxFramebuffers)
-        {
-            if (object instanceof Framebuffer)
-            {
-                ((Framebuffer)object).unbindFramebufferTexture();
+        for (Object object : this.listAuxFramebuffers) {
+            if (object instanceof Framebuffer) {
+                ((Framebuffer) object).unbindFramebufferTexture();
             }
         }
     }
 
-    public ShaderManager getShaderManager()
-    {
+    public ShaderManager getShaderManager() {
         return this.manager;
     }
 }
