--- ../src-base/minecraft/net/minecraft/client/shader/ShaderLoader.java
+++ ../src-work/minecraft/net/minecraft/client/shader/ShaderLoader.java
@@ -1,11 +1,6 @@
 package net.minecraft.client.shader;
 
 import com.google.common.collect.Maps;
-import java.io.BufferedInputStream;
-import java.io.Closeable;
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.util.Map;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.resources.IResource;
 import net.minecraft.client.resources.IResourceManager;
@@ -17,55 +12,52 @@
 import org.apache.commons.lang3.StringUtils;
 import org.lwjgl.BufferUtils;
 
+import java.io.BufferedInputStream;
+import java.io.Closeable;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.util.Map;
+
 @SideOnly(Side.CLIENT)
-public class ShaderLoader
-{
+public class ShaderLoader {
     private final ShaderLoader.ShaderType shaderType;
     private final String shaderFilename;
     private final int shader;
     private int shaderAttachCount;
 
-    private ShaderLoader(ShaderLoader.ShaderType type, int shaderId, String filename)
-    {
+    private ShaderLoader(ShaderLoader.ShaderType type, int shaderId, String filename) {
         this.shaderType = type;
         this.shader = shaderId;
         this.shaderFilename = filename;
     }
 
-    public void attachShader(ShaderManager manager)
-    {
+    public void attachShader(ShaderManager manager) {
         ++this.shaderAttachCount;
         OpenGlHelper.glAttachShader(manager.getProgram(), this.shader);
     }
 
-    public void deleteShader(ShaderManager manager)
-    {
+    public void deleteShader(ShaderManager manager) {
         --this.shaderAttachCount;
 
-        if (this.shaderAttachCount <= 0)
-        {
+        if (this.shaderAttachCount <= 0) {
             OpenGlHelper.glDeleteShader(this.shader);
             this.shaderType.getLoadedShaders().remove(this.shaderFilename);
         }
     }
 
-    public String getShaderFilename()
-    {
+    public String getShaderFilename() {
         return this.shaderFilename;
     }
 
-    public static ShaderLoader loadShader(IResourceManager resourceManager, ShaderLoader.ShaderType type, String filename) throws IOException
-    {
-        ShaderLoader shaderloader = (ShaderLoader)type.getLoadedShaders().get(filename);
+    public static ShaderLoader loadShader(IResourceManager resourceManager, ShaderLoader.ShaderType type, String filename) throws IOException {
+        ShaderLoader shaderloader = (ShaderLoader) type.getLoadedShaders().get(filename);
 
-        if (shaderloader == null)
-        {
+        if (shaderloader == null) {
             String[] rl = ResourceLocation.splitObjectName(filename);
             ResourceLocation resourcelocation = new ResourceLocation(rl[0], "shaders/program/" + rl[1] + type.getShaderExtension());
             IResource iresource = resourceManager.getResource(resourcelocation);
 
-            try
-            {
+            try {
                 byte[] abyte = IOUtils.toByteArray(new BufferedInputStream(iresource.getInputStream()));
                 ByteBuffer bytebuffer = BufferUtils.createByteBuffer(abyte.length);
                 bytebuffer.put(abyte);
@@ -74,8 +66,7 @@
                 OpenGlHelper.glShaderSource(i, bytebuffer);
                 OpenGlHelper.glCompileShader(i);
 
-                if (OpenGlHelper.glGetShaderi(i, OpenGlHelper.GL_COMPILE_STATUS) == 0)
-                {
+                if (OpenGlHelper.glGetShaderi(i, OpenGlHelper.GL_COMPILE_STATUS) == 0) {
                     String s = StringUtils.trim(OpenGlHelper.glGetShaderInfoLog(i, 32768));
                     JsonException jsonexception = new JsonException("Couldn't compile " + type.getShaderName() + " program: " + s);
                     jsonexception.setFilenameAndFlush(resourcelocation.getResourcePath());
@@ -84,19 +75,16 @@
 
                 shaderloader = new ShaderLoader(type, i, filename);
                 type.getLoadedShaders().put(filename, shaderloader);
+            } finally {
+                IOUtils.closeQuietly((Closeable) iresource);
             }
-            finally
-            {
-                IOUtils.closeQuietly((Closeable)iresource);
-            }
         }
 
         return shaderloader;
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum ShaderType
-    {
+    public static enum ShaderType {
         VERTEX("vertex", ".vsh", OpenGlHelper.GL_VERTEX_SHADER),
         FRAGMENT("fragment", ".fsh", OpenGlHelper.GL_FRAGMENT_SHADER);
 
@@ -105,30 +93,25 @@
         private final int shaderMode;
         private final Map<String, ShaderLoader> loadedShaders = Maps.<String, ShaderLoader>newHashMap();
 
-        private ShaderType(String shaderNameIn, String shaderExtensionIn, int shaderModeIn)
-        {
+        private ShaderType(String shaderNameIn, String shaderExtensionIn, int shaderModeIn) {
             this.shaderName = shaderNameIn;
             this.shaderExtension = shaderExtensionIn;
             this.shaderMode = shaderModeIn;
         }
 
-        public String getShaderName()
-        {
+        public String getShaderName() {
             return this.shaderName;
         }
 
-        private String getShaderExtension()
-        {
+        private String getShaderExtension() {
             return this.shaderExtension;
         }
 
-        private int getShaderMode()
-        {
+        private int getShaderMode() {
             return this.shaderMode;
         }
 
-        private Map<String, ShaderLoader> getLoadedShaders()
-        {
+        private Map<String, ShaderLoader> getLoadedShaders() {
             return this.loadedShaders;
         }
     }
