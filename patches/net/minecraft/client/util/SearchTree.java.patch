--- ../src-base/minecraft/net/minecraft/client/util/SearchTree.java
+++ ../src-work/minecraft/net/minecraft/client/util/SearchTree.java
@@ -4,18 +4,17 @@
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.fml.relauncher.SideOnly;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
-import java.util.function.Consumer;
 import java.util.function.Function;
-import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class SearchTree<T> implements ISearchTree<T>
-{
+public class SearchTree<T> implements ISearchTree<T> {
     protected SuffixArray<T> byId = new SuffixArray<T>();
     protected SuffixArray<T> byName = new SuffixArray<T>();
     private final Function<T, Iterable<String>> nameFunc;
@@ -23,19 +22,16 @@
     private final List<T> contents = Lists.<T>newArrayList();
     private Object2IntMap<T> numericContents = new Object2IntOpenHashMap<T>();
 
-    public SearchTree(Function<T, Iterable<String>> nameFuncIn, Function<T, Iterable<ResourceLocation>> idFuncIn)
-    {
+    public SearchTree(Function<T, Iterable<String>> nameFuncIn, Function<T, Iterable<ResourceLocation>> idFuncIn) {
         this.nameFunc = nameFuncIn;
         this.idFunc = idFuncIn;
     }
 
-    public void recalculate()
-    {
+    public void recalculate() {
         this.byId = new SuffixArray<T>();
         this.byName = new SuffixArray<T>();
 
-        for (T t : this.contents)
-        {
+        for (T t : this.contents) {
             this.index(t);
         }
 
@@ -43,15 +39,13 @@
         this.byName.generate();
     }
 
-    public void add(T element)
-    {
+    public void add(T element) {
         this.numericContents.put(element, this.contents.size());
         this.contents.add(element);
         this.index(element);
     }
 
-    private void index(T element)
-    {
+    private void index(T element) {
         (this.idFunc.apply(element)).forEach((p_194039_2_) ->
         {
             this.byName.add(element, p_194039_2_.toString().toLowerCase(Locale.ROOT));
@@ -62,80 +56,61 @@
         });
     }
 
-    public List<T> search(String searchText)
-    {
+    public List<T> search(String searchText) {
         List<T> list = this.byId.search(searchText);
 
-        if (searchText.indexOf(58) < 0)
-        {
+        if (searchText.indexOf(58) < 0) {
             return list;
-        }
-        else
-        {
+        } else {
             List<T> list1 = this.byName.search(searchText);
-            return (List<T>)(list1.isEmpty() ? list : Lists.newArrayList(new SearchTree.MergingIterator(list.iterator(), list1.iterator(), this.numericContents)));
+            return (List<T>) (list1.isEmpty() ? list : Lists.newArrayList(new SearchTree.MergingIterator(list.iterator(), list1.iterator(), this.numericContents)));
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static class MergingIterator<T> extends AbstractIterator<T>
-        {
-            private final Iterator<T> leftItr;
-            private final Iterator<T> rightItr;
-            private final Object2IntMap<T> numbers;
-            private T left;
-            private T right;
+    static class MergingIterator<T> extends AbstractIterator<T> {
+        private final Iterator<T> leftItr;
+        private final Iterator<T> rightItr;
+        private final Object2IntMap<T> numbers;
+        private T left;
+        private T right;
 
-            public MergingIterator(Iterator<T> leftIn, Iterator<T> rightIn, Object2IntMap<T> numbersIn)
-            {
-                this.leftItr = leftIn;
-                this.rightItr = rightIn;
-                this.numbers = numbersIn;
-                this.left = (T)(leftIn.hasNext() ? leftIn.next() : null);
-                this.right = (T)(rightIn.hasNext() ? rightIn.next() : null);
-            }
+        public MergingIterator(Iterator<T> leftIn, Iterator<T> rightIn, Object2IntMap<T> numbersIn) {
+            this.leftItr = leftIn;
+            this.rightItr = rightIn;
+            this.numbers = numbersIn;
+            this.left = (T) (leftIn.hasNext() ? leftIn.next() : null);
+            this.right = (T) (rightIn.hasNext() ? rightIn.next() : null);
+        }
 
-            protected T computeNext()
-            {
-                if (this.left == null && this.right == null)
-                {
-                    return (T)this.endOfData();
+        protected T computeNext() {
+            if (this.left == null && this.right == null) {
+                return (T) this.endOfData();
+            } else {
+                int i;
+
+                if (this.left == this.right) {
+                    i = 0;
+                } else if (this.left == null) {
+                    i = 1;
+                } else if (this.right == null) {
+                    i = -1;
+                } else {
+                    i = Integer.compare(this.numbers.getInt(this.left), this.numbers.getInt(this.right));
                 }
-                else
-                {
-                    int i;
 
-                    if (this.left == this.right)
-                    {
-                        i = 0;
-                    }
-                    else if (this.left == null)
-                    {
-                        i = 1;
-                    }
-                    else if (this.right == null)
-                    {
-                        i = -1;
-                    }
-                    else
-                    {
-                        i = Integer.compare(this.numbers.getInt(this.left), this.numbers.getInt(this.right));
-                    }
+                T t = (T) (i <= 0 ? this.left : this.right);
 
-                    T t = (T)(i <= 0 ? this.left : this.right);
+                if (i <= 0) {
+                    this.left = (T) (this.leftItr.hasNext() ? this.leftItr.next() : null);
+                }
 
-                    if (i <= 0)
-                    {
-                        this.left = (T)(this.leftItr.hasNext() ? this.leftItr.next() : null);
-                    }
-
-                    if (i >= 0)
-                    {
-                        this.right = (T)(this.rightItr.hasNext() ? this.rightItr.next() : null);
-                    }
-
-                    return t;
+                if (i >= 0) {
+                    this.right = (T) (this.rightItr.hasNext() ? this.rightItr.next() : null);
                 }
+
+                return t;
             }
         }
+    }
 }
