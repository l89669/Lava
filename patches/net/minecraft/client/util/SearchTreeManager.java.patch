--- ../src-base/minecraft/net/minecraft/client/util/SearchTreeManager.java
+++ ../src-work/minecraft/net/minecraft/client/util/SearchTreeManager.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.util;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import net.minecraft.client.gui.recipebook.RecipeList;
 import net.minecraft.client.resources.IResourceManager;
 import net.minecraft.client.resources.IResourceManagerReloadListener;
@@ -9,33 +8,29 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Map;
+
 @SideOnly(Side.CLIENT)
-public class SearchTreeManager implements IResourceManagerReloadListener
-{
+public class SearchTreeManager implements IResourceManagerReloadListener {
     public static final SearchTreeManager.Key<ItemStack> ITEMS = new SearchTreeManager.Key<ItemStack>();
     public static final SearchTreeManager.Key<RecipeList> RECIPES = new SearchTreeManager.Key<RecipeList>();
-    private final Map < SearchTreeManager.Key<?>, SearchTree<? >> trees = Maps. < SearchTreeManager.Key<?>, SearchTree<? >> newHashMap();
+    private final Map<SearchTreeManager.Key<?>, SearchTree<?>> trees = Maps.<SearchTreeManager.Key<?>, SearchTree<?>>newHashMap();
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
-        for (SearchTree<?> searchtree : this.trees.values())
-        {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
+        for (SearchTree<?> searchtree : this.trees.values()) {
             searchtree.recalculate();
         }
     }
 
-    public <T> void register(SearchTreeManager.Key<T> key, SearchTree<T> searchTreeIn)
-    {
+    public <T> void register(SearchTreeManager.Key<T> key, SearchTree<T> searchTreeIn) {
         this.trees.put(key, searchTreeIn);
     }
 
-    public <T> ISearchTree<T> get(SearchTreeManager.Key<T> key)
-    {
-        return (ISearchTree)this.trees.get(key);
+    public <T> ISearchTree<T> get(SearchTreeManager.Key<T> key) {
+        return (ISearchTree) this.trees.get(key);
     }
 
     @SideOnly(Side.CLIENT)
-    public static class Key<T>
-        {
-        }
+    public static class Key<T> {
+    }
 }
