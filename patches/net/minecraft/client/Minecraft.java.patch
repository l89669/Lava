--- ../src-base/minecraft/net/minecraft/client/Minecraft.java
+++ ../src-work/minecraft/net/minecraft/client/Minecraft.java
@@ -13,56 +13,11 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.properties.PropertyMap;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.Proxy;
-import java.net.SocketAddress;
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.IntBuffer;
-import java.text.DecimalFormat;
-import java.text.SimpleDateFormat;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Queue;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import java.util.stream.Collectors;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
-import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
-import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.audio.MusicTicker;
 import net.minecraft.client.audio.SoundHandler;
 import net.minecraft.client.entity.EntityPlayerSP;
-import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.gui.GuiChat;
-import net.minecraft.client.gui.GuiControls;
-import net.minecraft.client.gui.GuiGameOver;
-import net.minecraft.client.gui.GuiIngame;
-import net.minecraft.client.gui.GuiIngameMenu;
-import net.minecraft.client.gui.GuiMainMenu;
-import net.minecraft.client.gui.GuiMemoryErrorScreen;
-import net.minecraft.client.gui.GuiMultiplayer;
-import net.minecraft.client.gui.GuiNewChat;
-import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.gui.GuiScreenWorking;
-import net.minecraft.client.gui.GuiSleepMP;
-import net.minecraft.client.gui.GuiWinGame;
-import net.minecraft.client.gui.ScaledResolution;
-import net.minecraft.client.gui.ScreenChatOptions;
+import net.minecraft.client.gui.*;
 import net.minecraft.client.gui.advancements.GuiScreenAdvancements;
 import net.minecraft.client.gui.chat.NarratorChatListener;
 import net.minecraft.client.gui.inventory.GuiContainerCreative;
@@ -70,22 +25,13 @@
 import net.minecraft.client.gui.recipebook.RecipeList;
 import net.minecraft.client.gui.toasts.GuiToast;
 import net.minecraft.client.main.GameConfiguration;
-import net.minecraft.client.multiplayer.GuiConnecting;
 import net.minecraft.client.multiplayer.PlayerControllerMP;
 import net.minecraft.client.multiplayer.ServerData;
 import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.network.NetHandlerLoginClient;
 import net.minecraft.client.network.NetHandlerPlayClient;
 import net.minecraft.client.particle.ParticleManager;
-import net.minecraft.client.renderer.BlockRendererDispatcher;
-import net.minecraft.client.renderer.BufferBuilder;
-import net.minecraft.client.renderer.EntityRenderer;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.ItemRenderer;
-import net.minecraft.client.renderer.OpenGlHelper;
-import net.minecraft.client.renderer.RenderGlobal;
-import net.minecraft.client.renderer.RenderItem;
-import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.block.model.ModelManager;
 import net.minecraft.client.renderer.chunk.RenderChunk;
 import net.minecraft.client.renderer.color.BlockColors;
@@ -97,57 +43,23 @@
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
-import net.minecraft.client.resources.DefaultResourcePack;
-import net.minecraft.client.resources.FoliageColorReloadListener;
-import net.minecraft.client.resources.GrassColorReloadListener;
-import net.minecraft.client.resources.I18n;
-import net.minecraft.client.resources.IReloadableResourceManager;
-import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.IResourcePack;
-import net.minecraft.client.resources.LanguageManager;
-import net.minecraft.client.resources.ResourcePackRepository;
-import net.minecraft.client.resources.SimpleReloadableResourceManager;
-import net.minecraft.client.resources.SkinManager;
-import net.minecraft.client.resources.data.AnimationMetadataSection;
-import net.minecraft.client.resources.data.AnimationMetadataSectionSerializer;
-import net.minecraft.client.resources.data.FontMetadataSection;
-import net.minecraft.client.resources.data.FontMetadataSectionSerializer;
-import net.minecraft.client.resources.data.LanguageMetadataSection;
-import net.minecraft.client.resources.data.LanguageMetadataSectionSerializer;
-import net.minecraft.client.resources.data.MetadataSerializer;
-import net.minecraft.client.resources.data.PackMetadataSection;
-import net.minecraft.client.resources.data.PackMetadataSectionSerializer;
-import net.minecraft.client.resources.data.TextureMetadataSection;
-import net.minecraft.client.resources.data.TextureMetadataSectionSerializer;
+import net.minecraft.client.resources.*;
+import net.minecraft.client.resources.data.*;
 import net.minecraft.client.settings.CreativeSettings;
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.client.shader.Framebuffer;
 import net.minecraft.client.tutorial.Tutorial;
-import net.minecraft.client.util.ISearchTree;
-import net.minecraft.client.util.ITooltipFlag;
-import net.minecraft.client.util.RecipeBookClient;
-import net.minecraft.client.util.SearchTree;
-import net.minecraft.client.util.SearchTreeManager;
+import net.minecraft.client.util.*;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityLeashKnot;
-import net.minecraft.entity.EntityList;
-import net.minecraft.entity.item.EntityArmorStand;
-import net.minecraft.entity.item.EntityBoat;
-import net.minecraft.entity.item.EntityEnderCrystal;
-import net.minecraft.entity.item.EntityItemFrame;
-import net.minecraft.entity.item.EntityMinecart;
-import net.minecraft.entity.item.EntityPainting;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Bootstrap;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
-import net.minecraft.item.ItemMonsterPlacer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
@@ -167,32 +79,15 @@
 import net.minecraft.stats.StatisticsManager;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntitySkull;
-import net.minecraft.util.EnumActionResult;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.FrameTimer;
-import net.minecraft.util.IThreadListener;
-import net.minecraft.util.MinecraftError;
-import net.minecraft.util.MouseHelper;
-import net.minecraft.util.MovementInputFromOptions;
-import net.minecraft.util.NonNullList;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.ScreenShotHelper;
-import net.minecraft.util.Session;
 import net.minecraft.util.Timer;
 import net.minecraft.util.Util;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.DataFixesManager;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.RayTraceResult;
-import net.minecraft.util.text.ITextComponent;
-import net.minecraft.util.text.Style;
-import net.minecraft.util.text.TextComponentKeybind;
-import net.minecraft.util.text.TextComponentString;
-import net.minecraft.util.text.TextComponentTranslation;
-import net.minecraft.util.text.TextFormatting;
+import net.minecraft.util.text.*;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.WorldProviderEnd;
 import net.minecraft.world.WorldProviderHell;
@@ -212,17 +107,30 @@
 import org.lwjgl.Sys;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.Display;
-import org.lwjgl.opengl.DisplayMode;
-import org.lwjgl.opengl.GLContext;
-import org.lwjgl.opengl.OpenGLException;
-import org.lwjgl.opengl.PixelFormat;
+import org.lwjgl.opengl.*;
 import org.lwjgl.util.glu.GLU;
 
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.Proxy;
+import java.net.SocketAddress;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
+import java.util.Locale;
+import java.util.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.concurrent.FutureTask;
+import java.util.stream.Collectors;
+
 @SideOnly(Side.CLIENT)
-public class Minecraft implements IThreadListener, ISnooperInfo
-{
+public class Minecraft implements IThreadListener, ISnooperInfo {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ResourceLocation LOCATION_MOJANG_PNG = new ResourceLocation("textures/gui/title/mojang.png");
     public static final boolean IS_RUNNING_ON_MAC = Util.getOSType() == Util.EnumOS.OSX;
@@ -314,7 +222,7 @@
     private ResourceLocation mojangLogo;
     private final MinecraftSessionService sessionService;
     private SkinManager skinManager;
-    private final Queue < FutureTask<? >> scheduledTasks = Queues. < FutureTask<? >> newArrayDeque();
+    private final Queue<FutureTask<?>> scheduledTasks = Queues.<FutureTask<?>>newArrayDeque();
     private final Thread mcThread = Thread.currentThread();
     private ModelManager modelManager;
     private BlockRendererDispatcher blockRenderDispatcher;
@@ -329,8 +237,7 @@
     long prevFrameTime = -1L;
     private String debugProfilerName = "root";
 
-    public Minecraft(GameConfiguration gameConfig)
-    {
+    public Minecraft(GameConfiguration gameConfig) {
         instance = this;
         net.minecraftforge.client.ForgeHooksClient.invalidateLog4jThreadCache();
         this.mcDataDir = gameConfig.folderInfo.mcDataDir;
@@ -344,7 +251,7 @@
         this.proxy = gameConfig.userInfo.proxy == null ? Proxy.NO_PROXY : gameConfig.userInfo.proxy;
         this.sessionService = (new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString())).createMinecraftSessionService();
         this.session = gameConfig.userInfo.session;
-        LOGGER.info("Setting user: {}", (Object)this.session.getUsername());
+        LOGGER.info("Setting user: {}", (Object) this.session.getUsername());
         this.isDemo = gameConfig.gameInfo.isDemo;
         this.displayWidth = gameConfig.displayInfo.width > 0 ? gameConfig.displayInfo.width : 1;
         this.displayHeight = gameConfig.displayInfo.height > 0 ? gameConfig.displayInfo.height : 1;
@@ -354,8 +261,7 @@
         this.jvm64bit = isJvm64bit();
         this.integratedServer = null;
 
-        if (gameConfig.serverInfo.serverName != null)
-        {
+        if (gameConfig.serverInfo.serverName != null) {
             this.serverName = gameConfig.serverInfo.serverName;
             this.serverPort = gameConfig.serverInfo.serverPort;
         }
@@ -369,69 +275,48 @@
         this.tutorial = new Tutorial(this);
     }
 
-    public void run()
-    {
+    public void run() {
         this.running = true;
 
-        try
-        {
+        try {
             this.init();
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Initializing game");
             crashreport.makeCategory("Initialization");
             this.displayCrashReport(this.addGraphicsAndWorldToCrashReport(crashreport));
             return;
         }
 
-        while (true)
-        {
-            try
-            {
-                while (this.running)
-                {
-                    if (!this.hasCrashed || this.crashReporter == null)
-                    {
-                        try
-                        {
+        while (true) {
+            try {
+                while (this.running) {
+                    if (!this.hasCrashed || this.crashReporter == null) {
+                        try {
                             this.runGameLoop();
-                        }
-                        catch (OutOfMemoryError var10)
-                        {
+                        } catch (OutOfMemoryError var10) {
                             this.freeMemory();
                             this.displayGuiScreen(new GuiMemoryErrorScreen());
                             System.gc();
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.displayCrashReport(this.crashReporter);
                     }
                 }
-            }
-            catch (MinecraftError var12)
-            {
+            } catch (MinecraftError var12) {
                 break;
-            }
-            catch (ReportedException reportedexception)
-            {
+            } catch (ReportedException reportedexception) {
                 this.addGraphicsAndWorldToCrashReport(reportedexception.getCrashReport());
                 this.freeMemory();
-                LOGGER.fatal("Reported exception thrown!", (Throwable)reportedexception);
+                LOGGER.fatal("Reported exception thrown!", (Throwable) reportedexception);
                 this.displayCrashReport(reportedexception.getCrashReport());
                 break;
-            }
-            catch (Throwable throwable1)
-            {
+            } catch (Throwable throwable1) {
                 CrashReport crashreport1 = this.addGraphicsAndWorldToCrashReport(new CrashReport("Unexpected error", throwable1));
                 this.freeMemory();
                 LOGGER.fatal("Unreported exception thrown!", throwable1);
                 this.displayCrashReport(crashreport1);
                 break;
-            }
-            finally
-            {
+            } finally {
                 this.shutdownMinecraftApplet();
             }
 
@@ -439,20 +324,18 @@
         }
     }
 
-    private void init() throws LWJGLException, IOException
-    {
+    private void init() throws LWJGLException, IOException {
         this.gameSettings = new GameSettings(this, this.mcDataDir);
         this.creativeSettings = new CreativeSettings(this, this.mcDataDir);
         this.defaultResourcePacks.add(this.mcDefaultResourcePack);
         this.startTimerHackThread();
 
-        if (this.gameSettings.overrideHeight > 0 && this.gameSettings.overrideWidth > 0)
-        {
+        if (this.gameSettings.overrideHeight > 0 && this.gameSettings.overrideWidth > 0) {
             this.displayWidth = this.gameSettings.overrideWidth;
             this.displayHeight = this.gameSettings.overrideHeight;
         }
 
-        LOGGER.info("LWJGL Version: {}", (Object)Sys.getVersion());
+        LOGGER.info("LWJGL Version: {}", (Object) Sys.getVersion());
         this.setWindowIcon();
         this.setInitialDisplayMode();
         this.createDisplay();
@@ -475,8 +358,7 @@
         this.mcMusicTicker = new MusicTicker(this);
         this.fontRenderer = new FontRenderer(this.gameSettings, new ResourceLocation("textures/font/ascii.png"), this.renderEngine, false);
 
-        if (this.gameSettings.language != null)
-        {
+        if (this.gameSettings.language != null) {
             this.fontRenderer.setUnicodeFlag(this.isUnicode());
             this.fontRenderer.setBidiFlag(this.mcLanguageManager.isCurrentLanguageBidirectional());
         }
@@ -487,7 +369,7 @@
         this.mcResourceManager.registerReloadListener(new GrassColorReloadListener());
         this.mcResourceManager.registerReloadListener(new FoliageColorReloadListener());
         this.mouseHelper = new MouseHelper();
-        net.minecraftforge.fml.common.ProgressManager.ProgressBar bar= net.minecraftforge.fml.common.ProgressManager.push("Rendering Setup", 5, true);
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar bar = net.minecraftforge.fml.common.ProgressManager.push("Rendering Setup", 5, true);
         bar.step("GL Setup");
         this.checkGLError("Pre startup");
         GlStateManager.enableTexture2D();
@@ -536,12 +418,9 @@
         this.checkGLError("Post startup");
         this.ingameGUI = new net.minecraftforge.client.GuiIngameForge(this);
 
-        if (this.serverName != null)
-        {
+        if (this.serverName != null) {
             net.minecraftforge.fml.client.FMLClientHandler.instance().connectToServerAtStartup(this.serverName, this.serverPort);
-        }
-        else
-        {
+        } else {
             this.displayGuiScreen(new GuiMainMenu());
         }
 
@@ -551,17 +430,13 @@
         this.debugRenderer = new DebugRenderer(this);
 
         net.minecraftforge.fml.client.FMLClientHandler.instance().onInitializationComplete();
-        if (this.gameSettings.fullScreen && !this.fullscreen)
-        {
+        if (this.gameSettings.fullScreen && !this.fullscreen) {
             this.toggleFullscreen();
         }
 
-        try
-        {
+        try {
             Display.setVSyncEnabled(this.gameSettings.enableVsync);
-        }
-        catch (OpenGLException var2)
-        {
+        } catch (OpenGLException var2) {
             this.gameSettings.enableVsync = false;
             this.gameSettings.saveOptions();
         }
@@ -569,11 +444,10 @@
         this.renderGlobal.makeEntityOutlineShader();
     }
 
-    public void populateSearchTreeManager()
-    {
+    public void populateSearchTreeManager() {
         SearchTree<ItemStack> searchtree = new SearchTree<ItemStack>((p_193988_0_) ->
         {
-            return (List)p_193988_0_.getTooltip((EntityPlayer)null, ITooltipFlag.TooltipFlags.NORMAL).stream().map(TextFormatting::getTextWithoutFormattingCodes).map(String::trim).filter((p_193984_0_) -> {
+            return (List) p_193988_0_.getTooltip((EntityPlayer) null, ITooltipFlag.TooltipFlags.NORMAL).stream().map(TextFormatting::getTextWithoutFormattingCodes).map(String::trim).filter((p_193984_0_) -> {
                 return !p_193984_0_.isEmpty();
             }).collect(Collectors.toList());
         }, (p_193985_0_) ->
@@ -582,22 +456,21 @@
         });
         NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>create();
 
-        for (Item item : Item.REGISTRY)
-        {
+        for (Item item : Item.REGISTRY) {
             item.getSubItems(CreativeTabs.SEARCH, nonnulllist);
         }
 
         nonnulllist.forEach(searchtree::add);
         SearchTree<RecipeList> searchtree1 = new SearchTree<RecipeList>((p_193990_0_) ->
         {
-            return (List)p_193990_0_.getRecipes().stream().flatMap((p_193993_0_) -> {
-                return p_193993_0_.getRecipeOutput().getTooltip((EntityPlayer)null, ITooltipFlag.TooltipFlags.NORMAL).stream();
+            return (List) p_193990_0_.getRecipes().stream().flatMap((p_193993_0_) -> {
+                return p_193993_0_.getRecipeOutput().getTooltip((EntityPlayer) null, ITooltipFlag.TooltipFlags.NORMAL).stream();
             }).map(TextFormatting::getTextWithoutFormattingCodes).map(String::trim).filter((p_193994_0_) -> {
                 return !p_193994_0_.isEmpty();
             }).collect(Collectors.toList());
         }, (p_193991_0_) ->
         {
-            return (List)p_193991_0_.getRecipes().stream().map((p_193992_0_) -> {
+            return (List) p_193991_0_.getRecipes().stream().map((p_193992_0_) -> {
                 return Item.REGISTRY.getNameForObject(p_193992_0_.getRecipeOutput().getItem());
             }).collect(Collectors.toList());
         });
@@ -606,8 +479,7 @@
         this.searchTreeManager.register(SearchTreeManager.RECIPES, searchtree1);
     }
 
-    private void registerMetadataSerializers()
-    {
+    private void registerMetadataSerializers() {
         this.metadataSerializer_.registerMetadataSectionType(new TextureMetadataSectionSerializer(), TextureMetadataSection.class);
         this.metadataSerializer_.registerMetadataSectionType(new FontMetadataSectionSerializer(), FontMetadataSection.class);
         this.metadataSerializer_.registerMetadataSectionType(new AnimationMetadataSectionSerializer(), AnimationMetadataSection.class);
@@ -615,30 +487,22 @@
         this.metadataSerializer_.registerMetadataSectionType(new LanguageMetadataSectionSerializer(), LanguageMetadataSection.class);
     }
 
-    private void createDisplay() throws LWJGLException
-    {
+    private void createDisplay() throws LWJGLException {
         Display.setResizable(true);
         Display.setTitle("Minecraft 1.12.2");
 
-        try
-        {
+        try {
             Display.create((new PixelFormat()).withDepthBits(24));
-        }
-        catch (LWJGLException lwjglexception)
-        {
-            LOGGER.error("Couldn't set pixel format", (Throwable)lwjglexception);
+        } catch (LWJGLException lwjglexception) {
+            LOGGER.error("Couldn't set pixel format", (Throwable) lwjglexception);
 
-            try
-            {
+            try {
                 Thread.sleep(1000L);
-            }
-            catch (InterruptedException var3)
-            {
+            } catch (InterruptedException var3) {
                 ;
             }
 
-            if (this.fullscreen)
-            {
+            if (this.fullscreen) {
                 this.updateDisplayMode();
             }
 
@@ -646,62 +510,47 @@
         }
     }
 
-    private void setInitialDisplayMode() throws LWJGLException
-    {
-        if (this.fullscreen)
-        {
+    private void setInitialDisplayMode() throws LWJGLException {
+        if (this.fullscreen) {
             Display.setFullscreen(true);
             DisplayMode displaymode = Display.getDisplayMode();
             this.displayWidth = Math.max(1, displaymode.getWidth());
             this.displayHeight = Math.max(1, displaymode.getHeight());
-        }
-        else
-        {
+        } else {
             Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
         }
     }
 
-    private void setWindowIcon()
-    {
+    private void setWindowIcon() {
         Util.EnumOS util$enumos = Util.getOSType();
 
-        if (util$enumos != Util.EnumOS.OSX)
-        {
+        if (util$enumos != Util.EnumOS.OSX) {
             InputStream inputstream = null;
             InputStream inputstream1 = null;
 
-            try
-            {
+            try {
                 inputstream = this.mcDefaultResourcePack.getInputStreamAssets(new ResourceLocation("icons/icon_16x16.png"));
                 inputstream1 = this.mcDefaultResourcePack.getInputStreamAssets(new ResourceLocation("icons/icon_32x32.png"));
 
-                if (inputstream != null && inputstream1 != null)
-                {
-                    Display.setIcon(new ByteBuffer[] {this.readImageToBuffer(inputstream), this.readImageToBuffer(inputstream1)});
+                if (inputstream != null && inputstream1 != null) {
+                    Display.setIcon(new ByteBuffer[]{this.readImageToBuffer(inputstream), this.readImageToBuffer(inputstream1)});
                 }
-            }
-            catch (IOException ioexception)
-            {
-                LOGGER.error("Couldn't set icon", (Throwable)ioexception);
-            }
-            finally
-            {
+            } catch (IOException ioexception) {
+                LOGGER.error("Couldn't set icon", (Throwable) ioexception);
+            } finally {
                 IOUtils.closeQuietly(inputstream);
                 IOUtils.closeQuietly(inputstream1);
             }
         }
     }
 
-    private static boolean isJvm64bit()
-    {
-        String[] astring = new String[] {"sun.arch.data.model", "com.ibm.vm.bitmode", "os.arch"};
+    private static boolean isJvm64bit() {
+        String[] astring = new String[]{"sun.arch.data.model", "com.ibm.vm.bitmode", "os.arch"};
 
-        for (String s : astring)
-        {
+        for (String s : astring) {
             String s1 = System.getProperty(s);
 
-            if (s1 != null && s1.contains("64"))
-            {
+            if (s1 != null && s1.contains("64")) {
                 return true;
             }
         }
@@ -709,35 +558,25 @@
         return false;
     }
 
-    public Framebuffer getFramebuffer()
-    {
+    public Framebuffer getFramebuffer() {
         return this.framebufferMc;
     }
 
-    public String getVersion()
-    {
+    public String getVersion() {
         return this.launchedVersion;
     }
 
-    public String getVersionType()
-    {
+    public String getVersionType() {
         return this.versionType;
     }
 
-    private void startTimerHackThread()
-    {
-        Thread thread = new Thread("Timer hack thread")
-        {
-            public void run()
-            {
-                while (Minecraft.this.running)
-                {
-                    try
-                    {
+    private void startTimerHackThread() {
+        Thread thread = new Thread("Timer hack thread") {
+            public void run() {
+                while (Minecraft.this.running) {
+                    try {
                         Thread.sleep(2147483647L);
-                    }
-                    catch (InterruptedException var2)
-                    {
+                    } catch (InterruptedException var2) {
                         ;
                     }
                 }
@@ -747,69 +586,54 @@
         thread.start();
     }
 
-    public void crashed(CrashReport crash)
-    {
+    public void crashed(CrashReport crash) {
         this.hasCrashed = true;
         this.crashReporter = crash;
     }
 
-    public void displayCrashReport(CrashReport crashReportIn)
-    {
+    public void displayCrashReport(CrashReport crashReportIn) {
         File file1 = new File(getMinecraft().mcDataDir, "crash-reports");
         File file2 = new File(file1, "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-client.txt");
         Bootstrap.printToSYSOUT(crashReportIn.getCompleteReport());
 
         int retVal;
-        if (crashReportIn.getFile() != null)
-        {
+        if (crashReportIn.getFile() != null) {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReportIn.getFile());
             retVal = -1;
-        }
-        else if (crashReportIn.saveToFile(file2))
-        {
+        } else if (crashReportIn.saveToFile(file2)) {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
             retVal = -1;
-        }
-        else
-        {
+        } else {
             Bootstrap.printToSYSOUT("#@?@# Game crashed! Crash report could not be saved. #@?@#");
             retVal = -2;
         }
         net.minecraftforge.fml.common.FMLCommonHandler.instance().handleExit(retVal);
     }
 
-    public boolean isUnicode()
-    {
+    public boolean isUnicode() {
         return this.mcLanguageManager.isCurrentLocaleUnicode() || this.gameSettings.forceUnicodeFont;
     }
 
     @Deprecated // Forge: Use selective refreshResources method in FMLClientHandler
-    public void refreshResources()
-    {
+    public void refreshResources() {
         List<IResourcePack> list = Lists.newArrayList(this.defaultResourcePacks);
 
-        if (this.integratedServer != null)
-        {
+        if (this.integratedServer != null) {
             this.integratedServer.reload();
         }
 
-        for (ResourcePackRepository.Entry resourcepackrepository$entry : this.mcResourcePackRepository.getRepositoryEntries())
-        {
+        for (ResourcePackRepository.Entry resourcepackrepository$entry : this.mcResourcePackRepository.getRepositoryEntries()) {
             list.add(resourcepackrepository$entry.getResourcePack());
         }
 
-        if (this.mcResourcePackRepository.getServerResourcePack() != null)
-        {
+        if (this.mcResourcePackRepository.getServerResourcePack() != null) {
             list.add(this.mcResourcePackRepository.getServerResourcePack());
         }
 
-        try
-        {
+        try {
             this.mcResourceManager.reloadResources(list);
-        }
-        catch (RuntimeException runtimeexception)
-        {
-            LOGGER.info("Caught error stitching, removing all assigned resourcepacks", (Throwable)runtimeexception);
+        } catch (RuntimeException runtimeexception) {
+            LOGGER.info("Caught error stitching, removing all assigned resourcepacks", (Throwable) runtimeexception);
             list.clear();
             list.addAll(this.defaultResourcePacks);
             this.mcResourcePackRepository.setRepositories(Collections.emptyList());
@@ -821,20 +645,17 @@
 
         this.mcLanguageManager.parseLanguageMetadata(list);
 
-        if (this.renderGlobal != null)
-        {
+        if (this.renderGlobal != null) {
             this.renderGlobal.loadRenderers();
         }
     }
 
-    private ByteBuffer readImageToBuffer(InputStream imageStream) throws IOException
-    {
+    private ByteBuffer readImageToBuffer(InputStream imageStream) throws IOException {
         BufferedImage bufferedimage = ImageIO.read(imageStream);
-        int[] aint = bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), (int[])null, 0, bufferedimage.getWidth());
+        int[] aint = bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), (int[]) null, 0, bufferedimage.getWidth());
         ByteBuffer bytebuffer = ByteBuffer.allocate(4 * aint.length);
 
-        for (int i : aint)
-        {
+        for (int i : aint) {
             bytebuffer.putInt(i << 8 | i >> 24 & 255);
         }
 
@@ -842,45 +663,36 @@
         return bytebuffer;
     }
 
-    private void updateDisplayMode() throws LWJGLException
-    {
+    private void updateDisplayMode() throws LWJGLException {
         Set<DisplayMode> set = Sets.<DisplayMode>newHashSet();
         Collections.addAll(set, Display.getAvailableDisplayModes());
         DisplayMode displaymode = Display.getDesktopDisplayMode();
 
-        if (!set.contains(displaymode) && Util.getOSType() == Util.EnumOS.OSX)
-        {
+        if (!set.contains(displaymode) && Util.getOSType() == Util.EnumOS.OSX) {
             label52:
 
-            for (DisplayMode displaymode1 : MAC_DISPLAY_MODES)
-            {
+            for (DisplayMode displaymode1 : MAC_DISPLAY_MODES) {
                 boolean flag = true;
 
-                for (DisplayMode displaymode2 : set)
-                {
-                    if (displaymode2.getBitsPerPixel() == 32 && displaymode2.getWidth() == displaymode1.getWidth() && displaymode2.getHeight() == displaymode1.getHeight())
-                    {
+                for (DisplayMode displaymode2 : set) {
+                    if (displaymode2.getBitsPerPixel() == 32 && displaymode2.getWidth() == displaymode1.getWidth() && displaymode2.getHeight() == displaymode1.getHeight()) {
                         flag = false;
                         break;
                     }
                 }
 
-                if (!flag)
-                {
+                if (!flag) {
                     Iterator iterator = set.iterator();
                     DisplayMode displaymode3;
 
-                    while (true)
-                    {
-                        if (!iterator.hasNext())
-                        {
+                    while (true) {
+                        if (!iterator.hasNext()) {
                             continue label52;
                         }
 
-                        displaymode3 = (DisplayMode)iterator.next();
+                        displaymode3 = (DisplayMode) iterator.next();
 
-                        if (displaymode3.getBitsPerPixel() == 32 && displaymode3.getWidth() == displaymode1.getWidth() / 2 && displaymode3.getHeight() == displaymode1.getHeight() / 2)
-                        {
+                        if (displaymode3.getBitsPerPixel() == 32 && displaymode3.getWidth() == displaymode1.getWidth() / 2 && displaymode3.getHeight() == displaymode1.getHeight() / 2) {
                             break;
                         }
                     }
@@ -895,15 +707,14 @@
         this.displayHeight = displaymode.getHeight();
     }
 
-    public void drawSplashScreen(TextureManager textureManagerInstance) throws LWJGLException
-    {
+    public void drawSplashScreen(TextureManager textureManagerInstance) throws LWJGLException {
         ScaledResolution scaledresolution = new ScaledResolution(this);
         int i = scaledresolution.getScaleFactor();
         Framebuffer framebuffer = new Framebuffer(scaledresolution.getScaledWidth() * i, scaledresolution.getScaledHeight() * i, true);
         framebuffer.bindFramebuffer(false);
         GlStateManager.matrixMode(5889);
         GlStateManager.loadIdentity();
-        GlStateManager.ortho(0.0D, (double)scaledresolution.getScaledWidth(), (double)scaledresolution.getScaledHeight(), 0.0D, 1000.0D, 3000.0D);
+        GlStateManager.ortho(0.0D, (double) scaledresolution.getScaledWidth(), (double) scaledresolution.getScaledHeight(), 0.0D, 1000.0D, 3000.0D);
         GlStateManager.matrixMode(5888);
         GlStateManager.loadIdentity();
         GlStateManager.translate(0.0F, 0.0F, -2000.0F);
@@ -913,27 +724,22 @@
         GlStateManager.enableTexture2D();
         InputStream inputstream = null;
 
-        try
-        {
+        try {
             inputstream = this.mcDefaultResourcePack.getInputStream(LOCATION_MOJANG_PNG);
             this.mojangLogo = textureManagerInstance.getDynamicTextureLocation("logo", new DynamicTexture(ImageIO.read(inputstream)));
             textureManagerInstance.bindTexture(this.mojangLogo);
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             LOGGER.error("Unable to load logo: {}", LOCATION_MOJANG_PNG, ioexception);
-        }
-        finally
-        {
+        } finally {
             IOUtils.closeQuietly(inputstream);
         }
 
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        bufferbuilder.pos(0.0D, (double)this.displayHeight, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
-        bufferbuilder.pos((double)this.displayWidth, (double)this.displayHeight, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
-        bufferbuilder.pos((double)this.displayWidth, 0.0D, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
+        bufferbuilder.pos(0.0D, (double) this.displayHeight, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
+        bufferbuilder.pos((double) this.displayWidth, (double) this.displayHeight, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
+        bufferbuilder.pos((double) this.displayWidth, 0.0D, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).tex(0.0D, 0.0D).color(255, 255, 255, 255).endVertex();
         tessellator.draw();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
@@ -949,34 +755,28 @@
         this.updateDisplay();
     }
 
-    public void draw(int posX, int posY, int texU, int texV, int width, int height, int red, int green, int blue, int alpha)
-    {
+    public void draw(int posX, int posY, int texU, int texV, int width, int height, int red, int green, int blue, int alpha) {
         BufferBuilder bufferbuilder = Tessellator.getInstance().getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
         float f = 0.00390625F;
         float f1 = 0.00390625F;
-        bufferbuilder.pos((double)posX, (double)(posY + height), 0.0D).tex((double)((float)texU * 0.00390625F), (double)((float)(texV + height) * 0.00390625F)).color(red, green, blue, alpha).endVertex();
-        bufferbuilder.pos((double)(posX + width), (double)(posY + height), 0.0D).tex((double)((float)(texU + width) * 0.00390625F), (double)((float)(texV + height) * 0.00390625F)).color(red, green, blue, alpha).endVertex();
-        bufferbuilder.pos((double)(posX + width), (double)posY, 0.0D).tex((double)((float)(texU + width) * 0.00390625F), (double)((float)texV * 0.00390625F)).color(red, green, blue, alpha).endVertex();
-        bufferbuilder.pos((double)posX, (double)posY, 0.0D).tex((double)((float)texU * 0.00390625F), (double)((float)texV * 0.00390625F)).color(red, green, blue, alpha).endVertex();
+        bufferbuilder.pos((double) posX, (double) (posY + height), 0.0D).tex((double) ((float) texU * 0.00390625F), (double) ((float) (texV + height) * 0.00390625F)).color(red, green, blue, alpha).endVertex();
+        bufferbuilder.pos((double) (posX + width), (double) (posY + height), 0.0D).tex((double) ((float) (texU + width) * 0.00390625F), (double) ((float) (texV + height) * 0.00390625F)).color(red, green, blue, alpha).endVertex();
+        bufferbuilder.pos((double) (posX + width), (double) posY, 0.0D).tex((double) ((float) (texU + width) * 0.00390625F), (double) ((float) texV * 0.00390625F)).color(red, green, blue, alpha).endVertex();
+        bufferbuilder.pos((double) posX, (double) posY, 0.0D).tex((double) ((float) texU * 0.00390625F), (double) ((float) texV * 0.00390625F)).color(red, green, blue, alpha).endVertex();
         Tessellator.getInstance().draw();
     }
 
-    public ISaveFormat getSaveLoader()
-    {
+    public ISaveFormat getSaveLoader() {
         return this.saveLoader;
     }
 
-    public void displayGuiScreen(@Nullable GuiScreen guiScreenIn)
-    {
-        if (guiScreenIn == null && this.world == null)
-        {
+    public void displayGuiScreen(@Nullable GuiScreen guiScreenIn) {
+        if (guiScreenIn == null && this.world == null) {
             guiScreenIn = new GuiMainMenu();
+        } else if (guiScreenIn == null && this.player.getHealth() <= 0.0F) {
+            guiScreenIn = new GuiGameOver((ITextComponent) null);
         }
-        else if (guiScreenIn == null && this.player.getHealth() <= 0.0F)
-        {
-            guiScreenIn = new GuiGameOver((ITextComponent)null);
-        }
 
         GuiScreen old = this.currentScreen;
         net.minecraftforge.client.event.GuiOpenEvent event = new net.minecraftforge.client.event.GuiOpenEvent(guiScreenIn);
@@ -984,31 +784,26 @@
         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
 
         guiScreenIn = event.getGui();
-        if (old != null && guiScreenIn != old)
-        {
+        if (old != null && guiScreenIn != old) {
             old.onGuiClosed();
         }
 
-        if (guiScreenIn instanceof GuiMainMenu || guiScreenIn instanceof GuiMultiplayer)
-        {
+        if (guiScreenIn instanceof GuiMainMenu || guiScreenIn instanceof GuiMultiplayer) {
             this.gameSettings.showDebugInfo = false;
             this.ingameGUI.getChatGUI().clearChatMessages(true);
         }
 
         this.currentScreen = guiScreenIn;
 
-        if (guiScreenIn != null)
-        {
+        if (guiScreenIn != null) {
             this.setIngameNotInFocus();
             KeyBinding.unPressAllKeys();
 
-            while (Mouse.next())
-            {
+            while (Mouse.next()) {
                 ;
             }
 
-            while (Keyboard.next())
-            {
+            while (Keyboard.next()) {
                 ;
             }
 
@@ -1017,50 +812,38 @@
             int j = scaledresolution.getScaledHeight();
             guiScreenIn.setWorldAndResolution(this, i, j);
             this.skipRenderWorld = false;
-        }
-        else
-        {
+        } else {
             this.mcSoundHandler.resumeSounds();
             this.setIngameFocus();
         }
     }
 
-    private void checkGLError(String message)
-    {
+    private void checkGLError(String message) {
         int i = GlStateManager.glGetError();
 
-        if (i != 0)
-        {
+        if (i != 0) {
             String s = GLU.gluErrorString(i);
             LOGGER.error("########## GL ERROR ##########");
-            LOGGER.error("@ {}", (Object)message);
+            LOGGER.error("@ {}", (Object) message);
             LOGGER.error("{}: {}", Integer.valueOf(i), s);
         }
     }
 
-    public void shutdownMinecraftApplet()
-    {
-        try
-        {
+    public void shutdownMinecraftApplet() {
+        try {
             LOGGER.info("Stopping!");
 
-            try
-            {
-                this.loadWorld((WorldClient)null);
-            }
-            catch (Throwable var5)
-            {
+            try {
+                this.loadWorld((WorldClient) null);
+            } catch (Throwable var5) {
                 ;
             }
 
             this.mcSoundHandler.unloadSounds();
-        }
-        finally
-        {
+        } finally {
             Display.destroy();
 
-            if (!this.hasCrashed)
-            {
+            if (!this.hasCrashed) {
                 System.exit(0);
             }
         }
@@ -1068,23 +851,19 @@
         System.gc();
     }
 
-    private void runGameLoop() throws IOException
-    {
+    private void runGameLoop() throws IOException {
         long i = System.nanoTime();
         this.mcProfiler.startSection("root");
 
-        if (Display.isCreated() && Display.isCloseRequested())
-        {
+        if (Display.isCreated() && Display.isCloseRequested()) {
             this.shutdown();
         }
 
         this.timer.updateTimer();
         this.mcProfiler.startSection("scheduledExecutables");
 
-        synchronized (this.scheduledTasks)
-        {
-            while (!this.scheduledTasks.isEmpty())
-            {
+        synchronized (this.scheduledTasks) {
+            while (!this.scheduledTasks.isEmpty()) {
                 Util.runTask(this.scheduledTasks.poll(), LOGGER);
             }
         }
@@ -1093,8 +872,7 @@
         long l = System.nanoTime();
         this.mcProfiler.startSection("tick");
 
-        for (int j = 0; j < Math.min(10, this.timer.elapsedTicks); ++j)
-        {
+        for (int j = 0; j < Math.min(10, this.timer.elapsedTicks); ++j) {
             this.runTick();
         }
 
@@ -1112,8 +890,7 @@
         GlStateManager.enableTexture2D();
         this.mcProfiler.endSection();
 
-        if (!this.skipRenderWorld)
-        {
+        if (!this.skipRenderWorld) {
             net.minecraftforge.fml.common.FMLCommonHandler.instance().onRenderTickStart(this.timer.renderPartialTicks);
             this.mcProfiler.endStartSection("gameRenderer");
             this.entityRenderer.updateCameraAndRender(this.isGamePaused ? this.renderPartialTicksPaused : this.timer.renderPartialTicks, i);
@@ -1125,18 +902,14 @@
 
         this.mcProfiler.endSection();
 
-        if (this.gameSettings.showDebugInfo && this.gameSettings.showDebugProfilerChart && !this.gameSettings.hideGUI)
-        {
-            if (!this.mcProfiler.profilingEnabled)
-            {
+        if (this.gameSettings.showDebugInfo && this.gameSettings.showDebugProfilerChart && !this.gameSettings.hideGUI) {
+            if (!this.mcProfiler.profilingEnabled) {
                 this.mcProfiler.clearProfiling();
             }
 
             this.mcProfiler.profilingEnabled = true;
             this.displayDebugInfo(i1);
-        }
-        else
-        {
+        } else {
             this.mcProfiler.profilingEnabled = false;
             this.prevFrameTime = System.nanoTime();
         }
@@ -1156,14 +929,10 @@
         ++this.fpsCounter;
         boolean flag = this.isSingleplayer() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame() && !this.integratedServer.getPublic();
 
-        if (this.isGamePaused != flag)
-        {
-            if (this.isGamePaused)
-            {
+        if (this.isGamePaused != flag) {
+            if (this.isGamePaused) {
                 this.renderPartialTicksPaused = this.timer.renderPartialTicks;
-            }
-            else
-            {
+            } else {
                 this.timer.renderPartialTicks = this.renderPartialTicksPaused;
             }
 
@@ -1174,23 +943,20 @@
         this.frameTimer.addFrame(k - this.startNanoTime);
         this.startNanoTime = k;
 
-        while (getSystemTime() >= this.debugUpdateTime + 1000L)
-        {
+        while (getSystemTime() >= this.debugUpdateTime + 1000L) {
             debugFPS = this.fpsCounter;
-            this.debug = String.format("%d fps (%d chunk update%s) T: %s%s%s%s%s", debugFPS, RenderChunk.renderChunksUpdated, RenderChunk.renderChunksUpdated == 1 ? "" : "s", (float)this.gameSettings.limitFramerate == GameSettings.Options.FRAMERATE_LIMIT.getValueMax() ? "inf" : this.gameSettings.limitFramerate, this.gameSettings.enableVsync ? " vsync" : "", this.gameSettings.fancyGraphics ? "" : " fast", this.gameSettings.clouds == 0 ? "" : (this.gameSettings.clouds == 1 ? " fast-clouds" : " fancy-clouds"), OpenGlHelper.useVbo() ? " vbo" : "");
+            this.debug = String.format("%d fps (%d chunk update%s) T: %s%s%s%s%s", debugFPS, RenderChunk.renderChunksUpdated, RenderChunk.renderChunksUpdated == 1 ? "" : "s", (float) this.gameSettings.limitFramerate == GameSettings.Options.FRAMERATE_LIMIT.getValueMax() ? "inf" : this.gameSettings.limitFramerate, this.gameSettings.enableVsync ? " vsync" : "", this.gameSettings.fancyGraphics ? "" : " fast", this.gameSettings.clouds == 0 ? "" : (this.gameSettings.clouds == 1 ? " fast-clouds" : " fancy-clouds"), OpenGlHelper.useVbo() ? " vbo" : "");
             RenderChunk.renderChunksUpdated = 0;
             this.debugUpdateTime += 1000L;
             this.fpsCounter = 0;
             this.usageSnooper.addMemoryStatsToSnooper();
 
-            if (!this.usageSnooper.isSnooperRunning())
-            {
+            if (!this.usageSnooper.isSnooperRunning()) {
                 this.usageSnooper.startSnooper();
             }
         }
 
-        if (this.isFramerateLimitBelowMax())
-        {
+        if (this.isFramerateLimitBelowMax()) {
             this.mcProfiler.startSection("fpslimit_wait");
             Display.sync(this.getLimitFramerate());
             this.mcProfiler.endSection();
@@ -1199,32 +965,26 @@
         this.mcProfiler.endSection();
     }
 
-    public void updateDisplay()
-    {
+    public void updateDisplay() {
         this.mcProfiler.startSection("display_update");
         Display.update();
         this.mcProfiler.endSection();
         this.checkWindowResize();
     }
 
-    protected void checkWindowResize()
-    {
-        if (!this.fullscreen && Display.wasResized())
-        {
+    protected void checkWindowResize() {
+        if (!this.fullscreen && Display.wasResized()) {
             int i = this.displayWidth;
             int j = this.displayHeight;
             this.displayWidth = Display.getWidth();
             this.displayHeight = Display.getHeight();
 
-            if (this.displayWidth != i || this.displayHeight != j)
-            {
-                if (this.displayWidth <= 0)
-                {
+            if (this.displayWidth != i || this.displayHeight != j) {
+                if (this.displayWidth <= 0) {
                     this.displayWidth = 1;
                 }
 
-                if (this.displayHeight <= 0)
-                {
+                if (this.displayHeight <= 0) {
                     this.displayHeight = 1;
                 }
 
@@ -1233,69 +993,51 @@
         }
     }
 
-    public int getLimitFramerate()
-    {
+    public int getLimitFramerate() {
         return this.world == null && this.currentScreen != null ? 30 : this.gameSettings.limitFramerate;
     }
 
-    public boolean isFramerateLimitBelowMax()
-    {
-        return (float)this.getLimitFramerate() < GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+    public boolean isFramerateLimitBelowMax() {
+        return (float) this.getLimitFramerate() < GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
     }
 
-    public void freeMemory()
-    {
-        try
-        {
+    public void freeMemory() {
+        try {
             memoryReserve = new byte[0];
             this.renderGlobal.deleteAllDisplayLists();
-        }
-        catch (Throwable var3)
-        {
+        } catch (Throwable var3) {
             ;
         }
 
-        try
-        {
+        try {
             System.gc();
-            this.loadWorld((WorldClient)null);
-        }
-        catch (Throwable var2)
-        {
+            this.loadWorld((WorldClient) null);
+        } catch (Throwable var2) {
             ;
         }
 
         System.gc();
     }
 
-    private void updateDebugProfilerName(int keyCount)
-    {
+    private void updateDebugProfilerName(int keyCount) {
         List<Profiler.Result> list = this.mcProfiler.getProfilingData(this.debugProfilerName);
 
-        if (!list.isEmpty())
-        {
+        if (!list.isEmpty()) {
             Profiler.Result profiler$result = list.remove(0);
 
-            if (keyCount == 0)
-            {
-                if (!profiler$result.profilerName.isEmpty())
-                {
+            if (keyCount == 0) {
+                if (!profiler$result.profilerName.isEmpty()) {
                     int i = this.debugProfilerName.lastIndexOf(46);
 
-                    if (i >= 0)
-                    {
+                    if (i >= 0) {
                         this.debugProfilerName = this.debugProfilerName.substring(0, i);
                     }
                 }
-            }
-            else
-            {
+            } else {
                 --keyCount;
 
-                if (keyCount < list.size() && !"unspecified".equals((list.get(keyCount)).profilerName))
-                {
-                    if (!this.debugProfilerName.isEmpty())
-                    {
+                if (keyCount < list.size() && !"unspecified".equals((list.get(keyCount)).profilerName)) {
+                    if (!this.debugProfilerName.isEmpty()) {
                         this.debugProfilerName = this.debugProfilerName + ".";
                     }
 
@@ -1305,17 +1047,15 @@
         }
     }
 
-    private void displayDebugInfo(long elapsedTicksTime)
-    {
-        if (this.mcProfiler.profilingEnabled)
-        {
+    private void displayDebugInfo(long elapsedTicksTime) {
+        if (this.mcProfiler.profilingEnabled) {
             List<Profiler.Result> list = this.mcProfiler.getProfilingData(this.debugProfilerName);
             Profiler.Result profiler$result = list.remove(0);
             GlStateManager.clear(256);
             GlStateManager.matrixMode(5889);
             GlStateManager.enableColorMaterial();
             GlStateManager.loadIdentity();
-            GlStateManager.ortho(0.0D, (double)this.displayWidth, (double)this.displayHeight, 0.0D, 1000.0D, 3000.0D);
+            GlStateManager.ortho(0.0D, (double) this.displayWidth, (double) this.displayHeight, 0.0D, 1000.0D, 3000.0D);
             GlStateManager.matrixMode(5888);
             GlStateManager.loadIdentity();
             GlStateManager.translate(0.0F, 0.0F, -2000.0F);
@@ -1328,16 +1068,15 @@
             int k = this.displayHeight - 320;
             GlStateManager.enableBlend();
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
-            bufferbuilder.pos((double)((float)j - 176.0F), (double)((float)k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
-            bufferbuilder.pos((double)((float)j - 176.0F), (double)(k + 320), 0.0D).color(200, 0, 0, 0).endVertex();
-            bufferbuilder.pos((double)((float)j + 176.0F), (double)(k + 320), 0.0D).color(200, 0, 0, 0).endVertex();
-            bufferbuilder.pos((double)((float)j + 176.0F), (double)((float)k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) ((float) j - 176.0F), (double) ((float) k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) ((float) j - 176.0F), (double) (k + 320), 0.0D).color(200, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) ((float) j + 176.0F), (double) (k + 320), 0.0D).color(200, 0, 0, 0).endVertex();
+            bufferbuilder.pos((double) ((float) j + 176.0F), (double) ((float) k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
             tessellator.draw();
             GlStateManager.disableBlend();
             double d0 = 0.0D;
 
-            for (int l = 0; l < list.size(); ++l)
-            {
+            for (int l = 0; l < list.size(); ++l) {
                 Profiler.Result profiler$result1 = list.get(l);
                 int i1 = MathHelper.floor(profiler$result1.usePercentage / 4.0D) + 1;
                 bufferbuilder.begin(6, DefaultVertexFormats.POSITION_COLOR);
@@ -1345,26 +1084,24 @@
                 int k1 = j1 >> 16 & 255;
                 int l1 = j1 >> 8 & 255;
                 int i2 = j1 & 255;
-                bufferbuilder.pos((double)j, (double)k, 0.0D).color(k1, l1, i2, 255).endVertex();
+                bufferbuilder.pos((double) j, (double) k, 0.0D).color(k1, l1, i2, 255).endVertex();
 
-                for (int j2 = i1; j2 >= 0; --j2)
-                {
-                    float f = (float)((d0 + profiler$result1.usePercentage * (double)j2 / (double)i1) * (Math.PI * 2D) / 100.0D);
+                for (int j2 = i1; j2 >= 0; --j2) {
+                    float f = (float) ((d0 + profiler$result1.usePercentage * (double) j2 / (double) i1) * (Math.PI * 2D) / 100.0D);
                     float f1 = MathHelper.sin(f) * 160.0F;
                     float f2 = MathHelper.cos(f) * 160.0F * 0.5F;
-                    bufferbuilder.pos((double)((float)j + f1), (double)((float)k - f2), 0.0D).color(k1, l1, i2, 255).endVertex();
+                    bufferbuilder.pos((double) ((float) j + f1), (double) ((float) k - f2), 0.0D).color(k1, l1, i2, 255).endVertex();
                 }
 
                 tessellator.draw();
                 bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
 
-                for (int i3 = i1; i3 >= 0; --i3)
-                {
-                    float f3 = (float)((d0 + profiler$result1.usePercentage * (double)i3 / (double)i1) * (Math.PI * 2D) / 100.0D);
+                for (int i3 = i1; i3 >= 0; --i3) {
+                    float f3 = (float) ((d0 + profiler$result1.usePercentage * (double) i3 / (double) i1) * (Math.PI * 2D) / 100.0D);
                     float f4 = MathHelper.sin(f3) * 160.0F;
                     float f5 = MathHelper.cos(f3) * 160.0F * 0.5F;
-                    bufferbuilder.pos((double)((float)j + f4), (double)((float)k - f5), 0.0D).color(k1 >> 1, l1 >> 1, i2 >> 1, 255).endVertex();
-                    bufferbuilder.pos((double)((float)j + f4), (double)((float)k - f5 + 10.0F), 0.0D).color(k1 >> 1, l1 >> 1, i2 >> 1, 255).endVertex();
+                    bufferbuilder.pos((double) ((float) j + f4), (double) ((float) k - f5), 0.0D).color(k1 >> 1, l1 >> 1, i2 >> 1, 255).endVertex();
+                    bufferbuilder.pos((double) ((float) j + f4), (double) ((float) k - f5 + 10.0F), 0.0D).color(k1 >> 1, l1 >> 1, i2 >> 1, 255).endVertex();
                 }
 
                 tessellator.draw();
@@ -1375,154 +1112,120 @@
             GlStateManager.enableTexture2D();
             String s = "";
 
-            if (!"unspecified".equals(profiler$result.profilerName))
-            {
+            if (!"unspecified".equals(profiler$result.profilerName)) {
                 s = s + "[0] ";
             }
 
-            if (profiler$result.profilerName.isEmpty())
-            {
+            if (profiler$result.profilerName.isEmpty()) {
                 s = s + "ROOT ";
-            }
-            else
-            {
+            } else {
                 s = s + profiler$result.profilerName + ' ';
             }
 
             int l2 = 16777215;
-            this.fontRenderer.drawStringWithShadow(s, (float)(j - 160), (float)(k - 80 - 16), 16777215);
+            this.fontRenderer.drawStringWithShadow(s, (float) (j - 160), (float) (k - 80 - 16), 16777215);
             s = decimalformat.format(profiler$result.totalUsePercentage) + "%";
-            this.fontRenderer.drawStringWithShadow(s, (float)(j + 160 - this.fontRenderer.getStringWidth(s)), (float)(k - 80 - 16), 16777215);
+            this.fontRenderer.drawStringWithShadow(s, (float) (j + 160 - this.fontRenderer.getStringWidth(s)), (float) (k - 80 - 16), 16777215);
 
-            for (int k2 = 0; k2 < list.size(); ++k2)
-            {
+            for (int k2 = 0; k2 < list.size(); ++k2) {
                 Profiler.Result profiler$result2 = list.get(k2);
                 StringBuilder stringbuilder = new StringBuilder();
 
-                if ("unspecified".equals(profiler$result2.profilerName))
-                {
+                if ("unspecified".equals(profiler$result2.profilerName)) {
                     stringbuilder.append("[?] ");
-                }
-                else
-                {
+                } else {
                     stringbuilder.append("[").append(k2 + 1).append("] ");
                 }
 
                 String s1 = stringbuilder.append(profiler$result2.profilerName).toString();
-                this.fontRenderer.drawStringWithShadow(s1, (float)(j - 160), (float)(k + 80 + k2 * 8 + 20), profiler$result2.getColor());
+                this.fontRenderer.drawStringWithShadow(s1, (float) (j - 160), (float) (k + 80 + k2 * 8 + 20), profiler$result2.getColor());
                 s1 = decimalformat.format(profiler$result2.usePercentage) + "%";
-                this.fontRenderer.drawStringWithShadow(s1, (float)(j + 160 - 50 - this.fontRenderer.getStringWidth(s1)), (float)(k + 80 + k2 * 8 + 20), profiler$result2.getColor());
+                this.fontRenderer.drawStringWithShadow(s1, (float) (j + 160 - 50 - this.fontRenderer.getStringWidth(s1)), (float) (k + 80 + k2 * 8 + 20), profiler$result2.getColor());
                 s1 = decimalformat.format(profiler$result2.totalUsePercentage) + "%";
-                this.fontRenderer.drawStringWithShadow(s1, (float)(j + 160 - this.fontRenderer.getStringWidth(s1)), (float)(k + 80 + k2 * 8 + 20), profiler$result2.getColor());
+                this.fontRenderer.drawStringWithShadow(s1, (float) (j + 160 - this.fontRenderer.getStringWidth(s1)), (float) (k + 80 + k2 * 8 + 20), profiler$result2.getColor());
             }
         }
     }
 
-    public void shutdown()
-    {
+    public void shutdown() {
         this.running = false;
     }
 
-    public void setIngameFocus()
-    {
-        if (Display.isActive())
-        {
-            if (!this.inGameHasFocus)
-            {
-                if (!IS_RUNNING_ON_MAC)
-                {
+    public void setIngameFocus() {
+        if (Display.isActive()) {
+            if (!this.inGameHasFocus) {
+                if (!IS_RUNNING_ON_MAC) {
                     KeyBinding.updateKeyBindState();
                 }
 
                 this.inGameHasFocus = true;
                 this.mouseHelper.grabMouseCursor();
-                this.displayGuiScreen((GuiScreen)null);
+                this.displayGuiScreen((GuiScreen) null);
                 this.leftClickCounter = 10000;
             }
         }
     }
 
-    public void setIngameNotInFocus()
-    {
-        if (this.inGameHasFocus)
-        {
+    public void setIngameNotInFocus() {
+        if (this.inGameHasFocus) {
             this.inGameHasFocus = false;
             this.mouseHelper.ungrabMouseCursor();
         }
     }
 
-    public void displayInGameMenu()
-    {
-        if (this.currentScreen == null)
-        {
+    public void displayInGameMenu() {
+        if (this.currentScreen == null) {
             this.displayGuiScreen(new GuiIngameMenu());
 
-            if (this.isSingleplayer() && !this.integratedServer.getPublic())
-            {
+            if (this.isSingleplayer() && !this.integratedServer.getPublic()) {
                 this.mcSoundHandler.pauseSounds();
             }
         }
     }
 
-    private void sendClickBlockToController(boolean leftClick)
-    {
-        if (!leftClick)
-        {
+    private void sendClickBlockToController(boolean leftClick) {
+        if (!leftClick) {
             this.leftClickCounter = 0;
         }
 
-        if (this.leftClickCounter <= 0 && !this.player.isHandActive())
-        {
-            if (leftClick && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
-            {
+        if (this.leftClickCounter <= 0 && !this.player.isHandActive()) {
+            if (leftClick && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK) {
                 BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                if (!this.world.isAirBlock(blockpos) && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit))
-                {
+                if (!this.world.isAirBlock(blockpos) && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit)) {
                     this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver);
                     this.player.swingArm(EnumHand.MAIN_HAND);
                 }
-            }
-            else
-            {
+            } else {
                 this.playerController.resetBlockRemoving();
             }
         }
     }
 
-    private void clickMouse()
-    {
-        if (this.leftClickCounter <= 0)
-        {
-            if (this.objectMouseOver == null)
-            {
+    private void clickMouse() {
+        if (this.leftClickCounter <= 0) {
+            if (this.objectMouseOver == null) {
                 LOGGER.error("Null returned as 'hitResult', this shouldn't happen!");
 
-                if (this.playerController.isNotCreative())
-                {
+                if (this.playerController.isNotCreative()) {
                     this.leftClickCounter = 10;
                 }
-            }
-            else if (!this.player.isRowingBoat())
-            {
-                switch (this.objectMouseOver.typeOfHit)
-                {
+            } else if (!this.player.isRowingBoat()) {
+                switch (this.objectMouseOver.typeOfHit) {
                     case ENTITY:
                         this.playerController.attackEntity(this.player, this.objectMouseOver.entityHit);
                         break;
                     case BLOCK:
                         BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                        if (!this.world.isAirBlock(blockpos))
-                        {
+                        if (!this.world.isAirBlock(blockpos)) {
                             this.playerController.clickBlock(blockpos, this.objectMouseOver.sideHit);
                             break;
                         }
 
                     case MISS:
 
-                        if (this.playerController.isNotCreative())
-                        {
+                        if (this.playerController.isNotCreative()) {
                             this.leftClickCounter = 10;
                         }
 
@@ -1536,36 +1239,27 @@
     }
 
     @SuppressWarnings("incomplete-switch")
-    private void rightClickMouse()
-    {
-        if (!this.playerController.getIsHittingBlock())
-        {
+    private void rightClickMouse() {
+        if (!this.playerController.getIsHittingBlock()) {
             this.rightClickDelayTimer = 4;
 
-            if (!this.player.isRowingBoat())
-            {
-                if (this.objectMouseOver == null)
-                {
+            if (!this.player.isRowingBoat()) {
+                if (this.objectMouseOver == null) {
                     LOGGER.warn("Null returned as 'hitResult', this shouldn't happen!");
                 }
 
-                for (EnumHand enumhand : EnumHand.values())
-                {
+                for (EnumHand enumhand : EnumHand.values()) {
                     ItemStack itemstack = this.player.getHeldItem(enumhand);
 
-                    if (this.objectMouseOver != null)
-                    {
-                        switch (this.objectMouseOver.typeOfHit)
-                        {
+                    if (this.objectMouseOver != null) {
+                        switch (this.objectMouseOver.typeOfHit) {
                             case ENTITY:
 
-                                if (this.playerController.interactWithEntity(this.player, this.objectMouseOver.entityHit, this.objectMouseOver, enumhand) == EnumActionResult.SUCCESS)
-                                {
+                                if (this.playerController.interactWithEntity(this.player, this.objectMouseOver.entityHit, this.objectMouseOver, enumhand) == EnumActionResult.SUCCESS) {
                                     return;
                                 }
 
-                                if (this.playerController.interactWithEntity(this.player, this.objectMouseOver.entityHit, enumhand) == EnumActionResult.SUCCESS)
-                                {
+                                if (this.playerController.interactWithEntity(this.player, this.objectMouseOver.entityHit, enumhand) == EnumActionResult.SUCCESS) {
                                     return;
                                 }
 
@@ -1573,17 +1267,14 @@
                             case BLOCK:
                                 BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                                if (this.world.getBlockState(blockpos).getMaterial() != Material.AIR)
-                                {
+                                if (this.world.getBlockState(blockpos).getMaterial() != Material.AIR) {
                                     int i = itemstack.getCount();
                                     EnumActionResult enumactionresult = this.playerController.processRightClickBlock(this.player, this.world, blockpos, this.objectMouseOver.sideHit, this.objectMouseOver.hitVec, enumhand);
 
-                                    if (enumactionresult == EnumActionResult.SUCCESS)
-                                    {
+                                    if (enumactionresult == EnumActionResult.SUCCESS) {
                                         this.player.swingArm(enumhand);
 
-                                        if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.playerController.isInCreativeMode()))
-                                        {
+                                        if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.playerController.isInCreativeMode())) {
                                             this.entityRenderer.itemRenderer.resetEquippedProgress(enumhand);
                                         }
 
@@ -1593,9 +1284,9 @@
                         }
                     }
 
-                    if (itemstack.isEmpty() && (this.objectMouseOver == null || this.objectMouseOver.typeOfHit == RayTraceResult.Type.MISS)) net.minecraftforge.common.ForgeHooks.onEmptyClick(this.player, enumhand);
-                    if (!itemstack.isEmpty() && this.playerController.processRightClick(this.player, this.world, enumhand) == EnumActionResult.SUCCESS)
-                    {
+                    if (itemstack.isEmpty() && (this.objectMouseOver == null || this.objectMouseOver.typeOfHit == RayTraceResult.Type.MISS))
+                        net.minecraftforge.common.ForgeHooks.onEmptyClick(this.player, enumhand);
+                    if (!itemstack.isEmpty() && this.playerController.processRightClick(this.player, this.world, enumhand) == EnumActionResult.SUCCESS) {
                         this.entityRenderer.itemRenderer.resetEquippedProgress(enumhand);
                         return;
                     }
@@ -1604,52 +1295,40 @@
         }
     }
 
-    public void toggleFullscreen()
-    {
-        try
-        {
+    public void toggleFullscreen() {
+        try {
             this.fullscreen = !this.fullscreen;
             this.gameSettings.fullScreen = this.fullscreen;
 
-            if (this.fullscreen)
-            {
+            if (this.fullscreen) {
                 this.updateDisplayMode();
                 this.displayWidth = Display.getDisplayMode().getWidth();
                 this.displayHeight = Display.getDisplayMode().getHeight();
 
-                if (this.displayWidth <= 0)
-                {
+                if (this.displayWidth <= 0) {
                     this.displayWidth = 1;
                 }
 
-                if (this.displayHeight <= 0)
-                {
+                if (this.displayHeight <= 0) {
                     this.displayHeight = 1;
                 }
-            }
-            else
-            {
+            } else {
                 Display.setDisplayMode(new DisplayMode(this.tempDisplayWidth, this.tempDisplayHeight));
                 this.displayWidth = this.tempDisplayWidth;
                 this.displayHeight = this.tempDisplayHeight;
 
-                if (this.displayWidth <= 0)
-                {
+                if (this.displayWidth <= 0) {
                     this.displayWidth = 1;
                 }
 
-                if (this.displayHeight <= 0)
-                {
+                if (this.displayHeight <= 0) {
                     this.displayHeight = 1;
                 }
             }
 
-            if (this.currentScreen != null)
-            {
+            if (this.currentScreen != null) {
                 this.resize(this.displayWidth, this.displayHeight);
-            }
-            else
-            {
+            } else {
                 this.updateFramebufferSize();
             }
 
@@ -1661,20 +1340,16 @@
             }
             Display.setVSyncEnabled(this.gameSettings.enableVsync);
             this.updateDisplay();
+        } catch (Exception exception) {
+            LOGGER.error("Couldn't toggle fullscreen", (Throwable) exception);
         }
-        catch (Exception exception)
-        {
-            LOGGER.error("Couldn't toggle fullscreen", (Throwable)exception);
-        }
     }
 
-    public void resize(int width, int height)
-    {
+    public void resize(int width, int height) {
         this.displayWidth = Math.max(1, width);
         this.displayHeight = Math.max(1, height);
 
-        if (this.currentScreen != null)
-        {
+        if (this.currentScreen != null) {
             ScaledResolution scaledresolution = new ScaledResolution(this);
             this.currentScreen.onResize(this, scaledresolution.getScaledWidth(), scaledresolution.getScaledHeight());
         }
@@ -1683,25 +1358,20 @@
         this.updateFramebufferSize();
     }
 
-    private void updateFramebufferSize()
-    {
+    private void updateFramebufferSize() {
         this.framebufferMc.createBindFramebuffer(this.displayWidth, this.displayHeight);
 
-        if (this.entityRenderer != null)
-        {
+        if (this.entityRenderer != null) {
             this.entityRenderer.updateShaderGroupSize(this.displayWidth, this.displayHeight);
         }
     }
 
-    public MusicTicker getMusicTicker()
-    {
+    public MusicTicker getMusicTicker() {
         return this.mcMusicTicker;
     }
 
-    public void runTick() throws IOException
-    {
-        if (this.rightClickDelayTimer > 0)
-        {
+    public void runTick() throws IOException {
+        if (this.rightClickDelayTimer > 0) {
             --this.rightClickDelayTimer;
         }
 
@@ -1709,8 +1379,7 @@
 
         this.mcProfiler.startSection("gui");
 
-        if (!this.isGamePaused)
-        {
+        if (!this.isGamePaused) {
             this.ingameGUI.updateTick();
         }
 
@@ -1719,73 +1388,52 @@
         this.tutorial.onMouseHover(this.world, this.objectMouseOver);
         this.mcProfiler.startSection("gameMode");
 
-        if (!this.isGamePaused && this.world != null)
-        {
+        if (!this.isGamePaused && this.world != null) {
             this.playerController.updateController();
         }
 
         this.mcProfiler.endStartSection("textures");
 
-        if (this.world != null)
-        {
+        if (this.world != null) {
             this.renderEngine.tick();
         }
 
-        if (this.currentScreen == null && this.player != null)
-        {
-            if (this.player.getHealth() <= 0.0F && !(this.currentScreen instanceof GuiGameOver))
-            {
-                this.displayGuiScreen((GuiScreen)null);
-            }
-            else if (this.player.isPlayerSleeping() && this.world != null)
-            {
+        if (this.currentScreen == null && this.player != null) {
+            if (this.player.getHealth() <= 0.0F && !(this.currentScreen instanceof GuiGameOver)) {
+                this.displayGuiScreen((GuiScreen) null);
+            } else if (this.player.isPlayerSleeping() && this.world != null) {
                 this.displayGuiScreen(new GuiSleepMP());
             }
+        } else if (this.currentScreen != null && this.currentScreen instanceof GuiSleepMP && !this.player.isPlayerSleeping()) {
+            this.displayGuiScreen((GuiScreen) null);
         }
-        else if (this.currentScreen != null && this.currentScreen instanceof GuiSleepMP && !this.player.isPlayerSleeping())
-        {
-            this.displayGuiScreen((GuiScreen)null);
-        }
 
-        if (this.currentScreen != null)
-        {
+        if (this.currentScreen != null) {
             this.leftClickCounter = 10000;
         }
 
-        if (this.currentScreen != null)
-        {
-            try
-            {
+        if (this.currentScreen != null) {
+            try {
                 this.currentScreen.handleInput();
-            }
-            catch (Throwable throwable1)
-            {
+            } catch (Throwable throwable1) {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Updating screen events");
                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Affected screen");
-                crashreportcategory.addDetail("Screen name", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
-                    {
+                crashreportcategory.addDetail("Screen name", new ICrashReportDetail<String>() {
+                    public String call() throws Exception {
                         return Minecraft.this.currentScreen.getClass().getCanonicalName();
                     }
                 });
                 throw new ReportedException(crashreport);
             }
 
-            if (this.currentScreen != null)
-            {
-                try
-                {
+            if (this.currentScreen != null) {
+                try {
                     this.currentScreen.updateScreen();
-                }
-                catch (Throwable throwable)
-                {
+                } catch (Throwable throwable) {
                     CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Ticking screen");
                     CrashReportCategory crashreportcategory1 = crashreport1.makeCategory("Affected screen");
-                    crashreportcategory1.addDetail("Screen name", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
+                    crashreportcategory1.addDetail("Screen name", new ICrashReportDetail<String>() {
+                        public String call() throws Exception {
                             return Minecraft.this.currentScreen.getClass().getCanonicalName();
                         }
                     });
@@ -1794,13 +1442,11 @@
             }
         }
 
-        if (this.currentScreen == null || this.currentScreen.allowUserInput)
-        {
+        if (this.currentScreen == null || this.currentScreen.allowUserInput) {
             this.mcProfiler.endStartSection("mouse");
             this.runTickMouse();
 
-            if (this.leftClickCounter > 0)
-            {
+            if (this.leftClickCounter > 0) {
                 --this.leftClickCounter;
             }
 
@@ -1808,14 +1454,11 @@
             this.runTickKeyboard();
         }
 
-        if (this.world != null)
-        {
-            if (this.player != null)
-            {
+        if (this.world != null) {
+            if (this.player != null) {
                 ++this.joinPlayerCounter;
 
-                if (this.joinPlayerCounter == 30)
-                {
+                if (this.joinPlayerCounter == 30) {
                     this.joinPlayerCounter = 0;
                     this.world.joinEntityInSurroundings(this.player);
                 }
@@ -1823,63 +1466,48 @@
 
             this.mcProfiler.endStartSection("gameRenderer");
 
-            if (!this.isGamePaused)
-            {
+            if (!this.isGamePaused) {
                 this.entityRenderer.updateRenderer();
             }
 
             this.mcProfiler.endStartSection("levelRenderer");
 
-            if (!this.isGamePaused)
-            {
+            if (!this.isGamePaused) {
                 this.renderGlobal.updateClouds();
             }
 
             this.mcProfiler.endStartSection("level");
 
-            if (!this.isGamePaused)
-            {
-                if (this.world.getLastLightningBolt() > 0)
-                {
+            if (!this.isGamePaused) {
+                if (this.world.getLastLightningBolt() > 0) {
                     this.world.setLastLightningBolt(this.world.getLastLightningBolt() - 1);
                 }
 
                 this.world.updateEntities();
             }
-        }
-        else if (this.entityRenderer.isShaderActive())
-        {
+        } else if (this.entityRenderer.isShaderActive()) {
             this.entityRenderer.stopUseShader();
         }
 
-        if (!this.isGamePaused)
-        {
+        if (!this.isGamePaused) {
             this.mcMusicTicker.update();
             this.mcSoundHandler.update();
         }
 
-        if (this.world != null)
-        {
-            if (!this.isGamePaused)
-            {
+        if (this.world != null) {
+            if (!this.isGamePaused) {
                 this.world.setAllowedSpawnTypes(this.world.getDifficulty() != EnumDifficulty.PEACEFUL, true);
                 this.tutorial.update();
 
-                try
-                {
+                try {
                     this.world.tick();
-                }
-                catch (Throwable throwable2)
-                {
+                } catch (Throwable throwable2) {
                     CrashReport crashreport2 = CrashReport.makeCrashReport(throwable2, "Exception in world tick");
 
-                    if (this.world == null)
-                    {
+                    if (this.world == null) {
                         CrashReportCategory crashreportcategory2 = crashreport2.makeCategory("Affected level");
                         crashreportcategory2.addCrashSection("Problem", "Level is null!");
-                    }
-                    else
-                    {
+                    } else {
                         this.world.addWorldInfoToCrashReport(crashreport2);
                     }
 
@@ -1889,20 +1517,16 @@
 
             this.mcProfiler.endStartSection("animateTick");
 
-            if (!this.isGamePaused && this.world != null)
-            {
+            if (!this.isGamePaused && this.world != null) {
                 this.world.doVoidFogParticles(MathHelper.floor(this.player.posX), MathHelper.floor(this.player.posY), MathHelper.floor(this.player.posZ));
             }
 
             this.mcProfiler.endStartSection("particles");
 
-            if (!this.isGamePaused)
-            {
+            if (!this.isGamePaused) {
                 this.effectRenderer.updateEffects();
             }
-        }
-        else if (this.myNetworkManager != null)
-        {
+        } else if (this.myNetworkManager != null) {
             this.mcProfiler.endStartSection("pendingConnection");
             this.myNetworkManager.processReceivedPackets();
         }
@@ -1912,102 +1536,76 @@
         this.systemTime = getSystemTime();
     }
 
-    private void runTickKeyboard() throws IOException
-    {
-        while (Keyboard.next())
-        {
+    private void runTickKeyboard() throws IOException {
+        while (Keyboard.next()) {
             int i = Keyboard.getEventKey() == 0 ? Keyboard.getEventCharacter() + 256 : Keyboard.getEventKey();
 
-            if (this.debugCrashKeyPressTime > 0L)
-            {
-                if (getSystemTime() - this.debugCrashKeyPressTime >= 6000L)
-                {
+            if (this.debugCrashKeyPressTime > 0L) {
+                if (getSystemTime() - this.debugCrashKeyPressTime >= 6000L) {
                     throw new ReportedException(new CrashReport("Manually triggered debug crash", new Throwable()));
                 }
 
-                if (!Keyboard.isKeyDown(46) || !Keyboard.isKeyDown(61))
-                {
+                if (!Keyboard.isKeyDown(46) || !Keyboard.isKeyDown(61)) {
                     this.debugCrashKeyPressTime = -1L;
                 }
-            }
-            else if (Keyboard.isKeyDown(46) && Keyboard.isKeyDown(61))
-            {
+            } else if (Keyboard.isKeyDown(46) && Keyboard.isKeyDown(61)) {
                 this.actionKeyF3 = true;
                 this.debugCrashKeyPressTime = getSystemTime();
             }
 
             this.dispatchKeypresses();
 
-            if (this.currentScreen != null)
-            {
+            if (this.currentScreen != null) {
                 this.currentScreen.handleKeyboardInput();
             }
 
             boolean flag = Keyboard.getEventKeyState();
 
-            if (flag)
-            {
-                if (i == 62 && this.entityRenderer != null)
-                {
+            if (flag) {
+                if (i == 62 && this.entityRenderer != null) {
                     this.entityRenderer.switchUseShader();
                 }
 
                 boolean flag1 = false;
 
-                if (this.currentScreen == null)
-                {
-                    if (i == 1)
-                    {
+                if (this.currentScreen == null) {
+                    if (i == 1) {
                         this.displayInGameMenu();
                     }
 
                     flag1 = Keyboard.isKeyDown(61) && this.processKeyF3(i);
                     this.actionKeyF3 |= flag1;
 
-                    if (i == 59)
-                    {
+                    if (i == 59) {
                         this.gameSettings.hideGUI = !this.gameSettings.hideGUI;
                     }
                 }
 
-                if (flag1)
-                {
+                if (flag1) {
                     KeyBinding.setKeyBindState(i, false);
-                }
-                else
-                {
+                } else {
                     KeyBinding.setKeyBindState(i, true);
                     KeyBinding.onTick(i);
                 }
 
-                if (this.gameSettings.showDebugProfilerChart)
-                {
-                    if (i == 11)
-                    {
+                if (this.gameSettings.showDebugProfilerChart) {
+                    if (i == 11) {
                         this.updateDebugProfilerName(0);
                     }
 
-                    for (int j = 0; j < 9; ++j)
-                    {
-                        if (i == 2 + j)
-                        {
+                    for (int j = 0; j < 9; ++j) {
+                        if (i == 2 + j) {
                             this.updateDebugProfilerName(j + 1);
                         }
                     }
                 }
-            }
-            else
-            {
+            } else {
                 KeyBinding.setKeyBindState(i, false);
 
-                if (i == 61)
-                {
-                    if (this.actionKeyF3)
-                    {
+                if (i == 61) {
+                    if (this.actionKeyF3) {
                         this.actionKeyF3 = false;
-                    }
-                    else
-                    {
+                    } else {
                         this.gameSettings.showDebugInfo = !this.gameSettings.showDebugInfo;
                         this.gameSettings.showDebugProfilerChart = this.gameSettings.showDebugInfo && GuiScreen.isShiftKeyDown();
                         this.gameSettings.showLagometer = this.gameSettings.showDebugInfo && GuiScreen.isAltKeyDown();
@@ -2020,75 +1618,51 @@
         this.processKeyBinds();
     }
 
-    private boolean processKeyF3(int auxKey)
-    {
-        if (auxKey == 30)
-        {
+    private boolean processKeyF3(int auxKey) {
+        if (auxKey == 30) {
             this.renderGlobal.loadRenderers();
             this.debugFeedbackTranslated("debug.reload_chunks.message");
             return true;
-        }
-        else if (auxKey == 48)
-        {
+        } else if (auxKey == 48) {
             boolean flag1 = !this.renderManager.isDebugBoundingBox();
             this.renderManager.setDebugBoundingBox(flag1);
             this.debugFeedbackTranslated(flag1 ? "debug.show_hitboxes.on" : "debug.show_hitboxes.off");
             return true;
-        }
-        else if (auxKey == 32)
-        {
-            if (this.ingameGUI != null)
-            {
+        } else if (auxKey == 32) {
+            if (this.ingameGUI != null) {
                 this.ingameGUI.getChatGUI().clearChatMessages(false);
             }
 
             return true;
-        }
-        else if (auxKey == 33)
-        {
+        } else if (auxKey == 33) {
             this.gameSettings.setOptionValue(GameSettings.Options.RENDER_DISTANCE, GuiScreen.isShiftKeyDown() ? -1 : 1);
             this.debugFeedbackTranslated("debug.cycle_renderdistance.message", this.gameSettings.renderDistanceChunks);
             return true;
-        }
-        else if (auxKey == 34)
-        {
+        } else if (auxKey == 34) {
             boolean flag = this.debugRenderer.toggleChunkBorders();
             this.debugFeedbackTranslated(flag ? "debug.chunk_boundaries.on" : "debug.chunk_boundaries.off");
             return true;
-        }
-        else if (auxKey == 35)
-        {
+        } else if (auxKey == 35) {
             this.gameSettings.advancedItemTooltips = !this.gameSettings.advancedItemTooltips;
             this.debugFeedbackTranslated(this.gameSettings.advancedItemTooltips ? "debug.advanced_tooltips.on" : "debug.advanced_tooltips.off");
             this.gameSettings.saveOptions();
             return true;
-        }
-        else if (auxKey == 49)
-        {
-            if (!this.player.canUseCommand(2, ""))
-            {
+        } else if (auxKey == 49) {
+            if (!this.player.canUseCommand(2, "")) {
                 this.debugFeedbackTranslated("debug.creative_spectator.error");
-            }
-            else if (this.player.isCreative())
-            {
+            } else if (this.player.isCreative()) {
                 this.player.sendChatMessage("/gamemode spectator");
-            }
-            else if (this.player.isSpectator())
-            {
+            } else if (this.player.isSpectator()) {
                 this.player.sendChatMessage("/gamemode creative");
             }
 
             return true;
-        }
-        else if (auxKey == 25)
-        {
+        } else if (auxKey == 25) {
             this.gameSettings.pauseOnLostFocus = !this.gameSettings.pauseOnLostFocus;
             this.gameSettings.saveOptions();
             this.debugFeedbackTranslated(this.gameSettings.pauseOnLostFocus ? "debug.pause_focus.on" : "debug.pause_focus.off");
             return true;
-        }
-        else if (auxKey == 16)
-        {
+        } else if (auxKey == 16) {
             this.debugFeedbackTranslated("debug.help.message");
             GuiNewChat guinewchat = this.ingameGUI.getChatGUI();
             guinewchat.printChatMessage(new TextComponentTranslation("debug.reload_chunks.help", new Object[0]));
@@ -2102,138 +1676,101 @@
             guinewchat.printChatMessage(new TextComponentTranslation("debug.help.help", new Object[0]));
             guinewchat.printChatMessage(new TextComponentTranslation("debug.reload_resourcepacks.help", new Object[0]));
             return true;
-        }
-        else if (auxKey == 20)
-        {
+        } else if (auxKey == 20) {
             this.debugFeedbackTranslated("debug.reload_resourcepacks.message");
             this.refreshResources();
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    private void processKeyBinds()
-    {
-        for (; this.gameSettings.keyBindTogglePerspective.isPressed(); this.renderGlobal.setDisplayListEntitiesDirty())
-        {
+    private void processKeyBinds() {
+        for (; this.gameSettings.keyBindTogglePerspective.isPressed(); this.renderGlobal.setDisplayListEntitiesDirty()) {
             ++this.gameSettings.thirdPersonView;
 
-            if (this.gameSettings.thirdPersonView > 2)
-            {
+            if (this.gameSettings.thirdPersonView > 2) {
                 this.gameSettings.thirdPersonView = 0;
             }
 
-            if (this.gameSettings.thirdPersonView == 0)
-            {
+            if (this.gameSettings.thirdPersonView == 0) {
                 this.entityRenderer.loadEntityShader(this.getRenderViewEntity());
+            } else if (this.gameSettings.thirdPersonView == 1) {
+                this.entityRenderer.loadEntityShader((Entity) null);
             }
-            else if (this.gameSettings.thirdPersonView == 1)
-            {
-                this.entityRenderer.loadEntityShader((Entity)null);
-            }
         }
 
-        while (this.gameSettings.keyBindSmoothCamera.isPressed())
-        {
+        while (this.gameSettings.keyBindSmoothCamera.isPressed()) {
             this.gameSettings.smoothCamera = !this.gameSettings.smoothCamera;
         }
 
-        for (int i = 0; i < 9; ++i)
-        {
+        for (int i = 0; i < 9; ++i) {
             boolean flag = this.gameSettings.keyBindSaveToolbar.isKeyDown();
             boolean flag1 = this.gameSettings.keyBindLoadToolbar.isKeyDown();
 
-            if (this.gameSettings.keyBindsHotbar[i].isPressed())
-            {
-                if (this.player.isSpectator())
-                {
+            if (this.gameSettings.keyBindsHotbar[i].isPressed()) {
+                if (this.player.isSpectator()) {
                     this.ingameGUI.getSpectatorGui().onHotbarSelected(i);
-                }
-                else if (!this.player.isCreative() || this.currentScreen != null || !flag1 && !flag)
-                {
+                } else if (!this.player.isCreative() || this.currentScreen != null || !flag1 && !flag) {
                     this.player.inventory.currentItem = i;
-                }
-                else
-                {
+                } else {
                     GuiContainerCreative.handleHotbarSnapshots(this, i, flag1, flag);
                 }
             }
         }
 
-        while (this.gameSettings.keyBindInventory.isPressed())
-        {
-            if (this.playerController.isRidingHorse())
-            {
+        while (this.gameSettings.keyBindInventory.isPressed()) {
+            if (this.playerController.isRidingHorse()) {
                 this.player.sendHorseInventory();
-            }
-            else
-            {
+            } else {
                 this.tutorial.openInventory();
                 this.displayGuiScreen(new GuiInventory(this.player));
             }
         }
 
-        while (this.gameSettings.keyBindAdvancements.isPressed())
-        {
+        while (this.gameSettings.keyBindAdvancements.isPressed()) {
             this.displayGuiScreen(new GuiScreenAdvancements(this.player.connection.getAdvancementManager()));
         }
 
-        while (this.gameSettings.keyBindSwapHands.isPressed())
-        {
-            if (!this.player.isSpectator())
-            {
+        while (this.gameSettings.keyBindSwapHands.isPressed()) {
+            if (!this.player.isSpectator()) {
                 this.getConnection().sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS, BlockPos.ORIGIN, EnumFacing.DOWN));
             }
         }
 
-        while (this.gameSettings.keyBindDrop.isPressed())
-        {
-            if (!this.player.isSpectator())
-            {
+        while (this.gameSettings.keyBindDrop.isPressed()) {
+            if (!this.player.isSpectator()) {
                 this.player.dropItem(GuiScreen.isCtrlKeyDown());
             }
         }
 
         boolean flag2 = this.gameSettings.chatVisibility != EntityPlayer.EnumChatVisibility.HIDDEN;
 
-        if (flag2)
-        {
-            while (this.gameSettings.keyBindChat.isPressed())
-            {
+        if (flag2) {
+            while (this.gameSettings.keyBindChat.isPressed()) {
                 this.displayGuiScreen(new GuiChat());
             }
 
-            if (this.currentScreen == null && this.gameSettings.keyBindCommand.isPressed())
-            {
+            if (this.currentScreen == null && this.gameSettings.keyBindCommand.isPressed()) {
                 this.displayGuiScreen(new GuiChat("/"));
             }
         }
 
-        if (this.player.isHandActive())
-        {
-            if (!this.gameSettings.keyBindUseItem.isKeyDown())
-            {
+        if (this.player.isHandActive()) {
+            if (!this.gameSettings.keyBindUseItem.isKeyDown()) {
                 this.playerController.onStoppedUsingItem(this.player);
             }
 
             label109:
 
-            while (true)
-            {
-                if (!this.gameSettings.keyBindAttack.isPressed())
-                {
-                    while (this.gameSettings.keyBindUseItem.isPressed())
-                    {
+            while (true) {
+                if (!this.gameSettings.keyBindAttack.isPressed()) {
+                    while (this.gameSettings.keyBindUseItem.isPressed()) {
                         ;
                     }
 
-                    while (true)
-                    {
-                        if (this.gameSettings.keyBindPickBlock.isPressed())
-                        {
+                    while (true) {
+                        if (this.gameSettings.keyBindPickBlock.isPressed()) {
                             continue;
                         }
 
@@ -2241,91 +1778,67 @@
                     }
                 }
             }
-        }
-        else
-        {
-            while (this.gameSettings.keyBindAttack.isPressed())
-            {
+        } else {
+            while (this.gameSettings.keyBindAttack.isPressed()) {
                 this.clickMouse();
             }
 
-            while (this.gameSettings.keyBindUseItem.isPressed())
-            {
+            while (this.gameSettings.keyBindUseItem.isPressed()) {
                 this.rightClickMouse();
             }
 
-            while (this.gameSettings.keyBindPickBlock.isPressed())
-            {
+            while (this.gameSettings.keyBindPickBlock.isPressed()) {
                 this.middleClickMouse();
             }
         }
 
-        if (this.gameSettings.keyBindUseItem.isKeyDown() && this.rightClickDelayTimer == 0 && !this.player.isHandActive())
-        {
+        if (this.gameSettings.keyBindUseItem.isKeyDown() && this.rightClickDelayTimer == 0 && !this.player.isHandActive()) {
             this.rightClickMouse();
         }
 
         this.sendClickBlockToController(this.currentScreen == null && this.gameSettings.keyBindAttack.isKeyDown() && this.inGameHasFocus);
     }
 
-    private void runTickMouse() throws IOException
-    {
-        while (Mouse.next())
-        {
+    private void runTickMouse() throws IOException {
+        while (Mouse.next()) {
             if (net.minecraftforge.client.ForgeHooksClient.postMouseEvent()) continue;
 
             int i = Mouse.getEventButton();
             KeyBinding.setKeyBindState(i - 100, Mouse.getEventButtonState());
 
-            if (Mouse.getEventButtonState())
-            {
-                if (this.player.isSpectator() && i == 2)
-                {
+            if (Mouse.getEventButtonState()) {
+                if (this.player.isSpectator() && i == 2) {
                     this.ingameGUI.getSpectatorGui().onMiddleClick();
-                }
-                else
-                {
+                } else {
                     KeyBinding.onTick(i - 100);
                 }
             }
 
             long j = getSystemTime() - this.systemTime;
 
-            if (j <= 200L)
-            {
+            if (j <= 200L) {
                 int k = Mouse.getEventDWheel();
 
-                if (k != 0)
-                {
-                    if (this.player.isSpectator())
-                    {
+                if (k != 0) {
+                    if (this.player.isSpectator()) {
                         k = k < 0 ? -1 : 1;
 
-                        if (this.ingameGUI.getSpectatorGui().isMenuActive())
-                        {
+                        if (this.ingameGUI.getSpectatorGui().isMenuActive()) {
                             this.ingameGUI.getSpectatorGui().onMouseScroll(-k);
-                        }
-                        else
-                        {
-                            float f = MathHelper.clamp(this.player.capabilities.getFlySpeed() + (float)k * 0.005F, 0.0F, 0.2F);
+                        } else {
+                            float f = MathHelper.clamp(this.player.capabilities.getFlySpeed() + (float) k * 0.005F, 0.0F, 0.2F);
                             this.player.capabilities.setFlySpeed(f);
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.player.inventory.changeCurrentItem(k);
                     }
                 }
 
-                if (this.currentScreen == null)
-                {
-                    if (!this.inGameHasFocus && Mouse.getEventButtonState())
-                    {
+                if (this.currentScreen == null) {
+                    if (!this.inGameHasFocus && Mouse.getEventButtonState()) {
                         this.setIngameFocus();
                     }
-                }
-                else if (this.currentScreen != null)
-                {
+                } else if (this.currentScreen != null) {
                     this.currentScreen.handleMouseInput();
                 }
             }
@@ -2333,32 +1846,27 @@
         }
     }
 
-    private void debugFeedbackTranslated(String untranslatedTemplate, Object... objs)
-    {
+    private void debugFeedbackTranslated(String untranslatedTemplate, Object... objs) {
         this.ingameGUI.getChatGUI().printChatMessage((new TextComponentString("")).appendSibling((new TextComponentTranslation("debug.prefix", new Object[0])).setStyle((new Style()).setColor(TextFormatting.YELLOW).setBold(Boolean.valueOf(true)))).appendText(" ").appendSibling(new TextComponentTranslation(untranslatedTemplate, objs)));
     }
 
-    public void launchIntegratedServer(String folderName, String worldName, @Nullable WorldSettings worldSettingsIn)
-    {
+    public void launchIntegratedServer(String folderName, String worldName, @Nullable WorldSettings worldSettingsIn) {
         net.minecraftforge.fml.client.FMLClientHandler.instance().startIntegratedServer(folderName, worldName, worldSettingsIn);
-        this.loadWorld((WorldClient)null);
+        this.loadWorld((WorldClient) null);
         System.gc();
         ISaveHandler isavehandler = this.saveLoader.getSaveLoader(folderName, false);
         WorldInfo worldinfo = isavehandler.loadWorldInfo();
 
-        if (worldinfo == null && worldSettingsIn != null)
-        {
+        if (worldinfo == null && worldSettingsIn != null) {
             worldinfo = new WorldInfo(worldSettingsIn, folderName);
             isavehandler.saveWorldInfo(worldinfo);
         }
 
-        if (worldSettingsIn == null)
-        {
+        if (worldSettingsIn == null) {
             worldSettingsIn = new WorldSettings(worldinfo);
         }
 
-        try
-        {
+        try {
             YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString());
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
@@ -2369,9 +1877,7 @@
             this.integratedServer = new IntegratedServer(this, folderName, worldName, worldSettingsIn, yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
             this.integratedServer.startServerThread();
             this.integratedServerIsRunning = true;
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Starting integrated server");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Starting integrated server");
             crashreportcategory.addCrashSection("Level ID", folderName);
@@ -2381,31 +1887,23 @@
 
         this.loadingScreen.displaySavingString(I18n.format("menu.loadingLevel"));
 
-        while (!this.integratedServer.serverIsInRunLoop())
-        {
-            if (!net.minecraftforge.fml.common.StartupQuery.check() || this.integratedServer.isServerStopped())
-            {
+        while (!this.integratedServer.serverIsInRunLoop()) {
+            if (!net.minecraftforge.fml.common.StartupQuery.check() || this.integratedServer.isServerStopped()) {
                 loadWorld(null);
                 displayGuiScreen(null);
                 return;
             }
             String s = this.integratedServer.getUserMessage();
 
-            if (s != null)
-            {
+            if (s != null) {
                 this.loadingScreen.displayLoadingString(I18n.format(s));
-            }
-            else
-            {
+            } else {
                 this.loadingScreen.displayLoadingString("");
             }
 
-            try
-            {
+            try {
                 Thread.sleep(200L);
-            }
-            catch (InterruptedException var10)
-            {
+            } catch (InterruptedException var10) {
                 ;
             }
         }
@@ -2413,11 +1911,10 @@
         this.displayGuiScreen(new GuiScreenWorking());
         SocketAddress socketaddress = this.integratedServer.getNetworkSystem().addLocalEndpoint();
         NetworkManager networkmanager = NetworkManager.provideLocalClient(socketaddress);
-        networkmanager.setNetHandler(new NetHandlerLoginClient(networkmanager, this, (GuiScreen)null));
+        networkmanager.setNetHandler(new NetHandlerLoginClient(networkmanager, this, (GuiScreen) null));
         networkmanager.sendPacket(new C00Handshake(socketaddress.toString(), 0, EnumConnectionState.LOGIN, true));
         com.mojang.authlib.GameProfile gameProfile = this.getSession().getProfile();
-        if (!this.getSession().hasCachedProperties())
-        {
+        if (!this.getSession().hasCachedProperties()) {
             gameProfile = sessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
             this.getSession().setProperties(gameProfile.getProperties());
         }
@@ -2425,38 +1922,31 @@
         this.myNetworkManager = networkmanager;
     }
 
-    public void loadWorld(@Nullable WorldClient worldClientIn)
-    {
+    public void loadWorld(@Nullable WorldClient worldClientIn) {
         this.loadWorld(worldClientIn, "");
     }
 
-    public void loadWorld(@Nullable WorldClient worldClientIn, String loadingMessage)
-    {
-        if (world != null) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(world));
+    public void loadWorld(@Nullable WorldClient worldClientIn, String loadingMessage) {
+        if (world != null)
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(world));
 
-        if (worldClientIn == null)
-        {
+        if (worldClientIn == null) {
             NetHandlerPlayClient nethandlerplayclient = this.getConnection();
 
-            if (nethandlerplayclient != null)
-            {
+            if (nethandlerplayclient != null) {
                 nethandlerplayclient.cleanup();
             }
 
-            if (this.integratedServer != null && this.integratedServer.isAnvilFileSet())
-            {
+            if (this.integratedServer != null && this.integratedServer.isAnvilFileSet()) {
                 this.integratedServer.initiateShutdown();
-                if (loadingScreen != null && this.running)
-                {
+                if (loadingScreen != null && this.running) {
                     this.loadingScreen.displayLoadingString(I18n.format("forge.client.shutdown.internal"));
                 }
-                while (!integratedServer.isServerStopped())
-                {
-                    try
-                    {
+                while (!integratedServer.isServerStopped()) {
+                    try {
                         Thread.sleep(10);
+                    } catch (InterruptedException ie) {
                     }
-                    catch (InterruptedException ie) {}
                 }
             }
 
@@ -2469,17 +1959,15 @@
         this.renderViewEntity = null;
         this.myNetworkManager = null;
 
-        if (this.loadingScreen != null)
-        {
+        if (this.loadingScreen != null) {
             this.loadingScreen.resetProgressAndMessage(loadingMessage);
             this.loadingScreen.displayLoadingString("");
         }
 
-        if (worldClientIn == null && this.world != null)
-        {
+        if (worldClientIn == null && this.world != null) {
             this.mcResourcePackRepository.clearResourcePack();
             this.ingameGUI.resetPlayersOverlayFooterHeader();
-            this.setServerData((ServerData)null);
+            this.setServerData((ServerData) null);
             this.integratedServerIsRunning = false;
             net.minecraftforge.fml.client.FMLClientHandler.instance().handleClientWorldClosing(this.world);
         }
@@ -2487,23 +1975,19 @@
         this.mcSoundHandler.stopSounds();
         this.world = worldClientIn;
 
-        if (this.renderGlobal != null)
-        {
+        if (this.renderGlobal != null) {
             this.renderGlobal.setWorldAndLoadRenderers(worldClientIn);
         }
 
-        if (this.effectRenderer != null)
-        {
+        if (this.effectRenderer != null) {
             this.effectRenderer.clearEffects(worldClientIn);
         }
 
         TileEntityRendererDispatcher.instance.setWorld(worldClientIn);
         net.minecraftforge.client.MinecraftForgeClient.clearRenderCache();
 
-        if (worldClientIn != null)
-        {
-            if (!this.integratedServerIsRunning)
-            {
+        if (worldClientIn != null) {
+            if (!this.integratedServerIsRunning) {
                 AuthenticationService authenticationservice = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString());
                 MinecraftSessionService minecraftsessionservice = authenticationservice.createMinecraftSessionService();
                 GameProfileRepository gameprofilerepository = authenticationservice.createProfileRepository();
@@ -2513,8 +1997,7 @@
                 PlayerProfileCache.setOnlineMode(false);
             }
 
-            if (this.player == null)
-            {
+            if (this.player == null) {
                 this.player = this.playerController.createPlayer(worldClientIn, new StatisticsManager(), new RecipeBookClient());
                 this.playerController.flipPlayer(this.player);
             }
@@ -2524,9 +2007,7 @@
             this.player.movementInput = new MovementInputFromOptions(this.gameSettings);
             this.playerController.setPlayerCapabilities(this.player);
             this.renderViewEntity = this.player;
-        }
-        else
-        {
+        } else {
             this.saveLoader.flushCache();
             this.player = null;
         }
@@ -2535,15 +2016,13 @@
         this.systemTime = 0L;
     }
 
-    public void setDimensionAndSpawnPlayer(int dimension)
-    {
+    public void setDimensionAndSpawnPlayer(int dimension) {
         this.world.setInitialSpawnLocation();
         this.world.removeAllEntities();
         int i = 0;
         String s = null;
 
-        if (this.player != null)
-        {
+        if (this.player != null) {
             i = this.player.getEntityId();
             this.world.removeEntity(this.player);
             s = this.player.getServerBrand();
@@ -2565,61 +2044,49 @@
         this.playerController.setPlayerCapabilities(this.player);
         this.player.setReducedDebug(entityplayersp.hasReducedDebug());
 
-        if (this.currentScreen instanceof GuiGameOver)
-        {
-            this.displayGuiScreen((GuiScreen)null);
+        if (this.currentScreen instanceof GuiGameOver) {
+            this.displayGuiScreen((GuiScreen) null);
         }
     }
 
-    public final boolean isDemo()
-    {
+    public final boolean isDemo() {
         return this.isDemo;
     }
 
     @Nullable
-    public NetHandlerPlayClient getConnection()
-    {
+    public NetHandlerPlayClient getConnection() {
         return this.player == null ? null : this.player.connection;
     }
 
-    public static boolean isGuiEnabled()
-    {
+    public static boolean isGuiEnabled() {
         return instance == null || !instance.gameSettings.hideGUI;
     }
 
-    public static boolean isFancyGraphicsEnabled()
-    {
+    public static boolean isFancyGraphicsEnabled() {
         return instance != null && instance.gameSettings.fancyGraphics;
     }
 
-    public static boolean isAmbientOcclusionEnabled()
-    {
+    public static boolean isAmbientOcclusionEnabled() {
         return instance != null && instance.gameSettings.ambientOcclusion != 0;
     }
 
-    private void middleClickMouse()
-    {
-        if (this.objectMouseOver != null && this.objectMouseOver.typeOfHit != RayTraceResult.Type.MISS)
-        {
+    private void middleClickMouse() {
+        if (this.objectMouseOver != null && this.objectMouseOver.typeOfHit != RayTraceResult.Type.MISS) {
             net.minecraftforge.common.ForgeHooks.onPickBlock(this.objectMouseOver, this.player, this.world);
             // We delete this code wholly instead of commenting it out, to make sure we detect changes in it between MC versions
         }
     }
 
-    public ItemStack storeTEInStack(ItemStack stack, TileEntity te)
-    {
+    public ItemStack storeTEInStack(ItemStack stack, TileEntity te) {
         NBTTagCompound nbttagcompound = te.writeToNBT(new NBTTagCompound());
 
-        if (stack.getItem() == Items.SKULL && nbttagcompound.hasKey("Owner"))
-        {
+        if (stack.getItem() == Items.SKULL && nbttagcompound.hasKey("Owner")) {
             NBTTagCompound nbttagcompound2 = nbttagcompound.getCompoundTag("Owner");
             NBTTagCompound nbttagcompound3 = new NBTTagCompound();
             nbttagcompound3.setTag("SkullOwner", nbttagcompound2);
             stack.setTagCompound(nbttagcompound3);
             return stack;
-        }
-        else
-        {
+        } else {
             stack.setTagInfo("BlockEntityTag", nbttagcompound);
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
             NBTTagList nbttaglist = new NBTTagList();
@@ -2630,83 +2097,60 @@
         }
     }
 
-    public CrashReport addGraphicsAndWorldToCrashReport(CrashReport theCrash)
-    {
-        theCrash.getCategory().addDetail("Launched Version", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+    public CrashReport addGraphicsAndWorldToCrashReport(CrashReport theCrash) {
+        theCrash.getCategory().addDetail("Launched Version", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return Minecraft.this.launchedVersion;
             }
         });
-        theCrash.getCategory().addDetail("LWJGL", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("LWJGL", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return Sys.getVersion();
             }
         });
-        theCrash.getCategory().addDetail("OpenGL", new ICrashReportDetail<String>()
-        {
-            public String call()
-            {
+        theCrash.getCategory().addDetail("OpenGL", new ICrashReportDetail<String>() {
+            public String call() {
                 return GlStateManager.glGetString(7937) + " GL version " + GlStateManager.glGetString(7938) + ", " + GlStateManager.glGetString(7936);
             }
         });
-        theCrash.getCategory().addDetail("GL Caps", new ICrashReportDetail<String>()
-        {
-            public String call()
-            {
+        theCrash.getCategory().addDetail("GL Caps", new ICrashReportDetail<String>() {
+            public String call() {
                 return OpenGlHelper.getLogText();
             }
         });
-        theCrash.getCategory().addDetail("Using VBOs", new ICrashReportDetail<String>()
-        {
-            public String call()
-            {
+        theCrash.getCategory().addDetail("Using VBOs", new ICrashReportDetail<String>() {
+            public String call() {
                 return Minecraft.this.gameSettings.useVbo ? "Yes" : "No";
             }
         });
-        theCrash.getCategory().addDetail("Is Modded", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("Is Modded", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 String s = ClientBrandRetriever.getClientModName();
 
-                if (!"vanilla".equals(s))
-                {
+                if (!"vanilla".equals(s)) {
                     return "Definitely; Client brand changed to '" + s + "'";
-                }
-                else
-                {
+                } else {
                     return Minecraft.class.getSigners() == null ? "Very likely; Jar signature invalidated" : "Probably not. Jar signature remains and client brand is untouched.";
                 }
             }
         });
-        theCrash.getCategory().addDetail("Type", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("Type", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return "Client (map_client.txt)";
             }
         });
-        theCrash.getCategory().addDetail("Resource Packs", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("Resource Packs", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 StringBuilder stringbuilder = new StringBuilder();
 
-                for (String s : Minecraft.this.gameSettings.resourcePacks)
-                {
-                    if (stringbuilder.length() > 0)
-                    {
+                for (String s : Minecraft.this.gameSettings.resourcePacks) {
+                    if (stringbuilder.length() > 0) {
                         stringbuilder.append(", ");
                     }
 
                     stringbuilder.append(s);
 
-                    if (Minecraft.this.gameSettings.incompatibleResourcePacks.contains(s))
-                    {
+                    if (Minecraft.this.gameSettings.incompatibleResourcePacks.contains(s)) {
                         stringbuilder.append(" (incompatible)");
                     }
                 }
@@ -2714,55 +2158,43 @@
                 return stringbuilder.toString();
             }
         });
-        theCrash.getCategory().addDetail("Current Language", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("Current Language", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return Minecraft.this.mcLanguageManager.getCurrentLanguage().toString();
             }
         });
-        theCrash.getCategory().addDetail("Profiler Position", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("Profiler Position", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return Minecraft.this.mcProfiler.profilingEnabled ? Minecraft.this.mcProfiler.getNameOfLastSection() : "N/A (disabled)";
             }
         });
-        theCrash.getCategory().addDetail("CPU", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        theCrash.getCategory().addDetail("CPU", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return OpenGlHelper.getCpu();
             }
         });
 
-        if (this.world != null)
-        {
+        if (this.world != null) {
             this.world.addWorldInfoToCrashReport(theCrash);
         }
 
         return theCrash;
     }
 
-    public static Minecraft getMinecraft()
-    {
+    public static Minecraft getMinecraft() {
         return instance;
     }
 
     @Deprecated // Forge: Use selective scheduleResourceRefresh method in FMLClientHandler
-    public ListenableFuture<Object> scheduleResourcesRefresh()
-    {
-        return this.addScheduledTask(new Runnable()
-        {
-            public void run()
-            {
+    public ListenableFuture<Object> scheduleResourcesRefresh() {
+        return this.addScheduledTask(new Runnable() {
+            public void run() {
                 Minecraft.this.refreshResources();
             }
         });
     }
 
-    public void addServerStatsToSnooper(Snooper playerSnooper)
-    {
+    public void addServerStatsToSnooper(Snooper playerSnooper) {
         playerSnooper.addClientStat("fps", Integer.valueOf(debugFPS));
         playerSnooper.addClientStat("vsync_enabled", Boolean.valueOf(this.gameSettings.enableVsync));
         playerSnooper.addClientStat("display_frequency", Integer.valueOf(Display.getDisplayMode().getFrequency()));
@@ -2777,35 +2209,26 @@
         playerSnooper.addClientStat("resource_packs", Integer.valueOf(this.mcResourcePackRepository.getRepositoryEntries().size()));
         int i = 0;
 
-        for (ResourcePackRepository.Entry resourcepackrepository$entry : this.mcResourcePackRepository.getRepositoryEntries())
-        {
+        for (ResourcePackRepository.Entry resourcepackrepository$entry : this.mcResourcePackRepository.getRepositoryEntries()) {
             playerSnooper.addClientStat("resource_pack[" + i++ + "]", resourcepackrepository$entry.getResourcePackName());
         }
 
-        if (this.integratedServer != null && this.integratedServer.getPlayerUsageSnooper() != null)
-        {
+        if (this.integratedServer != null && this.integratedServer.getPlayerUsageSnooper() != null) {
             playerSnooper.addClientStat("snooper_partner", this.integratedServer.getPlayerUsageSnooper().getUniqueID());
         }
     }
 
-    private String getCurrentAction()
-    {
-        if (this.integratedServer != null)
-        {
+    private String getCurrentAction() {
+        if (this.integratedServer != null) {
             return this.integratedServer.getPublic() ? "hosting_lan" : "singleplayer";
-        }
-        else if (this.currentServerData != null)
-        {
+        } else if (this.currentServerData != null) {
             return this.currentServerData.isOnLAN() ? "playing_lan" : "multiplayer";
-        }
-        else
-        {
+        } else {
             return "out_of_game";
         }
     }
 
-    public void addServerTypeToSnooper(Snooper playerSnooper)
-    {
+    public void addServerTypeToSnooper(Snooper playerSnooper) {
         playerSnooper.addStatToSnooper("opengl_version", GlStateManager.glGetString(7938));
         playerSnooper.addStatToSnooper("opengl_vendor", GlStateManager.glGetString(7936));
         playerSnooper.addStatToSnooper("client_brand", ClientBrandRetriever.getClientModName());
@@ -2917,87 +2340,70 @@
         playerSnooper.addStatToSnooper("gl_max_texture_size", Integer.valueOf(getGLMaximumTextureSize()));
         GameProfile gameprofile = this.session.getProfile();
 
-        if (gameprofile != null && gameprofile.getId() != null)
-        {
+        if (gameprofile != null && gameprofile.getId() != null) {
             playerSnooper.addStatToSnooper("uuid", Hashing.sha1().hashBytes(gameprofile.getId().toString().getBytes(Charsets.ISO_8859_1)).toString());
         }
     }
 
-    public static int getGLMaximumTextureSize()
-    {
+    public static int getGLMaximumTextureSize() {
         //Forge we redirect this to our code which caches the value before any splash screen stuff is done.
         return net.minecraftforge.fml.client.SplashProgress.getMaxTextureSize();
     }
 
-    public boolean isSnooperEnabled()
-    {
+    public boolean isSnooperEnabled() {
         return this.gameSettings.snooperEnabled;
     }
 
-    public void setServerData(ServerData serverDataIn)
-    {
+    public void setServerData(ServerData serverDataIn) {
         this.currentServerData = serverDataIn;
     }
 
     @Nullable
-    public ServerData getCurrentServerData()
-    {
+    public ServerData getCurrentServerData() {
         return this.currentServerData;
     }
 
-    public boolean isIntegratedServerRunning()
-    {
+    public boolean isIntegratedServerRunning() {
         return this.integratedServerIsRunning;
     }
 
-    public boolean isSingleplayer()
-    {
+    public boolean isSingleplayer() {
         return this.integratedServerIsRunning && this.integratedServer != null;
     }
 
     @Nullable
-    public IntegratedServer getIntegratedServer()
-    {
+    public IntegratedServer getIntegratedServer() {
         return this.integratedServer;
     }
 
-    public static void stopIntegratedServer()
-    {
-        if (instance != null)
-        {
+    public static void stopIntegratedServer() {
+        if (instance != null) {
             IntegratedServer integratedserver = instance.getIntegratedServer();
 
-            if (integratedserver != null)
-            {
+            if (integratedserver != null) {
                 integratedserver.stopServer();
             }
         }
     }
 
-    public Snooper getPlayerUsageSnooper()
-    {
+    public Snooper getPlayerUsageSnooper() {
         return this.usageSnooper;
     }
 
-    public static long getSystemTime()
-    {
+    public static long getSystemTime() {
         return Sys.getTime() * 1000L / Sys.getTimerResolution();
     }
 
-    public boolean isFullScreen()
-    {
+    public boolean isFullScreen() {
         return this.fullscreen;
     }
 
-    public Session getSession()
-    {
+    public Session getSession() {
         return this.session;
     }
 
-    public PropertyMap getProfileProperties()
-    {
-        if (this.profileProperties.isEmpty())
-        {
+    public PropertyMap getProfileProperties() {
+        if (this.profileProperties.isEmpty()) {
             GameProfile gameprofile = this.getSessionService().fillProfileProperties(this.session.getProfile(), false);
             this.profileProperties.putAll(gameprofile.getProperties());
         }
@@ -3005,262 +2411,200 @@
         return this.profileProperties;
     }
 
-    public Proxy getProxy()
-    {
+    public Proxy getProxy() {
         return this.proxy;
     }
 
-    public TextureManager getTextureManager()
-    {
+    public TextureManager getTextureManager() {
         return this.renderEngine;
     }
 
-    public IResourceManager getResourceManager()
-    {
+    public IResourceManager getResourceManager() {
         return this.mcResourceManager;
     }
 
-    public ResourcePackRepository getResourcePackRepository()
-    {
+    public ResourcePackRepository getResourcePackRepository() {
         return this.mcResourcePackRepository;
     }
 
-    public LanguageManager getLanguageManager()
-    {
+    public LanguageManager getLanguageManager() {
         return this.mcLanguageManager;
     }
 
-    public TextureMap getTextureMapBlocks()
-    {
+    public TextureMap getTextureMapBlocks() {
         return this.textureMapBlocks;
     }
 
-    public boolean isJava64bit()
-    {
+    public boolean isJava64bit() {
         return this.jvm64bit;
     }
 
-    public boolean isGamePaused()
-    {
+    public boolean isGamePaused() {
         return this.isGamePaused;
     }
 
-    public SoundHandler getSoundHandler()
-    {
+    public SoundHandler getSoundHandler() {
         return this.mcSoundHandler;
     }
 
-    public MusicTicker.MusicType getAmbientMusicType()
-    {
-        if (this.currentScreen instanceof GuiWinGame)
-        {
+    public MusicTicker.MusicType getAmbientMusicType() {
+        if (this.currentScreen instanceof GuiWinGame) {
             return MusicTicker.MusicType.CREDITS;
-        }
-        else if (this.player != null)
-        {
+        } else if (this.player != null) {
             MusicTicker.MusicType type = this.world.provider.getMusicType();
             if (type != null) return type;
 
-            if (this.player.world.provider instanceof WorldProviderHell)
-            {
+            if (this.player.world.provider instanceof WorldProviderHell) {
                 return MusicTicker.MusicType.NETHER;
-            }
-            else if (this.player.world.provider instanceof WorldProviderEnd)
-            {
+            } else if (this.player.world.provider instanceof WorldProviderEnd) {
                 return this.ingameGUI.getBossOverlay().shouldPlayEndBossMusic() ? MusicTicker.MusicType.END_BOSS : MusicTicker.MusicType.END;
-            }
-            else
-            {
+            } else {
                 return this.player.capabilities.isCreativeMode && this.player.capabilities.allowFlying ? MusicTicker.MusicType.CREATIVE : MusicTicker.MusicType.GAME;
             }
-        }
-        else
-        {
+        } else {
             return MusicTicker.MusicType.MENU;
         }
     }
 
-    public void dispatchKeypresses()
-    {
+    public void dispatchKeypresses() {
         int i = Keyboard.getEventKey() == 0 ? Keyboard.getEventCharacter() + 256 : Keyboard.getEventKey();
 
-        if (i != 0 && !Keyboard.isRepeatEvent())
-        {
-            if (!(this.currentScreen instanceof GuiControls) || ((GuiControls)this.currentScreen).time <= getSystemTime() - 20L)
-            {
-                if (Keyboard.getEventKeyState())
-                {
-                    if (this.gameSettings.keyBindFullscreen.isActiveAndMatches(i))
-                    {
+        if (i != 0 && !Keyboard.isRepeatEvent()) {
+            if (!(this.currentScreen instanceof GuiControls) || ((GuiControls) this.currentScreen).time <= getSystemTime() - 20L) {
+                if (Keyboard.getEventKeyState()) {
+                    if (this.gameSettings.keyBindFullscreen.isActiveAndMatches(i)) {
                         this.toggleFullscreen();
-                    }
-                    else if (this.gameSettings.keyBindScreenshot.isActiveAndMatches(i))
-                    {
+                    } else if (this.gameSettings.keyBindScreenshot.isActiveAndMatches(i)) {
                         this.ingameGUI.getChatGUI().printChatMessage(ScreenShotHelper.saveScreenshot(this.mcDataDir, this.displayWidth, this.displayHeight, this.framebufferMc));
-                    }
-                    else if (i == 48 && GuiScreen.isCtrlKeyDown() && (this.currentScreen == null || this.currentScreen != null && !this.currentScreen.isFocused()))
-                    {
+                    } else if (i == 48 && GuiScreen.isCtrlKeyDown() && (this.currentScreen == null || this.currentScreen != null && !this.currentScreen.isFocused())) {
                         this.gameSettings.setOptionValue(GameSettings.Options.NARRATOR, 1);
 
-                        if (this.currentScreen instanceof ScreenChatOptions)
-                        {
-                            ((ScreenChatOptions)this.currentScreen).updateNarratorButton();
+                        if (this.currentScreen instanceof ScreenChatOptions) {
+                            ((ScreenChatOptions) this.currentScreen).updateNarratorButton();
                         }
                     }
-                }
-                else if (this.currentScreen instanceof GuiControls) ((GuiControls)this.currentScreen).buttonId = null;
+                } else if (this.currentScreen instanceof GuiControls)
+                    ((GuiControls) this.currentScreen).buttonId = null;
             }
         }
     }
 
-    public MinecraftSessionService getSessionService()
-    {
+    public MinecraftSessionService getSessionService() {
         return this.sessionService;
     }
 
-    public SkinManager getSkinManager()
-    {
+    public SkinManager getSkinManager() {
         return this.skinManager;
     }
 
     @Nullable
-    public Entity getRenderViewEntity()
-    {
+    public Entity getRenderViewEntity() {
         return this.renderViewEntity;
     }
 
-    public void setRenderViewEntity(Entity viewingEntity)
-    {
+    public void setRenderViewEntity(Entity viewingEntity) {
         this.renderViewEntity = viewingEntity;
         this.entityRenderer.loadEntityShader(viewingEntity);
     }
 
-    public <V> ListenableFuture<V> addScheduledTask(Callable<V> callableToSchedule)
-    {
+    public <V> ListenableFuture<V> addScheduledTask(Callable<V> callableToSchedule) {
         Validate.notNull(callableToSchedule);
 
-        if (this.isCallingFromMinecraftThread())
-        {
-            try
-            {
+        if (this.isCallingFromMinecraftThread()) {
+            try {
                 return Futures.<V>immediateFuture(callableToSchedule.call());
-            }
-            catch (Exception exception)
-            {
+            } catch (Exception exception) {
                 return Futures.immediateFailedCheckedFuture(exception);
             }
-        }
-        else
-        {
+        } else {
             ListenableFutureTask<V> listenablefuturetask = ListenableFutureTask.<V>create(callableToSchedule);
 
-            synchronized (this.scheduledTasks)
-            {
+            synchronized (this.scheduledTasks) {
                 this.scheduledTasks.add(listenablefuturetask);
                 return listenablefuturetask;
             }
         }
     }
 
-    public ListenableFuture<Object> addScheduledTask(Runnable runnableToSchedule)
-    {
+    public ListenableFuture<Object> addScheduledTask(Runnable runnableToSchedule) {
         Validate.notNull(runnableToSchedule);
         return this.<Object>addScheduledTask(Executors.callable(runnableToSchedule));
     }
 
-    public boolean isCallingFromMinecraftThread()
-    {
+    public boolean isCallingFromMinecraftThread() {
         return Thread.currentThread() == this.mcThread;
     }
 
-    public BlockRendererDispatcher getBlockRendererDispatcher()
-    {
+    public BlockRendererDispatcher getBlockRendererDispatcher() {
         return this.blockRenderDispatcher;
     }
 
-    public RenderManager getRenderManager()
-    {
+    public RenderManager getRenderManager() {
         return this.renderManager;
     }
 
-    public RenderItem getRenderItem()
-    {
+    public RenderItem getRenderItem() {
         return this.renderItem;
     }
 
-    public ItemRenderer getItemRenderer()
-    {
+    public ItemRenderer getItemRenderer() {
         return this.itemRenderer;
     }
 
-    public <T> ISearchTree<T> getSearchTree(SearchTreeManager.Key<T> key)
-    {
+    public <T> ISearchTree<T> getSearchTree(SearchTreeManager.Key<T> key) {
         return this.searchTreeManager.<T>get(key);
     }
 
-    public static int getDebugFPS()
-    {
+    public static int getDebugFPS() {
         return debugFPS;
     }
 
-    public FrameTimer getFrameTimer()
-    {
+    public FrameTimer getFrameTimer() {
         return this.frameTimer;
     }
 
-    public boolean isConnectedToRealms()
-    {
+    public boolean isConnectedToRealms() {
         return this.connectedToRealms;
     }
 
-    public void setConnectedToRealms(boolean isConnected)
-    {
+    public void setConnectedToRealms(boolean isConnected) {
         this.connectedToRealms = isConnected;
     }
 
-    public DataFixer getDataFixer()
-    {
+    public DataFixer getDataFixer() {
         return this.dataFixer;
     }
 
-    public float getRenderPartialTicks()
-    {
+    public float getRenderPartialTicks() {
         return this.timer.renderPartialTicks;
     }
 
-    public float getTickLength()
-    {
+    public float getTickLength() {
         return this.timer.elapsedPartialTicks;
     }
 
-    public BlockColors getBlockColors()
-    {
+    public BlockColors getBlockColors() {
         return this.blockColors;
     }
 
     // FORGE
-    public ItemColors getItemColors()
-    {
+    public ItemColors getItemColors() {
         return this.itemColors;
     }
 
-    public boolean isReducedDebug()
-    {
+    public boolean isReducedDebug() {
         return this.player != null && this.player.hasReducedDebug() || this.gameSettings.reducedDebugInfo;
     }
 
-    public GuiToast getToastGui()
-    {
+    public GuiToast getToastGui() {
         return this.toastGui;
     }
 
-    public Tutorial getTutorial()
-    {
+    public Tutorial getTutorial() {
         return this.tutorial;
     }
 
-    public SearchTreeManager getSearchTreeManager()
-    {
+    public SearchTreeManager getSearchTreeManager() {
         return this.searchTreeManager;
     }
 }
