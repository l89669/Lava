--- ../src-base/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -7,18 +7,8 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import java.util.List;
-import java.util.Queue;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.PriorityBlockingQueue;
-import java.util.concurrent.ThreadFactory;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.renderer.BufferBuilder;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.OpenGlHelper;
-import net.minecraft.client.renderer.RegionRenderCacheBuilder;
-import net.minecraft.client.renderer.VertexBufferUploader;
-import net.minecraft.client.renderer.WorldVertexBufferUploader;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.vertex.VertexBuffer;
 import net.minecraft.util.BlockRenderLayer;
 import net.minecraft.util.math.MathHelper;
@@ -27,9 +17,14 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.PriorityBlockingQueue;
+import java.util.concurrent.ThreadFactory;
+
 @SideOnly(Side.CLIENT)
-public class ChunkRenderDispatcher
-{
+public class ChunkRenderDispatcher {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ThreadFactory THREAD_FACTORY = (new ThreadFactoryBuilder()).setNameFormat("Chunk Batcher %d").setDaemon(true).build();
     private final int countRenderBuilders;
@@ -42,22 +37,18 @@
     private final Queue<ChunkRenderDispatcher.PendingUpload> queueChunkUploads = Queues.<ChunkRenderDispatcher.PendingUpload>newPriorityQueue();
     private final ChunkRenderWorker renderWorker;
 
-    public ChunkRenderDispatcher()
-    {
+    public ChunkRenderDispatcher() {
         this(-1);
     }
 
-    public ChunkRenderDispatcher(int countRenderBuilders)
-    {
-        int i = Math.max(1, (int)((double)Runtime.getRuntime().maxMemory() * 0.3D) / 10485760);
+    public ChunkRenderDispatcher(int countRenderBuilders) {
+        int i = Math.max(1, (int) ((double) Runtime.getRuntime().maxMemory() * 0.3D) / 10485760);
         int j = Math.max(1, MathHelper.clamp(Runtime.getRuntime().availableProcessors(), 1, i / 5));
-        if(countRenderBuilders < 0) countRenderBuilders = MathHelper.clamp(j * 10, 1, i);
+        if (countRenderBuilders < 0) countRenderBuilders = MathHelper.clamp(j * 10, 1, i);
         this.countRenderBuilders = countRenderBuilders;
 
-        if (j > 1)
-        {
-            for (int k = 0; k < j; ++k)
-            {
+        if (j > 1) {
+            for (int k = 0; k < j; ++k) {
                 ChunkRenderWorker chunkrenderworker = new ChunkRenderWorker(this);
                 Thread thread = THREAD_FACTORY.newThread(chunkrenderworker);
                 thread.start();
@@ -68,57 +59,45 @@
 
         this.queueFreeRenderBuilders = Queues.<RegionRenderCacheBuilder>newArrayBlockingQueue(this.countRenderBuilders);
 
-        for (int l = 0; l < this.countRenderBuilders; ++l)
-        {
+        for (int l = 0; l < this.countRenderBuilders; ++l) {
             this.queueFreeRenderBuilders.add(new RegionRenderCacheBuilder());
         }
 
         this.renderWorker = new ChunkRenderWorker(this, new RegionRenderCacheBuilder());
     }
 
-    public String getDebugInfo()
-    {
+    public String getDebugInfo() {
         return this.listWorkerThreads.isEmpty() ? String.format("pC: %03d, single-threaded", this.queueChunkUpdates.size()) : String.format("pC: %03d, pU: %1d, aB: %1d", this.queueChunkUpdates.size(), this.queueChunkUploads.size(), this.queueFreeRenderBuilders.size());
     }
 
-    public boolean runChunkUploads(long finishTimeNano)
-    {
+    public boolean runChunkUploads(long finishTimeNano) {
         boolean flag = false;
 
-        while (true)
-        {
+        while (true) {
             boolean flag1 = false;
 
-            if (this.listWorkerThreads.isEmpty())
-            {
+            if (this.listWorkerThreads.isEmpty()) {
                 ChunkCompileTaskGenerator chunkcompiletaskgenerator = this.queueChunkUpdates.poll();
 
-                if (chunkcompiletaskgenerator != null)
-                {
-                    try
-                    {
+                if (chunkcompiletaskgenerator != null) {
+                    try {
                         this.renderWorker.processTask(chunkcompiletaskgenerator);
                         flag1 = true;
-                    }
-                    catch (InterruptedException var8)
-                    {
+                    } catch (InterruptedException var8) {
                         LOGGER.warn("Skipped task due to interrupt");
                     }
                 }
             }
 
-            synchronized (this.queueChunkUploads)
-            {
-                if (!this.queueChunkUploads.isEmpty())
-                {
+            synchronized (this.queueChunkUploads) {
+                if (!this.queueChunkUploads.isEmpty()) {
                     (this.queueChunkUploads.poll()).uploadTask.run();
                     flag1 = true;
                     flag = true;
                 }
             }
 
-            if (finishTimeNano == 0L || !flag1 || finishTimeNano < System.nanoTime())
-            {
+            if (finishTimeNano == 0L || !flag1 || finishTimeNano < System.nanoTime()) {
                 break;
             }
         }
@@ -126,81 +105,62 @@
         return flag;
     }
 
-    public boolean updateChunkLater(RenderChunk chunkRenderer)
-    {
+    public boolean updateChunkLater(RenderChunk chunkRenderer) {
         chunkRenderer.getLockCompileTask().lock();
         boolean flag1;
 
-        try
-        {
+        try {
             final ChunkCompileTaskGenerator chunkcompiletaskgenerator = chunkRenderer.makeCompileTaskChunk();
-            chunkcompiletaskgenerator.addFinishRunnable(new Runnable()
-            {
-                public void run()
-                {
+            chunkcompiletaskgenerator.addFinishRunnable(new Runnable() {
+                public void run() {
                     ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
                 }
             });
             boolean flag = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
 
-            if (!flag)
-            {
+            if (!flag) {
                 chunkcompiletaskgenerator.finish();
             }
 
             flag1 = flag;
-        }
-        finally
-        {
+        } finally {
             chunkRenderer.getLockCompileTask().unlock();
         }
 
         return flag1;
     }
 
-    public boolean updateChunkNow(RenderChunk chunkRenderer)
-    {
+    public boolean updateChunkNow(RenderChunk chunkRenderer) {
         chunkRenderer.getLockCompileTask().lock();
         boolean flag;
 
-        try
-        {
+        try {
             ChunkCompileTaskGenerator chunkcompiletaskgenerator = chunkRenderer.makeCompileTaskChunk();
 
-            try
-            {
+            try {
                 this.renderWorker.processTask(chunkcompiletaskgenerator);
-            }
-            catch (InterruptedException var7)
-            {
+            } catch (InterruptedException var7) {
                 ;
             }
 
             flag = true;
-        }
-        finally
-        {
+        } finally {
             chunkRenderer.getLockCompileTask().unlock();
         }
 
         return flag;
     }
 
-    public void stopChunkUpdates()
-    {
+    public void stopChunkUpdates() {
         this.clearChunkUpdates();
         List<RegionRenderCacheBuilder> list = Lists.<RegionRenderCacheBuilder>newArrayList();
 
-        while (list.size() != this.countRenderBuilders)
-        {
+        while (list.size() != this.countRenderBuilders) {
             this.runChunkUploads(Long.MAX_VALUE);
 
-            try
-            {
+            try {
                 list.add(this.allocateRenderBuilder());
-            }
-            catch (InterruptedException var3)
-            {
+            } catch (InterruptedException var3) {
                 ;
             }
         }
@@ -208,89 +168,68 @@
         this.queueFreeRenderBuilders.addAll(list);
     }
 
-    public void freeRenderBuilder(RegionRenderCacheBuilder p_178512_1_)
-    {
+    public void freeRenderBuilder(RegionRenderCacheBuilder p_178512_1_) {
         this.queueFreeRenderBuilders.add(p_178512_1_);
     }
 
-    public RegionRenderCacheBuilder allocateRenderBuilder() throws InterruptedException
-    {
+    public RegionRenderCacheBuilder allocateRenderBuilder() throws InterruptedException {
         return this.queueFreeRenderBuilders.take();
     }
 
-    public ChunkCompileTaskGenerator getNextChunkUpdate() throws InterruptedException
-    {
+    public ChunkCompileTaskGenerator getNextChunkUpdate() throws InterruptedException {
         return this.queueChunkUpdates.take();
     }
 
-    public boolean updateTransparencyLater(RenderChunk chunkRenderer)
-    {
+    public boolean updateTransparencyLater(RenderChunk chunkRenderer) {
         chunkRenderer.getLockCompileTask().lock();
         boolean flag;
 
-        try
-        {
+        try {
             final ChunkCompileTaskGenerator chunkcompiletaskgenerator = chunkRenderer.makeCompileTaskTransparency();
 
-            if (chunkcompiletaskgenerator == null)
-            {
+            if (chunkcompiletaskgenerator == null) {
                 flag = true;
                 return flag;
             }
 
-            chunkcompiletaskgenerator.addFinishRunnable(new Runnable()
-            {
-                public void run()
-                {
+            chunkcompiletaskgenerator.addFinishRunnable(new Runnable() {
+                public void run() {
                     ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
                 }
             });
             flag = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
-        }
-        finally
-        {
+        } finally {
             chunkRenderer.getLockCompileTask().unlock();
         }
 
         return flag;
     }
 
-    public ListenableFuture<Object> uploadChunk(final BlockRenderLayer p_188245_1_, final BufferBuilder p_188245_2_, final RenderChunk p_188245_3_, final CompiledChunk p_188245_4_, final double p_188245_5_)
-    {
-        if (Minecraft.getMinecraft().isCallingFromMinecraftThread())
-        {
-            if (OpenGlHelper.useVbo())
-            {
+    public ListenableFuture<Object> uploadChunk(final BlockRenderLayer p_188245_1_, final BufferBuilder p_188245_2_, final RenderChunk p_188245_3_, final CompiledChunk p_188245_4_, final double p_188245_5_) {
+        if (Minecraft.getMinecraft().isCallingFromMinecraftThread()) {
+            if (OpenGlHelper.useVbo()) {
                 this.uploadVertexBuffer(p_188245_2_, p_188245_3_.getVertexBufferByLayer(p_188245_1_.ordinal()));
+            } else {
+                this.uploadDisplayList(p_188245_2_, ((ListedRenderChunk) p_188245_3_).getDisplayList(p_188245_1_, p_188245_4_), p_188245_3_);
             }
-            else
-            {
-                this.uploadDisplayList(p_188245_2_, ((ListedRenderChunk)p_188245_3_).getDisplayList(p_188245_1_, p_188245_4_), p_188245_3_);
-            }
 
             p_188245_2_.setTranslation(0.0D, 0.0D, 0.0D);
-            return Futures.<Object>immediateFuture((Object)null);
-        }
-        else
-        {
-            ListenableFutureTask<Object> listenablefuturetask = ListenableFutureTask.<Object>create(new Runnable()
-            {
-                public void run()
-                {
+            return Futures.<Object>immediateFuture((Object) null);
+        } else {
+            ListenableFutureTask<Object> listenablefuturetask = ListenableFutureTask.<Object>create(new Runnable() {
+                public void run() {
                     ChunkRenderDispatcher.this.uploadChunk(p_188245_1_, p_188245_2_, p_188245_3_, p_188245_4_, p_188245_5_);
                 }
-            }, (Object)null);
+            }, (Object) null);
 
-            synchronized (this.queueChunkUploads)
-            {
+            synchronized (this.queueChunkUploads) {
                 this.queueChunkUploads.add(new ChunkRenderDispatcher.PendingUpload(listenablefuturetask, p_188245_5_));
                 return listenablefuturetask;
             }
         }
     }
 
-    private void uploadDisplayList(BufferBuilder bufferBuilderIn, int list, RenderChunk chunkRenderer)
-    {
+    private void uploadDisplayList(BufferBuilder bufferBuilderIn, int list, RenderChunk chunkRenderer) {
         GlStateManager.glNewList(list, 4864);
         GlStateManager.pushMatrix();
         chunkRenderer.multModelviewMatrix();
@@ -299,74 +238,59 @@
         GlStateManager.glEndList();
     }
 
-    private void uploadVertexBuffer(BufferBuilder p_178506_1_, VertexBuffer vertexBufferIn)
-    {
+    private void uploadVertexBuffer(BufferBuilder p_178506_1_, VertexBuffer vertexBufferIn) {
         this.vertexUploader.setVertexBuffer(vertexBufferIn);
         this.vertexUploader.draw(p_178506_1_);
     }
 
-    public void clearChunkUpdates()
-    {
-        while (!this.queueChunkUpdates.isEmpty())
-        {
+    public void clearChunkUpdates() {
+        while (!this.queueChunkUpdates.isEmpty()) {
             ChunkCompileTaskGenerator chunkcompiletaskgenerator = this.queueChunkUpdates.poll();
 
-            if (chunkcompiletaskgenerator != null)
-            {
+            if (chunkcompiletaskgenerator != null) {
                 chunkcompiletaskgenerator.finish();
             }
         }
     }
 
-    public boolean hasChunkUpdates()
-    {
+    public boolean hasChunkUpdates() {
         return this.queueChunkUpdates.isEmpty() && this.queueChunkUploads.isEmpty();
     }
 
-    public void stopWorkerThreads()
-    {
+    public void stopWorkerThreads() {
         this.clearChunkUpdates();
 
-        for (ChunkRenderWorker chunkrenderworker : this.listThreadedWorkers)
-        {
+        for (ChunkRenderWorker chunkrenderworker : this.listThreadedWorkers) {
             chunkrenderworker.notifyToStop();
         }
 
-        for (Thread thread : this.listWorkerThreads)
-        {
-            try
-            {
+        for (Thread thread : this.listWorkerThreads) {
+            try {
                 thread.interrupt();
                 thread.join();
+            } catch (InterruptedException interruptedexception) {
+                LOGGER.warn("Interrupted whilst waiting for worker to die", (Throwable) interruptedexception);
             }
-            catch (InterruptedException interruptedexception)
-            {
-                LOGGER.warn("Interrupted whilst waiting for worker to die", (Throwable)interruptedexception);
-            }
         }
 
         this.queueFreeRenderBuilders.clear();
     }
 
-    public boolean hasNoFreeRenderBuilders()
-    {
+    public boolean hasNoFreeRenderBuilders() {
         return this.queueFreeRenderBuilders.isEmpty();
     }
 
     @SideOnly(Side.CLIENT)
-    class PendingUpload implements Comparable<ChunkRenderDispatcher.PendingUpload>
-    {
+    class PendingUpload implements Comparable<ChunkRenderDispatcher.PendingUpload> {
         private final ListenableFutureTask<Object> uploadTask;
         private final double distanceSq;
 
-        public PendingUpload(ListenableFutureTask<Object> uploadTaskIn, double distanceSqIn)
-        {
+        public PendingUpload(ListenableFutureTask<Object> uploadTaskIn, double distanceSqIn) {
             this.uploadTask = uploadTaskIn;
             this.distanceSq = distanceSqIn;
         }
 
-        public int compareTo(ChunkRenderDispatcher.PendingUpload p_compareTo_1_)
-        {
+        public int compareTo(ChunkRenderDispatcher.PendingUpload p_compareTo_1_) {
             return Doubles.compare(this.distanceSq, p_compareTo_1_.distanceSq);
         }
     }
