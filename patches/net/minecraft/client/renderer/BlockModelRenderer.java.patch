--- ../src-base/minecraft/net/minecraft/client/renderer/BlockModelRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/BlockModelRenderer.java
@@ -1,8 +1,5 @@
 package net.minecraft.client.renderer;
 
-import java.util.BitSet;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -23,31 +20,28 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.BitSet;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class BlockModelRenderer
-{
+public class BlockModelRenderer {
     private final BlockColors blockColors;
 
-    public BlockModelRenderer(BlockColors blockColorsIn)
-    {
+    public BlockModelRenderer(BlockColors blockColorsIn) {
         this.blockColors = blockColorsIn;
     }
 
-    public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder buffer, boolean checkSides)
-    {
+    public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder buffer, boolean checkSides) {
         return this.renderModel(blockAccessIn, modelIn, blockStateIn, blockPosIn, buffer, checkSides, MathHelper.getPositionRandom(blockPosIn));
     }
 
-    public boolean renderModel(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
-    {
+    public boolean renderModel(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand) {
         boolean flag = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue(worldIn, posIn) == 0 && modelIn.isAmbientOcclusion(stateIn);
 
-        try
-        {
+        try {
             return flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Tesselating block model");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Block model being tesselated");
             CrashReportCategory.addBlockInfo(crashreportcategory, posIn, stateIn);
@@ -56,28 +50,24 @@
         }
     }
 
-    public boolean renderModelSmooth(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
-    {
+    public boolean renderModelSmooth(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand) {
         boolean flag = false;
         float[] afloat = new float[EnumFacing.values().length * 2];
         BitSet bitset = new BitSet(3);
         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = new BlockModelRenderer.AmbientOcclusionFace();
 
-        for (EnumFacing enumfacing : EnumFacing.values())
-        {
+        for (EnumFacing enumfacing : EnumFacing.values()) {
             List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
 
-            if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
-            {
+            if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing))) {
                 this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list, afloat, bitset, blockmodelrenderer$ambientocclusionface);
                 flag = true;
             }
         }
 
-        List<BakedQuad> list1 = modelIn.getQuads(stateIn, (EnumFacing)null, rand);
+        List<BakedQuad> list1 = modelIn.getQuads(stateIn, (EnumFacing) null, rand);
 
-        if (!list1.isEmpty())
-        {
+        if (!list1.isEmpty()) {
             this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list1, afloat, bitset, blockmodelrenderer$ambientocclusionface);
             flag = true;
         }
@@ -85,27 +75,23 @@
         return flag;
     }
 
-    public boolean renderModelFlat(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
-    {
+    public boolean renderModelFlat(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand) {
         boolean flag = false;
         BitSet bitset = new BitSet(3);
 
-        for (EnumFacing enumfacing : EnumFacing.values())
-        {
+        for (EnumFacing enumfacing : EnumFacing.values()) {
             List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
 
-            if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
-            {
+            if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing))) {
                 int i = stateIn.getPackedLightmapCoords(worldIn, posIn.offset(enumfacing));
                 this.renderQuadsFlat(worldIn, stateIn, posIn, i, false, buffer, list, bitset);
                 flag = true;
             }
         }
 
-        List<BakedQuad> list1 = modelIn.getQuads(stateIn, (EnumFacing)null, rand);
+        List<BakedQuad> list1 = modelIn.getQuads(stateIn, (EnumFacing) null, rand);
 
-        if (!list1.isEmpty())
-        {
+        if (!list1.isEmpty()) {
             this.renderQuadsFlat(worldIn, stateIn, posIn, -1, true, buffer, list1, bitset);
             flag = true;
         }
@@ -113,48 +99,41 @@
         return flag;
     }
 
-    private void renderQuadsSmooth(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, List<BakedQuad> list, float[] quadBounds, BitSet bitSet, BlockModelRenderer.AmbientOcclusionFace aoFace)
-    {
+    private void renderQuadsSmooth(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, List<BakedQuad> list, float[] quadBounds, BitSet bitSet, BlockModelRenderer.AmbientOcclusionFace aoFace) {
         Vec3d vec3d = stateIn.getOffset(blockAccessIn, posIn);
-        double d0 = (double)posIn.getX() + vec3d.x;
-        double d1 = (double)posIn.getY() + vec3d.y;
-        double d2 = (double)posIn.getZ() + vec3d.z;
+        double d0 = (double) posIn.getX() + vec3d.x;
+        double d1 = (double) posIn.getY() + vec3d.y;
+        double d2 = (double) posIn.getZ() + vec3d.z;
         int i = 0;
 
-        for (int j = list.size(); i < j; ++i)
-        {
+        for (int j = list.size(); i < j; ++i) {
             BakedQuad bakedquad = list.get(i);
             this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), quadBounds, bitSet);
             aoFace.updateVertexBrightness(blockAccessIn, stateIn, posIn, bakedquad.getFace(), quadBounds, bitSet);
             buffer.addVertexData(bakedquad.getVertexData());
             buffer.putBrightness4(aoFace.vertexBrightness[0], aoFace.vertexBrightness[1], aoFace.vertexBrightness[2], aoFace.vertexBrightness[3]);
-            if(bakedquad.shouldApplyDiffuseLighting())
-            {
+            if (bakedquad.shouldApplyDiffuseLighting()) {
                 float diffuse = net.minecraftforge.client.model.pipeline.LightUtil.diffuseLight(bakedquad.getFace());
                 aoFace.vertexColorMultiplier[0] *= diffuse;
                 aoFace.vertexColorMultiplier[1] *= diffuse;
                 aoFace.vertexColorMultiplier[2] *= diffuse;
                 aoFace.vertexColorMultiplier[3] *= diffuse;
             }
-            if (bakedquad.hasTintIndex())
-            {
+            if (bakedquad.hasTintIndex()) {
                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
 
-                if (EntityRenderer.anaglyphEnable)
-                {
+                if (EntityRenderer.anaglyphEnable) {
                     k = TextureUtil.anaglyphColor(k);
                 }
 
-                float f = (float)(k >> 16 & 255) / 255.0F;
-                float f1 = (float)(k >> 8 & 255) / 255.0F;
-                float f2 = (float)(k & 255) / 255.0F;
+                float f = (float) (k >> 16 & 255) / 255.0F;
+                float f1 = (float) (k >> 8 & 255) / 255.0F;
+                float f2 = (float) (k & 255) / 255.0F;
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0] * f, aoFace.vertexColorMultiplier[0] * f1, aoFace.vertexColorMultiplier[0] * f2, 4);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1] * f, aoFace.vertexColorMultiplier[1] * f1, aoFace.vertexColorMultiplier[1] * f2, 3);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2] * f, aoFace.vertexColorMultiplier[2] * f1, aoFace.vertexColorMultiplier[2] * f2, 2);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[3] * f, aoFace.vertexColorMultiplier[3] * f1, aoFace.vertexColorMultiplier[3] * f2, 1);
-            }
-            else
-            {
+            } else {
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0], aoFace.vertexColorMultiplier[0], aoFace.vertexColorMultiplier[0], 4);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1], aoFace.vertexColorMultiplier[1], aoFace.vertexColorMultiplier[1], 3);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2], aoFace.vertexColorMultiplier[2], aoFace.vertexColorMultiplier[2], 2);
@@ -165,8 +144,7 @@
         }
     }
 
-    private void fillQuadBounds(IBlockState stateIn, int[] vertexData, EnumFacing face, @Nullable float[] quadBounds, BitSet boundsFlags)
-    {
+    private void fillQuadBounds(IBlockState stateIn, int[] vertexData, EnumFacing face, @Nullable float[] quadBounds, BitSet boundsFlags) {
         float f = 32.0F;
         float f1 = 32.0F;
         float f2 = 32.0F;
@@ -174,8 +152,7 @@
         float f4 = -32.0F;
         float f5 = -32.0F;
 
-        for (int i = 0; i < 4; ++i)
-        {
+        for (int i = 0; i < 4; ++i) {
             float f6 = Float.intBitsToFloat(vertexData[i * 7]);
             float f7 = Float.intBitsToFloat(vertexData[i * 7 + 1]);
             float f8 = Float.intBitsToFloat(vertexData[i * 7 + 2]);
@@ -187,8 +164,7 @@
             f5 = Math.max(f5, f8);
         }
 
-        if (quadBounds != null)
-        {
+        if (quadBounds != null) {
             quadBounds[EnumFacing.WEST.getIndex()] = f;
             quadBounds[EnumFacing.EAST.getIndex()] = f3;
             quadBounds[EnumFacing.DOWN.getIndex()] = f1;
@@ -207,8 +183,7 @@
         float f9 = 1.0E-4F;
         float f10 = 0.9999F;
 
-        switch (face)
-        {
+        switch (face) {
             case DOWN:
                 boundsFlags.set(1, f >= 1.0E-4F || f2 >= 1.0E-4F || f3 <= 0.9999F || f5 <= 0.9999F);
                 boundsFlags.set(0, (f1 < 1.0E-4F || stateIn.isFullCube()) && f1 == f4);
@@ -235,21 +210,18 @@
         }
     }
 
-    private void renderQuadsFlat(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, int brightnessIn, boolean ownBrightness, BufferBuilder buffer, List<BakedQuad> list, BitSet bitSet)
-    {
+    private void renderQuadsFlat(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, int brightnessIn, boolean ownBrightness, BufferBuilder buffer, List<BakedQuad> list, BitSet bitSet) {
         Vec3d vec3d = stateIn.getOffset(blockAccessIn, posIn);
-        double d0 = (double)posIn.getX() + vec3d.x;
-        double d1 = (double)posIn.getY() + vec3d.y;
-        double d2 = (double)posIn.getZ() + vec3d.z;
+        double d0 = (double) posIn.getX() + vec3d.x;
+        double d1 = (double) posIn.getY() + vec3d.y;
+        double d2 = (double) posIn.getZ() + vec3d.z;
         int i = 0;
 
-        for (int j = list.size(); i < j; ++i)
-        {
+        for (int j = list.size(); i < j; ++i) {
             BakedQuad bakedquad = list.get(i);
 
-            if (ownBrightness)
-            {
-                this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitSet);
+            if (ownBrightness) {
+                this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), (float[]) null, bitSet);
                 BlockPos blockpos = bitSet.get(0) ? posIn.offset(bakedquad.getFace()) : posIn;
                 brightnessIn = stateIn.getPackedLightmapCoords(blockAccessIn, blockpos);
             }
@@ -257,20 +229,17 @@
             buffer.addVertexData(bakedquad.getVertexData());
             buffer.putBrightness4(brightnessIn, brightnessIn, brightnessIn, brightnessIn);
 
-            if (bakedquad.hasTintIndex())
-            {
+            if (bakedquad.hasTintIndex()) {
                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
 
-                if (EntityRenderer.anaglyphEnable)
-                {
+                if (EntityRenderer.anaglyphEnable) {
                     k = TextureUtil.anaglyphColor(k);
                 }
 
-                float f = (float)(k >> 16 & 255) / 255.0F;
-                float f1 = (float)(k >> 8 & 255) / 255.0F;
-                float f2 = (float)(k & 255) / 255.0F;
-                if(bakedquad.shouldApplyDiffuseLighting())
-                {
+                float f = (float) (k >> 16 & 255) / 255.0F;
+                float f1 = (float) (k >> 8 & 255) / 255.0F;
+                float f2 = (float) (k & 255) / 255.0F;
+                if (bakedquad.shouldApplyDiffuseLighting()) {
                     float diffuse = net.minecraftforge.client.model.pipeline.LightUtil.diffuseLight(bakedquad.getFace());
                     f *= diffuse;
                     f1 *= diffuse;
@@ -280,9 +249,7 @@
                 buffer.putColorMultiplier(f, f1, f2, 3);
                 buffer.putColorMultiplier(f, f1, f2, 2);
                 buffer.putColorMultiplier(f, f1, f2, 1);
-            }
-            else if(bakedquad.shouldApplyDiffuseLighting())
-            {
+            } else if (bakedquad.shouldApplyDiffuseLighting()) {
                 float diffuse = net.minecraftforge.client.model.pipeline.LightUtil.diffuseLight(bakedquad.getFace());
                 buffer.putColorMultiplier(diffuse, diffuse, diffuse, 4);
                 buffer.putColorMultiplier(diffuse, diffuse, diffuse, 3);
@@ -294,79 +261,66 @@
         }
     }
 
-    public void renderModelBrightnessColor(IBakedModel bakedModel, float p_178262_2_, float red, float green, float blue)
-    {
-        this.renderModelBrightnessColor((IBlockState)null, bakedModel, p_178262_2_, red, green, blue);
+    public void renderModelBrightnessColor(IBakedModel bakedModel, float p_178262_2_, float red, float green, float blue) {
+        this.renderModelBrightnessColor((IBlockState) null, bakedModel, p_178262_2_, red, green, blue);
     }
 
-    public void renderModelBrightnessColor(IBlockState state, IBakedModel p_187495_2_, float p_187495_3_, float p_187495_4_, float p_187495_5_, float p_187495_6_)
-    {
-        for (EnumFacing enumfacing : EnumFacing.values())
-        {
+    public void renderModelBrightnessColor(IBlockState state, IBakedModel p_187495_2_, float p_187495_3_, float p_187495_4_, float p_187495_5_, float p_187495_6_) {
+        for (EnumFacing enumfacing : EnumFacing.values()) {
             this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, enumfacing, 0L));
         }
 
-        this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, (EnumFacing)null, 0L));
+        this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, (EnumFacing) null, 0L));
     }
 
-    public void renderModelBrightness(IBakedModel model, IBlockState state, float brightness, boolean p_178266_4_)
-    {
+    public void renderModelBrightness(IBakedModel model, IBlockState state, float brightness, boolean p_178266_4_) {
         Block block = state.getBlock();
         GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
-        int i = this.blockColors.colorMultiplier(state, (IBlockAccess)null, (BlockPos)null, 0);
+        int i = this.blockColors.colorMultiplier(state, (IBlockAccess) null, (BlockPos) null, 0);
 
-        if (EntityRenderer.anaglyphEnable)
-        {
+        if (EntityRenderer.anaglyphEnable) {
             i = TextureUtil.anaglyphColor(i);
         }
 
-        float f = (float)(i >> 16 & 255) / 255.0F;
-        float f1 = (float)(i >> 8 & 255) / 255.0F;
-        float f2 = (float)(i & 255) / 255.0F;
+        float f = (float) (i >> 16 & 255) / 255.0F;
+        float f1 = (float) (i >> 8 & 255) / 255.0F;
+        float f2 = (float) (i & 255) / 255.0F;
 
-        if (!p_178266_4_)
-        {
+        if (!p_178266_4_) {
             GlStateManager.color(brightness, brightness, brightness, 1.0F);
         }
 
         this.renderModelBrightnessColor(state, model, brightness, f, f1, f2);
     }
 
-    private void renderModelBrightnessColorQuads(float brightness, float red, float green, float blue, List<BakedQuad> listQuads)
-    {
+    private void renderModelBrightnessColorQuads(float brightness, float red, float green, float blue, List<BakedQuad> listQuads) {
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         int i = 0;
 
-        for (int j = listQuads.size(); i < j; ++i)
-        {
+        for (int j = listQuads.size(); i < j; ++i) {
             BakedQuad bakedquad = listQuads.get(i);
             bufferbuilder.begin(7, DefaultVertexFormats.ITEM);
             bufferbuilder.addVertexData(bakedquad.getVertexData());
 
-            if (bakedquad.hasTintIndex())
-            {
+            if (bakedquad.hasTintIndex()) {
                 bufferbuilder.putColorRGB_F4(red * brightness, green * brightness, blue * brightness);
-            }
-            else
-            {
+            } else {
                 bufferbuilder.putColorRGB_F4(brightness, brightness, brightness);
             }
 
             Vec3i vec3i = bakedquad.getFace().getDirectionVec();
-            bufferbuilder.putNormal((float)vec3i.getX(), (float)vec3i.getY(), (float)vec3i.getZ());
+            bufferbuilder.putNormal((float) vec3i.getX(), (float) vec3i.getY(), (float) vec3i.getZ());
             tessellator.draw();
         }
     }
 
     @SideOnly(Side.CLIENT)
-    class AmbientOcclusionFace
-    {
+    class AmbientOcclusionFace {
         private final float[] vertexColorMultiplier = new float[4];
         private final int[] vertexBrightness = new int[4];
 
-        public void updateVertexBrightness(IBlockAccess worldIn, IBlockState state, BlockPos centerPos, EnumFacing direction, float[] faceShape, BitSet shapeState)
-        {
+        public void updateVertexBrightness(IBlockAccess worldIn, IBlockState state, BlockPos centerPos, EnumFacing direction, float[] faceShape, BitSet shapeState) {
             BlockPos blockpos = shapeState.get(0) ? centerPos.offset(direction) : centerPos;
             BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
             BlockModelRenderer.EnumNeighborInfo blockmodelrenderer$enumneighborinfo = BlockModelRenderer.EnumNeighborInfo.getNeighbourInfo(direction);
@@ -389,13 +343,10 @@
             float f4;
             int i1;
 
-            if (!flag2 && !flag)
-            {
+            if (!flag2 && !flag) {
                 f4 = f;
                 i1 = i;
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos1 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[2]);
                 f4 = worldIn.getBlockState(blockpos1).getAmbientOcclusionLightValue();
                 i1 = state.getPackedLightmapCoords(worldIn, blockpos1);
@@ -404,13 +355,10 @@
             float f5;
             int j1;
 
-            if (!flag3 && !flag)
-            {
+            if (!flag3 && !flag) {
                 f5 = f;
                 j1 = i;
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos2 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[3]);
                 f5 = worldIn.getBlockState(blockpos2).getAmbientOcclusionLightValue();
                 j1 = state.getPackedLightmapCoords(worldIn, blockpos2);
@@ -419,13 +367,10 @@
             float f6;
             int k1;
 
-            if (!flag2 && !flag1)
-            {
+            if (!flag2 && !flag1) {
                 f6 = f1;
                 k1 = j;
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos3 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[2]);
                 f6 = worldIn.getBlockState(blockpos3).getAmbientOcclusionLightValue();
                 k1 = state.getPackedLightmapCoords(worldIn, blockpos3);
@@ -434,13 +379,10 @@
             float f7;
             int l1;
 
-            if (!flag3 && !flag1)
-            {
+            if (!flag3 && !flag1) {
                 f7 = f1;
                 l1 = j;
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos4 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[3]);
                 f7 = worldIn.getBlockState(blockpos4).getAmbientOcclusionLightValue();
                 l1 = state.getPackedLightmapCoords(worldIn, blockpos4);
@@ -448,8 +390,7 @@
 
             int i3 = state.getPackedLightmapCoords(worldIn, centerPos);
 
-            if (shapeState.get(0) || !worldIn.getBlockState(centerPos.offset(direction)).isOpaqueCube())
-            {
+            if (shapeState.get(0) || !worldIn.getBlockState(centerPos.offset(direction)).isOpaqueCube()) {
                 i3 = state.getPackedLightmapCoords(worldIn, centerPos.offset(direction));
             }
 
@@ -461,8 +402,7 @@
             blockpos$pooledmutableblockpos3.release();
             blockpos$pooledmutableblockpos4.release();
 
-            if (shapeState.get(1) && blockmodelrenderer$enumneighborinfo.doNonCubicWeight)
-            {
+            if (shapeState.get(1) && blockmodelrenderer$enumneighborinfo.doNonCubicWeight) {
                 float f29 = (f3 + f + f5 + f8) * 0.25F;
                 float f30 = (f2 + f + f4 + f8) * 0.25F;
                 float f31 = (f2 + f1 + f6 + f8) * 0.25F;
@@ -495,9 +435,7 @@
                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getVertexBrightness(i2, j2, k2, l2, f17, f18, f19, f20);
                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getVertexBrightness(i2, j2, k2, l2, f21, f22, f23, f24);
                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getVertexBrightness(i2, j2, k2, l2, f25, f26, f27, f28);
-            }
-            else
-            {
+            } else {
                 float f9 = (f3 + f + f5 + f8) * 0.25F;
                 float f10 = (f2 + f + f4 + f8) * 0.25F;
                 float f11 = (f2 + f1 + f6 + f8) * 0.25F;
@@ -513,37 +451,31 @@
             }
         }
 
-        private int getAoBrightness(int br1, int br2, int br3, int br4)
-        {
-            if (br1 == 0)
-            {
+        private int getAoBrightness(int br1, int br2, int br3, int br4) {
+            if (br1 == 0) {
                 br1 = br4;
             }
 
-            if (br2 == 0)
-            {
+            if (br2 == 0) {
                 br2 = br4;
             }
 
-            if (br3 == 0)
-            {
+            if (br3 == 0) {
                 br3 = br4;
             }
 
             return br1 + br2 + br3 + br4 >> 2 & 16711935;
         }
 
-        private int getVertexBrightness(int p_178203_1_, int p_178203_2_, int p_178203_3_, int p_178203_4_, float p_178203_5_, float p_178203_6_, float p_178203_7_, float p_178203_8_)
-        {
-            int i = (int)((float)(p_178203_1_ >> 16 & 255) * p_178203_5_ + (float)(p_178203_2_ >> 16 & 255) * p_178203_6_ + (float)(p_178203_3_ >> 16 & 255) * p_178203_7_ + (float)(p_178203_4_ >> 16 & 255) * p_178203_8_) & 255;
-            int j = (int)((float)(p_178203_1_ & 255) * p_178203_5_ + (float)(p_178203_2_ & 255) * p_178203_6_ + (float)(p_178203_3_ & 255) * p_178203_7_ + (float)(p_178203_4_ & 255) * p_178203_8_) & 255;
+        private int getVertexBrightness(int p_178203_1_, int p_178203_2_, int p_178203_3_, int p_178203_4_, float p_178203_5_, float p_178203_6_, float p_178203_7_, float p_178203_8_) {
+            int i = (int) ((float) (p_178203_1_ >> 16 & 255) * p_178203_5_ + (float) (p_178203_2_ >> 16 & 255) * p_178203_6_ + (float) (p_178203_3_ >> 16 & 255) * p_178203_7_ + (float) (p_178203_4_ >> 16 & 255) * p_178203_8_) & 255;
+            int j = (int) ((float) (p_178203_1_ & 255) * p_178203_5_ + (float) (p_178203_2_ & 255) * p_178203_6_ + (float) (p_178203_3_ & 255) * p_178203_7_ + (float) (p_178203_4_ & 255) * p_178203_8_) & 255;
             return i << 16 | j;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum EnumNeighborInfo
-    {
+    public static enum EnumNeighborInfo {
         DOWN(new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.5F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.SOUTH}),
         UP(new EnumFacing[]{EnumFacing.EAST, EnumFacing.WEST, EnumFacing.NORTH, EnumFacing.SOUTH}, 1.0F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.SOUTH}),
         NORTH(new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.EAST, EnumFacing.WEST}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST}),
@@ -560,8 +492,7 @@
         private final BlockModelRenderer.Orientation[] vert3Weights;
         private static final BlockModelRenderer.EnumNeighborInfo[] VALUES = new BlockModelRenderer.EnumNeighborInfo[6];
 
-        private EnumNeighborInfo(EnumFacing[] p_i46236_3_, float p_i46236_4_, boolean p_i46236_5_, BlockModelRenderer.Orientation[] p_i46236_6_, BlockModelRenderer.Orientation[] p_i46236_7_, BlockModelRenderer.Orientation[] p_i46236_8_, BlockModelRenderer.Orientation[] p_i46236_9_)
-        {
+        private EnumNeighborInfo(EnumFacing[] p_i46236_3_, float p_i46236_4_, boolean p_i46236_5_, BlockModelRenderer.Orientation[] p_i46236_6_, BlockModelRenderer.Orientation[] p_i46236_7_, BlockModelRenderer.Orientation[] p_i46236_8_, BlockModelRenderer.Orientation[] p_i46236_9_) {
             this.corners = p_i46236_3_;
             this.shadeWeight = p_i46236_4_;
             this.doNonCubicWeight = p_i46236_5_;
@@ -571,13 +502,11 @@
             this.vert3Weights = p_i46236_9_;
         }
 
-        public static BlockModelRenderer.EnumNeighborInfo getNeighbourInfo(EnumFacing p_178273_0_)
-        {
+        public static BlockModelRenderer.EnumNeighborInfo getNeighbourInfo(EnumFacing p_178273_0_) {
             return VALUES[p_178273_0_.getIndex()];
         }
 
-        static
-        {
+        static {
             VALUES[EnumFacing.DOWN.getIndex()] = DOWN;
             VALUES[EnumFacing.UP.getIndex()] = UP;
             VALUES[EnumFacing.NORTH.getIndex()] = NORTH;
@@ -588,8 +517,7 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum Orientation
-    {
+    public static enum Orientation {
         DOWN(EnumFacing.DOWN, false),
         UP(EnumFacing.UP, false),
         NORTH(EnumFacing.NORTH, false),
@@ -605,15 +533,13 @@
 
         private final int shape;
 
-        private Orientation(EnumFacing p_i46233_3_, boolean p_i46233_4_)
-        {
+        private Orientation(EnumFacing p_i46233_3_, boolean p_i46233_4_) {
             this.shape = p_i46233_3_.getIndex() + (p_i46233_4_ ? EnumFacing.values().length : 0);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static enum VertexTranslations
-    {
+    static enum VertexTranslations {
         DOWN(0, 1, 2, 3),
         UP(2, 3, 0, 1),
         NORTH(3, 0, 1, 2),
@@ -627,21 +553,18 @@
         private final int vert3;
         private static final BlockModelRenderer.VertexTranslations[] VALUES = new BlockModelRenderer.VertexTranslations[6];
 
-        private VertexTranslations(int p_i46234_3_, int p_i46234_4_, int p_i46234_5_, int p_i46234_6_)
-        {
+        private VertexTranslations(int p_i46234_3_, int p_i46234_4_, int p_i46234_5_, int p_i46234_6_) {
             this.vert0 = p_i46234_3_;
             this.vert1 = p_i46234_4_;
             this.vert2 = p_i46234_5_;
             this.vert3 = p_i46234_6_;
         }
 
-        public static BlockModelRenderer.VertexTranslations getVertexTranslations(EnumFacing p_178184_0_)
-        {
+        public static BlockModelRenderer.VertexTranslations getVertexTranslations(EnumFacing p_178184_0_) {
             return VALUES[p_178184_0_.getIndex()];
         }
 
-        static
-        {
+        static {
             VALUES[EnumFacing.DOWN.getIndex()] = DOWN;
             VALUES[EnumFacing.UP.getIndex()] = UP;
             VALUES[EnumFacing.NORTH.getIndex()] = NORTH;
