--- ../src-base/minecraft/net/minecraft/client/renderer/GlStateManager.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/GlStateManager.java
@@ -1,23 +1,18 @@
 package net.minecraft.client.renderer;
 
-import java.nio.ByteBuffer;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-import javax.annotation.Nullable;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.lwjgl.BufferUtils;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL15;
-import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL12;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GLContext;
+import org.lwjgl.opengl.*;
 import org.lwjgl.util.vector.Quaternion;
 
+import javax.annotation.Nullable;
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
 @SideOnly(Side.CLIENT)
-public class GlStateManager
-{
+public class GlStateManager {
     private static final FloatBuffer BUF_FLOAT_16 = BufferUtils.createFloatBuffer(16);
     private static final FloatBuffer BUF_FLOAT_4 = BufferUtils.createFloatBuffer(4);
     private static final GlStateManager.AlphaState alphaState = new GlStateManager.AlphaState();
@@ -41,153 +36,122 @@
     private static final GlStateManager.ColorMask colorMaskState;
     private static final GlStateManager.Color colorState;
 
-    public static void pushAttrib()
-    {
+    public static void pushAttrib() {
         GL11.glPushAttrib(8256);
     }
 
-    public static void popAttrib()
-    {
+    public static void popAttrib() {
         GL11.glPopAttrib();
     }
 
-    public static void disableAlpha()
-    {
+    public static void disableAlpha() {
         alphaState.alphaTest.setDisabled();
     }
 
-    public static void enableAlpha()
-    {
+    public static void enableAlpha() {
         alphaState.alphaTest.setEnabled();
     }
 
-    public static void alphaFunc(int func, float ref)
-    {
-        if (func != alphaState.func || ref != alphaState.ref)
-        {
+    public static void alphaFunc(int func, float ref) {
+        if (func != alphaState.func || ref != alphaState.ref) {
             alphaState.func = func;
             alphaState.ref = ref;
             GL11.glAlphaFunc(func, ref);
         }
     }
 
-    public static void enableLighting()
-    {
+    public static void enableLighting() {
         lightingState.setEnabled();
     }
 
-    public static void disableLighting()
-    {
+    public static void disableLighting() {
         lightingState.setDisabled();
     }
 
-    public static void enableLight(int light)
-    {
+    public static void enableLight(int light) {
         lightState[light].setEnabled();
     }
 
-    public static void disableLight(int light)
-    {
+    public static void disableLight(int light) {
         lightState[light].setDisabled();
     }
 
-    public static void enableColorMaterial()
-    {
+    public static void enableColorMaterial() {
         colorMaterialState.colorMaterial.setEnabled();
     }
 
-    public static void disableColorMaterial()
-    {
+    public static void disableColorMaterial() {
         colorMaterialState.colorMaterial.setDisabled();
     }
 
-    public static void colorMaterial(int face, int mode)
-    {
-        if (face != colorMaterialState.face || mode != colorMaterialState.mode)
-        {
+    public static void colorMaterial(int face, int mode) {
+        if (face != colorMaterialState.face || mode != colorMaterialState.mode) {
             colorMaterialState.face = face;
             colorMaterialState.mode = mode;
             GL11.glColorMaterial(face, mode);
         }
     }
 
-    public static void glLight(int light, int pname, FloatBuffer params)
-    {
+    public static void glLight(int light, int pname, FloatBuffer params) {
         GL11.glLight(light, pname, params);
     }
 
-    public static void glLightModel(int pname, FloatBuffer params)
-    {
+    public static void glLightModel(int pname, FloatBuffer params) {
         GL11.glLightModel(pname, params);
     }
 
-    public static void glNormal3f(float nx, float ny, float nz)
-    {
+    public static void glNormal3f(float nx, float ny, float nz) {
         GL11.glNormal3f(nx, ny, nz);
     }
 
-    public static void disableDepth()
-    {
+    public static void disableDepth() {
         depthState.depthTest.setDisabled();
     }
 
-    public static void enableDepth()
-    {
+    public static void enableDepth() {
         depthState.depthTest.setEnabled();
     }
 
-    public static void depthFunc(int depthFunc)
-    {
-        if (depthFunc != depthState.depthFunc)
-        {
+    public static void depthFunc(int depthFunc) {
+        if (depthFunc != depthState.depthFunc) {
             depthState.depthFunc = depthFunc;
             GL11.glDepthFunc(depthFunc);
         }
     }
 
-    public static void depthMask(boolean flagIn)
-    {
-        if (flagIn != depthState.maskEnabled)
-        {
+    public static void depthMask(boolean flagIn) {
+        if (flagIn != depthState.maskEnabled) {
             depthState.maskEnabled = flagIn;
             GL11.glDepthMask(flagIn);
         }
     }
 
-    public static void disableBlend()
-    {
+    public static void disableBlend() {
         blendState.blend.setDisabled();
     }
 
-    public static void enableBlend()
-    {
+    public static void enableBlend() {
         blendState.blend.setEnabled();
     }
 
-    public static void blendFunc(GlStateManager.SourceFactor srcFactor, GlStateManager.DestFactor dstFactor)
-    {
+    public static void blendFunc(GlStateManager.SourceFactor srcFactor, GlStateManager.DestFactor dstFactor) {
         blendFunc(srcFactor.factor, dstFactor.factor);
     }
 
-    public static void blendFunc(int srcFactor, int dstFactor)
-    {
-        if (srcFactor != blendState.srcFactor || dstFactor != blendState.dstFactor)
-        {
+    public static void blendFunc(int srcFactor, int dstFactor) {
+        if (srcFactor != blendState.srcFactor || dstFactor != blendState.dstFactor) {
             blendState.srcFactor = srcFactor;
             blendState.dstFactor = dstFactor;
             GL11.glBlendFunc(srcFactor, dstFactor);
         }
     }
 
-    public static void tryBlendFuncSeparate(GlStateManager.SourceFactor srcFactor, GlStateManager.DestFactor dstFactor, GlStateManager.SourceFactor srcFactorAlpha, GlStateManager.DestFactor dstFactorAlpha)
-    {
+    public static void tryBlendFuncSeparate(GlStateManager.SourceFactor srcFactor, GlStateManager.DestFactor dstFactor, GlStateManager.SourceFactor srcFactorAlpha, GlStateManager.DestFactor dstFactorAlpha) {
         tryBlendFuncSeparate(srcFactor.factor, dstFactor.factor, srcFactorAlpha.factor, dstFactorAlpha.factor);
     }
 
-    public static void tryBlendFuncSeparate(int srcFactor, int dstFactor, int srcFactorAlpha, int dstFactorAlpha)
-    {
-        if (srcFactor != blendState.srcFactor || dstFactor != blendState.dstFactor || srcFactorAlpha != blendState.srcFactorAlpha || dstFactorAlpha != blendState.dstFactorAlpha)
-        {
+    public static void tryBlendFuncSeparate(int srcFactor, int dstFactor, int srcFactorAlpha, int dstFactorAlpha) {
+        if (srcFactor != blendState.srcFactor || dstFactor != blendState.dstFactor || srcFactorAlpha != blendState.srcFactorAlpha || dstFactorAlpha != blendState.dstFactorAlpha) {
             blendState.srcFactor = srcFactor;
             blendState.dstFactor = dstFactor;
             blendState.srcFactorAlpha = srcFactorAlpha;
@@ -196,17 +160,15 @@
         }
     }
 
-    public static void glBlendEquation(int blendEquation)
-    {
+    public static void glBlendEquation(int blendEquation) {
         GL14.glBlendEquation(blendEquation);
     }
 
-    public static void enableOutlineMode(int color)
-    {
-        BUF_FLOAT_4.put(0, (float)(color >> 16 & 255) / 255.0F);
-        BUF_FLOAT_4.put(1, (float)(color >> 8 & 255) / 255.0F);
-        BUF_FLOAT_4.put(2, (float)(color >> 0 & 255) / 255.0F);
-        BUF_FLOAT_4.put(3, (float)(color >> 24 & 255) / 255.0F);
+    public static void enableOutlineMode(int color) {
+        BUF_FLOAT_4.put(0, (float) (color >> 16 & 255) / 255.0F);
+        BUF_FLOAT_4.put(1, (float) (color >> 8 & 255) / 255.0F);
+        BUF_FLOAT_4.put(2, (float) (color >> 0 & 255) / 255.0F);
+        BUF_FLOAT_4.put(3, (float) (color >> 24 & 255) / 255.0F);
         glTexEnv(8960, 8705, BUF_FLOAT_4);
         glTexEnvi(8960, 8704, 34160);
         glTexEnvi(8960, 34161, 7681);
@@ -217,8 +179,7 @@
         glTexEnvi(8960, 34200, 770);
     }
 
-    public static void disableOutlineMode()
-    {
+    public static void disableOutlineMode() {
         glTexEnvi(8960, 8704, 8448);
         glTexEnvi(8960, 34161, 8448);
         glTexEnvi(8960, 34162, 8448);
@@ -228,170 +189,135 @@
         glTexEnvi(8960, 34200, 770);
     }
 
-    public static void enableFog()
-    {
+    public static void enableFog() {
         fogState.fog.setEnabled();
     }
 
-    public static void disableFog()
-    {
+    public static void disableFog() {
         fogState.fog.setDisabled();
     }
 
-    public static void setFog(GlStateManager.FogMode fogMode)
-    {
+    public static void setFog(GlStateManager.FogMode fogMode) {
         setFog(fogMode.capabilityId);
     }
 
-    private static void setFog(int param)
-    {
-        if (param != fogState.mode)
-        {
+    private static void setFog(int param) {
+        if (param != fogState.mode) {
             fogState.mode = param;
             GL11.glFogi(GL11.GL_FOG_MODE, param);
         }
     }
 
-    public static void setFogDensity(float param)
-    {
-        if (param != fogState.density)
-        {
+    public static void setFogDensity(float param) {
+        if (param != fogState.density) {
             fogState.density = param;
             GL11.glFogf(GL11.GL_FOG_DENSITY, param);
         }
     }
 
-    public static void setFogStart(float param)
-    {
-        if (param != fogState.start)
-        {
+    public static void setFogStart(float param) {
+        if (param != fogState.start) {
             fogState.start = param;
             GL11.glFogf(GL11.GL_FOG_START, param);
         }
     }
 
-    public static void setFogEnd(float param)
-    {
-        if (param != fogState.end)
-        {
+    public static void setFogEnd(float param) {
+        if (param != fogState.end) {
             fogState.end = param;
             GL11.glFogf(GL11.GL_FOG_END, param);
         }
     }
 
-    public static void glFog(int pname, FloatBuffer param)
-    {
+    public static void glFog(int pname, FloatBuffer param) {
         GL11.glFog(pname, param);
     }
 
-    public static void glFogi(int pname, int param)
-    {
+    public static void glFogi(int pname, int param) {
         GL11.glFogi(pname, param);
     }
 
-    public static void enableCull()
-    {
+    public static void enableCull() {
         cullState.cullFace.setEnabled();
     }
 
-    public static void disableCull()
-    {
+    public static void disableCull() {
         cullState.cullFace.setDisabled();
     }
 
-    public static void cullFace(GlStateManager.CullFace cullFace)
-    {
+    public static void cullFace(GlStateManager.CullFace cullFace) {
         cullFace(cullFace.mode);
     }
 
-    private static void cullFace(int mode)
-    {
-        if (mode != cullState.mode)
-        {
+    private static void cullFace(int mode) {
+        if (mode != cullState.mode) {
             cullState.mode = mode;
             GL11.glCullFace(mode);
         }
     }
 
-    public static void glPolygonMode(int face, int mode)
-    {
+    public static void glPolygonMode(int face, int mode) {
         GL11.glPolygonMode(face, mode);
     }
 
-    public static void enablePolygonOffset()
-    {
+    public static void enablePolygonOffset() {
         polygonOffsetState.polygonOffsetFill.setEnabled();
     }
 
-    public static void disablePolygonOffset()
-    {
+    public static void disablePolygonOffset() {
         polygonOffsetState.polygonOffsetFill.setDisabled();
     }
 
-    public static void doPolygonOffset(float factor, float units)
-    {
-        if (factor != polygonOffsetState.factor || units != polygonOffsetState.units)
-        {
+    public static void doPolygonOffset(float factor, float units) {
+        if (factor != polygonOffsetState.factor || units != polygonOffsetState.units) {
             polygonOffsetState.factor = factor;
             polygonOffsetState.units = units;
             GL11.glPolygonOffset(factor, units);
         }
     }
 
-    public static void enableColorLogic()
-    {
+    public static void enableColorLogic() {
         colorLogicState.colorLogicOp.setEnabled();
     }
 
-    public static void disableColorLogic()
-    {
+    public static void disableColorLogic() {
         colorLogicState.colorLogicOp.setDisabled();
     }
 
-    public static void colorLogicOp(GlStateManager.LogicOp logicOperation)
-    {
+    public static void colorLogicOp(GlStateManager.LogicOp logicOperation) {
         colorLogicOp(logicOperation.opcode);
     }
 
-    public static void colorLogicOp(int opcode)
-    {
-        if (opcode != colorLogicState.opcode)
-        {
+    public static void colorLogicOp(int opcode) {
+        if (opcode != colorLogicState.opcode) {
             colorLogicState.opcode = opcode;
             GL11.glLogicOp(opcode);
         }
     }
 
-    public static void enableTexGenCoord(GlStateManager.TexGen texGen)
-    {
+    public static void enableTexGenCoord(GlStateManager.TexGen texGen) {
         texGenCoord(texGen).textureGen.setEnabled();
     }
 
-    public static void disableTexGenCoord(GlStateManager.TexGen texGen)
-    {
+    public static void disableTexGenCoord(GlStateManager.TexGen texGen) {
         texGenCoord(texGen).textureGen.setDisabled();
     }
 
-    public static void texGen(GlStateManager.TexGen texGen, int param)
-    {
+    public static void texGen(GlStateManager.TexGen texGen, int param) {
         GlStateManager.TexGenCoord glstatemanager$texgencoord = texGenCoord(texGen);
 
-        if (param != glstatemanager$texgencoord.param)
-        {
+        if (param != glstatemanager$texgencoord.param) {
             glstatemanager$texgencoord.param = param;
             GL11.glTexGeni(glstatemanager$texgencoord.coord, GL11.GL_TEXTURE_GEN_MODE, param);
         }
     }
 
-    public static void texGen(GlStateManager.TexGen texGen, int pname, FloatBuffer params)
-    {
+    public static void texGen(GlStateManager.TexGen texGen, int pname, FloatBuffer params) {
         GL11.glTexGen(texGenCoord(texGen).coord, pname, params);
     }
 
-    private static GlStateManager.TexGenCoord texGenCoord(GlStateManager.TexGen texGen)
-    {
-        switch (texGen)
-        {
+    private static GlStateManager.TexGenCoord texGenCoord(GlStateManager.TexGen texGen) {
+        switch (texGen) {
             case S:
                 return texGenState.s;
             case T:
@@ -405,140 +331,111 @@
         }
     }
 
-    public static void setActiveTexture(int texture)
-    {
-        if (activeTextureUnit != texture - OpenGlHelper.defaultTexUnit)
-        {
+    public static void setActiveTexture(int texture) {
+        if (activeTextureUnit != texture - OpenGlHelper.defaultTexUnit) {
             activeTextureUnit = texture - OpenGlHelper.defaultTexUnit;
             OpenGlHelper.setActiveTexture(texture);
         }
     }
 
-    public static void enableTexture2D()
-    {
+    public static void enableTexture2D() {
         textureState[activeTextureUnit].texture2DState.setEnabled();
     }
 
-    public static void disableTexture2D()
-    {
+    public static void disableTexture2D() {
         textureState[activeTextureUnit].texture2DState.setDisabled();
     }
 
-    public static void glTexEnv(int target, int parameterName, FloatBuffer parameters)
-    {
+    public static void glTexEnv(int target, int parameterName, FloatBuffer parameters) {
         GL11.glTexEnv(target, parameterName, parameters);
     }
 
-    public static void glTexEnvi(int target, int parameterName, int parameter)
-    {
+    public static void glTexEnvi(int target, int parameterName, int parameter) {
         GL11.glTexEnvi(target, parameterName, parameter);
     }
 
-    public static void glTexEnvf(int target, int parameterName, float parameter)
-    {
+    public static void glTexEnvf(int target, int parameterName, float parameter) {
         GL11.glTexEnvf(target, parameterName, parameter);
     }
 
-    public static void glTexParameterf(int target, int parameterName, float parameter)
-    {
+    public static void glTexParameterf(int target, int parameterName, float parameter) {
         GL11.glTexParameterf(target, parameterName, parameter);
     }
 
-    public static void glTexParameteri(int target, int parameterName, int parameter)
-    {
+    public static void glTexParameteri(int target, int parameterName, int parameter) {
         GL11.glTexParameteri(target, parameterName, parameter);
     }
 
-    public static int glGetTexLevelParameteri(int target, int level, int parameterName)
-    {
+    public static int glGetTexLevelParameteri(int target, int level, int parameterName) {
         return GL11.glGetTexLevelParameteri(target, level, parameterName);
     }
 
-    public static int generateTexture()
-    {
+    public static int generateTexture() {
         return GL11.glGenTextures();
     }
 
-    public static void deleteTexture(int texture)
-    {
+    public static void deleteTexture(int texture) {
         GL11.glDeleteTextures(texture);
 
-        for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
-        {
-            if (glstatemanager$texturestate.textureName == texture)
-            {
+        for (GlStateManager.TextureState glstatemanager$texturestate : textureState) {
+            if (glstatemanager$texturestate.textureName == texture) {
                 glstatemanager$texturestate.textureName = -1;
             }
         }
     }
 
-    public static void bindTexture(int texture)
-    {
-        if (texture != textureState[activeTextureUnit].textureName)
-        {
+    public static void bindTexture(int texture) {
+        if (texture != textureState[activeTextureUnit].textureName) {
             textureState[activeTextureUnit].textureName = texture;
             GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
         }
     }
 
-    public static void glTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, @Nullable IntBuffer pixels)
-    {
+    public static void glTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, @Nullable IntBuffer pixels) {
         GL11.glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
     }
 
-    public static void glTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, IntBuffer pixels)
-    {
+    public static void glTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, IntBuffer pixels) {
         GL11.glTexSubImage2D(target, level, xOffset, yOffset, width, height, format, type, pixels);
     }
 
-    public static void glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height)
-    {
+    public static void glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height) {
         GL11.glCopyTexSubImage2D(target, level, xOffset, yOffset, x, y, width, height);
     }
 
-    public static void glGetTexImage(int target, int level, int format, int type, IntBuffer pixels)
-    {
+    public static void glGetTexImage(int target, int level, int format, int type, IntBuffer pixels) {
         GL11.glGetTexImage(target, level, format, type, pixels);
     }
 
-    public static void enableNormalize()
-    {
+    public static void enableNormalize() {
         normalizeState.setEnabled();
     }
 
-    public static void disableNormalize()
-    {
+    public static void disableNormalize() {
         normalizeState.setDisabled();
     }
 
-    public static void shadeModel(int mode)
-    {
-        if (mode != activeShadeModel)
-        {
+    public static void shadeModel(int mode) {
+        if (mode != activeShadeModel) {
             activeShadeModel = mode;
             GL11.glShadeModel(mode);
         }
     }
 
-    public static void enableRescaleNormal()
-    {
+    public static void enableRescaleNormal() {
         rescaleNormalState.setEnabled();
     }
 
-    public static void disableRescaleNormal()
-    {
+    public static void disableRescaleNormal() {
         rescaleNormalState.setDisabled();
     }
 
-    public static void viewport(int x, int y, int width, int height)
-    {
+    public static void viewport(int x, int y, int width, int height) {
         GL11.glViewport(x, y, width, height);
     }
 
-    public static void colorMask(boolean red, boolean green, boolean blue, boolean alpha)
-    {
-        if (red != colorMaskState.red || green != colorMaskState.green || blue != colorMaskState.blue || alpha != colorMaskState.alpha)
-        {
+    public static void colorMask(boolean red, boolean green, boolean blue, boolean alpha) {
+        if (red != colorMaskState.red || green != colorMaskState.green || blue != colorMaskState.blue || alpha != colorMaskState.alpha) {
             colorMaskState.red = red;
             colorMaskState.green = green;
             colorMaskState.blue = blue;
@@ -547,19 +444,15 @@
         }
     }
 
-    public static void clearDepth(double depth)
-    {
-        if (depth != clearState.depth)
-        {
+    public static void clearDepth(double depth) {
+        if (depth != clearState.depth) {
             clearState.depth = depth;
             GL11.glClearDepth(depth);
         }
     }
 
-    public static void clearColor(float red, float green, float blue, float alpha)
-    {
-        if (red != clearState.color.red || green != clearState.color.green || blue != clearState.color.blue || alpha != clearState.color.alpha)
-        {
+    public static void clearColor(float red, float green, float blue, float alpha) {
+        if (red != clearState.color.red || green != clearState.color.green || blue != clearState.color.blue || alpha != clearState.color.alpha) {
             clearState.color.red = red;
             clearState.color.green = green;
             clearState.color.blue = blue;
@@ -568,78 +461,63 @@
         }
     }
 
-    public static void clear(int mask)
-    {
+    public static void clear(int mask) {
         GL11.glClear(mask);
     }
 
-    public static void matrixMode(int mode)
-    {
+    public static void matrixMode(int mode) {
         GL11.glMatrixMode(mode);
     }
 
-    public static void loadIdentity()
-    {
+    public static void loadIdentity() {
         GL11.glLoadIdentity();
     }
 
-    public static void pushMatrix()
-    {
+    public static void pushMatrix() {
         GL11.glPushMatrix();
     }
 
-    public static void popMatrix()
-    {
+    public static void popMatrix() {
         GL11.glPopMatrix();
     }
 
-    public static void getFloat(int pname, FloatBuffer params)
-    {
+    public static void getFloat(int pname, FloatBuffer params) {
         GL11.glGetFloat(pname, params);
     }
 
-    public static void ortho(double left, double right, double bottom, double top, double zNear, double zFar)
-    {
+    public static void ortho(double left, double right, double bottom, double top, double zNear, double zFar) {
         GL11.glOrtho(left, right, bottom, top, zNear, zFar);
     }
 
-    public static void rotate(float angle, float x, float y, float z)
-    {
+    public static void rotate(float angle, float x, float y, float z) {
         GL11.glRotatef(angle, x, y, z);
     }
 
-    public static void scale(float x, float y, float z)
-    {
+    public static void scale(float x, float y, float z) {
         GL11.glScalef(x, y, z);
     }
 
-    public static void scale(double x, double y, double z)
-    {
+    public static void scale(double x, double y, double z) {
         GL11.glScaled(x, y, z);
     }
 
-    public static void translate(float x, float y, float z)
-    {
+    public static void translate(float x, float y, float z) {
         GL11.glTranslatef(x, y, z);
     }
 
-    public static void translate(double x, double y, double z)
-    {
+    public static void translate(double x, double y, double z) {
         GL11.glTranslated(x, y, z);
     }
 
-    public static void multMatrix(FloatBuffer matrix)
-    {
+    public static void multMatrix(FloatBuffer matrix) {
         GL11.glMultMatrix(matrix);
     }
 
-    public static void rotate(Quaternion quaternionIn)
-    {
+    public static void rotate(Quaternion quaternionIn) {
         multMatrix(quatToGlMatrix(BUF_FLOAT_16, quaternionIn));
     }
 
-    public static FloatBuffer quatToGlMatrix(FloatBuffer buffer, Quaternion quaternionIn)
-    {
+    public static FloatBuffer quatToGlMatrix(FloatBuffer buffer, Quaternion quaternionIn) {
         buffer.clear();
         float f = quaternionIn.x * quaternionIn.x;
         float f1 = quaternionIn.x * quaternionIn.y;
@@ -670,10 +548,8 @@
         return buffer;
     }
 
-    public static void color(float colorRed, float colorGreen, float colorBlue, float colorAlpha)
-    {
-        if (colorRed != colorState.red || colorGreen != colorState.green || colorBlue != colorState.blue || colorAlpha != colorState.alpha)
-        {
+    public static void color(float colorRed, float colorGreen, float colorBlue, float colorAlpha) {
+        if (colorRed != colorState.red || colorGreen != colorState.green || colorBlue != colorState.blue || colorAlpha != colorState.alpha) {
             colorState.red = colorRed;
             colorState.green = colorGreen;
             colorState.blue = colorBlue;
@@ -682,163 +558,131 @@
         }
     }
 
-    public static void color(float colorRed, float colorGreen, float colorBlue)
-    {
+    public static void color(float colorRed, float colorGreen, float colorBlue) {
         color(colorRed, colorGreen, colorBlue, 1.0F);
     }
 
-    public static void glTexCoord2f(float sCoord, float tCoord)
-    {
+    public static void glTexCoord2f(float sCoord, float tCoord) {
         GL11.glTexCoord2f(sCoord, tCoord);
     }
 
-    public static void glVertex3f(float x, float y, float z)
-    {
+    public static void glVertex3f(float x, float y, float z) {
         GL11.glVertex3f(x, y, z);
     }
 
-    public static void resetColor()
-    {
+    public static void resetColor() {
         colorState.red = -1.0F;
         colorState.green = -1.0F;
         colorState.blue = -1.0F;
         colorState.alpha = -1.0F;
     }
 
-    public static void glNormalPointer(int type, int stride, ByteBuffer buffer)
-    {
+    public static void glNormalPointer(int type, int stride, ByteBuffer buffer) {
         GL11.glNormalPointer(type, stride, buffer);
     }
 
-    public static void glTexCoordPointer(int size, int type, int stride, int buffer_offset)
-    {
-        GL11.glTexCoordPointer(size, type, stride, (long)buffer_offset);
+    public static void glTexCoordPointer(int size, int type, int stride, int buffer_offset) {
+        GL11.glTexCoordPointer(size, type, stride, (long) buffer_offset);
     }
 
-    public static void glTexCoordPointer(int size, int type, int stride, ByteBuffer buffer)
-    {
+    public static void glTexCoordPointer(int size, int type, int stride, ByteBuffer buffer) {
         GL11.glTexCoordPointer(size, type, stride, buffer);
     }
 
-    public static void glVertexPointer(int size, int type, int stride, int buffer_offset)
-    {
-        GL11.glVertexPointer(size, type, stride, (long)buffer_offset);
+    public static void glVertexPointer(int size, int type, int stride, int buffer_offset) {
+        GL11.glVertexPointer(size, type, stride, (long) buffer_offset);
     }
 
-    public static void glVertexPointer(int size, int type, int stride, ByteBuffer buffer)
-    {
+    public static void glVertexPointer(int size, int type, int stride, ByteBuffer buffer) {
         GL11.glVertexPointer(size, type, stride, buffer);
     }
 
-    public static void glColorPointer(int size, int type, int stride, int buffer_offset)
-    {
-        GL11.glColorPointer(size, type, stride, (long)buffer_offset);
+    public static void glColorPointer(int size, int type, int stride, int buffer_offset) {
+        GL11.glColorPointer(size, type, stride, (long) buffer_offset);
     }
 
-    public static void glColorPointer(int size, int type, int stride, ByteBuffer buffer)
-    {
+    public static void glColorPointer(int size, int type, int stride, ByteBuffer buffer) {
         GL11.glColorPointer(size, type, stride, buffer);
     }
 
-    public static void glDisableClientState(int cap)
-    {
+    public static void glDisableClientState(int cap) {
         GL11.glDisableClientState(cap);
     }
 
-    public static void glEnableClientState(int cap)
-    {
+    public static void glEnableClientState(int cap) {
         GL11.glEnableClientState(cap);
     }
 
-    public static void glBegin(int mode)
-    {
+    public static void glBegin(int mode) {
         GL11.glBegin(mode);
     }
 
-    public static void glEnd()
-    {
+    public static void glEnd() {
         GL11.glEnd();
     }
 
-    public static void glDrawArrays(int mode, int first, int count)
-    {
+    public static void glDrawArrays(int mode, int first, int count) {
         GL11.glDrawArrays(mode, first, count);
     }
 
-    public static void glLineWidth(float width)
-    {
+    public static void glLineWidth(float width) {
         GL11.glLineWidth(width);
     }
 
-    public static void callList(int list)
-    {
+    public static void callList(int list) {
         GL11.glCallList(list);
     }
 
-    public static void glDeleteLists(int list, int range)
-    {
+    public static void glDeleteLists(int list, int range) {
         GL11.glDeleteLists(list, range);
     }
 
-    public static void glNewList(int list, int mode)
-    {
+    public static void glNewList(int list, int mode) {
         GL11.glNewList(list, mode);
     }
 
-    public static void glEndList()
-    {
+    public static void glEndList() {
         GL11.glEndList();
     }
 
-    public static int glGenLists(int range)
-    {
+    public static int glGenLists(int range) {
         return GL11.glGenLists(range);
     }
 
-    public static void glPixelStorei(int parameterName, int param)
-    {
+    public static void glPixelStorei(int parameterName, int param) {
         GL11.glPixelStorei(parameterName, param);
     }
 
-    public static void glReadPixels(int x, int y, int width, int height, int format, int type, IntBuffer pixels)
-    {
+    public static void glReadPixels(int x, int y, int width, int height, int format, int type, IntBuffer pixels) {
         GL11.glReadPixels(x, y, width, height, format, type, pixels);
     }
 
-    public static int glGetError()
-    {
+    public static int glGetError() {
         return GL11.glGetError();
     }
 
-    public static String glGetString(int name)
-    {
+    public static String glGetString(int name) {
         return GL11.glGetString(name);
     }
 
-    public static void glGetInteger(int parameterName, IntBuffer parameters)
-    {
+    public static void glGetInteger(int parameterName, IntBuffer parameters) {
         GL11.glGetInteger(parameterName, parameters);
     }
 
-    public static int glGetInteger(int parameterName)
-    {
+    public static int glGetInteger(int parameterName) {
         return GL11.glGetInteger(parameterName);
     }
 
-    public static void enableBlendProfile(GlStateManager.Profile p_187408_0_)
-    {
+    public static void enableBlendProfile(GlStateManager.Profile p_187408_0_) {
         p_187408_0_.apply();
     }
 
-    public static void disableBlendProfile(GlStateManager.Profile p_187440_0_)
-    {
+    public static void disableBlendProfile(GlStateManager.Profile p_187440_0_) {
         p_187440_0_.clean();
     }
 
-    static
-    {
-        for (int i = 0; i < 8; ++i)
-        {
+    static {
+        for (int i = 0; i < 8; ++i) {
             lightState[i] = new GlStateManager.BooleanState(16384 + i);
         }
 
@@ -855,8 +699,7 @@
         normalizeState = new GlStateManager.BooleanState(2977);
         textureState = new GlStateManager.TextureState[8];
 
-        for (int j = 0; j < 8; ++j)
-        {
+        for (int j = 0; j < 8; ++j) {
             textureState[j] = new GlStateManager.TextureState();
         }
 
@@ -867,208 +710,177 @@
     }
 
     @SideOnly(Side.CLIENT)
-    static class AlphaState
-        {
-            public GlStateManager.BooleanState alphaTest;
-            public int func;
-            public float ref;
+    static class AlphaState {
+        public GlStateManager.BooleanState alphaTest;
+        public int func;
+        public float ref;
 
-            private AlphaState()
-            {
-                this.alphaTest = new GlStateManager.BooleanState(3008);
-                this.func = 519;
-                this.ref = -1.0F;
-            }
+        private AlphaState() {
+            this.alphaTest = new GlStateManager.BooleanState(3008);
+            this.func = 519;
+            this.ref = -1.0F;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class BlendState
-        {
-            public GlStateManager.BooleanState blend;
-            public int srcFactor;
-            public int dstFactor;
-            public int srcFactorAlpha;
-            public int dstFactorAlpha;
+    static class BlendState {
+        public GlStateManager.BooleanState blend;
+        public int srcFactor;
+        public int dstFactor;
+        public int srcFactorAlpha;
+        public int dstFactorAlpha;
 
-            private BlendState()
-            {
-                this.blend = new GlStateManager.BooleanState(3042);
-                this.srcFactor = 1;
-                this.dstFactor = 0;
-                this.srcFactorAlpha = 1;
-                this.dstFactorAlpha = 0;
-            }
+        private BlendState() {
+            this.blend = new GlStateManager.BooleanState(3042);
+            this.srcFactor = 1;
+            this.dstFactor = 0;
+            this.srcFactorAlpha = 1;
+            this.dstFactorAlpha = 0;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class BooleanState
-        {
-            private final int capability;
-            private boolean currentState;
+    static class BooleanState {
+        private final int capability;
+        private boolean currentState;
 
-            public BooleanState(int capabilityIn)
-            {
-                this.capability = capabilityIn;
-            }
+        public BooleanState(int capabilityIn) {
+            this.capability = capabilityIn;
+        }
 
-            public void setDisabled()
-            {
-                this.setState(false);
-            }
+        public void setDisabled() {
+            this.setState(false);
+        }
 
-            public void setEnabled()
-            {
-                this.setState(true);
-            }
+        public void setEnabled() {
+            this.setState(true);
+        }
 
-            public void setState(boolean state)
-            {
-                if (state != this.currentState)
-                {
-                    this.currentState = state;
+        public void setState(boolean state) {
+            if (state != this.currentState) {
+                this.currentState = state;
 
-                    if (state)
-                    {
-                        GL11.glEnable(this.capability);
-                    }
-                    else
-                    {
-                        GL11.glDisable(this.capability);
-                    }
+                if (state) {
+                    GL11.glEnable(this.capability);
+                } else {
+                    GL11.glDisable(this.capability);
                 }
             }
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class ClearState
-        {
-            public double depth;
-            public GlStateManager.Color color;
+    static class ClearState {
+        public double depth;
+        public GlStateManager.Color color;
 
-            private ClearState()
-            {
-                this.depth = 1.0D;
-                this.color = new GlStateManager.Color(0.0F, 0.0F, 0.0F, 0.0F);
-            }
+        private ClearState() {
+            this.depth = 1.0D;
+            this.color = new GlStateManager.Color(0.0F, 0.0F, 0.0F, 0.0F);
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class Color
-        {
-            public float red;
-            public float green;
-            public float blue;
-            public float alpha;
+    static class Color {
+        public float red;
+        public float green;
+        public float blue;
+        public float alpha;
 
-            public Color()
-            {
-                this(1.0F, 1.0F, 1.0F, 1.0F);
-            }
+        public Color() {
+            this(1.0F, 1.0F, 1.0F, 1.0F);
+        }
 
-            public Color(float redIn, float greenIn, float blueIn, float alphaIn)
-            {
-                this.red = 1.0F;
-                this.green = 1.0F;
-                this.blue = 1.0F;
-                this.alpha = 1.0F;
-                this.red = redIn;
-                this.green = greenIn;
-                this.blue = blueIn;
-                this.alpha = alphaIn;
-            }
+        public Color(float redIn, float greenIn, float blueIn, float alphaIn) {
+            this.red = 1.0F;
+            this.green = 1.0F;
+            this.blue = 1.0F;
+            this.alpha = 1.0F;
+            this.red = redIn;
+            this.green = greenIn;
+            this.blue = blueIn;
+            this.alpha = alphaIn;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class ColorLogicState
-        {
-            public GlStateManager.BooleanState colorLogicOp;
-            public int opcode;
+    static class ColorLogicState {
+        public GlStateManager.BooleanState colorLogicOp;
+        public int opcode;
 
-            private ColorLogicState()
-            {
-                this.colorLogicOp = new GlStateManager.BooleanState(3058);
-                this.opcode = 5379;
-            }
+        private ColorLogicState() {
+            this.colorLogicOp = new GlStateManager.BooleanState(3058);
+            this.opcode = 5379;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class ColorMask
-        {
-            public boolean red;
-            public boolean green;
-            public boolean blue;
-            public boolean alpha;
+    static class ColorMask {
+        public boolean red;
+        public boolean green;
+        public boolean blue;
+        public boolean alpha;
 
-            private ColorMask()
-            {
-                this.red = true;
-                this.green = true;
-                this.blue = true;
-                this.alpha = true;
-            }
+        private ColorMask() {
+            this.red = true;
+            this.green = true;
+            this.blue = true;
+            this.alpha = true;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class ColorMaterialState
-        {
-            public GlStateManager.BooleanState colorMaterial;
-            public int face;
-            public int mode;
+    static class ColorMaterialState {
+        public GlStateManager.BooleanState colorMaterial;
+        public int face;
+        public int mode;
 
-            private ColorMaterialState()
-            {
-                this.colorMaterial = new GlStateManager.BooleanState(2903);
-                this.face = 1032;
-                this.mode = 5634;
-            }
+        private ColorMaterialState() {
+            this.colorMaterial = new GlStateManager.BooleanState(2903);
+            this.face = 1032;
+            this.mode = 5634;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static enum CullFace
-    {
+    public static enum CullFace {
         FRONT(1028),
         BACK(1029),
         FRONT_AND_BACK(1032);
 
         public final int mode;
 
-        private CullFace(int modeIn)
-        {
+        private CullFace(int modeIn) {
             this.mode = modeIn;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static class CullState
-        {
-            public GlStateManager.BooleanState cullFace;
-            public int mode;
+    static class CullState {
+        public GlStateManager.BooleanState cullFace;
+        public int mode;
 
-            private CullState()
-            {
-                this.cullFace = new GlStateManager.BooleanState(2884);
-                this.mode = 1029;
-            }
+        private CullState() {
+            this.cullFace = new GlStateManager.BooleanState(2884);
+            this.mode = 1029;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class DepthState
-        {
-            public GlStateManager.BooleanState depthTest;
-            public boolean maskEnabled;
-            public int depthFunc;
+    static class DepthState {
+        public GlStateManager.BooleanState depthTest;
+        public boolean maskEnabled;
+        public int depthFunc;
 
-            private DepthState()
-            {
-                this.depthTest = new GlStateManager.BooleanState(2929);
-                this.maskEnabled = true;
-                this.depthFunc = 513;
-            }
+        private DepthState() {
+            this.depthTest = new GlStateManager.BooleanState(2929);
+            this.maskEnabled = true;
+            this.depthFunc = 513;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static enum DestFactor
-    {
+    public static enum DestFactor {
         CONSTANT_ALPHA(32771),
         CONSTANT_COLOR(32769),
         DST_ALPHA(772),
@@ -1086,48 +898,42 @@
 
         public final int factor;
 
-        private DestFactor(int factorIn)
-        {
+        private DestFactor(int factorIn) {
             this.factor = factorIn;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum FogMode
-    {
+    public static enum FogMode {
         LINEAR(9729),
         EXP(2048),
         EXP2(2049);
 
         public final int capabilityId;
 
-        private FogMode(int capabilityIn)
-        {
+        private FogMode(int capabilityIn) {
             this.capabilityId = capabilityIn;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static class FogState
-        {
-            public GlStateManager.BooleanState fog;
-            public int mode;
-            public float density;
-            public float start;
-            public float end;
+    static class FogState {
+        public GlStateManager.BooleanState fog;
+        public int mode;
+        public float density;
+        public float start;
+        public float end;
 
-            private FogState()
-            {
-                this.fog = new GlStateManager.BooleanState(2912);
-                this.mode = 2048;
-                this.density = 1.0F;
-                this.end = 1.0F;
-            }
+        private FogState() {
+            this.fog = new GlStateManager.BooleanState(2912);
+            this.mode = 2048;
+            this.density = 1.0F;
+            this.end = 1.0F;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static enum LogicOp
-    {
+    public static enum LogicOp {
         AND(5377),
         AND_INVERTED(5380),
         AND_REVERSE(5378),
@@ -1147,51 +953,42 @@
 
         public final int opcode;
 
-        private LogicOp(int opcodeIn)
-        {
+        private LogicOp(int opcodeIn) {
             this.opcode = opcodeIn;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static class PolygonOffsetState
-        {
-            public GlStateManager.BooleanState polygonOffsetFill;
-            public GlStateManager.BooleanState polygonOffsetLine;
-            public float factor;
-            public float units;
+    static class PolygonOffsetState {
+        public GlStateManager.BooleanState polygonOffsetFill;
+        public GlStateManager.BooleanState polygonOffsetLine;
+        public float factor;
+        public float units;
 
-            private PolygonOffsetState()
-            {
-                this.polygonOffsetFill = new GlStateManager.BooleanState(32823);
-                this.polygonOffsetLine = new GlStateManager.BooleanState(10754);
-            }
+        private PolygonOffsetState() {
+            this.polygonOffsetFill = new GlStateManager.BooleanState(32823);
+            this.polygonOffsetLine = new GlStateManager.BooleanState(10754);
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static enum Profile
-    {
+    public static enum Profile {
         DEFAULT {
-            public void apply()
-            {
+            public void apply() {
                 GlStateManager.disableAlpha();
                 GlStateManager.alphaFunc(519, 0.0F);
                 GlStateManager.disableLighting();
                 GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, RenderHelper.setColorBuffer(0.2F, 0.2F, 0.2F, 1.0F));
 
-                for (int i = 0; i < 8; ++i)
-                {
+                for (int i = 0; i < 8; ++i) {
                     GlStateManager.disableLight(i);
                     GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_AMBIENT, RenderHelper.setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
                     GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_POSITION, RenderHelper.setColorBuffer(0.0F, 0.0F, 1.0F, 0.0F));
 
-                    if (i == 0)
-                    {
+                    if (i == 0) {
                         GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_DIFFUSE, RenderHelper.setColorBuffer(1.0F, 1.0F, 1.0F, 1.0F));
                         GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_SPECULAR, RenderHelper.setColorBuffer(1.0F, 1.0F, 1.0F, 1.0F));
-                    }
-                    else
-                    {
+                    } else {
                         GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_DIFFUSE, RenderHelper.setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
                         GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_SPECULAR, RenderHelper.setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
                     }
@@ -1213,8 +1010,7 @@
                 GlStateManager.setFogEnd(1.0F);
                 GL11.glFog(GL11.GL_FOG_COLOR, RenderHelper.setColorBuffer(0.0F, 0.0F, 0.0F, 0.0F));
 
-                if (GLContext.getCapabilities().GL_NV_fog_distance)
-                {
+                if (GLContext.getCapabilities().GL_NV_fog_distance) {
                     GL11.glFogi(GL11.GL_FOG_MODE, 34140);
                 }
 
@@ -1275,25 +1071,21 @@
                 GL11.glPolygonMode(GL11.GL_BACK, GL11.GL_FILL);
             }
 
-            public void clean()
-            {
+            public void clean() {
             }
         },
         PLAYER_SKIN {
-            public void apply()
-            {
+            public void apply() {
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
             }
 
-            public void clean()
-            {
+            public void clean() {
                 GlStateManager.disableBlend();
             }
         },
         TRANSPARENT_MODEL {
-            public void apply()
-            {
+            public void apply() {
                 GlStateManager.color(1.0F, 1.0F, 1.0F, 0.15F);
                 GlStateManager.depthMask(false);
                 GlStateManager.enableBlend();
@@ -1301,16 +1093,14 @@
                 GlStateManager.alphaFunc(516, 0.003921569F);
             }
 
-            public void clean()
-            {
+            public void clean() {
                 GlStateManager.disableBlend();
                 GlStateManager.alphaFunc(516, 0.1F);
                 GlStateManager.depthMask(true);
             }
         };
 
-        private Profile()
-        {
+        private Profile() {
         }
 
         public abstract void apply();
@@ -1319,8 +1109,7 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public static enum SourceFactor
-    {
+    public static enum SourceFactor {
         CONSTANT_ALPHA(32771),
         CONSTANT_COLOR(32769),
         DST_ALPHA(772),
@@ -1339,47 +1128,41 @@
 
         public final int factor;
 
-        private SourceFactor(int factorIn)
-        {
+        private SourceFactor(int factorIn) {
             this.factor = factorIn;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static class StencilFunc
-        {
-            public int func;
-            public int mask;
+    static class StencilFunc {
+        public int func;
+        public int mask;
 
-            private StencilFunc()
-            {
-                this.func = 519;
-                this.mask = -1;
-            }
+        private StencilFunc() {
+            this.func = 519;
+            this.mask = -1;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class StencilState
-        {
-            public GlStateManager.StencilFunc func;
-            public int mask;
-            public int fail;
-            public int zfail;
-            public int zpass;
+    static class StencilState {
+        public GlStateManager.StencilFunc func;
+        public int mask;
+        public int fail;
+        public int zfail;
+        public int zpass;
 
-            private StencilState()
-            {
-                this.func = new GlStateManager.StencilFunc();
-                this.mask = -1;
-                this.fail = 7680;
-                this.zfail = 7680;
-                this.zpass = 7680;
-            }
+        private StencilState() {
+            this.func = new GlStateManager.StencilFunc();
+            this.mask = -1;
+            this.fail = 7680;
+            this.zfail = 7680;
+            this.zpass = 7680;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static enum TexGen
-    {
+    public static enum TexGen {
         S,
         T,
         R,
@@ -1387,45 +1170,39 @@
     }
 
     @SideOnly(Side.CLIENT)
-    static class TexGenCoord
-        {
-            public GlStateManager.BooleanState textureGen;
-            public int coord;
-            public int param = -1;
+    static class TexGenCoord {
+        public GlStateManager.BooleanState textureGen;
+        public int coord;
+        public int param = -1;
 
-            public TexGenCoord(int coordIn, int capabilityIn)
-            {
-                this.coord = coordIn;
-                this.textureGen = new GlStateManager.BooleanState(capabilityIn);
-            }
+        public TexGenCoord(int coordIn, int capabilityIn) {
+            this.coord = coordIn;
+            this.textureGen = new GlStateManager.BooleanState(capabilityIn);
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class TexGenState
-        {
-            public GlStateManager.TexGenCoord s;
-            public GlStateManager.TexGenCoord t;
-            public GlStateManager.TexGenCoord r;
-            public GlStateManager.TexGenCoord q;
+    static class TexGenState {
+        public GlStateManager.TexGenCoord s;
+        public GlStateManager.TexGenCoord t;
+        public GlStateManager.TexGenCoord r;
+        public GlStateManager.TexGenCoord q;
 
-            private TexGenState()
-            {
-                this.s = new GlStateManager.TexGenCoord(8192, 3168);
-                this.t = new GlStateManager.TexGenCoord(8193, 3169);
-                this.r = new GlStateManager.TexGenCoord(8194, 3170);
-                this.q = new GlStateManager.TexGenCoord(8195, 3171);
-            }
+        private TexGenState() {
+            this.s = new GlStateManager.TexGenCoord(8192, 3168);
+            this.t = new GlStateManager.TexGenCoord(8193, 3169);
+            this.r = new GlStateManager.TexGenCoord(8194, 3170);
+            this.q = new GlStateManager.TexGenCoord(8195, 3171);
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    static class TextureState
-        {
-            public GlStateManager.BooleanState texture2DState;
-            public int textureName;
+    static class TextureState {
+        public GlStateManager.BooleanState texture2DState;
+        public int textureName;
 
-            private TextureState()
-            {
-                this.texture2DState = new GlStateManager.BooleanState(3553);
-            }
+        private TextureState() {
+            this.texture2DState = new GlStateManager.BooleanState(3553);
         }
+    }
 }
