--- ../src-base/minecraft/net/minecraft/client/renderer/RenderItem.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/RenderItem.java
@@ -1,40 +1,15 @@
 package net.minecraft.client.renderer;
 
-import java.util.List;
-import javax.annotation.Nullable;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockDirt;
-import net.minecraft.block.BlockDoublePlant;
-import net.minecraft.block.BlockFlower;
-import net.minecraft.block.BlockHugeMushroom;
-import net.minecraft.block.BlockPlanks;
-import net.minecraft.block.BlockPrismarine;
-import net.minecraft.block.BlockQuartz;
-import net.minecraft.block.BlockRedSandstone;
-import net.minecraft.block.BlockSand;
-import net.minecraft.block.BlockSandStone;
-import net.minecraft.block.BlockSilverfish;
-import net.minecraft.block.BlockStone;
-import net.minecraft.block.BlockStoneBrick;
-import net.minecraft.block.BlockStoneSlab;
-import net.minecraft.block.BlockStoneSlabNew;
-import net.minecraft.block.BlockTallGrass;
-import net.minecraft.block.BlockWall;
+import net.minecraft.block.*;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.renderer.block.model.BakedQuad;
-import net.minecraft.client.renderer.block.model.IBakedModel;
-import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
-import net.minecraft.client.renderer.block.model.ItemTransformVec3f;
-import net.minecraft.client.renderer.block.model.ModelManager;
-import net.minecraft.client.renderer.block.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.*;
 import net.minecraft.client.renderer.color.ItemColors;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.renderer.texture.TextureUtil;
-import net.minecraft.client.renderer.tileentity.TileEntityItemStackRenderer;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.client.resources.IResourceManager;
 import net.minecraft.client.resources.IResourceManagerReloadListener;
@@ -58,9 +33,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class RenderItem implements IResourceManagerReloadListener
-{
+public class RenderItem implements IResourceManagerReloadListener {
     private static final ResourceLocation RES_ITEM_GLINT = new ResourceLocation("textures/misc/enchanted_item_glint.png");
     private boolean notRenderingEffectsInGUI = true;
     public float zLevel;
@@ -68,53 +45,43 @@
     private final TextureManager textureManager;
     private final ItemColors itemColors;
 
-    public RenderItem(TextureManager p_i46552_1_, ModelManager p_i46552_2_, ItemColors p_i46552_3_)
-    {
+    public RenderItem(TextureManager p_i46552_1_, ModelManager p_i46552_2_, ItemColors p_i46552_3_) {
         this.textureManager = p_i46552_1_;
         this.itemModelMesher = new net.minecraftforge.client.ItemModelMesherForge(p_i46552_2_);
         this.registerItems();
         this.itemColors = p_i46552_3_;
     }
 
-    public ItemModelMesher getItemModelMesher()
-    {
+    public ItemModelMesher getItemModelMesher() {
         return this.itemModelMesher;
     }
 
-    protected void registerItem(Item itm, int subType, String identifier)
-    {
+    protected void registerItem(Item itm, int subType, String identifier) {
         this.itemModelMesher.register(itm, subType, new ModelResourceLocation(identifier, "inventory"));
     }
 
-    protected void registerBlock(Block blk, int subType, String identifier)
-    {
+    protected void registerBlock(Block blk, int subType, String identifier) {
         this.registerItem(Item.getItemFromBlock(blk), subType, identifier);
     }
 
-    private void registerBlock(Block blk, String identifier)
-    {
+    private void registerBlock(Block blk, String identifier) {
         this.registerBlock(blk, 0, identifier);
     }
 
-    private void registerItem(Item itm, String identifier)
-    {
+    private void registerItem(Item itm, String identifier) {
         this.registerItem(itm, 0, identifier);
     }
 
-    private void renderModel(IBakedModel model, ItemStack stack)
-    {
+    private void renderModel(IBakedModel model, ItemStack stack) {
         this.renderModel(model, -1, stack);
     }
 
-    private void renderModel(IBakedModel model, int color)
-    {
+    private void renderModel(IBakedModel model, int color) {
         this.renderModel(model, color, ItemStack.EMPTY);
     }
 
-    private void renderModel(IBakedModel model, int color, ItemStack stack)
-    {
-        if (net.minecraftforge.common.ForgeModContainer.allowEmissiveItems)
-        {
+    private void renderModel(IBakedModel model, int color, ItemStack stack) {
+        if (net.minecraftforge.common.ForgeModContainer.allowEmissiveItems) {
             net.minecraftforge.client.ForgeHooksClient.renderLitItem(this, model, color, stack);
             return;
         }
@@ -122,34 +89,27 @@
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.ITEM);
 
-        for (EnumFacing enumfacing : EnumFacing.values())
-        {
-            this.renderQuads(bufferbuilder, model.getQuads((IBlockState)null, enumfacing, 0L), color, stack);
+        for (EnumFacing enumfacing : EnumFacing.values()) {
+            this.renderQuads(bufferbuilder, model.getQuads((IBlockState) null, enumfacing, 0L), color, stack);
         }
 
-        this.renderQuads(bufferbuilder, model.getQuads((IBlockState)null, (EnumFacing)null, 0L), color, stack);
+        this.renderQuads(bufferbuilder, model.getQuads((IBlockState) null, (EnumFacing) null, 0L), color, stack);
         tessellator.draw();
     }
 
-    public void renderItem(ItemStack stack, IBakedModel model)
-    {
-        if (!stack.isEmpty())
-        {
+    public void renderItem(ItemStack stack, IBakedModel model) {
+        if (!stack.isEmpty()) {
             GlStateManager.pushMatrix();
             GlStateManager.translate(-0.5F, -0.5F, -0.5F);
 
-            if (model.isBuiltInRenderer())
-            {
+            if (model.isBuiltInRenderer()) {
                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
                 GlStateManager.enableRescaleNormal();
                 stack.getItem().getTileEntityItemStackRenderer().renderByItem(stack);
-            }
-            else
-            {
+            } else {
                 this.renderModel(model, stack);
 
-                if (stack.hasEffect())
-                {
+                if (stack.hasEffect()) {
                     this.renderEffect(model);
                 }
             }
@@ -158,8 +118,7 @@
         }
     }
 
-    private void renderEffect(IBakedModel model)
-    {
+    private void renderEffect(IBakedModel model) {
         GlStateManager.depthMask(false);
         GlStateManager.depthFunc(514);
         GlStateManager.disableLighting();
@@ -168,14 +127,14 @@
         GlStateManager.matrixMode(5890);
         GlStateManager.pushMatrix();
         GlStateManager.scale(8.0F, 8.0F, 8.0F);
-        float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
+        float f = (float) (Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
         GlStateManager.translate(f, 0.0F, 0.0F);
         GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
         this.renderModel(model, -8372020);
         GlStateManager.popMatrix();
         GlStateManager.pushMatrix();
         GlStateManager.scale(8.0F, 8.0F, 8.0F);
-        float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
+        float f1 = (float) (Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
         GlStateManager.translate(-f1, 0.0F, 0.0F);
         GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
         this.renderModel(model, -8372020);
@@ -188,35 +147,29 @@
         this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
     }
 
-    private void putQuadNormal(BufferBuilder renderer, BakedQuad quad)
-    {
+    private void putQuadNormal(BufferBuilder renderer, BakedQuad quad) {
         Vec3i vec3i = quad.getFace().getDirectionVec();
-        renderer.putNormal((float)vec3i.getX(), (float)vec3i.getY(), (float)vec3i.getZ());
+        renderer.putNormal((float) vec3i.getX(), (float) vec3i.getY(), (float) vec3i.getZ());
     }
 
-    private void renderQuad(BufferBuilder renderer, BakedQuad quad, int color)
-    {
+    private void renderQuad(BufferBuilder renderer, BakedQuad quad, int color) {
         renderer.addVertexData(quad.getVertexData());
         renderer.putColor4(color);
         this.putQuadNormal(renderer, quad);
     }
 
-    public void renderQuads(BufferBuilder renderer, List<BakedQuad> quads, int color, ItemStack stack)
-    {
+    public void renderQuads(BufferBuilder renderer, List<BakedQuad> quads, int color, ItemStack stack) {
         boolean flag = color == -1 && !stack.isEmpty();
         int i = 0;
 
-        for (int j = quads.size(); i < j; ++i)
-        {
+        for (int j = quads.size(); i < j; ++i) {
             BakedQuad bakedquad = quads.get(i);
             int k = color;
 
-            if (flag && bakedquad.hasTintIndex())
-            {
+            if (flag && bakedquad.hasTintIndex()) {
                 k = this.itemColors.colorMultiplier(stack, bakedquad.getTintIndex());
 
-                if (EntityRenderer.anaglyphEnable)
-                {
+                if (EntityRenderer.anaglyphEnable) {
                     k = TextureUtil.anaglyphColor(k);
                 }
 
@@ -227,40 +180,32 @@
         }
     }
 
-    public boolean shouldRenderItemIn3D(ItemStack stack)
-    {
+    public boolean shouldRenderItemIn3D(ItemStack stack) {
         IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
         return ibakedmodel == null ? false : ibakedmodel.isGui3d();
     }
 
-    public void renderItem(ItemStack stack, ItemCameraTransforms.TransformType cameraTransformType)
-    {
-        if (!stack.isEmpty())
-        {
-            IBakedModel ibakedmodel = this.getItemModelWithOverrides(stack, (World)null, (EntityLivingBase)null);
+    public void renderItem(ItemStack stack, ItemCameraTransforms.TransformType cameraTransformType) {
+        if (!stack.isEmpty()) {
+            IBakedModel ibakedmodel = this.getItemModelWithOverrides(stack, (World) null, (EntityLivingBase) null);
             this.renderItemModel(stack, ibakedmodel, cameraTransformType, false);
         }
     }
 
-    public IBakedModel getItemModelWithOverrides(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entitylivingbaseIn)
-    {
+    public IBakedModel getItemModelWithOverrides(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entitylivingbaseIn) {
         IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
         return ibakedmodel.getOverrides().handleItemState(ibakedmodel, stack, worldIn, entitylivingbaseIn);
     }
 
-    public void renderItem(ItemStack stack, EntityLivingBase entitylivingbaseIn, ItemCameraTransforms.TransformType transform, boolean leftHanded)
-    {
-        if (!stack.isEmpty() && entitylivingbaseIn != null)
-        {
+    public void renderItem(ItemStack stack, EntityLivingBase entitylivingbaseIn, ItemCameraTransforms.TransformType transform, boolean leftHanded) {
+        if (!stack.isEmpty() && entitylivingbaseIn != null) {
             IBakedModel ibakedmodel = this.getItemModelWithOverrides(stack, entitylivingbaseIn.world, entitylivingbaseIn);
             this.renderItemModel(stack, ibakedmodel, transform, leftHanded);
         }
     }
 
-    protected void renderItemModel(ItemStack stack, IBakedModel bakedmodel, ItemCameraTransforms.TransformType transform, boolean leftHanded)
-    {
-        if (!stack.isEmpty())
-        {
+    protected void renderItemModel(ItemStack stack, IBakedModel bakedmodel, ItemCameraTransforms.TransformType transform, boolean leftHanded) {
+        if (!stack.isEmpty()) {
             this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
             this.textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
@@ -282,18 +227,15 @@
         }
     }
 
-    private boolean isThereOneNegativeScale(ItemTransformVec3f itemTranformVec)
-    {
+    private boolean isThereOneNegativeScale(ItemTransformVec3f itemTranformVec) {
         return itemTranformVec.scale.x < 0.0F ^ itemTranformVec.scale.y < 0.0F ^ itemTranformVec.scale.z < 0.0F;
     }
 
-    public void renderItemIntoGUI(ItemStack stack, int x, int y)
-    {
-        this.renderItemModelIntoGUI(stack, x, y, this.getItemModelWithOverrides(stack, (World)null, (EntityLivingBase)null));
+    public void renderItemIntoGUI(ItemStack stack, int x, int y) {
+        this.renderItemModelIntoGUI(stack, x, y, this.getItemModelWithOverrides(stack, (World) null, (EntityLivingBase) null));
     }
 
-    protected void renderItemModelIntoGUI(ItemStack stack, int x, int y, IBakedModel bakedmodel)
-    {
+    protected void renderItemModelIntoGUI(ItemStack stack, int x, int y, IBakedModel bakedmodel) {
         GlStateManager.pushMatrix();
         this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         this.textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
@@ -314,68 +256,50 @@
         this.textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
     }
 
-    private void setupGuiTransform(int xPosition, int yPosition, boolean isGui3d)
-    {
-        GlStateManager.translate((float)xPosition, (float)yPosition, 100.0F + this.zLevel);
+    private void setupGuiTransform(int xPosition, int yPosition, boolean isGui3d) {
+        GlStateManager.translate((float) xPosition, (float) yPosition, 100.0F + this.zLevel);
         GlStateManager.translate(8.0F, 8.0F, 0.0F);
         GlStateManager.scale(1.0F, -1.0F, 1.0F);
         GlStateManager.scale(16.0F, 16.0F, 16.0F);
 
-        if (isGui3d)
-        {
+        if (isGui3d) {
             GlStateManager.enableLighting();
-        }
-        else
-        {
+        } else {
             GlStateManager.disableLighting();
         }
     }
 
-    public void renderItemAndEffectIntoGUI(ItemStack stack, int xPosition, int yPosition)
-    {
+    public void renderItemAndEffectIntoGUI(ItemStack stack, int xPosition, int yPosition) {
         this.renderItemAndEffectIntoGUI(Minecraft.getMinecraft().player, stack, xPosition, yPosition);
     }
 
-    public void renderItemAndEffectIntoGUI(@Nullable EntityLivingBase p_184391_1_, final ItemStack p_184391_2_, int p_184391_3_, int p_184391_4_)
-    {
-        if (!p_184391_2_.isEmpty())
-        {
+    public void renderItemAndEffectIntoGUI(@Nullable EntityLivingBase p_184391_1_, final ItemStack p_184391_2_, int p_184391_3_, int p_184391_4_) {
+        if (!p_184391_2_.isEmpty()) {
             this.zLevel += 50.0F;
 
-            try
-            {
-                this.renderItemModelIntoGUI(p_184391_2_, p_184391_3_, p_184391_4_, this.getItemModelWithOverrides(p_184391_2_, (World)null, p_184391_1_));
-            }
-            catch (Throwable throwable)
-            {
+            try {
+                this.renderItemModelIntoGUI(p_184391_2_, p_184391_3_, p_184391_4_, this.getItemModelWithOverrides(p_184391_2_, (World) null, p_184391_1_));
+            } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering item");
                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Item being rendered");
-                crashreportcategory.addDetail("Item Type", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
-                    {
-                        return String.valueOf((Object)p_184391_2_.getItem());
+                crashreportcategory.addDetail("Item Type", new ICrashReportDetail<String>() {
+                    public String call() throws Exception {
+                        return String.valueOf((Object) p_184391_2_.getItem());
                     }
                 });
                 crashreportcategory.addDetail("Registry Name", () -> String.valueOf(p_184391_2_.getItem().getRegistryName()));
-                crashreportcategory.addDetail("Item Aux", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
-                    {
+                crashreportcategory.addDetail("Item Aux", new ICrashReportDetail<String>() {
+                    public String call() throws Exception {
                         return String.valueOf(p_184391_2_.getMetadata());
                     }
                 });
-                crashreportcategory.addDetail("Item NBT", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
-                    {
-                        return String.valueOf((Object)p_184391_2_.getTagCompound());
+                crashreportcategory.addDetail("Item NBT", new ICrashReportDetail<String>() {
+                    public String call() throws Exception {
+                        return String.valueOf((Object) p_184391_2_.getTagCompound());
                     }
                 });
-                crashreportcategory.addDetail("Item Foil", new ICrashReportDetail<String>()
-                {
-                    public String call() throws Exception
-                    {
+                crashreportcategory.addDetail("Item Foil", new ICrashReportDetail<String>() {
+                    public String call() throws Exception {
                         return String.valueOf(p_184391_2_.hasEffect());
                     }
                 });
@@ -386,22 +310,18 @@
         }
     }
 
-    public void renderItemOverlays(FontRenderer fr, ItemStack stack, int xPosition, int yPosition)
-    {
-        this.renderItemOverlayIntoGUI(fr, stack, xPosition, yPosition, (String)null);
+    public void renderItemOverlays(FontRenderer fr, ItemStack stack, int xPosition, int yPosition) {
+        this.renderItemOverlayIntoGUI(fr, stack, xPosition, yPosition, (String) null);
     }
 
-    public void renderItemOverlayIntoGUI(FontRenderer fr, ItemStack stack, int xPosition, int yPosition, @Nullable String text)
-    {
-        if (!stack.isEmpty())
-        {
-            if (stack.getCount() != 1 || text != null)
-            {
+    public void renderItemOverlayIntoGUI(FontRenderer fr, ItemStack stack, int xPosition, int yPosition, @Nullable String text) {
+        if (!stack.isEmpty()) {
+            if (stack.getCount() != 1 || text != null) {
                 String s = text == null ? String.valueOf(stack.getCount()) : text;
                 GlStateManager.disableLighting();
                 GlStateManager.disableDepth();
                 GlStateManager.disableBlend();
-                fr.drawStringWithShadow(s, (float)(xPosition + 19 - 2 - fr.getStringWidth(s)), (float)(yPosition + 6 + 3), 16777215);
+                fr.drawStringWithShadow(s, (float) (xPosition + 19 - 2 - fr.getStringWidth(s)), (float) (yPosition + 6 + 3), 16777215);
                 GlStateManager.enableLighting();
                 GlStateManager.enableDepth();
                 // Fixes opaque cooldown overlay a bit lower
@@ -409,8 +329,7 @@
                 GlStateManager.enableBlend();
             }
 
-            if (stack.getItem().showDurabilityBar(stack))
-            {
+            if (stack.getItem().showDurabilityBar(stack)) {
                 GlStateManager.disableLighting();
                 GlStateManager.disableDepth();
                 GlStateManager.disableTexture2D();
@@ -420,7 +339,7 @@
                 BufferBuilder bufferbuilder = tessellator.getBuffer();
                 double health = stack.getItem().getDurabilityForDisplay(stack);
                 int rgbfordisplay = stack.getItem().getRGBDurabilityForDisplay(stack);
-                int i = Math.round(13.0F - (float)health * 13.0F);
+                int i = Math.round(13.0F - (float) health * 13.0F);
                 int j = rgbfordisplay;
                 this.draw(bufferbuilder, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
                 this.draw(bufferbuilder, xPosition + 2, yPosition + 13, i, 1, j >> 16 & 255, j >> 8 & 255, j & 255, 255);
@@ -434,8 +353,7 @@
             EntityPlayerSP entityplayersp = Minecraft.getMinecraft().player;
             float f3 = entityplayersp == null ? 0.0F : entityplayersp.getCooldownTracker().getCooldown(stack.getItem(), Minecraft.getMinecraft().getRenderPartialTicks());
 
-            if (f3 > 0.0F)
-            {
+            if (f3 > 0.0F) {
                 GlStateManager.disableLighting();
                 GlStateManager.disableDepth();
                 GlStateManager.disableTexture2D();
@@ -449,18 +367,16 @@
         }
     }
 
-    private void draw(BufferBuilder renderer, int x, int y, int width, int height, int red, int green, int blue, int alpha)
-    {
+    private void draw(BufferBuilder renderer, int x, int y, int width, int height, int red, int green, int blue, int alpha) {
         renderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
-        renderer.pos((double)(x + 0), (double)(y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
-        renderer.pos((double)(x + 0), (double)(y + height), 0.0D).color(red, green, blue, alpha).endVertex();
-        renderer.pos((double)(x + width), (double)(y + height), 0.0D).color(red, green, blue, alpha).endVertex();
-        renderer.pos((double)(x + width), (double)(y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + 0), (double) (y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + 0), (double) (y + height), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + width), (double) (y + height), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + width), (double) (y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
         Tessellator.getInstance().draw();
     }
 
-    private void registerItems()
-    {
+    private void registerItems() {
         this.registerBlock(Blocks.ANVIL, "anvil_intact");
         this.registerBlock(Blocks.ANVIL, 1, "anvil_slightly_damaged");
         this.registerBlock(Blocks.ANVIL, 2, "anvil_very_damaged");
@@ -800,8 +716,7 @@
         this.registerBlock(Blocks.RED_GLAZED_TERRACOTTA, "red_glazed_terracotta");
         this.registerBlock(Blocks.BLACK_GLAZED_TERRACOTTA, "black_glazed_terracotta");
 
-        for (EnumDyeColor enumdyecolor : EnumDyeColor.values())
-        {
+        for (EnumDyeColor enumdyecolor : EnumDyeColor.values()) {
             this.registerBlock(Blocks.CONCRETE, enumdyecolor.getMetadata(), enumdyecolor.getDyeColorName() + "_concrete");
             this.registerBlock(Blocks.CONCRETE_POWDER, enumdyecolor.getMetadata(), enumdyecolor.getDyeColorName() + "_concrete_powder");
         }
@@ -981,10 +896,8 @@
         this.registerItem(Items.CAULDRON, "cauldron");
         this.registerItem(Items.ENDER_EYE, "ender_eye");
         this.registerItem(Items.SPECKLED_MELON, "speckled_melon");
-        this.itemModelMesher.register(Items.SPAWN_EGG, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.SPAWN_EGG, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("spawn_egg", "inventory");
             }
         });
@@ -1022,24 +935,18 @@
         this.registerItem(Items.DIAMOND_HORSE_ARMOR, "diamond_horse_armor");
         this.registerItem(Items.LEAD, "lead");
         this.registerItem(Items.NAME_TAG, "name_tag");
-        this.itemModelMesher.register(Items.BANNER, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.BANNER, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("banner", "inventory");
             }
         });
-        this.itemModelMesher.register(Items.BED, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.BED, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("bed", "inventory");
             }
         });
-        this.itemModelMesher.register(Items.SHIELD, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.SHIELD, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("shield", "inventory");
             }
         });
@@ -1063,17 +970,13 @@
         this.registerItem(Items.PRISMARINE_SHARD, "prismarine_shard");
         this.registerItem(Items.PRISMARINE_CRYSTALS, "prismarine_crystals");
         this.registerItem(Items.KNOWLEDGE_BOOK, "knowledge_book");
-        this.itemModelMesher.register(Items.ENCHANTED_BOOK, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.ENCHANTED_BOOK, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("enchanted_book", "inventory");
             }
         });
-        this.itemModelMesher.register(Items.FILLED_MAP, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.FILLED_MAP, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("filled_map", "inventory");
             }
         });
@@ -1095,8 +998,7 @@
         net.minecraftforge.client.model.ModelLoader.onRegisterItems(this.itemModelMesher);
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         this.itemModelMesher.rebuildCache();
     }
 }
