--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/multipart/ConditionAnd.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/multipart/ConditionAnd.java
@@ -4,29 +4,25 @@
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Iterables;
-import javax.annotation.Nullable;
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+
 @SideOnly(Side.CLIENT)
-public class ConditionAnd implements ICondition
-{
+public class ConditionAnd implements ICondition {
     private final Iterable<ICondition> conditions;
 
-    public ConditionAnd(Iterable<ICondition> conditionsIn)
-    {
+    public ConditionAnd(Iterable<ICondition> conditionsIn) {
         this.conditions = conditionsIn;
     }
 
-    public Predicate<IBlockState> getPredicate(final BlockStateContainer blockState)
-    {
-        return Predicates.and(Iterables.transform(this.conditions, new Function<ICondition, Predicate<IBlockState>>()
-        {
+    public Predicate<IBlockState> getPredicate(final BlockStateContainer blockState) {
+        return Predicates.and(Iterables.transform(this.conditions, new Function<ICondition, Predicate<IBlockState>>() {
             @Nullable
-            public Predicate<IBlockState> apply(@Nullable ICondition p_apply_1_)
-            {
+            public Predicate<IBlockState> apply(@Nullable ICondition p_apply_1_) {
                 return p_apply_1_ == null ? null : p_apply_1_.getPredicate(blockState);
             }
         }));
