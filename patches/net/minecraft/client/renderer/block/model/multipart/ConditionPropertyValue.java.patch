--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/multipart/ConditionPropertyValue.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/multipart/ConditionPropertyValue.java
@@ -1,72 +1,53 @@
 package net.minecraft.client.renderer.block.model.multipart;
 
-import com.google.common.base.Function;
-import com.google.common.base.MoreObjects;
-import com.google.common.base.Optional;
-import com.google.common.base.Predicate;
-import com.google.common.base.Predicates;
-import com.google.common.base.Splitter;
+import com.google.common.base.*;
 import com.google.common.collect.Iterables;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class ConditionPropertyValue implements ICondition
-{
+public class ConditionPropertyValue implements ICondition {
     private static final Splitter SPLITTER = Splitter.on('|').omitEmptyStrings();
     private final String key;
     private final String value;
 
-    public ConditionPropertyValue(String keyIn, String valueIn)
-    {
+    public ConditionPropertyValue(String keyIn, String valueIn) {
         this.key = keyIn;
         this.value = valueIn;
     }
 
-    public Predicate<IBlockState> getPredicate(BlockStateContainer blockState)
-    {
+    public Predicate<IBlockState> getPredicate(BlockStateContainer blockState) {
         final IProperty<?> iproperty = blockState.getProperty(this.key);
 
-        if (iproperty == null)
-        {
+        if (iproperty == null) {
             throw new RuntimeException(this.toString() + ": Definition: " + blockState + " has no property: " + this.key);
-        }
-        else
-        {
+        } else {
             String s = this.value;
             boolean flag = !s.isEmpty() && s.charAt(0) == '!';
 
-            if (flag)
-            {
+            if (flag) {
                 s = s.substring(1);
             }
 
             List<String> list = SPLITTER.splitToList(s);
 
-            if (list.isEmpty())
-            {
+            if (list.isEmpty()) {
                 throw new RuntimeException(this.toString() + ": has an empty value: " + this.value);
-            }
-            else
-            {
+            } else {
                 Predicate<IBlockState> predicate;
 
-                if (list.size() == 1)
-                {
+                if (list.size() == 1) {
                     predicate = this.makePredicate(iproperty, s);
-                }
-                else
-                {
-                    predicate = Predicates.or(Iterables.transform(list, new Function<String, Predicate<IBlockState>>()
-                    {
+                } else {
+                    predicate = Predicates.or(Iterables.transform(list, new Function<String, Predicate<IBlockState>>() {
                         @Nullable
-                        public Predicate<IBlockState> apply(@Nullable String p_apply_1_)
-                        {
+                        public Predicate<IBlockState> apply(@Nullable String p_apply_1_) {
                             return ConditionPropertyValue.this.makePredicate(iproperty, p_apply_1_);
                         }
                     }));
@@ -77,28 +58,21 @@
         }
     }
 
-    private Predicate<IBlockState> makePredicate(final IProperty<?> property, String valueIn)
-    {
+    private Predicate<IBlockState> makePredicate(final IProperty<?> property, String valueIn) {
         final Optional<?> optional = property.parseValue(valueIn);
 
-        if (!optional.isPresent())
-        {
+        if (!optional.isPresent()) {
             throw new RuntimeException(this.toString() + ": has an unknown value: " + this.value);
-        }
-        else
-        {
-            return new Predicate<IBlockState>()
-            {
-                public boolean apply(@Nullable IBlockState p_apply_1_)
-                {
+        } else {
+            return new Predicate<IBlockState>() {
+                public boolean apply(@Nullable IBlockState p_apply_1_) {
                     return p_apply_1_ != null && p_apply_1_.getValue(property).equals(optional.get());
                 }
             };
         }
     }
 
-    public String toString()
-    {
+    public String toString() {
         return MoreObjects.toStringHelper(this).add("key", this.key).add("value", this.value).toString();
     }
 }
