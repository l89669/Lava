--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/MultipartBakedModel.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/MultipartBakedModel.java
@@ -3,19 +3,19 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.util.EnumFacing;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
 @SideOnly(Side.CLIENT)
-public class MultipartBakedModel implements IBakedModel
-{
+public class MultipartBakedModel implements IBakedModel {
     private final Map<Predicate<IBlockState>, IBakedModel> selectors;
     protected final boolean ambientOcclusion;
     protected final boolean gui3D;
@@ -23,8 +23,7 @@
     protected final ItemCameraTransforms cameraTransforms;
     protected final ItemOverrideList overrides;
 
-    public MultipartBakedModel(Map<Predicate<IBlockState>, IBakedModel> selectorsIn)
-    {
+    public MultipartBakedModel(Map<Predicate<IBlockState>, IBakedModel> selectorsIn) {
         this.selectors = selectorsIn;
         IBakedModel ibakedmodel = selectorsIn.values().iterator().next();
         this.ambientOcclusion = ibakedmodel.isAmbientOcclusion();
@@ -34,16 +33,12 @@
         this.overrides = ibakedmodel.getOverrides();
     }
 
-    public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
-    {
+    public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand) {
         List<BakedQuad> list = Lists.<BakedQuad>newArrayList();
 
-        if (state != null)
-        {
-            for (Entry<Predicate<IBlockState>, IBakedModel> entry : this.selectors.entrySet())
-            {
-                if (((Predicate)entry.getKey()).apply(state))
-                {
+        if (state != null) {
+            for (Entry<Predicate<IBlockState>, IBakedModel> entry : this.selectors.entrySet()) {
+                if (((Predicate) entry.getKey()).apply(state)) {
                     list.addAll((entry.getValue()).getQuads(state, side, rand++));
                 }
             }
@@ -52,49 +47,40 @@
         return list;
     }
 
-    public boolean isAmbientOcclusion()
-    {
+    public boolean isAmbientOcclusion() {
         return this.ambientOcclusion;
     }
 
-    public boolean isGui3d()
-    {
+    public boolean isGui3d() {
         return this.gui3D;
     }
 
-    public boolean isBuiltInRenderer()
-    {
+    public boolean isBuiltInRenderer() {
         return false;
     }
 
-    public TextureAtlasSprite getParticleTexture()
-    {
+    public TextureAtlasSprite getParticleTexture() {
         return this.particleTexture;
     }
 
-    public ItemCameraTransforms getItemCameraTransforms()
-    {
+    public ItemCameraTransforms getItemCameraTransforms() {
         return this.cameraTransforms;
     }
 
-    public ItemOverrideList getOverrides()
-    {
+    public ItemOverrideList getOverrides() {
         return this.overrides;
     }
 
     @SideOnly(Side.CLIENT)
-    public static class Builder
-        {
-            private final Map<Predicate<IBlockState>, IBakedModel> builderSelectors = Maps.<Predicate<IBlockState>, IBakedModel>newLinkedHashMap();
+    public static class Builder {
+        private final Map<Predicate<IBlockState>, IBakedModel> builderSelectors = Maps.<Predicate<IBlockState>, IBakedModel>newLinkedHashMap();
 
-            public void putModel(Predicate<IBlockState> predicate, IBakedModel model)
-            {
-                this.builderSelectors.put(predicate, model);
-            }
+        public void putModel(Predicate<IBlockState> predicate, IBakedModel model) {
+            this.builderSelectors.put(predicate, model);
+        }
 
-            public IBakedModel makeMultipartModel()
-            {
-                return new MultipartBakedModel(this.builderSelectors);
-            }
+        public IBakedModel makeMultipartModel() {
+            return new MultipartBakedModel(this.builderSelectors);
         }
+    }
 }
