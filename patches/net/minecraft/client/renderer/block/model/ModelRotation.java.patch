--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/ModelRotation.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/ModelRotation.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.renderer.block.model;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.MathHelper;
 import net.minecraftforge.fml.relauncher.Side;
@@ -9,9 +8,10 @@
 import org.lwjgl.util.vector.Matrix4f;
 import org.lwjgl.util.vector.Vector3f;
 
+import java.util.Map;
+
 @SideOnly(Side.CLIENT)
-public enum ModelRotation implements net.minecraftforge.common.model.IModelState, net.minecraftforge.common.model.ITransformation
-{
+public enum ModelRotation implements net.minecraftforge.common.model.IModelState, net.minecraftforge.common.model.ITransformation {
     X0_Y0(0, 0),
     X0_Y90(0, 90),
     X0_Y180(0, 180),
@@ -35,44 +35,37 @@
     private final int quartersX;
     private final int quartersY;
 
-    private static int combineXY(int p_177521_0_, int p_177521_1_)
-    {
+    private static int combineXY(int p_177521_0_, int p_177521_1_) {
         return p_177521_0_ * 360 + p_177521_1_;
     }
 
-    private ModelRotation(int x, int y)
-    {
+    private ModelRotation(int x, int y) {
         this.combinedXY = combineXY(x, y);
         this.matrix4d = new Matrix4f();
         Matrix4f matrix4f = new Matrix4f();
         matrix4f.setIdentity();
-        Matrix4f.rotate((float)(-x) * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
+        Matrix4f.rotate((float) (-x) * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
         this.quartersX = MathHelper.abs(x / 90);
         Matrix4f matrix4f1 = new Matrix4f();
         matrix4f1.setIdentity();
-        Matrix4f.rotate((float)(-y) * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f1, matrix4f1);
+        Matrix4f.rotate((float) (-y) * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f1, matrix4f1);
         this.quartersY = MathHelper.abs(y / 90);
         Matrix4f.mul(matrix4f1, matrix4f, this.matrix4d);
     }
 
-    public Matrix4f getMatrix4d()
-    {
+    public Matrix4f getMatrix4d() {
         return this.matrix4d;
     }
 
-    public EnumFacing rotateFace(EnumFacing facing)
-    {
+    public EnumFacing rotateFace(EnumFacing facing) {
         EnumFacing enumfacing = facing;
 
-        for (int i = 0; i < this.quartersX; ++i)
-        {
+        for (int i = 0; i < this.quartersX; ++i) {
             enumfacing = enumfacing.rotateAround(EnumFacing.Axis.X);
         }
 
-        if (enumfacing.getAxis() != EnumFacing.Axis.Y)
-        {
-            for (int j = 0; j < this.quartersY; ++j)
-            {
+        if (enumfacing.getAxis() != EnumFacing.Axis.Y) {
+            for (int j = 0; j < this.quartersY; ++j) {
                 enumfacing = enumfacing.rotateAround(EnumFacing.Axis.Y);
             }
         }
@@ -80,45 +73,49 @@
         return enumfacing;
     }
 
-    public int rotateVertex(EnumFacing facing, int vertexIndex)
-    {
+    public int rotateVertex(EnumFacing facing, int vertexIndex) {
         int i = vertexIndex;
 
-        if (facing.getAxis() == EnumFacing.Axis.X)
-        {
+        if (facing.getAxis() == EnumFacing.Axis.X) {
             i = (vertexIndex + this.quartersX) % 4;
         }
 
         EnumFacing enumfacing = facing;
 
-        for (int j = 0; j < this.quartersX; ++j)
-        {
+        for (int j = 0; j < this.quartersX; ++j) {
             enumfacing = enumfacing.rotateAround(EnumFacing.Axis.X);
         }
 
-        if (enumfacing.getAxis() == EnumFacing.Axis.Y)
-        {
+        if (enumfacing.getAxis() == EnumFacing.Axis.Y) {
             i = (i + this.quartersY) % 4;
         }
 
         return i;
     }
 
-    public static ModelRotation getModelRotation(int x, int y)
-    {
+    public static ModelRotation getModelRotation(int x, int y) {
         return MAP_ROTATIONS.get(Integer.valueOf(combineXY(MathHelper.normalizeAngle(x, 360), MathHelper.normalizeAngle(y, 360))));
     }
 
-    static
-    {
-        for (ModelRotation modelrotation : values())
-        {
+    static {
+        for (ModelRotation modelrotation : values()) {
             MAP_ROTATIONS.put(Integer.valueOf(modelrotation.combinedXY), modelrotation);
         }
     }
 
-    public java.util.Optional<net.minecraftforge.common.model.TRSRTransformation> apply(java.util.Optional<? extends net.minecraftforge.common.model.IModelPart> part) { return net.minecraftforge.client.ForgeHooksClient.applyTransform(this, part); }
-    public javax.vecmath.Matrix4f getMatrix() { return net.minecraftforge.common.model.TRSRTransformation.from(this).getMatrix(); }
-    public EnumFacing rotate(EnumFacing facing) { return rotateFace(facing); }
-    public int rotate(EnumFacing facing, int vertexIndex) { return rotateVertex(facing, vertexIndex); }
+    public java.util.Optional<net.minecraftforge.common.model.TRSRTransformation> apply(java.util.Optional<? extends net.minecraftforge.common.model.IModelPart> part) {
+        return net.minecraftforge.client.ForgeHooksClient.applyTransform(this, part);
+    }
+
+    public javax.vecmath.Matrix4f getMatrix() {
+        return net.minecraftforge.common.model.TRSRTransformation.from(this).getMatrix();
+    }
+
+    public EnumFacing rotate(EnumFacing facing) {
+        return rotateFace(facing);
+    }
+
+    public int rotate(EnumFacing facing, int vertexIndex) {
+        return rotateVertex(facing, vertexIndex);
+    }
 }
