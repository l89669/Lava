--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/ItemOverride.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/ItemOverride.java
@@ -1,15 +1,7 @@
 package net.minecraft.client.renderer.block.model;
 
 import com.google.common.collect.Maps;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import java.lang.reflect.Type;
-import java.util.Map;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
+import com.google.gson.*;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.item.IItemPropertyGetter;
 import net.minecraft.item.Item;
@@ -20,33 +12,32 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.lang.reflect.Type;
+import java.util.Map;
+import java.util.Map.Entry;
+
 @SideOnly(Side.CLIENT)
-public class ItemOverride
-{
+public class ItemOverride {
     private final ResourceLocation location;
     private final Map<ResourceLocation, Float> mapResourceValues;
 
-    public ItemOverride(ResourceLocation locationIn, Map<ResourceLocation, Float> propertyValues)
-    {
+    public ItemOverride(ResourceLocation locationIn, Map<ResourceLocation, Float> propertyValues) {
         this.location = locationIn;
         this.mapResourceValues = propertyValues;
     }
 
-    public ResourceLocation getLocation()
-    {
+    public ResourceLocation getLocation() {
         return this.location;
     }
 
-    boolean matchesItemStack(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase livingEntity)
-    {
+    boolean matchesItemStack(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase livingEntity) {
         Item item = stack.getItem();
 
-        for (Entry<ResourceLocation, Float> entry : this.mapResourceValues.entrySet())
-        {
+        for (Entry<ResourceLocation, Float> entry : this.mapResourceValues.entrySet()) {
             IItemPropertyGetter iitempropertygetter = item.getPropertyGetter(entry.getKey());
 
-            if (iitempropertygetter == null || iitempropertygetter.apply(stack, worldIn, livingEntity) < ((Float)entry.getValue()).floatValue())
-            {
+            if (iitempropertygetter == null || iitempropertygetter.apply(stack, worldIn, livingEntity) < ((Float) entry.getValue()).floatValue()) {
                 return false;
             }
         }
@@ -55,27 +46,23 @@
     }
 
     @SideOnly(Side.CLIENT)
-    static class Deserializer implements JsonDeserializer<ItemOverride>
-        {
-            public ItemOverride deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
-            {
-                JsonObject jsonobject = p_deserialize_1_.getAsJsonObject();
-                ResourceLocation resourcelocation = new ResourceLocation(JsonUtils.getString(jsonobject, "model"));
-                Map<ResourceLocation, Float> map = this.makeMapResourceValues(jsonobject);
-                return new ItemOverride(resourcelocation, map);
-            }
+    static class Deserializer implements JsonDeserializer<ItemOverride> {
+        public ItemOverride deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException {
+            JsonObject jsonobject = p_deserialize_1_.getAsJsonObject();
+            ResourceLocation resourcelocation = new ResourceLocation(JsonUtils.getString(jsonobject, "model"));
+            Map<ResourceLocation, Float> map = this.makeMapResourceValues(jsonobject);
+            return new ItemOverride(resourcelocation, map);
+        }
 
-            protected Map<ResourceLocation, Float> makeMapResourceValues(JsonObject p_188025_1_)
-            {
-                Map<ResourceLocation, Float> map = Maps.<ResourceLocation, Float>newLinkedHashMap();
-                JsonObject jsonobject = JsonUtils.getJsonObject(p_188025_1_, "predicate");
+        protected Map<ResourceLocation, Float> makeMapResourceValues(JsonObject p_188025_1_) {
+            Map<ResourceLocation, Float> map = Maps.<ResourceLocation, Float>newLinkedHashMap();
+            JsonObject jsonobject = JsonUtils.getJsonObject(p_188025_1_, "predicate");
 
-                for (Entry<String, JsonElement> entry : jsonobject.entrySet())
-                {
-                    map.put(new ResourceLocation(entry.getKey()), Float.valueOf(JsonUtils.getFloat(entry.getValue(), entry.getKey())));
-                }
-
-                return map;
+            for (Entry<String, JsonElement> entry : jsonobject.entrySet()) {
+                map.put(new ResourceLocation(entry.getKey()), Float.valueOf(JsonUtils.getFloat(entry.getValue(), entry.getKey())));
             }
+
+            return map;
         }
+    }
 }
