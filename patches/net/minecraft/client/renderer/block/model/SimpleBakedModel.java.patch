--- ../src-base/minecraft/net/minecraft/client/renderer/block/model/SimpleBakedModel.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/model/SimpleBakedModel.java
@@ -2,9 +2,6 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.util.EnumFacing;
@@ -13,9 +10,12 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+
 @SideOnly(Side.CLIENT)
-public class SimpleBakedModel implements IBakedModel
-{
+public class SimpleBakedModel implements IBakedModel {
     protected final List<BakedQuad> generalQuads;
     protected final Map<EnumFacing, List<BakedQuad>> faceQuads;
     protected final boolean ambientOcclusion;
@@ -24,8 +24,7 @@
     protected final ItemCameraTransforms cameraTransforms;
     protected final ItemOverrideList itemOverrideList;
 
-    public SimpleBakedModel(List<BakedQuad> generalQuadsIn, Map<EnumFacing, List<BakedQuad>> faceQuadsIn, boolean ambientOcclusionIn, boolean gui3dIn, TextureAtlasSprite textureIn, ItemCameraTransforms cameraTransformsIn, ItemOverrideList itemOverrideListIn)
-    {
+    public SimpleBakedModel(List<BakedQuad> generalQuadsIn, Map<EnumFacing, List<BakedQuad>> faceQuadsIn, boolean ambientOcclusionIn, boolean gui3dIn, TextureAtlasSprite textureIn, ItemCameraTransforms cameraTransformsIn, ItemOverrideList itemOverrideListIn) {
         this.generalQuads = generalQuadsIn;
         this.faceQuads = faceQuadsIn;
         this.ambientOcclusion = ambientOcclusionIn;
@@ -35,131 +34,107 @@
         this.itemOverrideList = itemOverrideListIn;
     }
 
-    public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
-    {
-        return side == null ? this.generalQuads : (List)this.faceQuads.get(side);
+    public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand) {
+        return side == null ? this.generalQuads : (List) this.faceQuads.get(side);
     }
 
-    public boolean isAmbientOcclusion()
-    {
+    public boolean isAmbientOcclusion() {
         return this.ambientOcclusion;
     }
 
-    public boolean isGui3d()
-    {
+    public boolean isGui3d() {
         return this.gui3d;
     }
 
-    public boolean isBuiltInRenderer()
-    {
+    public boolean isBuiltInRenderer() {
         return false;
     }
 
-    public TextureAtlasSprite getParticleTexture()
-    {
+    public TextureAtlasSprite getParticleTexture() {
         return this.texture;
     }
 
-    public ItemCameraTransforms getItemCameraTransforms()
-    {
+    public ItemCameraTransforms getItemCameraTransforms() {
         return this.cameraTransforms;
     }
 
-    public ItemOverrideList getOverrides()
-    {
+    public ItemOverrideList getOverrides() {
         return this.itemOverrideList;
     }
 
     @SideOnly(Side.CLIENT)
-    public static class Builder
-        {
-            private final List<BakedQuad> builderGeneralQuads;
-            private final Map<EnumFacing, List<BakedQuad>> builderFaceQuads;
-            private final ItemOverrideList builderItemOverrideList;
-            private final boolean builderAmbientOcclusion;
-            private TextureAtlasSprite builderTexture;
-            private final boolean builderGui3d;
-            private final ItemCameraTransforms builderCameraTransforms;
+    public static class Builder {
+        private final List<BakedQuad> builderGeneralQuads;
+        private final Map<EnumFacing, List<BakedQuad>> builderFaceQuads;
+        private final ItemOverrideList builderItemOverrideList;
+        private final boolean builderAmbientOcclusion;
+        private TextureAtlasSprite builderTexture;
+        private final boolean builderGui3d;
+        private final ItemCameraTransforms builderCameraTransforms;
 
-            public Builder(ModelBlock model, ItemOverrideList overrides)
-            {
-                this(model.isAmbientOcclusion(), model.isGui3d(), model.getAllTransforms(), overrides);
-            }
+        public Builder(ModelBlock model, ItemOverrideList overrides) {
+            this(model.isAmbientOcclusion(), model.isGui3d(), model.getAllTransforms(), overrides);
+        }
 
-            public Builder(IBlockState state, IBakedModel model, TextureAtlasSprite texture, BlockPos pos)
-            {
-                this(model.isAmbientOcclusion(state), model.isGui3d(), model.getItemCameraTransforms(), model.getOverrides());
-                this.builderTexture = model.getParticleTexture();
-                long i = MathHelper.getPositionRandom(pos);
+        public Builder(IBlockState state, IBakedModel model, TextureAtlasSprite texture, BlockPos pos) {
+            this(model.isAmbientOcclusion(state), model.isGui3d(), model.getItemCameraTransforms(), model.getOverrides());
+            this.builderTexture = model.getParticleTexture();
+            long i = MathHelper.getPositionRandom(pos);
 
-                for (EnumFacing enumfacing : EnumFacing.values())
-                {
-                    this.addFaceQuads(state, model, texture, enumfacing, i);
-                }
-
-                this.addGeneralQuads(state, model, texture, i);
+            for (EnumFacing enumfacing : EnumFacing.values()) {
+                this.addFaceQuads(state, model, texture, enumfacing, i);
             }
 
-            private Builder(boolean ambientOcclusion, boolean gui3d, ItemCameraTransforms transforms, ItemOverrideList overrides)
-            {
-                this.builderGeneralQuads = Lists.<BakedQuad>newArrayList();
-                this.builderFaceQuads = Maps.newEnumMap(EnumFacing.class);
+            this.addGeneralQuads(state, model, texture, i);
+        }
 
-                for (EnumFacing enumfacing : EnumFacing.values())
-                {
-                    this.builderFaceQuads.put(enumfacing, Lists.newArrayList());
-                }
+        private Builder(boolean ambientOcclusion, boolean gui3d, ItemCameraTransforms transforms, ItemOverrideList overrides) {
+            this.builderGeneralQuads = Lists.<BakedQuad>newArrayList();
+            this.builderFaceQuads = Maps.newEnumMap(EnumFacing.class);
 
-                this.builderItemOverrideList = overrides;
-                this.builderAmbientOcclusion = ambientOcclusion;
-                this.builderGui3d = gui3d;
-                this.builderCameraTransforms = transforms;
+            for (EnumFacing enumfacing : EnumFacing.values()) {
+                this.builderFaceQuads.put(enumfacing, Lists.newArrayList());
             }
 
-            private void addFaceQuads(IBlockState p_188644_1_, IBakedModel p_188644_2_, TextureAtlasSprite p_188644_3_, EnumFacing p_188644_4_, long p_188644_5_)
-            {
-                for (BakedQuad bakedquad : p_188644_2_.getQuads(p_188644_1_, p_188644_4_, p_188644_5_))
-                {
-                    this.addFaceQuad(p_188644_4_, new BakedQuadRetextured(bakedquad, p_188644_3_));
-                }
-            }
+            this.builderItemOverrideList = overrides;
+            this.builderAmbientOcclusion = ambientOcclusion;
+            this.builderGui3d = gui3d;
+            this.builderCameraTransforms = transforms;
+        }
 
-            private void addGeneralQuads(IBlockState p_188645_1_, IBakedModel p_188645_2_, TextureAtlasSprite p_188645_3_, long p_188645_4_)
-            {
-                for (BakedQuad bakedquad : p_188645_2_.getQuads(p_188645_1_, (EnumFacing)null, p_188645_4_))
-                {
-                    this.addGeneralQuad(new BakedQuadRetextured(bakedquad, p_188645_3_));
-                }
+        private void addFaceQuads(IBlockState p_188644_1_, IBakedModel p_188644_2_, TextureAtlasSprite p_188644_3_, EnumFacing p_188644_4_, long p_188644_5_) {
+            for (BakedQuad bakedquad : p_188644_2_.getQuads(p_188644_1_, p_188644_4_, p_188644_5_)) {
+                this.addFaceQuad(p_188644_4_, new BakedQuadRetextured(bakedquad, p_188644_3_));
             }
+        }
 
-            public SimpleBakedModel.Builder addFaceQuad(EnumFacing facing, BakedQuad quad)
-            {
-                (this.builderFaceQuads.get(facing)).add(quad);
-                return this;
+        private void addGeneralQuads(IBlockState p_188645_1_, IBakedModel p_188645_2_, TextureAtlasSprite p_188645_3_, long p_188645_4_) {
+            for (BakedQuad bakedquad : p_188645_2_.getQuads(p_188645_1_, (EnumFacing) null, p_188645_4_)) {
+                this.addGeneralQuad(new BakedQuadRetextured(bakedquad, p_188645_3_));
             }
+        }
 
-            public SimpleBakedModel.Builder addGeneralQuad(BakedQuad quad)
-            {
-                this.builderGeneralQuads.add(quad);
-                return this;
-            }
+        public SimpleBakedModel.Builder addFaceQuad(EnumFacing facing, BakedQuad quad) {
+            (this.builderFaceQuads.get(facing)).add(quad);
+            return this;
+        }
 
-            public SimpleBakedModel.Builder setTexture(TextureAtlasSprite texture)
-            {
-                this.builderTexture = texture;
-                return this;
-            }
+        public SimpleBakedModel.Builder addGeneralQuad(BakedQuad quad) {
+            this.builderGeneralQuads.add(quad);
+            return this;
+        }
 
-            public IBakedModel makeBakedModel()
-            {
-                if (this.builderTexture == null)
-                {
-                    throw new RuntimeException("Missing particle!");
-                }
-                else
-                {
-                    return new SimpleBakedModel(this.builderGeneralQuads, this.builderFaceQuads, this.builderAmbientOcclusion, this.builderGui3d, this.builderTexture, this.builderCameraTransforms, this.builderItemOverrideList);
-                }
+        public SimpleBakedModel.Builder setTexture(TextureAtlasSprite texture) {
+            this.builderTexture = texture;
+            return this;
+        }
+
+        public IBakedModel makeBakedModel() {
+            if (this.builderTexture == null) {
+                throw new RuntimeException("Missing particle!");
+            } else {
+                return new SimpleBakedModel(this.builderGeneralQuads, this.builderFaceQuads, this.builderAmbientOcclusion, this.builderGui3d, this.builderTexture, this.builderCameraTransforms, this.builderItemOverrideList);
             }
         }
+    }
 }
