--- ../src-base/minecraft/net/minecraft/client/renderer/block/statemap/StateMapperBase.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/block/statemap/StateMapperBase.java
@@ -2,8 +2,6 @@
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
-import java.util.Map;
-import java.util.Map.Entry;
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.IBlockState;
@@ -11,48 +9,43 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Map;
+import java.util.Map.Entry;
+
 @SideOnly(Side.CLIENT)
-public abstract class StateMapperBase implements IStateMapper
-{
+public abstract class StateMapperBase implements IStateMapper {
     protected Map<IBlockState, ModelResourceLocation> mapStateModelLocations = Maps.<IBlockState, ModelResourceLocation>newLinkedHashMap();
 
-    public String getPropertyString(Map < IProperty<?>, Comparable<? >> values)
-    {
+    public String getPropertyString(Map<IProperty<?>, Comparable<?>> values) {
         StringBuilder stringbuilder = new StringBuilder();
 
-        for (Entry < IProperty<?>, Comparable<? >> entry : values.entrySet())
-        {
-            if (stringbuilder.length() != 0)
-            {
+        for (Entry<IProperty<?>, Comparable<?>> entry : values.entrySet()) {
+            if (stringbuilder.length() != 0) {
                 stringbuilder.append(",");
             }
 
-            IProperty<?> iproperty = (IProperty)entry.getKey();
+            IProperty<?> iproperty = (IProperty) entry.getKey();
             stringbuilder.append(iproperty.getName());
             stringbuilder.append("=");
             stringbuilder.append(this.getPropertyName(iproperty, entry.getValue()));
         }
 
-        if (stringbuilder.length() == 0)
-        {
+        if (stringbuilder.length() == 0) {
             stringbuilder.append("normal");
         }
 
         return stringbuilder.toString();
     }
 
-    private <T extends Comparable<T>> String getPropertyName(IProperty<T> property, Comparable<?> value)
-    {
-        return property.getName((T)value);
+    private <T extends Comparable<T>> String getPropertyName(IProperty<T> property, Comparable<?> value) {
+        return property.getName((T) value);
     }
 
-    public Map<IBlockState, ModelResourceLocation> putStateModelLocations(Block blockIn)
-    {
+    public Map<IBlockState, ModelResourceLocation> putStateModelLocations(Block blockIn) {
         UnmodifiableIterator unmodifiableiterator = blockIn.getBlockState().getValidStates().iterator();
 
-        while (unmodifiableiterator.hasNext())
-        {
-            IBlockState iblockstate = (IBlockState)unmodifiableiterator.next();
+        while (unmodifiableiterator.hasNext()) {
+            IBlockState iblockstate = (IBlockState) unmodifiableiterator.next();
             this.mapStateModelLocations.put(iblockstate, this.getModelResourceLocation(iblockstate));
         }
 
