--- ../src-base/minecraft/net/minecraft/client/renderer/BlockFluidRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/BlockFluidRenderer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -8,7 +7,6 @@
 import net.minecraft.client.renderer.color.BlockColors;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureMap;
-import net.minecraft.init.Blocks;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
@@ -17,21 +15,18 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class BlockFluidRenderer
-{
+public class BlockFluidRenderer {
     private final BlockColors blockColors;
     private final TextureAtlasSprite[] atlasSpritesLava = new TextureAtlasSprite[2];
     private final TextureAtlasSprite[] atlasSpritesWater = new TextureAtlasSprite[2];
     private TextureAtlasSprite atlasSpriteWaterOverlay;
 
-    public BlockFluidRenderer(BlockColors blockColorsIn)
-    {
+    public BlockFluidRenderer(BlockColors blockColorsIn) {
         this.blockColors = blockColorsIn;
         this.initAtlasSprites();
     }
 
-    protected void initAtlasSprites()
-    {
+    protected void initAtlasSprites() {
         TextureMap texturemap = Minecraft.getMinecraft().getTextureMapBlocks();
         this.atlasSpritesLava[0] = texturemap.getAtlasSprite("minecraft:blocks/lava_still");
         this.atlasSpritesLava[1] = texturemap.getAtlasSprite("minecraft:blocks/lava_flow");
@@ -40,25 +35,21 @@
         this.atlasSpriteWaterOverlay = texturemap.getAtlasSprite("minecraft:blocks/water_overlay");
     }
 
-    public boolean renderFluid(IBlockAccess blockAccess, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder bufferBuilderIn)
-    {
-        BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
+    public boolean renderFluid(IBlockAccess blockAccess, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder bufferBuilderIn) {
+        BlockLiquid blockliquid = (BlockLiquid) blockStateIn.getBlock();
         boolean flag = blockStateIn.getMaterial() == Material.LAVA;
         TextureAtlasSprite[] atextureatlassprite = flag ? this.atlasSpritesLava : this.atlasSpritesWater;
         int i = this.blockColors.colorMultiplier(blockStateIn, blockAccess, blockPosIn, 0);
-        float f = (float)(i >> 16 & 255) / 255.0F;
-        float f1 = (float)(i >> 8 & 255) / 255.0F;
-        float f2 = (float)(i & 255) / 255.0F;
+        float f = (float) (i >> 16 & 255) / 255.0F;
+        float f1 = (float) (i >> 8 & 255) / 255.0F;
+        float f2 = (float) (i & 255) / 255.0F;
         boolean flag1 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
         boolean flag2 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
-        boolean[] aboolean = new boolean[] {blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST)};
+        boolean[] aboolean = new boolean[]{blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST)};
 
-        if (!flag1 && !flag2 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3])
-        {
+        if (!flag1 && !flag2 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3]) {
             return false;
-        }
-        else
-        {
+        } else {
             boolean flag3 = false;
             float f3 = 0.5F;
             float f4 = 1.0F;
@@ -69,13 +60,12 @@
             float f8 = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
             float f9 = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
             float f10 = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
-            double d0 = (double)blockPosIn.getX();
-            double d1 = (double)blockPosIn.getY();
-            double d2 = (double)blockPosIn.getZ();
+            double d0 = (double) blockPosIn.getX();
+            double d1 = (double) blockPosIn.getY();
+            double d2 = (double) blockPosIn.getZ();
             float f11 = 0.001F;
 
-            if (flag1)
-            {
+            if (flag1) {
                 flag3 = true;
                 float f12 = BlockLiquid.getSlopeAngle(blockAccess, blockPosIn, material, blockStateIn);
                 TextureAtlasSprite textureatlassprite = f12 > -999.0F ? atextureatlassprite[1] : atextureatlassprite[0];
@@ -92,8 +82,7 @@
                 float f19;
                 float f20;
 
-                if (f12 < -999.0F)
-                {
+                if (f12 < -999.0F) {
                     f13 = textureatlassprite.getInterpolatedU(0.0D);
                     f17 = textureatlassprite.getInterpolatedV(0.0D);
                     f14 = f13;
@@ -102,20 +91,18 @@
                     f19 = f18;
                     f16 = f15;
                     f20 = f17;
-                }
-                else
-                {
+                } else {
                     float f21 = MathHelper.sin(f12) * 0.25F;
                     float f22 = MathHelper.cos(f12) * 0.25F;
                     float f23 = 8.0F;
-                    f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 - f21) * 16.0F));
-                    f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 + f21) * 16.0F));
-                    f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 + f21) * 16.0F));
-                    f18 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 + f21) * 16.0F));
-                    f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 + f21) * 16.0F));
-                    f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 - f21) * 16.0F));
-                    f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 - f21) * 16.0F));
-                    f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 - f21) * 16.0F));
+                    f13 = textureatlassprite.getInterpolatedU((double) (8.0F + (-f22 - f21) * 16.0F));
+                    f17 = textureatlassprite.getInterpolatedV((double) (8.0F + (-f22 + f21) * 16.0F));
+                    f14 = textureatlassprite.getInterpolatedU((double) (8.0F + (-f22 + f21) * 16.0F));
+                    f18 = textureatlassprite.getInterpolatedV((double) (8.0F + (f22 + f21) * 16.0F));
+                    f15 = textureatlassprite.getInterpolatedU((double) (8.0F + (f22 + f21) * 16.0F));
+                    f19 = textureatlassprite.getInterpolatedV((double) (8.0F + (f22 - f21) * 16.0F));
+                    f16 = textureatlassprite.getInterpolatedU((double) (8.0F + (f22 - f21) * 16.0F));
+                    f20 = textureatlassprite.getInterpolatedV((double) (8.0F + (-f22 - f21) * 16.0F));
                 }
 
                 int k2 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn);
@@ -124,22 +111,20 @@
                 float f24 = 1.0F * f;
                 float f25 = 1.0F * f1;
                 float f26 = 1.0F * f2;
-                bufferBuilderIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
-                bufferBuilderIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
-                bufferBuilderIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
-                bufferBuilderIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
+                bufferBuilderIn.pos(d0 + 0.0D, d1 + (double) f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double) f13, (double) f17).lightmap(l2, i3).endVertex();
+                bufferBuilderIn.pos(d0 + 0.0D, d1 + (double) f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double) f14, (double) f18).lightmap(l2, i3).endVertex();
+                bufferBuilderIn.pos(d0 + 1.0D, d1 + (double) f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double) f15, (double) f19).lightmap(l2, i3).endVertex();
+                bufferBuilderIn.pos(d0 + 1.0D, d1 + (double) f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double) f16, (double) f20).lightmap(l2, i3).endVertex();
 
-                if (blockliquid.shouldRenderSides(blockAccess, blockPosIn.up()))
-                {
-                    bufferBuilderIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
-                    bufferBuilderIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
-                    bufferBuilderIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
-                    bufferBuilderIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
+                if (blockliquid.shouldRenderSides(blockAccess, blockPosIn.up())) {
+                    bufferBuilderIn.pos(d0 + 0.0D, d1 + (double) f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double) f13, (double) f17).lightmap(l2, i3).endVertex();
+                    bufferBuilderIn.pos(d0 + 1.0D, d1 + (double) f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double) f16, (double) f20).lightmap(l2, i3).endVertex();
+                    bufferBuilderIn.pos(d0 + 1.0D, d1 + (double) f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double) f15, (double) f19).lightmap(l2, i3).endVertex();
+                    bufferBuilderIn.pos(d0 + 0.0D, d1 + (double) f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double) f14, (double) f18).lightmap(l2, i3).endVertex();
                 }
             }
 
-            if (flag2)
-            {
+            if (flag2) {
                 float f35 = atextureatlassprite[0].getMinU();
                 float f36 = atextureatlassprite[0].getMaxU();
                 float f37 = atextureatlassprite[0].getMinV();
@@ -147,53 +132,45 @@
                 int l1 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn.down());
                 int i2 = l1 >> 16 & 65535;
                 int j2 = l1 & 65535;
-                bufferBuilderIn.pos(d0, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f38).lightmap(i2, j2).endVertex();
-                bufferBuilderIn.pos(d0, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f37).lightmap(i2, j2).endVertex();
-                bufferBuilderIn.pos(d0 + 1.0D, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f37).lightmap(i2, j2).endVertex();
-                bufferBuilderIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f38).lightmap(i2, j2).endVertex();
+                bufferBuilderIn.pos(d0, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double) f35, (double) f38).lightmap(i2, j2).endVertex();
+                bufferBuilderIn.pos(d0, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double) f35, (double) f37).lightmap(i2, j2).endVertex();
+                bufferBuilderIn.pos(d0 + 1.0D, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double) f36, (double) f37).lightmap(i2, j2).endVertex();
+                bufferBuilderIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double) f36, (double) f38).lightmap(i2, j2).endVertex();
                 flag3 = true;
             }
 
-            for (int i1 = 0; i1 < 4; ++i1)
-            {
+            for (int i1 = 0; i1 < 4; ++i1) {
                 int j1 = 0;
                 int k1 = 0;
 
-                if (i1 == 0)
-                {
+                if (i1 == 0) {
                     --k1;
                 }
 
-                if (i1 == 1)
-                {
+                if (i1 == 1) {
                     ++k1;
                 }
 
-                if (i1 == 2)
-                {
+                if (i1 == 2) {
                     --j1;
                 }
 
-                if (i1 == 3)
-                {
+                if (i1 == 3) {
                     ++j1;
                 }
 
                 BlockPos blockpos = blockPosIn.add(j1, 0, k1);
                 TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
 
-                if (!flag)
-                {
+                if (!flag) {
                     IBlockState state = blockAccess.getBlockState(blockpos);
 
-                    if (state.getBlockFaceShape(blockAccess, blockpos, EnumFacing.VALUES[i1+2].getOpposite()) == net.minecraft.block.state.BlockFaceShape.SOLID)
-                    {
+                    if (state.getBlockFaceShape(blockAccess, blockpos, EnumFacing.VALUES[i1 + 2].getOpposite()) == net.minecraft.block.state.BlockFaceShape.SOLID) {
                         textureatlassprite1 = this.atlasSpriteWaterOverlay;
                     }
                 }
 
-                if (aboolean[i1])
-                {
+                if (aboolean[i1]) {
                     float f39;
                     float f40;
                     double d3;
@@ -201,35 +178,28 @@
                     double d5;
                     double d6;
 
-                    if (i1 == 0)
-                    {
+                    if (i1 == 0) {
                         f39 = f7;
                         f40 = f10;
                         d3 = d0;
                         d5 = d0 + 1.0D;
                         d4 = d2 + 0.0010000000474974513D;
                         d6 = d2 + 0.0010000000474974513D;
-                    }
-                    else if (i1 == 1)
-                    {
+                    } else if (i1 == 1) {
                         f39 = f9;
                         f40 = f8;
                         d3 = d0 + 1.0D;
                         d5 = d0;
                         d4 = d2 + 1.0D - 0.0010000000474974513D;
                         d6 = d2 + 1.0D - 0.0010000000474974513D;
-                    }
-                    else if (i1 == 2)
-                    {
+                    } else if (i1 == 2) {
                         f39 = f8;
                         f40 = f7;
                         d3 = d0 + 0.0010000000474974513D;
                         d5 = d0 + 0.0010000000474974513D;
                         d4 = d2 + 1.0D;
                         d6 = d2;
-                    }
-                    else
-                    {
+                    } else {
                         f39 = f10;
                         f40 = f9;
                         d3 = d0 + 1.0D - 0.0010000000474974513D;
@@ -241,8 +211,8 @@
                     flag3 = true;
                     float f41 = textureatlassprite1.getInterpolatedU(0.0D);
                     float f27 = textureatlassprite1.getInterpolatedU(8.0D);
-                    float f28 = textureatlassprite1.getInterpolatedV((double)((1.0F - f39) * 16.0F * 0.5F));
-                    float f29 = textureatlassprite1.getInterpolatedV((double)((1.0F - f40) * 16.0F * 0.5F));
+                    float f28 = textureatlassprite1.getInterpolatedV((double) ((1.0F - f39) * 16.0F * 0.5F));
+                    float f29 = textureatlassprite1.getInterpolatedV((double) ((1.0F - f40) * 16.0F * 0.5F));
                     float f30 = textureatlassprite1.getInterpolatedV(8.0D);
                     int j = blockStateIn.getPackedLightmapCoords(blockAccess, blockpos);
                     int k = j >> 16 & 65535;
@@ -251,17 +221,16 @@
                     float f32 = 1.0F * f31 * f;
                     float f33 = 1.0F * f31 * f1;
                     float f34 = 1.0F * f31 * f2;
-                    bufferBuilderIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
-                    bufferBuilderIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
-                    bufferBuilderIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
-                    bufferBuilderIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
+                    bufferBuilderIn.pos(d3, d1 + (double) f39, d4).color(f32, f33, f34, 1.0F).tex((double) f41, (double) f28).lightmap(k, l).endVertex();
+                    bufferBuilderIn.pos(d5, d1 + (double) f40, d6).color(f32, f33, f34, 1.0F).tex((double) f27, (double) f29).lightmap(k, l).endVertex();
+                    bufferBuilderIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double) f27, (double) f30).lightmap(k, l).endVertex();
+                    bufferBuilderIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double) f41, (double) f30).lightmap(k, l).endVertex();
 
-                    if (textureatlassprite1 != this.atlasSpriteWaterOverlay)
-                    {
-                        bufferBuilderIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
-                        bufferBuilderIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
-                        bufferBuilderIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
-                        bufferBuilderIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
+                    if (textureatlassprite1 != this.atlasSpriteWaterOverlay) {
+                        bufferBuilderIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double) f41, (double) f30).lightmap(k, l).endVertex();
+                        bufferBuilderIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double) f27, (double) f30).lightmap(k, l).endVertex();
+                        bufferBuilderIn.pos(d5, d1 + (double) f40, d6).color(f32, f33, f34, 1.0F).tex((double) f27, (double) f29).lightmap(k, l).endVertex();
+                        bufferBuilderIn.pos(d3, d1 + (double) f39, d4).color(f32, f33, f34, 1.0F).tex((double) f41, (double) f28).lightmap(k, l).endVertex();
                     }
                 }
             }
@@ -270,37 +239,29 @@
         }
     }
 
-    private float getFluidHeight(IBlockAccess blockAccess, BlockPos blockPosIn, Material blockMaterial)
-    {
+    private float getFluidHeight(IBlockAccess blockAccess, BlockPos blockPosIn, Material blockMaterial) {
         int i = 0;
         float f = 0.0F;
 
-        for (int j = 0; j < 4; ++j)
-        {
+        for (int j = 0; j < 4; ++j) {
             BlockPos blockpos = blockPosIn.add(-(j & 1), 0, -(j >> 1 & 1));
 
-            if (blockAccess.getBlockState(blockpos.up()).getMaterial() == blockMaterial)
-            {
+            if (blockAccess.getBlockState(blockpos.up()).getMaterial() == blockMaterial) {
                 return 1.0F;
             }
 
             IBlockState iblockstate = blockAccess.getBlockState(blockpos);
             Material material = iblockstate.getMaterial();
 
-            if (material != blockMaterial)
-            {
-                if (!material.isSolid())
-                {
+            if (material != blockMaterial) {
+                if (!material.isSolid()) {
                     ++f;
                     ++i;
                 }
-            }
-            else
-            {
-                int k = ((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue();
+            } else {
+                int k = ((Integer) iblockstate.getValue(BlockLiquid.LEVEL)).intValue();
 
-                if (k >= 8 || k == 0)
-                {
+                if (k >= 8 || k == 0) {
                     f += BlockLiquid.getLiquidHeightPercent(k) * 10.0F;
                     i += 10;
                 }
@@ -310,6 +271,6 @@
             }
         }
 
-        return 1.0F - f / (float)i;
+        return 1.0F - f / (float) i;
     }
 }
