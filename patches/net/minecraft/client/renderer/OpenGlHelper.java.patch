--- ../src-base/minecraft/net/minecraft/client/renderer/OpenGlHelper.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/OpenGlHelper.java
@@ -1,12 +1,5 @@
 package net.minecraft.client.renderer;
 
-import java.io.File;
-import java.io.IOException;
-import java.net.URI;
-import java.nio.ByteBuffer;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-import java.util.Locale;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.client.settings.GameSettings;
@@ -16,27 +9,20 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.Sys;
-import org.lwjgl.opengl.ARBFramebufferObject;
-import org.lwjgl.opengl.ARBMultitexture;
-import org.lwjgl.opengl.ARBShaderObjects;
-import org.lwjgl.opengl.ARBVertexBufferObject;
-import org.lwjgl.opengl.ARBVertexShader;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.EXTBlendFuncSeparate;
-import org.lwjgl.opengl.EXTFramebufferObject;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GL15;
-import org.lwjgl.opengl.GL20;
-import org.lwjgl.opengl.GL30;
-import org.lwjgl.opengl.GLContext;
+import org.lwjgl.opengl.*;
 import oshi.SystemInfo;
 import oshi.hardware.Processor;
 
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+import java.util.Locale;
+
 @SideOnly(Side.CLIENT)
-public class OpenGlHelper
-{
+public class OpenGlHelper {
     private static final Logger LOGGER = LogManager.getLogger();
     public static boolean nvidia;
     public static boolean ati;
@@ -97,29 +83,24 @@
     public static float lastBrightnessX = 0.0f;
     public static float lastBrightnessY = 0.0f;
 
-    public static void initializeTextures()
-    {
+    public static void initializeTextures() {
         ContextCapabilities contextcapabilities = GLContext.getCapabilities();
         arbMultitexture = contextcapabilities.GL_ARB_multitexture && !contextcapabilities.OpenGL13;
         arbTextureEnvCombine = contextcapabilities.GL_ARB_texture_env_combine && !contextcapabilities.OpenGL13;
 
-        if (arbMultitexture)
-        {
+        if (arbMultitexture) {
             logText = logText + "Using ARB_multitexture.\n";
             defaultTexUnit = 33984;
             lightmapTexUnit = 33985;
             GL_TEXTURE2 = 33986;
-        }
-        else
-        {
+        } else {
             logText = logText + "Using GL 1.3 multitexturing.\n";
             defaultTexUnit = 33984;
             lightmapTexUnit = 33985;
             GL_TEXTURE2 = 33986;
         }
 
-        if (arbTextureEnvCombine)
-        {
+        if (arbTextureEnvCombine) {
             logText = logText + "Using ARB_texture_env_combine.\n";
             GL_COMBINE = 34160;
             GL_INTERPOLATE = 34165;
@@ -140,9 +121,7 @@
             GL_OPERAND0_ALPHA = 34200;
             GL_OPERAND1_ALPHA = 34201;
             GL_OPERAND2_ALPHA = 34202;
-        }
-        else
-        {
+        } else {
             logText = logText + "Using GL 1.3 texture combiners.\n";
             GL_COMBINE = 34160;
             GL_INTERPOLATE = 34165;
@@ -169,12 +148,10 @@
         openGL14 = contextcapabilities.OpenGL14 || contextcapabilities.GL_EXT_blend_func_separate;
         framebufferSupported = openGL14 && (contextcapabilities.GL_ARB_framebuffer_object || contextcapabilities.GL_EXT_framebuffer_object || contextcapabilities.OpenGL30);
 
-        if (framebufferSupported)
-        {
+        if (framebufferSupported) {
             logText = logText + "Using framebuffer objects because ";
 
-            if (contextcapabilities.OpenGL30)
-            {
+            if (contextcapabilities.OpenGL30) {
                 logText = logText + "OpenGL 3.0 is supported and separate blending is supported.\n";
                 framebufferType = OpenGlHelper.FboMode.BASE;
                 GL_FRAMEBUFFER = 36160;
@@ -186,9 +163,7 @@
                 GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
                 GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
                 GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-            else if (contextcapabilities.GL_ARB_framebuffer_object)
-            {
+            } else if (contextcapabilities.GL_ARB_framebuffer_object) {
                 logText = logText + "ARB_framebuffer_object is supported and separate blending is supported.\n";
                 framebufferType = OpenGlHelper.FboMode.ARB;
                 GL_FRAMEBUFFER = 36160;
@@ -200,9 +175,7 @@
                 GL_FB_INCOMPLETE_ATTACHMENT = 36054;
                 GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
                 GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-            else if (contextcapabilities.GL_EXT_framebuffer_object)
-            {
+            } else if (contextcapabilities.GL_EXT_framebuffer_object) {
                 logText = logText + "EXT_framebuffer_object is supported.\n";
                 framebufferType = OpenGlHelper.FboMode.EXT;
                 GL_FRAMEBUFFER = 36160;
@@ -215,9 +188,7 @@
                 GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
                 GL_FB_INCOMPLETE_READ_BUFFER = 36060;
             }
-        }
-        else
-        {
+        } else {
             logText = logText + "Not using framebuffer objects because ";
             logText = logText + "OpenGL 1.4 is " + (contextcapabilities.OpenGL14 ? "" : "not ") + "supported, ";
             logText = logText + "EXT_blend_func_separate is " + (contextcapabilities.GL_EXT_blend_func_separate ? "" : "not ") + "supported, ";
@@ -230,19 +201,15 @@
         shadersAvailable = openGL21 || contextcapabilities.GL_ARB_vertex_shader && contextcapabilities.GL_ARB_fragment_shader && contextcapabilities.GL_ARB_shader_objects;
         logText = logText + "Shaders are " + (shadersAvailable ? "" : "not ") + "available because ";
 
-        if (shadersAvailable)
-        {
-            if (contextcapabilities.OpenGL21)
-            {
+        if (shadersAvailable) {
+            if (contextcapabilities.OpenGL21) {
                 logText = logText + "OpenGL 2.1 is supported.\n";
                 arbShaders = false;
                 GL_LINK_STATUS = 35714;
                 GL_COMPILE_STATUS = 35713;
                 GL_VERTEX_SHADER = 35633;
                 GL_FRAGMENT_SHADER = 35632;
-            }
-            else
-            {
+            } else {
                 logText = logText + "ARB_shader_objects, ARB_vertex_shader, and ARB_fragment_shader are supported.\n";
                 arbShaders = true;
                 GL_LINK_STATUS = 35714;
@@ -250,9 +217,7 @@
                 GL_VERTEX_SHADER = 35633;
                 GL_FRAGMENT_SHADER = 35632;
             }
-        }
-        else
-        {
+        } else {
             logText = logText + "OpenGL 2.1 is " + (contextcapabilities.OpenGL21 ? "" : "not ") + "supported, ";
             logText = logText + "ARB_shader_objects is " + (contextcapabilities.GL_ARB_shader_objects ? "" : "not ") + "supported, ";
             logText = logText + "ARB_vertex_shader is " + (contextcapabilities.GL_ARB_vertex_shader ? "" : "not ") + "supported, and ";
@@ -266,16 +231,12 @@
         vboSupported = contextcapabilities.OpenGL15 || arbVbo;
         logText = logText + "VBOs are " + (vboSupported ? "" : "not ") + "available because ";
 
-        if (vboSupported)
-        {
-            if (arbVbo)
-            {
+        if (vboSupported) {
+            if (arbVbo) {
                 logText = logText + "ARB_vertex_buffer_object is supported.\n";
                 GL_STATIC_DRAW = 35044;
                 GL_ARRAY_BUFFER = 34962;
-            }
-            else
-            {
+            } else {
                 logText = logText + "OpenGL 1.5 is supported.\n";
                 GL_STATIC_DRAW = 35044;
                 GL_ARRAY_BUFFER = 34962;
@@ -284,359 +245,249 @@
 
         ati = s.contains("ati");
 
-        if (ati)
-        {
-            if (vboSupported)
-            {
+        if (ati) {
+            if (vboSupported) {
                 vboSupportedAti = true;
-            }
-            else
-            {
+            } else {
                 GameSettings.Options.RENDER_DISTANCE.setValueMax(16.0F);
             }
         }
 
-        try
-        {
+        try {
             Processor[] aprocessor = (new SystemInfo()).getHardware().getProcessors();
             cpu = String.format("%dx %s", aprocessor.length, aprocessor[0]).replaceAll("\\s+", " ");
-        }
-        catch (Throwable var3)
-        {
+        } catch (Throwable var3) {
             ;
         }
     }
 
-    public static boolean areShadersSupported()
-    {
+    public static boolean areShadersSupported() {
         return shadersSupported;
     }
 
-    public static String getLogText()
-    {
+    public static String getLogText() {
         return logText;
     }
 
-    public static int glGetProgrami(int program, int pname)
-    {
+    public static int glGetProgrami(int program, int pname) {
         return arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(program, pname) : GL20.glGetProgrami(program, pname);
     }
 
-    public static void glAttachShader(int program, int shaderIn)
-    {
-        if (arbShaders)
-        {
+    public static void glAttachShader(int program, int shaderIn) {
+        if (arbShaders) {
             ARBShaderObjects.glAttachObjectARB(program, shaderIn);
-        }
-        else
-        {
+        } else {
             GL20.glAttachShader(program, shaderIn);
         }
     }
 
-    public static void glDeleteShader(int shaderIn)
-    {
-        if (arbShaders)
-        {
+    public static void glDeleteShader(int shaderIn) {
+        if (arbShaders) {
             ARBShaderObjects.glDeleteObjectARB(shaderIn);
-        }
-        else
-        {
+        } else {
             GL20.glDeleteShader(shaderIn);
         }
     }
 
-    public static int glCreateShader(int type)
-    {
+    public static int glCreateShader(int type) {
         return arbShaders ? ARBShaderObjects.glCreateShaderObjectARB(type) : GL20.glCreateShader(type);
     }
 
-    public static void glShaderSource(int shaderIn, ByteBuffer string)
-    {
-        if (arbShaders)
-        {
+    public static void glShaderSource(int shaderIn, ByteBuffer string) {
+        if (arbShaders) {
             ARBShaderObjects.glShaderSourceARB(shaderIn, string);
-        }
-        else
-        {
+        } else {
             GL20.glShaderSource(shaderIn, string);
         }
     }
 
-    public static void glCompileShader(int shaderIn)
-    {
-        if (arbShaders)
-        {
+    public static void glCompileShader(int shaderIn) {
+        if (arbShaders) {
             ARBShaderObjects.glCompileShaderARB(shaderIn);
-        }
-        else
-        {
+        } else {
             GL20.glCompileShader(shaderIn);
         }
     }
 
-    public static int glGetShaderi(int shaderIn, int pname)
-    {
+    public static int glGetShaderi(int shaderIn, int pname) {
         return arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(shaderIn, pname) : GL20.glGetShaderi(shaderIn, pname);
     }
 
-    public static String glGetShaderInfoLog(int shaderIn, int maxLength)
-    {
+    public static String glGetShaderInfoLog(int shaderIn, int maxLength) {
         return arbShaders ? ARBShaderObjects.glGetInfoLogARB(shaderIn, maxLength) : GL20.glGetShaderInfoLog(shaderIn, maxLength);
     }
 
-    public static String glGetProgramInfoLog(int program, int maxLength)
-    {
+    public static String glGetProgramInfoLog(int program, int maxLength) {
         return arbShaders ? ARBShaderObjects.glGetInfoLogARB(program, maxLength) : GL20.glGetProgramInfoLog(program, maxLength);
     }
 
-    public static void glUseProgram(int program)
-    {
-        if (arbShaders)
-        {
+    public static void glUseProgram(int program) {
+        if (arbShaders) {
             ARBShaderObjects.glUseProgramObjectARB(program);
-        }
-        else
-        {
+        } else {
             GL20.glUseProgram(program);
         }
     }
 
-    public static int glCreateProgram()
-    {
+    public static int glCreateProgram() {
         return arbShaders ? ARBShaderObjects.glCreateProgramObjectARB() : GL20.glCreateProgram();
     }
 
-    public static void glDeleteProgram(int program)
-    {
-        if (arbShaders)
-        {
+    public static void glDeleteProgram(int program) {
+        if (arbShaders) {
             ARBShaderObjects.glDeleteObjectARB(program);
-        }
-        else
-        {
+        } else {
             GL20.glDeleteProgram(program);
         }
     }
 
-    public static void glLinkProgram(int program)
-    {
-        if (arbShaders)
-        {
+    public static void glLinkProgram(int program) {
+        if (arbShaders) {
             ARBShaderObjects.glLinkProgramARB(program);
-        }
-        else
-        {
+        } else {
             GL20.glLinkProgram(program);
         }
     }
 
-    public static int glGetUniformLocation(int programObj, CharSequence name)
-    {
+    public static int glGetUniformLocation(int programObj, CharSequence name) {
         return arbShaders ? ARBShaderObjects.glGetUniformLocationARB(programObj, name) : GL20.glGetUniformLocation(programObj, name);
     }
 
-    public static void glUniform1(int location, IntBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform1(int location, IntBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform1ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform1(location, values);
         }
     }
 
-    public static void glUniform1i(int location, int v0)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform1i(int location, int v0) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform1iARB(location, v0);
-        }
-        else
-        {
+        } else {
             GL20.glUniform1i(location, v0);
         }
     }
 
-    public static void glUniform1(int location, FloatBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform1(int location, FloatBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform1ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform1(location, values);
         }
     }
 
-    public static void glUniform2(int location, IntBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform2(int location, IntBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform2ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform2(location, values);
         }
     }
 
-    public static void glUniform2(int location, FloatBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform2(int location, FloatBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform2ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform2(location, values);
         }
     }
 
-    public static void glUniform3(int location, IntBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform3(int location, IntBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform3ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform3(location, values);
         }
     }
 
-    public static void glUniform3(int location, FloatBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform3(int location, FloatBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform3ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform3(location, values);
         }
     }
 
-    public static void glUniform4(int location, IntBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform4(int location, IntBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform4ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform4(location, values);
         }
     }
 
-    public static void glUniform4(int location, FloatBuffer values)
-    {
-        if (arbShaders)
-        {
+    public static void glUniform4(int location, FloatBuffer values) {
+        if (arbShaders) {
             ARBShaderObjects.glUniform4ARB(location, values);
-        }
-        else
-        {
+        } else {
             GL20.glUniform4(location, values);
         }
     }
 
-    public static void glUniformMatrix2(int location, boolean transpose, FloatBuffer matrices)
-    {
-        if (arbShaders)
-        {
+    public static void glUniformMatrix2(int location, boolean transpose, FloatBuffer matrices) {
+        if (arbShaders) {
             ARBShaderObjects.glUniformMatrix2ARB(location, transpose, matrices);
-        }
-        else
-        {
+        } else {
             GL20.glUniformMatrix2(location, transpose, matrices);
         }
     }
 
-    public static void glUniformMatrix3(int location, boolean transpose, FloatBuffer matrices)
-    {
-        if (arbShaders)
-        {
+    public static void glUniformMatrix3(int location, boolean transpose, FloatBuffer matrices) {
+        if (arbShaders) {
             ARBShaderObjects.glUniformMatrix3ARB(location, transpose, matrices);
-        }
-        else
-        {
+        } else {
             GL20.glUniformMatrix3(location, transpose, matrices);
         }
     }
 
-    public static void glUniformMatrix4(int location, boolean transpose, FloatBuffer matrices)
-    {
-        if (arbShaders)
-        {
+    public static void glUniformMatrix4(int location, boolean transpose, FloatBuffer matrices) {
+        if (arbShaders) {
             ARBShaderObjects.glUniformMatrix4ARB(location, transpose, matrices);
-        }
-        else
-        {
+        } else {
             GL20.glUniformMatrix4(location, transpose, matrices);
         }
     }
 
-    public static int glGetAttribLocation(int program, CharSequence name)
-    {
+    public static int glGetAttribLocation(int program, CharSequence name) {
         return arbShaders ? ARBVertexShader.glGetAttribLocationARB(program, name) : GL20.glGetAttribLocation(program, name);
     }
 
-    public static int glGenBuffers()
-    {
+    public static int glGenBuffers() {
         return arbVbo ? ARBVertexBufferObject.glGenBuffersARB() : GL15.glGenBuffers();
     }
 
-    public static void glBindBuffer(int target, int buffer)
-    {
-        if (arbVbo)
-        {
+    public static void glBindBuffer(int target, int buffer) {
+        if (arbVbo) {
             ARBVertexBufferObject.glBindBufferARB(target, buffer);
-        }
-        else
-        {
+        } else {
             GL15.glBindBuffer(target, buffer);
         }
     }
 
-    public static void glBufferData(int target, ByteBuffer data, int usage)
-    {
-        if (arbVbo)
-        {
+    public static void glBufferData(int target, ByteBuffer data, int usage) {
+        if (arbVbo) {
             ARBVertexBufferObject.glBufferDataARB(target, data, usage);
-        }
-        else
-        {
+        } else {
             GL15.glBufferData(target, data, usage);
         }
     }
 
-    public static void glDeleteBuffers(int buffer)
-    {
-        if (arbVbo)
-        {
+    public static void glDeleteBuffers(int buffer) {
+        if (arbVbo) {
             ARBVertexBufferObject.glDeleteBuffersARB(buffer);
-        }
-        else
-        {
+        } else {
             GL15.glDeleteBuffers(buffer);
         }
     }
 
-    public static boolean useVbo()
-    {
+    public static boolean useVbo() {
         return vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
     }
 
-    public static void glBindFramebuffer(int target, int framebufferIn)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glBindFramebuffer(int target, int framebufferIn) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glBindFramebuffer(target, framebufferIn);
                     break;
@@ -649,12 +500,9 @@
         }
     }
 
-    public static void glBindRenderbuffer(int target, int renderbuffer)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glBindRenderbuffer(int target, int renderbuffer) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glBindRenderbuffer(target, renderbuffer);
                     break;
@@ -667,12 +515,9 @@
         }
     }
 
-    public static void glDeleteRenderbuffers(int renderbuffer)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glDeleteRenderbuffers(int renderbuffer) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glDeleteRenderbuffers(renderbuffer);
                     break;
@@ -685,12 +530,9 @@
         }
     }
 
-    public static void glDeleteFramebuffers(int framebufferIn)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glDeleteFramebuffers(int framebufferIn) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glDeleteFramebuffers(framebufferIn);
                     break;
@@ -703,16 +545,11 @@
         }
     }
 
-    public static int glGenFramebuffers()
-    {
-        if (!framebufferSupported)
-        {
+    public static int glGenFramebuffers() {
+        if (!framebufferSupported) {
             return -1;
-        }
-        else
-        {
-            switch (framebufferType)
-            {
+        } else {
+            switch (framebufferType) {
                 case BASE:
                     return GL30.glGenFramebuffers();
                 case ARB:
@@ -725,16 +562,11 @@
         }
     }
 
-    public static int glGenRenderbuffers()
-    {
-        if (!framebufferSupported)
-        {
+    public static int glGenRenderbuffers() {
+        if (!framebufferSupported) {
             return -1;
-        }
-        else
-        {
-            switch (framebufferType)
-            {
+        } else {
+            switch (framebufferType) {
                 case BASE:
                     return GL30.glGenRenderbuffers();
                 case ARB:
@@ -747,12 +579,9 @@
         }
     }
 
-    public static void glRenderbufferStorage(int target, int internalFormat, int width, int height)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glRenderbufferStorage(int target, int internalFormat, int width, int height) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glRenderbufferStorage(target, internalFormat, width, height);
                     break;
@@ -765,12 +594,9 @@
         }
     }
 
-    public static void glFramebufferRenderbuffer(int target, int attachment, int renderBufferTarget, int renderBuffer)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glFramebufferRenderbuffer(int target, int attachment, int renderBufferTarget, int renderBuffer) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glFramebufferRenderbuffer(target, attachment, renderBufferTarget, renderBuffer);
                     break;
@@ -783,16 +609,11 @@
         }
     }
 
-    public static int glCheckFramebufferStatus(int target)
-    {
-        if (!framebufferSupported)
-        {
+    public static int glCheckFramebufferStatus(int target) {
+        if (!framebufferSupported) {
             return -1;
-        }
-        else
-        {
-            switch (framebufferType)
-            {
+        } else {
+            switch (framebufferType) {
                 case BASE:
                     return GL30.glCheckFramebufferStatus(target);
                 case ARB:
@@ -805,12 +626,9 @@
         }
     }
 
-    public static void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level)
-    {
-        if (framebufferSupported)
-        {
-            switch (framebufferType)
-            {
+    public static void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level) {
+        if (framebufferSupported) {
+            switch (framebufferType) {
                 case BASE:
                     GL30.glFramebufferTexture2D(target, attachment, textarget, texture, level);
                     break;
@@ -823,79 +641,56 @@
         }
     }
 
-    public static void setActiveTexture(int texture)
-    {
-        if (arbMultitexture)
-        {
+    public static void setActiveTexture(int texture) {
+        if (arbMultitexture) {
             ARBMultitexture.glActiveTextureARB(texture);
-        }
-        else
-        {
+        } else {
             GL13.glActiveTexture(texture);
         }
     }
 
-    public static void setClientActiveTexture(int texture)
-    {
-        if (arbMultitexture)
-        {
+    public static void setClientActiveTexture(int texture) {
+        if (arbMultitexture) {
             ARBMultitexture.glClientActiveTextureARB(texture);
-        }
-        else
-        {
+        } else {
             GL13.glClientActiveTexture(texture);
         }
     }
 
-    public static void setLightmapTextureCoords(int target, float p_77475_1_, float t)
-    {
-        if (arbMultitexture)
-        {
+    public static void setLightmapTextureCoords(int target, float p_77475_1_, float t) {
+        if (arbMultitexture) {
             ARBMultitexture.glMultiTexCoord2fARB(target, p_77475_1_, t);
-        }
-        else
-        {
+        } else {
             GL13.glMultiTexCoord2f(target, p_77475_1_, t);
         }
 
-        if (target == lightmapTexUnit)
-        {
+        if (target == lightmapTexUnit) {
             lastBrightnessX = p_77475_1_;
             lastBrightnessY = t;
         }
     }
 
-    public static void glBlendFunc(int sFactorRGB, int dFactorRGB, int sfactorAlpha, int dfactorAlpha)
-    {
-        if (openGL14)
-        {
-            if (extBlendFuncSeparate)
-            {
+    public static void glBlendFunc(int sFactorRGB, int dFactorRGB, int sfactorAlpha, int dfactorAlpha) {
+        if (openGL14) {
+            if (extBlendFuncSeparate) {
                 EXTBlendFuncSeparate.glBlendFuncSeparateEXT(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
-            }
-            else
-            {
+            } else {
                 GL14.glBlendFuncSeparate(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
             }
-        }
-        else
-        {
+        } else {
             GL11.glBlendFunc(sFactorRGB, dFactorRGB);
         }
     }
 
-    public static boolean isFramebufferEnabled()
-    {
+    public static boolean isFramebufferEnabled() {
         return framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable;
     }
 
-    public static String getCpu()
-    {
+    public static String getCpu() {
         return cpu == null ? "<unknown>" : cpu;
     }
 
-    public static void renderDirections(int p_188785_0_)
-    {
+    public static void renderDirections(int p_188785_0_) {
         GlStateManager.disableTexture2D();
         GlStateManager.depthMask(false);
         Tessellator tessellator = Tessellator.getInstance();
@@ -903,82 +698,67 @@
         GL11.glLineWidth(4.0F);
         bufferbuilder.begin(1, DefaultVertexFormats.POSITION_COLOR);
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-        bufferbuilder.pos((double)p_188785_0_, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+        bufferbuilder.pos((double) p_188785_0_, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-        bufferbuilder.pos(0.0D, (double)p_188785_0_, 0.0D).color(0, 0, 0, 255).endVertex();
+        bufferbuilder.pos(0.0D, (double) p_188785_0_, 0.0D).color(0, 0, 0, 255).endVertex();
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-        bufferbuilder.pos(0.0D, 0.0D, (double)p_188785_0_).color(0, 0, 0, 255).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, (double) p_188785_0_).color(0, 0, 0, 255).endVertex();
         tessellator.draw();
         GL11.glLineWidth(2.0F);
         bufferbuilder.begin(1, DefaultVertexFormats.POSITION_COLOR);
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
-        bufferbuilder.pos((double)p_188785_0_, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
+        bufferbuilder.pos((double) p_188785_0_, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 255, 0, 255).endVertex();
-        bufferbuilder.pos(0.0D, (double)p_188785_0_, 0.0D).color(0, 255, 0, 255).endVertex();
+        bufferbuilder.pos(0.0D, (double) p_188785_0_, 0.0D).color(0, 255, 0, 255).endVertex();
         bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(127, 127, 255, 255).endVertex();
-        bufferbuilder.pos(0.0D, 0.0D, (double)p_188785_0_).color(127, 127, 255, 255).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, (double) p_188785_0_).color(127, 127, 255, 255).endVertex();
         tessellator.draw();
         GL11.glLineWidth(1.0F);
         GlStateManager.depthMask(true);
         GlStateManager.enableTexture2D();
     }
 
-    public static void openFile(File fileIn)
-    {
+    public static void openFile(File fileIn) {
         String s = fileIn.getAbsolutePath();
 
-        if (Util.getOSType() == Util.EnumOS.OSX)
-        {
-            try
-            {
+        if (Util.getOSType() == Util.EnumOS.OSX) {
+            try {
                 LOGGER.info(s);
-                Runtime.getRuntime().exec(new String[] {"/usr/bin/open", s});
+                Runtime.getRuntime().exec(new String[]{"/usr/bin/open", s});
                 return;
+            } catch (IOException ioexception1) {
+                LOGGER.error("Couldn't open file", (Throwable) ioexception1);
             }
-            catch (IOException ioexception1)
-            {
-                LOGGER.error("Couldn't open file", (Throwable)ioexception1);
-            }
-        }
-        else if (Util.getOSType() == Util.EnumOS.WINDOWS)
-        {
+        } else if (Util.getOSType() == Util.EnumOS.WINDOWS) {
             String s1 = String.format("cmd.exe /C start \"Open file\" \"%s\"", s);
 
-            try
-            {
+            try {
                 Runtime.getRuntime().exec(s1);
                 return;
+            } catch (IOException ioexception) {
+                LOGGER.error("Couldn't open file", (Throwable) ioexception);
             }
-            catch (IOException ioexception)
-            {
-                LOGGER.error("Couldn't open file", (Throwable)ioexception);
-            }
         }
 
         boolean flag = false;
 
-        try
-        {
+        try {
             Class<?> oclass = Class.forName("java.awt.Desktop");
-            Object object = oclass.getMethod("getDesktop").invoke((Object)null);
+            Object object = oclass.getMethod("getDesktop").invoke((Object) null);
             oclass.getMethod("browse", URI.class).invoke(object, fileIn.toURI());
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             LOGGER.error("Couldn't open link", throwable);
             flag = true;
         }
 
-        if (flag)
-        {
+        if (flag) {
             LOGGER.info("Opening via system class!");
             Sys.openURL("file://" + s);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    static enum FboMode
-    {
+    static enum FboMode {
         BASE,
         ARB,
         EXT;
