--- ../src-base/minecraft/net/minecraft/client/renderer/entity/layers/LayerCustomHead.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/layers/LayerCustomHead.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.renderer.entity.layers;
 
 import com.mojang.authlib.GameProfile;
-import java.util.UUID;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelRenderer;
 import net.minecraft.client.renderer.GlStateManager;
@@ -23,35 +22,31 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.lang3.StringUtils;
 
+import java.util.UUID;
+
 @SideOnly(Side.CLIENT)
-public class LayerCustomHead implements LayerRenderer<EntityLivingBase>
-{
+public class LayerCustomHead implements LayerRenderer<EntityLivingBase> {
     private final ModelRenderer modelRenderer;
 
-    public LayerCustomHead(ModelRenderer p_i46120_1_)
-    {
+    public LayerCustomHead(ModelRenderer p_i46120_1_) {
         this.modelRenderer = p_i46120_1_;
     }
 
-    public void doRenderLayer(EntityLivingBase entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale)
-    {
+    public void doRenderLayer(EntityLivingBase entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
         ItemStack itemstack = entitylivingbaseIn.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
 
-        if (!itemstack.isEmpty())
-        {
+        if (!itemstack.isEmpty()) {
             Item item = itemstack.getItem();
             Minecraft minecraft = Minecraft.getMinecraft();
             GlStateManager.pushMatrix();
 
-            if (entitylivingbaseIn.isSneaking())
-            {
+            if (entitylivingbaseIn.isSneaking()) {
                 GlStateManager.translate(0.0F, 0.2F, 0.0F);
             }
 
             boolean flag = entitylivingbaseIn instanceof EntityVillager || entitylivingbaseIn instanceof EntityZombieVillager;
 
-            if (entitylivingbaseIn.isChild() && !(entitylivingbaseIn instanceof EntityVillager))
-            {
+            if (entitylivingbaseIn.isChild() && !(entitylivingbaseIn instanceof EntityVillager)) {
                 float f = 2.0F;
                 float f1 = 1.4F;
                 GlStateManager.translate(0.0F, 0.5F * scale, 0.0F);
@@ -62,49 +57,39 @@
             this.modelRenderer.postRender(0.0625F);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
 
-            if (item == Items.SKULL)
-            {
+            if (item == Items.SKULL) {
                 float f2 = 1.1875F;
                 GlStateManager.scale(1.1875F, -1.1875F, -1.1875F);
 
-                if (flag)
-                {
+                if (flag) {
                     GlStateManager.translate(0.0F, 0.0625F, 0.0F);
                 }
 
                 GameProfile gameprofile = null;
 
-                if (itemstack.hasTagCompound())
-                {
+                if (itemstack.hasTagCompound()) {
                     NBTTagCompound nbttagcompound = itemstack.getTagCompound();
 
-                    if (nbttagcompound.hasKey("SkullOwner", 10))
-                    {
+                    if (nbttagcompound.hasKey("SkullOwner", 10)) {
                         gameprofile = NBTUtil.readGameProfileFromNBT(nbttagcompound.getCompoundTag("SkullOwner"));
-                    }
-                    else if (nbttagcompound.hasKey("SkullOwner", 8))
-                    {
+                    } else if (nbttagcompound.hasKey("SkullOwner", 8)) {
                         String s = nbttagcompound.getString("SkullOwner");
 
-                        if (!StringUtils.isBlank(s))
-                        {
-                            gameprofile = TileEntitySkull.updateGameprofile(new GameProfile((UUID)null, s));
+                        if (!StringUtils.isBlank(s)) {
+                            gameprofile = TileEntitySkull.updateGameprofile(new GameProfile((UUID) null, s));
                             nbttagcompound.setTag("SkullOwner", NBTUtil.writeGameProfile(new NBTTagCompound(), gameprofile));
                         }
                     }
                 }
 
                 TileEntitySkullRenderer.instance.renderSkull(-0.5F, 0.0F, -0.5F, EnumFacing.UP, 180.0F, itemstack.getMetadata(), gameprofile, -1, limbSwing);
-            }
-            else if (!(item instanceof ItemArmor) || ((ItemArmor)item).getEquipmentSlot() != EntityEquipmentSlot.HEAD)
-            {
+            } else if (!(item instanceof ItemArmor) || ((ItemArmor) item).getEquipmentSlot() != EntityEquipmentSlot.HEAD) {
                 float f3 = 0.625F;
                 GlStateManager.translate(0.0F, -0.25F, 0.0F);
                 GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                 GlStateManager.scale(0.625F, -0.625F, -0.625F);
 
-                if (flag)
-                {
+                if (flag) {
                     GlStateManager.translate(0.0F, 0.1875F, 0.0F);
                 }
 
@@ -115,8 +100,7 @@
         }
     }
 
-    public boolean shouldCombineTextures()
-    {
+    public boolean shouldCombineTextures() {
         return false;
     }
 }
