--- ../src-base/minecraft/net/minecraft/client/renderer/entity/layers/LayerEnderDragonDeath.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/layers/LayerEnderDragonDeath.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity.layers;
 
-import java.util.Random;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.RenderHelper;
@@ -10,21 +9,19 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class LayerEnderDragonDeath implements LayerRenderer<EntityDragon>
-{
-    public void doRenderLayer(EntityDragon entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale)
-    {
-        if (entitylivingbaseIn.deathTicks > 0)
-        {
+public class LayerEnderDragonDeath implements LayerRenderer<EntityDragon> {
+    public void doRenderLayer(EntityDragon entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
+        if (entitylivingbaseIn.deathTicks > 0) {
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
             RenderHelper.disableStandardItemLighting();
-            float f = ((float)entitylivingbaseIn.deathTicks + partialTicks) / 200.0F;
+            float f = ((float) entitylivingbaseIn.deathTicks + partialTicks) / 200.0F;
             float f1 = 0.0F;
 
-            if (f > 0.8F)
-            {
+            if (f > 0.8F) {
                 f1 = (f - 0.8F) / 0.2F;
             }
 
@@ -39,8 +36,7 @@
             GlStateManager.pushMatrix();
             GlStateManager.translate(0.0F, -1.0F, -2.0F);
 
-            for (int i = 0; (float)i < (f + f * f) / 2.0F * 60.0F; ++i)
-            {
+            for (int i = 0; (float) i < (f + f * f) / 2.0F * 60.0F; ++i) {
                 GlStateManager.rotate(random.nextFloat() * 360.0F, 1.0F, 0.0F, 0.0F);
                 GlStateManager.rotate(random.nextFloat() * 360.0F, 0.0F, 1.0F, 0.0F);
                 GlStateManager.rotate(random.nextFloat() * 360.0F, 0.0F, 0.0F, 1.0F);
@@ -50,11 +46,11 @@
                 float f2 = random.nextFloat() * 20.0F + 5.0F + f1 * 10.0F;
                 float f3 = random.nextFloat() * 2.0F + 1.0F + f1 * 2.0F;
                 bufferbuilder.begin(6, DefaultVertexFormats.POSITION_COLOR);
-                bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(255, 255, 255, (int)(255.0F * (1.0F - f1))).endVertex();
-                bufferbuilder.pos(-0.866D * (double)f3, (double)f2, (double)(-0.5F * f3)).color(255, 0, 255, 0).endVertex();
-                bufferbuilder.pos(0.866D * (double)f3, (double)f2, (double)(-0.5F * f3)).color(255, 0, 255, 0).endVertex();
-                bufferbuilder.pos(0.0D, (double)f2, (double)(1.0F * f3)).color(255, 0, 255, 0).endVertex();
-                bufferbuilder.pos(-0.866D * (double)f3, (double)f2, (double)(-0.5F * f3)).color(255, 0, 255, 0).endVertex();
+                bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(255, 255, 255, (int) (255.0F * (1.0F - f1))).endVertex();
+                bufferbuilder.pos(-0.866D * (double) f3, (double) f2, (double) (-0.5F * f3)).color(255, 0, 255, 0).endVertex();
+                bufferbuilder.pos(0.866D * (double) f3, (double) f2, (double) (-0.5F * f3)).color(255, 0, 255, 0).endVertex();
+                bufferbuilder.pos(0.0D, (double) f2, (double) (1.0F * f3)).color(255, 0, 255, 0).endVertex();
+                bufferbuilder.pos(-0.866D * (double) f3, (double) f2, (double) (-0.5F * f3)).color(255, 0, 255, 0).endVertex();
                 tessellator.draw();
             }
 
@@ -70,8 +66,7 @@
         }
     }
 
-    public boolean shouldCombineTextures()
-    {
+    public boolean shouldCombineTextures() {
         return false;
     }
 }
