--- ../src-base/minecraft/net/minecraft/client/renderer/entity/layers/LayerArmorBase.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/layers/LayerArmorBase.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.renderer.entity.layers;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.GlStateManager;
@@ -14,9 +13,10 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Map;
+
 @SideOnly(Side.CLIENT)
-public abstract class LayerArmorBase<T extends ModelBase> implements LayerRenderer<EntityLivingBase>
-{
+public abstract class LayerArmorBase<T extends ModelBase> implements LayerRenderer<EntityLivingBase> {
     protected static final ResourceLocation ENCHANTED_ITEM_GLINT_RES = new ResourceLocation("textures/misc/enchanted_item_glint.png");
     protected T modelLeggings;
     protected T modelArmor;
@@ -28,35 +28,29 @@
     private boolean skipRenderGlint;
     private static final Map<String, ResourceLocation> ARMOR_TEXTURE_RES_MAP = Maps.<String, ResourceLocation>newHashMap();
 
-    public LayerArmorBase(RenderLivingBase<?> rendererIn)
-    {
+    public LayerArmorBase(RenderLivingBase<?> rendererIn) {
         this.renderer = rendererIn;
         this.initArmor();
     }
 
-    public void doRenderLayer(EntityLivingBase entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale)
-    {
+    public void doRenderLayer(EntityLivingBase entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
         this.renderArmorLayer(entitylivingbaseIn, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale, EntityEquipmentSlot.CHEST);
         this.renderArmorLayer(entitylivingbaseIn, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale, EntityEquipmentSlot.LEGS);
         this.renderArmorLayer(entitylivingbaseIn, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale, EntityEquipmentSlot.FEET);
         this.renderArmorLayer(entitylivingbaseIn, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale, EntityEquipmentSlot.HEAD);
     }
 
-    public boolean shouldCombineTextures()
-    {
+    public boolean shouldCombineTextures() {
         return false;
     }
 
-    private void renderArmorLayer(EntityLivingBase entityLivingBaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale, EntityEquipmentSlot slotIn)
-    {
+    private void renderArmorLayer(EntityLivingBase entityLivingBaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale, EntityEquipmentSlot slotIn) {
         ItemStack itemstack = entityLivingBaseIn.getItemStackFromSlot(slotIn);
 
-        if (itemstack.getItem() instanceof ItemArmor)
-        {
-            ItemArmor itemarmor = (ItemArmor)itemstack.getItem();
+        if (itemstack.getItem() instanceof ItemArmor) {
+            ItemArmor itemarmor = (ItemArmor) itemstack.getItem();
 
-            if (itemarmor.getEquipmentSlot() == slotIn)
-            {
+            if (itemarmor.getEquipmentSlot() == slotIn) {
                 T t = this.getModelFromSlot(slotIn);
                 t = getArmorModelHook(entityLivingBaseIn, itemstack, slotIn, t);
                 t.setModelAttributes(this.renderer.getMainModel());
@@ -69,9 +63,9 @@
                     if (itemarmor.hasOverlay(itemstack)) // Allow this for anything, not only cloth
                     {
                         int i = itemarmor.getColor(itemstack);
-                        float f = (float)(i >> 16 & 255) / 255.0F;
-                        float f1 = (float)(i >> 8 & 255) / 255.0F;
-                        float f2 = (float)(i & 255) / 255.0F;
+                        float f = (float) (i >> 16 & 255) / 255.0F;
+                        float f1 = (float) (i >> 8 & 255) / 255.0F;
+                        float f2 = (float) (i & 255) / 255.0F;
                         GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
                         t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
                         this.renderer.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, "overlay"));
@@ -80,28 +74,24 @@
                         GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
                         t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
                     } // Default
-                        if (!this.skipRenderGlint && itemstack.hasEffect())
-                        {
-                            renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
-                        }
+                    if (!this.skipRenderGlint && itemstack.hasEffect()) {
+                        renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
+                    }
                 }
             }
         }
     }
 
-    public T getModelFromSlot(EntityEquipmentSlot slotIn)
-    {
-        return (T)(this.isLegSlot(slotIn) ? this.modelLeggings : this.modelArmor);
+    public T getModelFromSlot(EntityEquipmentSlot slotIn) {
+        return (T) (this.isLegSlot(slotIn) ? this.modelLeggings : this.modelArmor);
     }
 
-    private boolean isLegSlot(EntityEquipmentSlot slotIn)
-    {
+    private boolean isLegSlot(EntityEquipmentSlot slotIn) {
         return slotIn == EntityEquipmentSlot.LEGS;
     }
 
-    public static void renderEnchantedGlint(RenderLivingBase<?> p_188364_0_, EntityLivingBase p_188364_1_, ModelBase model, float p_188364_3_, float p_188364_4_, float p_188364_5_, float p_188364_6_, float p_188364_7_, float p_188364_8_, float p_188364_9_)
-    {
-        float f = (float)p_188364_1_.ticksExisted + p_188364_5_;
+    public static void renderEnchantedGlint(RenderLivingBase<?> p_188364_0_, EntityLivingBase p_188364_1_, ModelBase model, float p_188364_3_, float p_188364_4_, float p_188364_5_, float p_188364_6_, float p_188364_7_, float p_188364_8_, float p_188364_9_) {
+        float f = (float) p_188364_1_.ticksExisted + p_188364_5_;
         p_188364_0_.bindTexture(ENCHANTED_ITEM_GLINT_RES);
         Minecraft.getMinecraft().entityRenderer.setupFogColor(true);
         GlStateManager.enableBlend();
@@ -110,8 +100,7 @@
         float f1 = 0.5F;
         GlStateManager.color(0.5F, 0.5F, 0.5F, 1.0F);
 
-        for (int i = 0; i < 2; ++i)
-        {
+        for (int i = 0; i < 2; ++i) {
             GlStateManager.disableLighting();
             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
             float f2 = 0.76F;
@@ -120,8 +109,8 @@
             GlStateManager.loadIdentity();
             float f3 = 0.33333334F;
             GlStateManager.scale(0.33333334F, 0.33333334F, 0.33333334F);
-            GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
-            GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
+            GlStateManager.rotate(30.0F - (float) i * 60.0F, 0.0F, 0.0F, 1.0F);
+            GlStateManager.translate(0.0F, f * (0.001F + (float) i * 0.003F) * 20.0F, 0.0F);
             GlStateManager.matrixMode(5888);
             model.render(p_188364_1_, p_188364_3_, p_188364_4_, p_188364_6_, p_188364_7_, p_188364_8_, p_188364_9_);
             GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
@@ -138,19 +127,16 @@
     }
 
     @Deprecated //Use the more sensitive version getArmorResource below
-    private ResourceLocation getArmorResource(ItemArmor armor, boolean p_177181_2_)
-    {
-        return this.getArmorResource(armor, p_177181_2_, (String)null);
+    private ResourceLocation getArmorResource(ItemArmor armor, boolean p_177181_2_) {
+        return this.getArmorResource(armor, p_177181_2_, (String) null);
     }
 
     @Deprecated //Use the more sensitive version getArmorResource below
-    private ResourceLocation getArmorResource(ItemArmor armor, boolean p_177178_2_, String p_177178_3_)
-    {
+    private ResourceLocation getArmorResource(ItemArmor armor, boolean p_177178_2_, String p_177178_3_) {
         String s = String.format("textures/models/armor/%s_layer_%d%s.png", armor.getArmorMaterial().getName(), p_177178_2_ ? 2 : 1, p_177178_3_ == null ? "" : String.format("_%s", p_177178_3_));
         ResourceLocation resourcelocation = ARMOR_TEXTURE_RES_MAP.get(s);
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             resourcelocation = new ResourceLocation(s);
             ARMOR_TEXTURE_RES_MAP.put(s, resourcelocation);
         }
@@ -167,8 +153,7 @@
     /**
      * Hook to allow item-sensitive armor model. for LayerBipedArmor.
      */
-    protected T getArmorModelHook(EntityLivingBase entity, ItemStack itemStack, EntityEquipmentSlot slot, T model)
-    {
+    protected T getArmorModelHook(EntityLivingBase entity, ItemStack itemStack, EntityEquipmentSlot slot, T model) {
         return model;
     }
 
@@ -176,29 +161,26 @@
      * More generic ForgeHook version of the above function, it allows for Items to have more control over what texture they provide.
      *
      * @param entity Entity wearing the armor
-     * @param stack ItemStack for the armor
-     * @param slot Slot ID that the item is in
-     * @param type Subtype, can be null or "overlay"
+     * @param stack  ItemStack for the armor
+     * @param slot   Slot ID that the item is in
+     * @param type   Subtype, can be null or "overlay"
      * @return ResourceLocation pointing at the armor's texture
      */
-    public ResourceLocation getArmorResource(net.minecraft.entity.Entity entity, ItemStack stack, EntityEquipmentSlot slot, String type)
-    {
-        ItemArmor item = (ItemArmor)stack.getItem();
+    public ResourceLocation getArmorResource(net.minecraft.entity.Entity entity, ItemStack stack, EntityEquipmentSlot slot, String type) {
+        ItemArmor item = (ItemArmor) stack.getItem();
         String texture = item.getArmorMaterial().getName();
         String domain = "minecraft";
         int idx = texture.indexOf(':');
-        if (idx != -1)
-        {
+        if (idx != -1) {
             domain = texture.substring(0, idx);
             texture = texture.substring(idx + 1);
         }
         String s1 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", domain, texture, (isLegSlot(slot) ? 2 : 1), type == null ? "" : String.format("_%s", type));
 
         s1 = net.minecraftforge.client.ForgeHooksClient.getArmorTexture(entity, stack, s1, slot, type);
-        ResourceLocation resourcelocation = (ResourceLocation)ARMOR_TEXTURE_RES_MAP.get(s1);
+        ResourceLocation resourcelocation = (ResourceLocation) ARMOR_TEXTURE_RES_MAP.get(s1);
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             resourcelocation = new ResourceLocation(s1);
             ARMOR_TEXTURE_RES_MAP.put(s1, resourcelocation);
         }
