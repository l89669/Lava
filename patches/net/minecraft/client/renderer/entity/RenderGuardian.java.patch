--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderGuardian.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderGuardian.java
@@ -16,35 +16,26 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class RenderGuardian extends RenderLiving<EntityGuardian>
-{
+public class RenderGuardian extends RenderLiving<EntityGuardian> {
     private static final ResourceLocation GUARDIAN_TEXTURE = new ResourceLocation("textures/entity/guardian.png");
     private static final ResourceLocation GUARDIAN_BEAM_TEXTURE = new ResourceLocation("textures/entity/guardian_beam.png");
 
-    public RenderGuardian(RenderManager renderManagerIn)
-    {
+    public RenderGuardian(RenderManager renderManagerIn) {
         super(renderManagerIn, new ModelGuardian(), 0.5F);
     }
 
-    public boolean shouldRender(EntityGuardian livingEntity, ICamera camera, double camX, double camY, double camZ)
-    {
-        if (super.shouldRender(livingEntity, camera, camX, camY, camZ))
-        {
+    public boolean shouldRender(EntityGuardian livingEntity, ICamera camera, double camX, double camY, double camZ) {
+        if (super.shouldRender(livingEntity, camera, camX, camY, camZ)) {
             return true;
-        }
-        else
-        {
-            if (livingEntity.hasTargetedEntity())
-            {
+        } else {
+            if (livingEntity.hasTargetedEntity()) {
                 EntityLivingBase entitylivingbase = livingEntity.getTargetedEntity();
 
-                if (entitylivingbase != null)
-                {
-                    Vec3d vec3d = this.getPosition(entitylivingbase, (double)entitylivingbase.height * 0.5D, 1.0F);
-                    Vec3d vec3d1 = this.getPosition(livingEntity, (double)livingEntity.getEyeHeight(), 1.0F);
+                if (entitylivingbase != null) {
+                    Vec3d vec3d = this.getPosition(entitylivingbase, (double) entitylivingbase.height * 0.5D, 1.0F);
+                    Vec3d vec3d1 = this.getPosition(livingEntity, (double) livingEntity.getEyeHeight(), 1.0F);
 
-                    if (camera.isBoundingBoxInFrustum(new AxisAlignedBB(vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y, vec3d.z)))
-                    {
+                    if (camera.isBoundingBoxInFrustum(new AxisAlignedBB(vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y, vec3d.z))) {
                         return true;
                     }
                 }
@@ -54,21 +45,18 @@
         }
     }
 
-    private Vec3d getPosition(EntityLivingBase entityLivingBaseIn, double p_177110_2_, float p_177110_4_)
-    {
-        double d0 = entityLivingBaseIn.lastTickPosX + (entityLivingBaseIn.posX - entityLivingBaseIn.lastTickPosX) * (double)p_177110_4_;
-        double d1 = p_177110_2_ + entityLivingBaseIn.lastTickPosY + (entityLivingBaseIn.posY - entityLivingBaseIn.lastTickPosY) * (double)p_177110_4_;
-        double d2 = entityLivingBaseIn.lastTickPosZ + (entityLivingBaseIn.posZ - entityLivingBaseIn.lastTickPosZ) * (double)p_177110_4_;
+    private Vec3d getPosition(EntityLivingBase entityLivingBaseIn, double p_177110_2_, float p_177110_4_) {
+        double d0 = entityLivingBaseIn.lastTickPosX + (entityLivingBaseIn.posX - entityLivingBaseIn.lastTickPosX) * (double) p_177110_4_;
+        double d1 = p_177110_2_ + entityLivingBaseIn.lastTickPosY + (entityLivingBaseIn.posY - entityLivingBaseIn.lastTickPosY) * (double) p_177110_4_;
+        double d2 = entityLivingBaseIn.lastTickPosZ + (entityLivingBaseIn.posZ - entityLivingBaseIn.lastTickPosZ) * (double) p_177110_4_;
         return new Vec3d(d0, d1, d2);
     }
 
-    public void doRender(EntityGuardian entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(EntityGuardian entity, double x, double y, double z, float entityYaw, float partialTicks) {
         super.doRender(entity, x, y, z, entityYaw, partialTicks);
         EntityLivingBase entitylivingbase = entity.getTargetedEntity();
 
-        if (entitylivingbase != null)
-        {
+        if (entitylivingbase != null) {
             float f = entity.getAttackAnimationScale(partialTicks);
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
@@ -82,27 +70,27 @@
             float f1 = 240.0F;
             OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, 240.0F, 240.0F);
             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-            float f2 = (float)entity.world.getTotalWorldTime() + partialTicks;
+            float f2 = (float) entity.world.getTotalWorldTime() + partialTicks;
             float f3 = f2 * 0.5F % 1.0F;
             float f4 = entity.getEyeHeight();
             GlStateManager.pushMatrix();
-            GlStateManager.translate((float)x, (float)y + f4, (float)z);
-            Vec3d vec3d = this.getPosition(entitylivingbase, (double)entitylivingbase.height * 0.5D, partialTicks);
-            Vec3d vec3d1 = this.getPosition(entity, (double)f4, partialTicks);
+            GlStateManager.translate((float) x, (float) y + f4, (float) z);
+            Vec3d vec3d = this.getPosition(entitylivingbase, (double) entitylivingbase.height * 0.5D, partialTicks);
+            Vec3d vec3d1 = this.getPosition(entity, (double) f4, partialTicks);
             Vec3d vec3d2 = vec3d.subtract(vec3d1);
             double d0 = vec3d2.lengthVector() + 1.0D;
             vec3d2 = vec3d2.normalize();
-            float f5 = (float)Math.acos(vec3d2.y);
-            float f6 = (float)Math.atan2(vec3d2.z, vec3d2.x);
-            GlStateManager.rotate((((float)Math.PI / 2F) + -f6) * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
-            GlStateManager.rotate(f5 * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+            float f5 = (float) Math.acos(vec3d2.y);
+            float f6 = (float) Math.atan2(vec3d2.z, vec3d2.x);
+            GlStateManager.rotate((((float) Math.PI / 2F) + -f6) * (180F / (float) Math.PI), 0.0F, 1.0F, 0.0F);
+            GlStateManager.rotate(f5 * (180F / (float) Math.PI), 1.0F, 0.0F, 0.0F);
             int i = 1;
-            double d1 = (double)f2 * 0.05D * -1.5D;
+            double d1 = (double) f2 * 0.05D * -1.5D;
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
             float f7 = f * f;
-            int j = 64 + (int)(f7 * 191.0F);
-            int k = 32 + (int)(f7 * 191.0F);
-            int l = 128 - (int)(f7 * 64.0F);
+            int j = 64 + (int) (f7 * 191.0F);
+            int k = 32 + (int) (f7 * 191.0F);
+            int l = 128 - (int) (f7 * 64.0F);
             double d2 = 0.2D;
             double d3 = 0.282D;
             double d4 = 0.0D + Math.cos(d1 + 2.356194490192345D) * 0.282D;
@@ -123,7 +111,7 @@
             double d19 = 0.0D + Math.sin(d1 + (Math.PI * 3D / 2D)) * 0.2D;
             double d20 = 0.0D;
             double d21 = 0.4999D;
-            double d22 = (double)(-1.0F + f3);
+            double d22 = (double) (-1.0F + f3);
             double d23 = d0 * 2.5D + d22;
             bufferbuilder.pos(d12, d0, d13).tex(0.4999D, d23).color(j, k, l, 255).endVertex();
             bufferbuilder.pos(d12, 0.0D, d13).tex(0.4999D, d22).color(j, k, l, 255).endVertex();
@@ -135,8 +123,7 @@
             bufferbuilder.pos(d18, d0, d19).tex(0.0D, d23).color(j, k, l, 255).endVertex();
             double d24 = 0.0D;
 
-            if (entity.ticksExisted % 2 == 0)
-            {
+            if (entity.ticksExisted % 2 == 0) {
                 d24 = 0.5D;
             }
 
@@ -149,8 +136,7 @@
         }
     }
 
-    protected ResourceLocation getEntityTexture(EntityGuardian entity)
-    {
+    protected ResourceLocation getEntityTexture(EntityGuardian entity) {
         return GUARDIAN_TEXTURE;
     }
 }
