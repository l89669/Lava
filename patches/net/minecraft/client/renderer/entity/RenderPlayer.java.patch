--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
@@ -4,14 +4,7 @@
 import net.minecraft.client.model.ModelBiped;
 import net.minecraft.client.model.ModelPlayer;
 import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.entity.layers.LayerArrow;
-import net.minecraft.client.renderer.entity.layers.LayerBipedArmor;
-import net.minecraft.client.renderer.entity.layers.LayerCape;
-import net.minecraft.client.renderer.entity.layers.LayerCustomHead;
-import net.minecraft.client.renderer.entity.layers.LayerDeadmau5Head;
-import net.minecraft.client.renderer.entity.layers.LayerElytra;
-import net.minecraft.client.renderer.entity.layers.LayerEntityOnShoulder;
-import net.minecraft.client.renderer.entity.layers.LayerHeldItem;
+import net.minecraft.client.renderer.entity.layers.*;
 import net.minecraft.entity.player.EnumPlayerModelParts;
 import net.minecraft.item.EnumAction;
 import net.minecraft.item.ItemStack;
@@ -26,17 +19,14 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class RenderPlayer extends RenderLivingBase<AbstractClientPlayer>
-{
+public class RenderPlayer extends RenderLivingBase<AbstractClientPlayer> {
     private final boolean smallArms;
 
-    public RenderPlayer(RenderManager renderManager)
-    {
+    public RenderPlayer(RenderManager renderManager) {
         this(renderManager, false);
     }
 
-    public RenderPlayer(RenderManager renderManager, boolean useSmallArms)
-    {
+    public RenderPlayer(RenderManager renderManager, boolean useSmallArms) {
         super(renderManager, new ModelPlayer(0.0F, useSmallArms), 0.5F);
         this.smallArms = useSmallArms;
         this.addLayer(new LayerBipedArmor(this));
@@ -49,20 +39,17 @@
         this.addLayer(new LayerEntityOnShoulder(renderManager));
     }
 
-    public ModelPlayer getMainModel()
-    {
-        return (ModelPlayer)super.getMainModel();
+    public ModelPlayer getMainModel() {
+        return (ModelPlayer) super.getMainModel();
     }
 
-    public void doRender(AbstractClientPlayer entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
-        if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.RenderPlayerEvent.Pre(entity, this, partialTicks, x, y, z))) return;
-        if (!entity.isUser() || this.renderManager.renderViewEntity == entity)
-        {
+    public void doRender(AbstractClientPlayer entity, double x, double y, double z, float entityYaw, float partialTicks) {
+        if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.RenderPlayerEvent.Pre(entity, this, partialTicks, x, y, z)))
+            return;
+        if (!entity.isUser() || this.renderManager.renderViewEntity == entity) {
             double d0 = y;
 
-            if (entity.isSneaking())
-            {
+            if (entity.isSneaking()) {
                 d0 = y - 0.125D;
             }
 
@@ -74,18 +61,14 @@
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.RenderPlayerEvent.Post(entity, this, partialTicks, x, y, z));
     }
 
-    private void setModelVisibilities(AbstractClientPlayer clientPlayer)
-    {
+    private void setModelVisibilities(AbstractClientPlayer clientPlayer) {
         ModelPlayer modelplayer = this.getMainModel();
 
-        if (clientPlayer.isSpectator())
-        {
+        if (clientPlayer.isSpectator()) {
             modelplayer.setVisible(false);
             modelplayer.bipedHead.showModel = true;
             modelplayer.bipedHeadwear.showModel = true;
-        }
-        else
-        {
+        } else {
             ItemStack itemstack = clientPlayer.getHeldItemMainhand();
             ItemStack itemstack1 = clientPlayer.getHeldItemOffhand();
             modelplayer.setVisible(true);
@@ -99,94 +82,75 @@
             ModelBiped.ArmPose modelbiped$armpose = ModelBiped.ArmPose.EMPTY;
             ModelBiped.ArmPose modelbiped$armpose1 = ModelBiped.ArmPose.EMPTY;
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 modelbiped$armpose = ModelBiped.ArmPose.ITEM;
 
-                if (clientPlayer.getItemInUseCount() > 0)
-                {
+                if (clientPlayer.getItemInUseCount() > 0) {
                     EnumAction enumaction = itemstack.getItemUseAction();
 
-                    if (enumaction == EnumAction.BLOCK)
-                    {
+                    if (enumaction == EnumAction.BLOCK) {
                         modelbiped$armpose = ModelBiped.ArmPose.BLOCK;
-                    }
-                    else if (enumaction == EnumAction.BOW)
-                    {
+                    } else if (enumaction == EnumAction.BOW) {
                         modelbiped$armpose = ModelBiped.ArmPose.BOW_AND_ARROW;
                     }
                 }
             }
 
-            if (!itemstack1.isEmpty())
-            {
+            if (!itemstack1.isEmpty()) {
                 modelbiped$armpose1 = ModelBiped.ArmPose.ITEM;
 
-                if (clientPlayer.getItemInUseCount() > 0)
-                {
+                if (clientPlayer.getItemInUseCount() > 0) {
                     EnumAction enumaction1 = itemstack1.getItemUseAction();
 
-                    if (enumaction1 == EnumAction.BLOCK)
-                    {
+                    if (enumaction1 == EnumAction.BLOCK) {
                         modelbiped$armpose1 = ModelBiped.ArmPose.BLOCK;
                     }
                     // FORGE: fix MC-88356 allow offhand to use bow and arrow animation
-                    else if (enumaction1 == EnumAction.BOW)
-                    {
+                    else if (enumaction1 == EnumAction.BOW) {
                         modelbiped$armpose1 = ModelBiped.ArmPose.BOW_AND_ARROW;
                     }
                 }
             }
 
-            if (clientPlayer.getPrimaryHand() == EnumHandSide.RIGHT)
-            {
+            if (clientPlayer.getPrimaryHand() == EnumHandSide.RIGHT) {
                 modelplayer.rightArmPose = modelbiped$armpose;
                 modelplayer.leftArmPose = modelbiped$armpose1;
-            }
-            else
-            {
+            } else {
                 modelplayer.rightArmPose = modelbiped$armpose1;
                 modelplayer.leftArmPose = modelbiped$armpose;
             }
         }
     }
 
-    public ResourceLocation getEntityTexture(AbstractClientPlayer entity)
-    {
+    public ResourceLocation getEntityTexture(AbstractClientPlayer entity) {
         return entity.getLocationSkin();
     }
 
-    public void transformHeldFull3DItemLayer()
-    {
+    public void transformHeldFull3DItemLayer() {
         GlStateManager.translate(0.0F, 0.1875F, 0.0F);
     }
 
-    protected void preRenderCallback(AbstractClientPlayer entitylivingbaseIn, float partialTickTime)
-    {
+    protected void preRenderCallback(AbstractClientPlayer entitylivingbaseIn, float partialTickTime) {
         float f = 0.9375F;
         GlStateManager.scale(0.9375F, 0.9375F, 0.9375F);
     }
 
-    protected void renderEntityName(AbstractClientPlayer entityIn, double x, double y, double z, String name, double distanceSq)
-    {
-        if (distanceSq < 100.0D)
-        {
+    protected void renderEntityName(AbstractClientPlayer entityIn, double x, double y, double z, String name, double distanceSq) {
+        if (distanceSq < 100.0D) {
             Scoreboard scoreboard = entityIn.getWorldScoreboard();
             ScoreObjective scoreobjective = scoreboard.getObjectiveInDisplaySlot(2);
 
-            if (scoreobjective != null)
-            {
+            if (scoreobjective != null) {
                 Score score = scoreboard.getOrCreateScore(entityIn.getName(), scoreobjective);
                 this.renderLivingLabel(entityIn, score.getScorePoints() + " " + scoreobjective.getDisplayName(), x, y, z, 64);
-                y += (double)((float)this.getFontRendererFromRenderManager().FONT_HEIGHT * 1.15F * 0.025F);
+                y += (double) ((float) this.getFontRendererFromRenderManager().FONT_HEIGHT * 1.15F * 0.025F);
             }
         }
 
         super.renderEntityName(entityIn, x, y, z, name, distanceSq);
     }
 
-    public void renderRightArm(AbstractClientPlayer clientPlayer)
-    {
+    public void renderRightArm(AbstractClientPlayer clientPlayer) {
         float f = 1.0F;
         GlStateManager.color(1.0F, 1.0F, 1.0F);
         float f1 = 0.0625F;
@@ -203,8 +167,7 @@
         GlStateManager.disableBlend();
     }
 
-    public void renderLeftArm(AbstractClientPlayer clientPlayer)
-    {
+    public void renderLeftArm(AbstractClientPlayer clientPlayer) {
         float f = 1.0F;
         GlStateManager.color(1.0F, 1.0F, 1.0F);
         float f1 = 0.0625F;
@@ -221,45 +184,34 @@
         GlStateManager.disableBlend();
     }
 
-    protected void renderLivingAt(AbstractClientPlayer entityLivingBaseIn, double x, double y, double z)
-    {
-        if (entityLivingBaseIn.isEntityAlive() && entityLivingBaseIn.isPlayerSleeping())
-        {
-            super.renderLivingAt(entityLivingBaseIn, x + (double)entityLivingBaseIn.renderOffsetX, y + (double)entityLivingBaseIn.renderOffsetY, z + (double)entityLivingBaseIn.renderOffsetZ);
-        }
-        else
-        {
+    protected void renderLivingAt(AbstractClientPlayer entityLivingBaseIn, double x, double y, double z) {
+        if (entityLivingBaseIn.isEntityAlive() && entityLivingBaseIn.isPlayerSleeping()) {
+            super.renderLivingAt(entityLivingBaseIn, x + (double) entityLivingBaseIn.renderOffsetX, y + (double) entityLivingBaseIn.renderOffsetY, z + (double) entityLivingBaseIn.renderOffsetZ);
+        } else {
             super.renderLivingAt(entityLivingBaseIn, x, y, z);
         }
     }
 
-    protected void applyRotations(AbstractClientPlayer entityLiving, float p_77043_2_, float rotationYaw, float partialTicks)
-    {
-        if (entityLiving.isEntityAlive() && entityLiving.isPlayerSleeping())
-        {
+    protected void applyRotations(AbstractClientPlayer entityLiving, float p_77043_2_, float rotationYaw, float partialTicks) {
+        if (entityLiving.isEntityAlive() && entityLiving.isPlayerSleeping()) {
             GlStateManager.rotate(entityLiving.getBedOrientationInDegrees(), 0.0F, 1.0F, 0.0F);
             GlStateManager.rotate(this.getDeathMaxRotation(entityLiving), 0.0F, 0.0F, 1.0F);
             GlStateManager.rotate(270.0F, 0.0F, 1.0F, 0.0F);
-        }
-        else if (entityLiving.isElytraFlying())
-        {
+        } else if (entityLiving.isElytraFlying()) {
             super.applyRotations(entityLiving, p_77043_2_, rotationYaw, partialTicks);
-            float f = (float)entityLiving.getTicksElytraFlying() + partialTicks;
+            float f = (float) entityLiving.getTicksElytraFlying() + partialTicks;
             float f1 = MathHelper.clamp(f * f / 100.0F, 0.0F, 1.0F);
             GlStateManager.rotate(f1 * (-90.0F - entityLiving.rotationPitch), 1.0F, 0.0F, 0.0F);
             Vec3d vec3d = entityLiving.getLook(partialTicks);
             double d0 = entityLiving.motionX * entityLiving.motionX + entityLiving.motionZ * entityLiving.motionZ;
             double d1 = vec3d.x * vec3d.x + vec3d.z * vec3d.z;
 
-            if (d0 > 0.0D && d1 > 0.0D)
-            {
+            if (d0 > 0.0D && d1 > 0.0D) {
                 double d2 = (entityLiving.motionX * vec3d.x + entityLiving.motionZ * vec3d.z) / (Math.sqrt(d0) * Math.sqrt(d1));
                 double d3 = entityLiving.motionX * vec3d.z - entityLiving.motionZ * vec3d.x;
-                GlStateManager.rotate((float)(Math.signum(d3) * Math.acos(d2)) * 180.0F / (float)Math.PI, 0.0F, 1.0F, 0.0F);
+                GlStateManager.rotate((float) (Math.signum(d3) * Math.acos(d2)) * 180.0F / (float) Math.PI, 0.0F, 1.0F, 0.0F);
             }
-        }
-        else
-        {
+        } else {
             super.applyRotations(entityLiving, p_77043_2_, rotationYaw, partialTicks);
         }
     }
