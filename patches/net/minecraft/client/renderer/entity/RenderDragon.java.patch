--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderDragon.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderDragon.java
@@ -15,34 +15,29 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class RenderDragon extends RenderLiving<EntityDragon>
-{
+public class RenderDragon extends RenderLiving<EntityDragon> {
     public static final ResourceLocation ENDERCRYSTAL_BEAM_TEXTURES = new ResourceLocation("textures/entity/endercrystal/endercrystal_beam.png");
     private static final ResourceLocation DRAGON_EXPLODING_TEXTURES = new ResourceLocation("textures/entity/enderdragon/dragon_exploding.png");
     private static final ResourceLocation DRAGON_TEXTURES = new ResourceLocation("textures/entity/enderdragon/dragon.png");
 
-    public RenderDragon(RenderManager renderManagerIn)
-    {
+    public RenderDragon(RenderManager renderManagerIn) {
         super(renderManagerIn, new ModelDragon(0.0F), 0.5F);
         this.addLayer(new LayerEnderDragonEyes(this));
         this.addLayer(new LayerEnderDragonDeath());
     }
 
-    protected void applyRotations(EntityDragon entityLiving, float p_77043_2_, float rotationYaw, float partialTicks)
-    {
-        float f = (float)entityLiving.getMovementOffsets(7, partialTicks)[0];
-        float f1 = (float)(entityLiving.getMovementOffsets(5, partialTicks)[1] - entityLiving.getMovementOffsets(10, partialTicks)[1]);
+    protected void applyRotations(EntityDragon entityLiving, float p_77043_2_, float rotationYaw, float partialTicks) {
+        float f = (float) entityLiving.getMovementOffsets(7, partialTicks)[0];
+        float f1 = (float) (entityLiving.getMovementOffsets(5, partialTicks)[1] - entityLiving.getMovementOffsets(10, partialTicks)[1]);
         GlStateManager.rotate(-f, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f1 * 10.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.translate(0.0F, 0.0F, 1.0F);
 
-        if (entityLiving.deathTime > 0)
-        {
-            float f2 = ((float)entityLiving.deathTime + partialTicks - 1.0F) / 20.0F * 1.6F;
+        if (entityLiving.deathTime > 0) {
+            float f2 = ((float) entityLiving.deathTime + partialTicks - 1.0F) / 20.0F * 1.6F;
             f2 = MathHelper.sqrt(f2);
 
-            if (f2 > 1.0F)
-            {
+            if (f2 > 1.0F) {
                 f2 = 1.0F;
             }
 
@@ -50,11 +45,9 @@
         }
     }
 
-    protected void renderModel(EntityDragon entitylivingbaseIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor)
-    {
-        if (entitylivingbaseIn.deathTicks > 0)
-        {
-            float f = (float)entitylivingbaseIn.deathTicks / 200.0F;
+    protected void renderModel(EntityDragon entitylivingbaseIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor) {
+        if (entitylivingbaseIn.deathTicks > 0) {
+            float f = (float) entitylivingbaseIn.deathTicks / 200.0F;
             GlStateManager.depthFunc(515);
             GlStateManager.enableAlpha();
             GlStateManager.alphaFunc(516, f);
@@ -67,8 +60,7 @@
         this.bindEntityTexture(entitylivingbaseIn);
         this.mainModel.render(entitylivingbaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor);
 
-        if (entitylivingbaseIn.hurtTime > 0)
-        {
+        if (entitylivingbaseIn.hurtTime > 0) {
             GlStateManager.depthFunc(514);
             GlStateManager.disableTexture2D();
             GlStateManager.enableBlend();
@@ -81,47 +73,43 @@
         }
     }
 
-    public void doRender(EntityDragon entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(EntityDragon entity, double x, double y, double z, float entityYaw, float partialTicks) {
         super.doRender(entity, x, y, z, entityYaw, partialTicks);
 
-        if (entity.healingEnderCrystal != null)
-        {
+        if (entity.healingEnderCrystal != null) {
             this.bindTexture(ENDERCRYSTAL_BEAM_TEXTURES);
-            float f = MathHelper.sin(((float)entity.healingEnderCrystal.ticksExisted + partialTicks) * 0.2F) / 2.0F + 0.5F;
+            float f = MathHelper.sin(((float) entity.healingEnderCrystal.ticksExisted + partialTicks) * 0.2F) / 2.0F + 0.5F;
             f = (f * f + f) * 0.2F;
-            renderCrystalBeams(x, y, z, partialTicks, entity.posX + (entity.prevPosX - entity.posX) * (double)(1.0F - partialTicks), entity.posY + (entity.prevPosY - entity.posY) * (double)(1.0F - partialTicks), entity.posZ + (entity.prevPosZ - entity.posZ) * (double)(1.0F - partialTicks), entity.ticksExisted, entity.healingEnderCrystal.posX, (double)f + entity.healingEnderCrystal.posY, entity.healingEnderCrystal.posZ);
+            renderCrystalBeams(x, y, z, partialTicks, entity.posX + (entity.prevPosX - entity.posX) * (double) (1.0F - partialTicks), entity.posY + (entity.prevPosY - entity.posY) * (double) (1.0F - partialTicks), entity.posZ + (entity.prevPosZ - entity.posZ) * (double) (1.0F - partialTicks), entity.ticksExisted, entity.healingEnderCrystal.posX, (double) f + entity.healingEnderCrystal.posY, entity.healingEnderCrystal.posZ);
         }
     }
 
-    public static void renderCrystalBeams(double p_188325_0_, double p_188325_2_, double p_188325_4_, float p_188325_6_, double p_188325_7_, double p_188325_9_, double p_188325_11_, int p_188325_13_, double p_188325_14_, double p_188325_16_, double p_188325_18_)
-    {
-        float f = (float)(p_188325_14_ - p_188325_7_);
-        float f1 = (float)(p_188325_16_ - 1.0D - p_188325_9_);
-        float f2 = (float)(p_188325_18_ - p_188325_11_);
+    public static void renderCrystalBeams(double p_188325_0_, double p_188325_2_, double p_188325_4_, float p_188325_6_, double p_188325_7_, double p_188325_9_, double p_188325_11_, int p_188325_13_, double p_188325_14_, double p_188325_16_, double p_188325_18_) {
+        float f = (float) (p_188325_14_ - p_188325_7_);
+        float f1 = (float) (p_188325_16_ - 1.0D - p_188325_9_);
+        float f2 = (float) (p_188325_18_ - p_188325_11_);
         float f3 = MathHelper.sqrt(f * f + f2 * f2);
         float f4 = MathHelper.sqrt(f * f + f1 * f1 + f2 * f2);
         GlStateManager.pushMatrix();
-        GlStateManager.translate((float)p_188325_0_, (float)p_188325_2_ + 2.0F, (float)p_188325_4_);
-        GlStateManager.rotate((float)(-Math.atan2((double)f2, (double)f)) * (180F / (float)Math.PI) - 90.0F, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate((float)(-Math.atan2((double)f3, (double)f1)) * (180F / (float)Math.PI) - 90.0F, 1.0F, 0.0F, 0.0F);
+        GlStateManager.translate((float) p_188325_0_, (float) p_188325_2_ + 2.0F, (float) p_188325_4_);
+        GlStateManager.rotate((float) (-Math.atan2((double) f2, (double) f)) * (180F / (float) Math.PI) - 90.0F, 0.0F, 1.0F, 0.0F);
+        GlStateManager.rotate((float) (-Math.atan2((double) f3, (double) f1)) * (180F / (float) Math.PI) - 90.0F, 1.0F, 0.0F, 0.0F);
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         RenderHelper.disableStandardItemLighting();
         GlStateManager.disableCull();
         GlStateManager.shadeModel(7425);
-        float f5 = 0.0F - ((float)p_188325_13_ + p_188325_6_) * 0.01F;
-        float f6 = MathHelper.sqrt(f * f + f1 * f1 + f2 * f2) / 32.0F - ((float)p_188325_13_ + p_188325_6_) * 0.01F;
+        float f5 = 0.0F - ((float) p_188325_13_ + p_188325_6_) * 0.01F;
+        float f6 = MathHelper.sqrt(f * f + f1 * f1 + f2 * f2) / 32.0F - ((float) p_188325_13_ + p_188325_6_) * 0.01F;
         bufferbuilder.begin(5, DefaultVertexFormats.POSITION_TEX_COLOR);
         int i = 8;
 
-        for (int j = 0; j <= 8; ++j)
-        {
-            float f7 = MathHelper.sin((float)(j % 8) * ((float)Math.PI * 2F) / 8.0F) * 0.75F;
-            float f8 = MathHelper.cos((float)(j % 8) * ((float)Math.PI * 2F) / 8.0F) * 0.75F;
-            float f9 = (float)(j % 8) / 8.0F;
-            bufferbuilder.pos((double)(f7 * 0.2F), (double)(f8 * 0.2F), 0.0D).tex((double)f9, (double)f5).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos((double)f7, (double)f8, (double)f4).tex((double)f9, (double)f6).color(255, 255, 255, 255).endVertex();
+        for (int j = 0; j <= 8; ++j) {
+            float f7 = MathHelper.sin((float) (j % 8) * ((float) Math.PI * 2F) / 8.0F) * 0.75F;
+            float f8 = MathHelper.cos((float) (j % 8) * ((float) Math.PI * 2F) / 8.0F) * 0.75F;
+            float f9 = (float) (j % 8) / 8.0F;
+            bufferbuilder.pos((double) (f7 * 0.2F), (double) (f8 * 0.2F), 0.0D).tex((double) f9, (double) f5).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos((double) f7, (double) f8, (double) f4).tex((double) f9, (double) f6).color(255, 255, 255, 255).endVertex();
         }
 
         tessellator.draw();
@@ -131,8 +119,7 @@
         GlStateManager.popMatrix();
     }
 
-    protected ResourceLocation getEntityTexture(EntityDragon entity)
-    {
+    protected ResourceLocation getEntityTexture(EntityDragon entity) {
         return DRAGON_TEXTURES;
     }
 }
