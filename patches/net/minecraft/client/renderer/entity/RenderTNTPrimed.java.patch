--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderTNTPrimed.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderTNTPrimed.java
@@ -12,23 +12,19 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class RenderTNTPrimed extends Render<EntityTNTPrimed>
-{
-    public RenderTNTPrimed(RenderManager renderManagerIn)
-    {
+public class RenderTNTPrimed extends Render<EntityTNTPrimed> {
+    public RenderTNTPrimed(RenderManager renderManagerIn) {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
     }
 
-    public void doRender(EntityTNTPrimed entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(EntityTNTPrimed entity, double x, double y, double z, float entityYaw, float partialTicks) {
         BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
         GlStateManager.pushMatrix();
-        GlStateManager.translate((float)x, (float)y + 0.5F, (float)z);
+        GlStateManager.translate((float) x, (float) y + 0.5F, (float) z);
 
-        if ((float)entity.getFuse() - partialTicks + 1.0F < 10.0F)
-        {
-            float f = 1.0F - ((float)entity.getFuse() - partialTicks + 1.0F) / 10.0F;
+        if ((float) entity.getFuse() - partialTicks + 1.0F < 10.0F) {
+            float f = 1.0F - ((float) entity.getFuse() - partialTicks + 1.0F) / 10.0F;
             f = MathHelper.clamp(f, 0.0F, 1.0F);
             f = f * f;
             f = f * f;
@@ -36,23 +32,20 @@
             GlStateManager.scale(f1, f1, f1);
         }
 
-        float f2 = (1.0F - ((float)entity.getFuse() - partialTicks + 1.0F) / 100.0F) * 0.8F;
+        float f2 = (1.0F - ((float) entity.getFuse() - partialTicks + 1.0F) / 100.0F) * 0.8F;
         this.bindEntityTexture(entity);
         GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.translate(-0.5F, -0.5F, 0.5F);
         blockrendererdispatcher.renderBlockBrightness(Blocks.TNT.getDefaultState(), entity.getBrightness());
         GlStateManager.translate(0.0F, 0.0F, 1.0F);
 
-        if (this.renderOutlines)
-        {
+        if (this.renderOutlines) {
             GlStateManager.enableColorMaterial();
             GlStateManager.enableOutlineMode(this.getTeamColor(entity));
             blockrendererdispatcher.renderBlockBrightness(Blocks.TNT.getDefaultState(), 1.0F);
             GlStateManager.disableOutlineMode();
             GlStateManager.disableColorMaterial();
-        }
-        else if (entity.getFuse() / 5 % 2 == 0)
-        {
+        } else if (entity.getFuse() / 5 % 2 == 0) {
             GlStateManager.disableTexture2D();
             GlStateManager.disableLighting();
             GlStateManager.enableBlend();
@@ -73,8 +66,7 @@
         super.doRender(entity, x, y, z, entityYaw, partialTicks);
     }
 
-    protected ResourceLocation getEntityTexture(EntityTNTPrimed entity)
-    {
+    protected ResourceLocation getEntityTexture(EntityTNTPrimed entity) {
         return TextureMap.LOCATION_BLOCKS_TEXTURE;
     }
 }
