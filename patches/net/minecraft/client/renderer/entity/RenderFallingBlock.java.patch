--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderFallingBlock.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderFallingBlock.java
@@ -18,47 +18,39 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class RenderFallingBlock extends Render<EntityFallingBlock>
-{
-    public RenderFallingBlock(RenderManager renderManagerIn)
-    {
+public class RenderFallingBlock extends Render<EntityFallingBlock> {
+    public RenderFallingBlock(RenderManager renderManagerIn) {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
     }
 
-    public void doRender(EntityFallingBlock entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
-        if (entity.getBlock() != null)
-        {
+    public void doRender(EntityFallingBlock entity, double x, double y, double z, float entityYaw, float partialTicks) {
+        if (entity.getBlock() != null) {
             IBlockState iblockstate = entity.getBlock();
 
-            if (iblockstate.getRenderType() == EnumBlockRenderType.MODEL)
-            {
+            if (iblockstate.getRenderType() == EnumBlockRenderType.MODEL) {
                 World world = entity.getWorldObj();
 
-                if (iblockstate != world.getBlockState(new BlockPos(entity)) && iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE)
-                {
+                if (iblockstate != world.getBlockState(new BlockPos(entity)) && iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE) {
                     this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
                     GlStateManager.pushMatrix();
                     GlStateManager.disableLighting();
                     Tessellator tessellator = Tessellator.getInstance();
                     BufferBuilder bufferbuilder = tessellator.getBuffer();
 
-                    if (this.renderOutlines)
-                    {
+                    if (this.renderOutlines) {
                         GlStateManager.enableColorMaterial();
                         GlStateManager.enableOutlineMode(this.getTeamColor(entity));
                     }
 
                     bufferbuilder.begin(7, DefaultVertexFormats.BLOCK);
                     BlockPos blockpos = new BlockPos(entity.posX, entity.getEntityBoundingBox().maxY, entity.posZ);
-                    GlStateManager.translate((float)(x - (double)blockpos.getX() - 0.5D), (float)(y - (double)blockpos.getY()), (float)(z - (double)blockpos.getZ() - 0.5D));
+                    GlStateManager.translate((float) (x - (double) blockpos.getX() - 0.5D), (float) (y - (double) blockpos.getY()), (float) (z - (double) blockpos.getZ() - 0.5D));
                     BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
                     blockrendererdispatcher.getBlockModelRenderer().renderModel(world, blockrendererdispatcher.getModelForState(iblockstate), iblockstate, blockpos, bufferbuilder, false, MathHelper.getPositionRandom(entity.getOrigin()));
                     tessellator.draw();
 
-                    if (this.renderOutlines)
-                    {
+                    if (this.renderOutlines) {
                         GlStateManager.disableOutlineMode();
                         GlStateManager.disableColorMaterial();
                     }
@@ -71,8 +63,7 @@
         }
     }
 
-    protected ResourceLocation getEntityTexture(EntityFallingBlock entity)
-    {
+    protected ResourceLocation getEntityTexture(EntityFallingBlock entity) {
         return TextureMap.LOCATION_BLOCKS_TEXTURE;
     }
 }
