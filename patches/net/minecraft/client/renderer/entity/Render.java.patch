--- ../src-base/minecraft/net/minecraft/client/renderer/entity/Render.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/Render.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
@@ -25,56 +24,48 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+
 @SideOnly(Side.CLIENT)
-public abstract class Render<T extends Entity>
-{
+public abstract class Render<T extends Entity> {
     private static final ResourceLocation SHADOW_TEXTURES = new ResourceLocation("textures/misc/shadow.png");
     protected final RenderManager renderManager;
     protected float shadowSize;
     protected float shadowOpaque = 1.0F;
     protected boolean renderOutlines;
 
-    protected Render(RenderManager renderManager)
-    {
+    protected Render(RenderManager renderManager) {
         this.renderManager = renderManager;
     }
 
-    public void setRenderOutlines(boolean renderOutlinesIn)
-    {
+    public void setRenderOutlines(boolean renderOutlinesIn) {
         this.renderOutlines = renderOutlinesIn;
     }
 
-    public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ)
-    {
+    public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ) {
         AxisAlignedBB axisalignedbb = livingEntity.getRenderBoundingBox().grow(0.5D);
 
-        if (axisalignedbb.hasNaN() || axisalignedbb.getAverageEdgeLength() == 0.0D)
-        {
+        if (axisalignedbb.hasNaN() || axisalignedbb.getAverageEdgeLength() == 0.0D) {
             axisalignedbb = new AxisAlignedBB(livingEntity.posX - 2.0D, livingEntity.posY - 2.0D, livingEntity.posZ - 2.0D, livingEntity.posX + 2.0D, livingEntity.posY + 2.0D, livingEntity.posZ + 2.0D);
         }
 
         return livingEntity.isInRangeToRender3d(camX, camY, camZ) && (livingEntity.ignoreFrustumCheck || camera.isBoundingBoxInFrustum(axisalignedbb));
     }
 
-    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
-        if (!this.renderOutlines)
-        {
+    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks) {
+        if (!this.renderOutlines) {
             this.renderName(entity, x, y, z);
         }
     }
 
-    protected int getTeamColor(T entityIn)
-    {
+    protected int getTeamColor(T entityIn) {
         int i = 16777215;
-        ScorePlayerTeam scoreplayerteam = (ScorePlayerTeam)entityIn.getTeam();
+        ScorePlayerTeam scoreplayerteam = (ScorePlayerTeam) entityIn.getTeam();
 
-        if (scoreplayerteam != null)
-        {
+        if (scoreplayerteam != null) {
             String s = FontRenderer.getFormatFromString(scoreplayerteam.getPrefix());
 
-            if (s.length() >= 2)
-            {
+            if (s.length() >= 2) {
                 i = this.getFontRendererFromRenderManager().getColorCode(s.charAt(1));
             }
         }
@@ -82,55 +73,45 @@
         return i;
     }
 
-    protected void renderName(T entity, double x, double y, double z)
-    {
-        if (this.canRenderName(entity))
-        {
+    protected void renderName(T entity, double x, double y, double z) {
+        if (this.canRenderName(entity)) {
             this.renderLivingLabel(entity, entity.getDisplayName().getFormattedText(), x, y, z, 64);
         }
     }
 
-    protected boolean canRenderName(T entity)
-    {
+    protected boolean canRenderName(T entity) {
         return entity.getAlwaysRenderNameTagForRender() && entity.hasCustomName();
     }
 
-    protected void renderEntityName(T entityIn, double x, double y, double z, String name, double distanceSq)
-    {
+    protected void renderEntityName(T entityIn, double x, double y, double z, String name, double distanceSq) {
         this.renderLivingLabel(entityIn, name, x, y, z, 64);
     }
 
     @Nullable
     protected abstract ResourceLocation getEntityTexture(T entity);
 
-    protected boolean bindEntityTexture(T entity)
-    {
+    protected boolean bindEntityTexture(T entity) {
         ResourceLocation resourcelocation = this.getEntityTexture(entity);
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             return false;
-        }
-        else
-        {
+        } else {
             this.bindTexture(resourcelocation);
             return true;
         }
     }
 
-    public void bindTexture(ResourceLocation location)
-    {
+    public void bindTexture(ResourceLocation location) {
         this.renderManager.renderEngine.bindTexture(location);
     }
 
-    private void renderEntityOnFire(Entity entity, double x, double y, double z, float partialTicks)
-    {
+    private void renderEntityOnFire(Entity entity, double x, double y, double z, float partialTicks) {
         GlStateManager.disableLighting();
         TextureMap texturemap = Minecraft.getMinecraft().getTextureMapBlocks();
         TextureAtlasSprite textureatlassprite = texturemap.getAtlasSprite("minecraft:blocks/fire_layer_0");
         TextureAtlasSprite textureatlassprite1 = texturemap.getAtlasSprite("minecraft:blocks/fire_layer_1");
         GlStateManager.pushMatrix();
-        GlStateManager.translate((float)x, (float)y, (float)z);
+        GlStateManager.translate((float) x, (float) y, (float) z);
         float f = entity.width * 1.4F;
         GlStateManager.scale(f, f, f);
         Tessellator tessellator = Tessellator.getInstance();
@@ -138,16 +119,15 @@
         float f1 = 0.5F;
         float f2 = 0.0F;
         float f3 = entity.height / f;
-        float f4 = (float)(entity.posY - entity.getEntityBoundingBox().minY);
+        float f4 = (float) (entity.posY - entity.getEntityBoundingBox().minY);
         GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-        GlStateManager.translate(0.0F, 0.0F, -0.3F + (float)((int)f3) * 0.02F);
+        GlStateManager.translate(0.0F, 0.0F, -0.3F + (float) ((int) f3) * 0.02F);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         float f5 = 0.0F;
         int i = 0;
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
 
-        while (f3 > 0.0F)
-        {
+        while (f3 > 0.0F) {
             TextureAtlasSprite textureatlassprite2 = i % 2 == 0 ? textureatlassprite : textureatlassprite1;
             this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
             float f6 = textureatlassprite2.getMinU();
@@ -155,17 +135,16 @@
             float f8 = textureatlassprite2.getMaxU();
             float f9 = textureatlassprite2.getMaxV();
 
-            if (i / 2 % 2 == 0)
-            {
+            if (i / 2 % 2 == 0) {
                 float f10 = f8;
                 f8 = f6;
                 f6 = f10;
             }
 
-            bufferbuilder.pos((double)(f1 - 0.0F), (double)(0.0F - f4), (double)f5).tex((double)f8, (double)f9).endVertex();
-            bufferbuilder.pos((double)(-f1 - 0.0F), (double)(0.0F - f4), (double)f5).tex((double)f6, (double)f9).endVertex();
-            bufferbuilder.pos((double)(-f1 - 0.0F), (double)(1.4F - f4), (double)f5).tex((double)f6, (double)f7).endVertex();
-            bufferbuilder.pos((double)(f1 - 0.0F), (double)(1.4F - f4), (double)f5).tex((double)f8, (double)f7).endVertex();
+            bufferbuilder.pos((double) (f1 - 0.0F), (double) (0.0F - f4), (double) f5).tex((double) f8, (double) f9).endVertex();
+            bufferbuilder.pos((double) (-f1 - 0.0F), (double) (0.0F - f4), (double) f5).tex((double) f6, (double) f9).endVertex();
+            bufferbuilder.pos((double) (-f1 - 0.0F), (double) (1.4F - f4), (double) f5).tex((double) f6, (double) f7).endVertex();
+            bufferbuilder.pos((double) (f1 - 0.0F), (double) (1.4F - f4), (double) f5).tex((double) f8, (double) f7).endVertex();
             f3 -= 0.45F;
             f4 -= 0.45F;
             f1 *= 0.9F;
@@ -178,8 +157,7 @@
         GlStateManager.enableLighting();
     }
 
-    private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks)
-    {
+    private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks) {
         GlStateManager.enableBlend();
         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
         this.renderManager.renderEngine.bindTexture(SHADOW_TEXTURES);
@@ -187,26 +165,24 @@
         GlStateManager.depthMask(false);
         float f = this.shadowSize;
 
-        if (entityIn instanceof EntityLiving)
-        {
-            EntityLiving entityliving = (EntityLiving)entityIn;
+        if (entityIn instanceof EntityLiving) {
+            EntityLiving entityliving = (EntityLiving) entityIn;
             f *= entityliving.getRenderSizeModifier();
 
-            if (entityliving.isChild())
-            {
+            if (entityliving.isChild()) {
                 f *= 0.5F;
             }
         }
 
-        double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
-        double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
-        double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
-        int i = MathHelper.floor(d5 - (double)f);
-        int j = MathHelper.floor(d5 + (double)f);
-        int k = MathHelper.floor(d0 - (double)f);
+        double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double) partialTicks;
+        double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double) partialTicks;
+        double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double) partialTicks;
+        int i = MathHelper.floor(d5 - (double) f);
+        int j = MathHelper.floor(d5 + (double) f);
+        int k = MathHelper.floor(d0 - (double) f);
         int l = MathHelper.floor(d0);
-        int i1 = MathHelper.floor(d1 - (double)f);
-        int j1 = MathHelper.floor(d1 + (double)f);
+        int i1 = MathHelper.floor(d1 - (double) f);
+        int j1 = MathHelper.floor(d1 + (double) f);
         double d2 = x - d5;
         double d3 = y - d0;
         double d4 = z - d1;
@@ -214,12 +190,10 @@
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
 
-        for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
-        {
+        for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1))) {
             IBlockState iblockstate = world.getBlockState(blockpos.down());
 
-            if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE && world.getLightFromNeighbors(blockpos) > 3)
-            {
+            if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE && world.getLightFromNeighbors(blockpos) > 3) {
                 this.renderShadowSingle(iblockstate, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
             }
         }
@@ -230,46 +204,40 @@
         GlStateManager.depthMask(true);
     }
 
-    private World getWorldFromRenderManager()
-    {
+    private World getWorldFromRenderManager() {
         return this.renderManager.world;
     }
 
-    private void renderShadowSingle(IBlockState state, double p_188299_2_, double p_188299_4_, double p_188299_6_, BlockPos p_188299_8_, float p_188299_9_, float p_188299_10_, double p_188299_11_, double p_188299_13_, double p_188299_15_)
-    {
-        if (state.isFullCube())
-        {
+    private void renderShadowSingle(IBlockState state, double p_188299_2_, double p_188299_4_, double p_188299_6_, BlockPos p_188299_8_, float p_188299_9_, float p_188299_10_, double p_188299_11_, double p_188299_13_, double p_188299_15_) {
+        if (state.isFullCube()) {
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
-            double d0 = ((double)p_188299_9_ - (p_188299_4_ - ((double)p_188299_8_.getY() + p_188299_13_)) / 2.0D) * 0.5D * (double)this.getWorldFromRenderManager().getLightBrightness(p_188299_8_);
+            double d0 = ((double) p_188299_9_ - (p_188299_4_ - ((double) p_188299_8_.getY() + p_188299_13_)) / 2.0D) * 0.5D * (double) this.getWorldFromRenderManager().getLightBrightness(p_188299_8_);
 
-            if (d0 >= 0.0D)
-            {
-                if (d0 > 1.0D)
-                {
+            if (d0 >= 0.0D) {
+                if (d0 > 1.0D) {
                     d0 = 1.0D;
                 }
 
                 AxisAlignedBB axisalignedbb = state.getBoundingBox(this.getWorldFromRenderManager(), p_188299_8_);
-                double d1 = (double)p_188299_8_.getX() + axisalignedbb.minX + p_188299_11_;
-                double d2 = (double)p_188299_8_.getX() + axisalignedbb.maxX + p_188299_11_;
-                double d3 = (double)p_188299_8_.getY() + axisalignedbb.minY + p_188299_13_ + 0.015625D;
-                double d4 = (double)p_188299_8_.getZ() + axisalignedbb.minZ + p_188299_15_;
-                double d5 = (double)p_188299_8_.getZ() + axisalignedbb.maxZ + p_188299_15_;
-                float f = (float)((p_188299_2_ - d1) / 2.0D / (double)p_188299_10_ + 0.5D);
-                float f1 = (float)((p_188299_2_ - d2) / 2.0D / (double)p_188299_10_ + 0.5D);
-                float f2 = (float)((p_188299_6_ - d4) / 2.0D / (double)p_188299_10_ + 0.5D);
-                float f3 = (float)((p_188299_6_ - d5) / 2.0D / (double)p_188299_10_ + 0.5D);
-                bufferbuilder.pos(d1, d3, d4).tex((double)f, (double)f2).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
-                bufferbuilder.pos(d1, d3, d5).tex((double)f, (double)f3).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
-                bufferbuilder.pos(d2, d3, d5).tex((double)f1, (double)f3).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
-                bufferbuilder.pos(d2, d3, d4).tex((double)f1, (double)f2).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
+                double d1 = (double) p_188299_8_.getX() + axisalignedbb.minX + p_188299_11_;
+                double d2 = (double) p_188299_8_.getX() + axisalignedbb.maxX + p_188299_11_;
+                double d3 = (double) p_188299_8_.getY() + axisalignedbb.minY + p_188299_13_ + 0.015625D;
+                double d4 = (double) p_188299_8_.getZ() + axisalignedbb.minZ + p_188299_15_;
+                double d5 = (double) p_188299_8_.getZ() + axisalignedbb.maxZ + p_188299_15_;
+                float f = (float) ((p_188299_2_ - d1) / 2.0D / (double) p_188299_10_ + 0.5D);
+                float f1 = (float) ((p_188299_2_ - d2) / 2.0D / (double) p_188299_10_ + 0.5D);
+                float f2 = (float) ((p_188299_6_ - d4) / 2.0D / (double) p_188299_10_ + 0.5D);
+                float f3 = (float) ((p_188299_6_ - d5) / 2.0D / (double) p_188299_10_ + 0.5D);
+                bufferbuilder.pos(d1, d3, d4).tex((double) f, (double) f2).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
+                bufferbuilder.pos(d1, d3, d5).tex((double) f, (double) f3).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
+                bufferbuilder.pos(d2, d3, d5).tex((double) f1, (double) f3).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
+                bufferbuilder.pos(d2, d3, d4).tex((double) f1, (double) f2).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
             }
         }
     }
 
-    public static void renderOffsetAABB(AxisAlignedBB boundingBox, double x, double y, double z)
-    {
+    public static void renderOffsetAABB(AxisAlignedBB boundingBox, double x, double y, double z) {
         GlStateManager.disableTexture2D();
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
@@ -305,60 +273,49 @@
         GlStateManager.enableTexture2D();
     }
 
-    public void doRenderShadowAndFire(Entity entityIn, double x, double y, double z, float yaw, float partialTicks)
-    {
-        if (this.renderManager.options != null)
-        {
-            if (this.renderManager.options.entityShadows && this.shadowSize > 0.0F && !entityIn.isInvisible() && this.renderManager.isRenderShadow())
-            {
+    public void doRenderShadowAndFire(Entity entityIn, double x, double y, double z, float yaw, float partialTicks) {
+        if (this.renderManager.options != null) {
+            if (this.renderManager.options.entityShadows && this.shadowSize > 0.0F && !entityIn.isInvisible() && this.renderManager.isRenderShadow()) {
                 double d0 = this.renderManager.getDistanceToCamera(entityIn.posX, entityIn.posY, entityIn.posZ);
-                float f = (float)((1.0D - d0 / 256.0D) * (double)this.shadowOpaque);
+                float f = (float) ((1.0D - d0 / 256.0D) * (double) this.shadowOpaque);
 
-                if (f > 0.0F)
-                {
+                if (f > 0.0F) {
                     this.renderShadow(entityIn, x, y, z, f, partialTicks);
                 }
             }
 
-            if (entityIn.canRenderOnFire() && (!(entityIn instanceof EntityPlayer) || !((EntityPlayer)entityIn).isSpectator()))
-            {
+            if (entityIn.canRenderOnFire() && (!(entityIn instanceof EntityPlayer) || !((EntityPlayer) entityIn).isSpectator())) {
                 this.renderEntityOnFire(entityIn, x, y, z, partialTicks);
             }
         }
     }
 
-    public FontRenderer getFontRendererFromRenderManager()
-    {
+    public FontRenderer getFontRendererFromRenderManager() {
         return this.renderManager.getFontRenderer();
     }
 
-    protected void renderLivingLabel(T entityIn, String str, double x, double y, double z, int maxDistance)
-    {
+    protected void renderLivingLabel(T entityIn, String str, double x, double y, double z, int maxDistance) {
         double d0 = entityIn.getDistanceSq(this.renderManager.renderViewEntity);
 
-        if (d0 <= (double)(maxDistance * maxDistance))
-        {
+        if (d0 <= (double) (maxDistance * maxDistance)) {
             boolean flag = entityIn.isSneaking();
             float f = this.renderManager.playerViewY;
             float f1 = this.renderManager.playerViewX;
             boolean flag1 = this.renderManager.options.thirdPersonView == 2;
             float f2 = entityIn.height + 0.5F - (flag ? 0.25F : 0.0F);
             int i = "deadmau5".equals(str) ? -10 : 0;
-            EntityRenderer.drawNameplate(this.getFontRendererFromRenderManager(), str, (float)x, (float)y + f2, (float)z, i, f, f1, flag1, flag);
+            EntityRenderer.drawNameplate(this.getFontRendererFromRenderManager(), str, (float) x, (float) y + f2, (float) z, i, f, f1, flag1, flag);
         }
     }
 
-    public RenderManager getRenderManager()
-    {
+    public RenderManager getRenderManager() {
         return this.renderManager;
     }
 
-    public boolean isMultipass()
-    {
+    public boolean isMultipass() {
         return false;
     }
 
-    public void renderMultipass(T p_188300_1_, double p_188300_2_, double p_188300_4_, double p_188300_6_, float p_188300_8_, float p_188300_9_)
-    {
+    public void renderMultipass(T p_188300_1_, double p_188300_2_, double p_188300_4_, double p_188300_6_, float p_188300_8_, float p_188300_9_) {
     }
 }
