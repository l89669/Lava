--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderLeashKnot.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderLeashKnot.java
@@ -8,37 +8,32 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class RenderLeashKnot extends Render<EntityLeashKnot>
-{
+public class RenderLeashKnot extends Render<EntityLeashKnot> {
     private static final ResourceLocation LEASH_KNOT_TEXTURES = new ResourceLocation("textures/entity/lead_knot.png");
     private final ModelLeashKnot leashKnotModel = new ModelLeashKnot();
 
-    public RenderLeashKnot(RenderManager renderManagerIn)
-    {
+    public RenderLeashKnot(RenderManager renderManagerIn) {
         super(renderManagerIn);
     }
 
-    public void doRender(EntityLeashKnot entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(EntityLeashKnot entity, double x, double y, double z, float entityYaw, float partialTicks) {
         GlStateManager.pushMatrix();
         GlStateManager.disableCull();
-        GlStateManager.translate((float)x, (float)y, (float)z);
+        GlStateManager.translate((float) x, (float) y, (float) z);
         float f = 0.0625F;
         GlStateManager.enableRescaleNormal();
         GlStateManager.scale(-1.0F, -1.0F, 1.0F);
         GlStateManager.enableAlpha();
         this.bindEntityTexture(entity);
 
-        if (this.renderOutlines)
-        {
+        if (this.renderOutlines) {
             GlStateManager.enableColorMaterial();
             GlStateManager.enableOutlineMode(this.getTeamColor(entity));
         }
 
         this.leashKnotModel.render(entity, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F);
 
-        if (this.renderOutlines)
-        {
+        if (this.renderOutlines) {
             GlStateManager.disableOutlineMode();
             GlStateManager.disableColorMaterial();
         }
@@ -47,8 +42,7 @@
         super.doRender(entity, x, y, z, entityYaw, partialTicks);
     }
 
-    protected ResourceLocation getEntityTexture(EntityLeashKnot entity)
-    {
+    protected ResourceLocation getEntityTexture(EntityLeashKnot entity) {
         return LEASH_KNOT_TEXTURES;
     }
 }
