--- ../src-base/minecraft/net/minecraft/client/renderer/debug/DebugRendererSolidFace.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/debug/DebugRendererSolidFace.java
@@ -18,21 +18,18 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class DebugRendererSolidFace implements DebugRenderer.IDebugRenderer
-{
+public class DebugRendererSolidFace implements DebugRenderer.IDebugRenderer {
     private final Minecraft minecraft;
 
-    public DebugRendererSolidFace(Minecraft minecraftIn)
-    {
+    public DebugRendererSolidFace(Minecraft minecraftIn) {
         this.minecraft = minecraftIn;
     }
 
-    public void render(float partialTicks, long finishTimeNano)
-    {
+    public void render(float partialTicks, long finishTimeNano) {
         EntityPlayer entityplayer = this.minecraft.player;
-        double d0 = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * (double)partialTicks;
-        double d1 = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * (double)partialTicks;
-        double d2 = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * (double)partialTicks;
+        double d0 = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * (double) partialTicks;
+        double d1 = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * (double) partialTicks;
+        double d2 = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * (double) partialTicks;
         World world = this.minecraft.player.world;
         Iterable<BlockPos> iterable = BlockPos.getAllInBox(MathHelper.floor(entityplayer.posX - 6.0D), MathHelper.floor(entityplayer.posY - 6.0D), MathHelper.floor(entityplayer.posZ - 6.0D), MathHelper.floor(entityplayer.posX + 6.0D), MathHelper.floor(entityplayer.posY + 6.0D), MathHelper.floor(entityplayer.posZ + 6.0D));
         GlStateManager.enableBlend();
@@ -41,12 +38,10 @@
         GlStateManager.disableTexture2D();
         GlStateManager.depthMask(false);
 
-        for (BlockPos blockpos : iterable)
-        {
+        for (BlockPos blockpos : iterable) {
             IBlockState iblockstate = world.getBlockState(blockpos);
 
-            if (iblockstate.getBlock() != Blocks.AIR)
-            {
+            if (iblockstate.getBlock() != Blocks.AIR) {
                 AxisAlignedBB axisalignedbb = iblockstate.getSelectedBoundingBox(world, blockpos).grow(0.002D).offset(-d0, -d1, -d2);
                 double d3 = axisalignedbb.minX;
                 double d4 = axisalignedbb.minY;
@@ -59,8 +54,7 @@
                 float f2 = 0.0F;
                 float f3 = 0.5F;
 
-                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.WEST) == BlockFaceShape.SOLID)
-                {
+                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.WEST) == BlockFaceShape.SOLID) {
                     Tessellator tessellator = Tessellator.getInstance();
                     BufferBuilder bufferbuilder = tessellator.getBuffer();
                     bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
@@ -71,8 +65,7 @@
                     tessellator.draw();
                 }
 
-                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.SOUTH) == BlockFaceShape.SOLID)
-                {
+                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.SOUTH) == BlockFaceShape.SOLID) {
                     Tessellator tessellator1 = Tessellator.getInstance();
                     BufferBuilder bufferbuilder1 = tessellator1.getBuffer();
                     bufferbuilder1.begin(5, DefaultVertexFormats.POSITION_COLOR);
@@ -83,8 +76,7 @@
                     tessellator1.draw();
                 }
 
-                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.EAST) == BlockFaceShape.SOLID)
-                {
+                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.EAST) == BlockFaceShape.SOLID) {
                     Tessellator tessellator2 = Tessellator.getInstance();
                     BufferBuilder bufferbuilder2 = tessellator2.getBuffer();
                     bufferbuilder2.begin(5, DefaultVertexFormats.POSITION_COLOR);
@@ -95,8 +87,7 @@
                     tessellator2.draw();
                 }
 
-                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.NORTH) == BlockFaceShape.SOLID)
-                {
+                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.NORTH) == BlockFaceShape.SOLID) {
                     Tessellator tessellator3 = Tessellator.getInstance();
                     BufferBuilder bufferbuilder3 = tessellator3.getBuffer();
                     bufferbuilder3.begin(5, DefaultVertexFormats.POSITION_COLOR);
@@ -107,8 +98,7 @@
                     tessellator3.draw();
                 }
 
-                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.DOWN) == BlockFaceShape.SOLID)
-                {
+                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.DOWN) == BlockFaceShape.SOLID) {
                     Tessellator tessellator4 = Tessellator.getInstance();
                     BufferBuilder bufferbuilder4 = tessellator4.getBuffer();
                     bufferbuilder4.begin(5, DefaultVertexFormats.POSITION_COLOR);
@@ -119,8 +109,7 @@
                     tessellator4.draw();
                 }
 
-                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.UP) == BlockFaceShape.SOLID)
-                {
+                if (iblockstate.getBlockFaceShape(world, blockpos, EnumFacing.UP) == BlockFaceShape.SOLID) {
                     Tessellator tessellator5 = Tessellator.getInstance();
                     BufferBuilder bufferbuilder5 = tessellator5.getBuffer();
                     bufferbuilder5.begin(5, DefaultVertexFormats.POSITION_COLOR);
