--- ../src-base/minecraft/net/minecraft/client/renderer/tileentity/TileEntityPistonRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/tileentity/TileEntityPistonRenderer.java
@@ -6,11 +6,7 @@
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.renderer.BlockRendererDispatcher;
-import net.minecraft.client.renderer.BufferBuilder;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.RenderHelper;
-import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.init.Blocks;
@@ -21,19 +17,17 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class TileEntityPistonRenderer extends TileEntitySpecialRenderer<TileEntityPiston>
-{
+public class TileEntityPistonRenderer extends TileEntitySpecialRenderer<TileEntityPiston> {
     private BlockRendererDispatcher blockRenderer;
 
-    public void render(TileEntityPiston te, double x, double y, double z, float partialTicks, int destroyStage, float alpha)
-    {
-        if (blockRenderer == null) blockRenderer = Minecraft.getMinecraft().getBlockRendererDispatcher(); //Forge: Delay this from constructor to allow us to change it later
+    public void render(TileEntityPiston te, double x, double y, double z, float partialTicks, int destroyStage, float alpha) {
+        if (blockRenderer == null)
+            blockRenderer = Minecraft.getMinecraft().getBlockRendererDispatcher(); //Forge: Delay this from constructor to allow us to change it later
         BlockPos blockpos = te.getPos();
         IBlockState iblockstate = te.getPistonState();
         Block block = iblockstate.getBlock();
 
-        if (iblockstate.getMaterial() != Material.AIR && te.getProgress(partialTicks) < 1.0F)
-        {
+        if (iblockstate.getMaterial() != Material.AIR && te.getProgress(partialTicks) < 1.0F) {
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
             this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -42,36 +36,28 @@
             GlStateManager.enableBlend();
             GlStateManager.disableCull();
 
-            if (Minecraft.isAmbientOcclusionEnabled())
-            {
+            if (Minecraft.isAmbientOcclusionEnabled()) {
                 GlStateManager.shadeModel(7425);
-            }
-            else
-            {
+            } else {
                 GlStateManager.shadeModel(7424);
             }
 
             bufferbuilder.begin(7, DefaultVertexFormats.BLOCK);
-            bufferbuilder.setTranslation(x - (double)blockpos.getX() + (double)te.getOffsetX(partialTicks), y - (double)blockpos.getY() + (double)te.getOffsetY(partialTicks), z - (double)blockpos.getZ() + (double)te.getOffsetZ(partialTicks));
+            bufferbuilder.setTranslation(x - (double) blockpos.getX() + (double) te.getOffsetX(partialTicks), y - (double) blockpos.getY() + (double) te.getOffsetY(partialTicks), z - (double) blockpos.getZ() + (double) te.getOffsetZ(partialTicks));
             World world = this.getWorld();
 
-            if (block == Blocks.PISTON_HEAD && te.getProgress(partialTicks) <= 0.25F)
-            {
+            if (block == Blocks.PISTON_HEAD && te.getProgress(partialTicks) <= 0.25F) {
                 iblockstate = iblockstate.withProperty(BlockPistonExtension.SHORT, Boolean.valueOf(true));
                 this.renderStateModel(blockpos, iblockstate, bufferbuilder, world, true);
-            }
-            else if (te.shouldPistonHeadBeRendered() && !te.isExtending())
-            {
+            } else if (te.shouldPistonHeadBeRendered() && !te.isExtending()) {
                 BlockPistonExtension.EnumPistonType blockpistonextension$enumpistontype = block == Blocks.STICKY_PISTON ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT;
                 IBlockState iblockstate1 = Blocks.PISTON_HEAD.getDefaultState().withProperty(BlockPistonExtension.TYPE, blockpistonextension$enumpistontype).withProperty(BlockPistonExtension.FACING, iblockstate.getValue(BlockPistonBase.FACING));
                 iblockstate1 = iblockstate1.withProperty(BlockPistonExtension.SHORT, Boolean.valueOf(te.getProgress(partialTicks) >= 0.5F));
                 this.renderStateModel(blockpos, iblockstate1, bufferbuilder, world, true);
-                bufferbuilder.setTranslation(x - (double)blockpos.getX(), y - (double)blockpos.getY(), z - (double)blockpos.getZ());
+                bufferbuilder.setTranslation(x - (double) blockpos.getX(), y - (double) blockpos.getY(), z - (double) blockpos.getZ());
                 iblockstate = iblockstate.withProperty(BlockPistonBase.EXTENDED, Boolean.valueOf(true));
                 this.renderStateModel(blockpos, iblockstate, bufferbuilder, world, true);
-            }
-            else
-            {
+            } else {
                 this.renderStateModel(blockpos, iblockstate, bufferbuilder, world, false);
             }
 
@@ -81,8 +67,7 @@
         }
     }
 
-    private boolean renderStateModel(BlockPos pos, IBlockState state, BufferBuilder buffer, World p_188186_4_, boolean checkSides)
-    {
+    private boolean renderStateModel(BlockPos pos, IBlockState state, BufferBuilder buffer, World p_188186_4_, boolean checkSides) {
         return this.blockRenderer.getBlockModelRenderer().renderModel(p_188186_4_, this.blockRenderer.getModelForState(state), state, pos, buffer, checkSides);
     }
 }
