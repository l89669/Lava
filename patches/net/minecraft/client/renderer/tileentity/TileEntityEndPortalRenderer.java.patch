--- ../src-base/minecraft/net/minecraft/client/renderer/tileentity/TileEntityEndPortalRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/tileentity/TileEntityEndPortalRenderer.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.renderer.tileentity;
 
-import java.nio.FloatBuffer;
-import java.util.Random;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GLAllocation;
@@ -14,9 +12,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.nio.FloatBuffer;
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class TileEntityEndPortalRenderer extends TileEntitySpecialRenderer<TileEntityEndPortal>
-{
+public class TileEntityEndPortalRenderer extends TileEntitySpecialRenderer<TileEntityEndPortal> {
     private static final ResourceLocation END_SKY_TEXTURE = new ResourceLocation("textures/environment/end_sky.png");
     private static final ResourceLocation END_PORTAL_TEXTURE = new ResourceLocation("textures/entity/end_portal.png");
     private static final Random RANDOM = new Random(31100L);
@@ -24,8 +24,7 @@
     private static final FloatBuffer PROJECTION = GLAllocation.createDirectFloatBuffer(16);
     private final FloatBuffer buffer = GLAllocation.createDirectFloatBuffer(16);
 
-    public void render(TileEntityEndPortal te, double x, double y, double z, float partialTicks, int destroyStage, float alpha)
-    {
+    public void render(TileEntityEndPortal te, double x, double y, double z, float partialTicks, int destroyStage, float alpha) {
         GlStateManager.disableLighting();
         RANDOM.setSeed(31100L);
         GlStateManager.getFloat(2982, MODELVIEW);
@@ -35,28 +34,24 @@
         float f = this.getOffset();
         boolean flag = false;
 
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
             GlStateManager.pushMatrix();
-            float f1 = 2.0F / (float)(18 - j);
+            float f1 = 2.0F / (float) (18 - j);
 
-            if (j == 0)
-            {
+            if (j == 0) {
                 this.bindTexture(END_SKY_TEXTURE);
                 f1 = 0.15F;
                 GlStateManager.enableBlend();
                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
             }
 
-            if (j >= 1)
-            {
+            if (j >= 1) {
                 this.bindTexture(END_PORTAL_TEXTURE);
                 flag = true;
                 Minecraft.getMinecraft().entityRenderer.setupFogColor(true);
             }
 
-            if (j == 1)
-            {
+            if (j == 1) {
                 GlStateManager.enableBlend();
                 GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
             }
@@ -76,8 +71,8 @@
             GlStateManager.loadIdentity();
             GlStateManager.translate(0.5F, 0.5F, 0.0F);
             GlStateManager.scale(0.5F, 0.5F, 1.0F);
-            float f2 = (float)(j + 1);
-            GlStateManager.translate(17.0F / f2, (2.0F + f2 / 1.5F) * ((float)Minecraft.getSystemTime() % 800000.0F / 800000.0F), 0.0F);
+            float f2 = (float) (j + 1);
+            GlStateManager.translate(17.0F / f2, (2.0F + f2 / 1.5F) * ((float) Minecraft.getSystemTime() % 800000.0F / 800000.0F), 0.0F);
             GlStateManager.rotate((f2 * f2 * 4321.0F + f2 * 9.0F) * 2.0F, 0.0F, 0.0F, 1.0F);
             GlStateManager.scale(4.5F - f2 / 4.0F, 4.5F - f2 / 4.0F, 1.0F);
             GlStateManager.multMatrix(PROJECTION);
@@ -89,52 +84,46 @@
             float f4 = (RANDOM.nextFloat() * 0.5F + 0.4F) * f1;
             float f5 = (RANDOM.nextFloat() * 0.5F + 0.5F) * f1;
 
-            if (te.shouldRenderFace(EnumFacing.SOUTH))
-            {
+            if (te.shouldRenderFace(EnumFacing.SOUTH)) {
                 bufferbuilder.pos(x, y, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y + 1.0D, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x, y + 1.0D, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
             }
 
-            if (te.shouldRenderFace(EnumFacing.NORTH))
-            {
+            if (te.shouldRenderFace(EnumFacing.NORTH)) {
                 bufferbuilder.pos(x, y + 1.0D, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y + 1.0D, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x, y, z).color(f3, f4, f5, 1.0F).endVertex();
             }
 
-            if (te.shouldRenderFace(EnumFacing.EAST))
-            {
+            if (te.shouldRenderFace(EnumFacing.EAST)) {
                 bufferbuilder.pos(x + 1.0D, y + 1.0D, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y + 1.0D, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y, z).color(f3, f4, f5, 1.0F).endVertex();
             }
 
-            if (te.shouldRenderFace(EnumFacing.WEST))
-            {
+            if (te.shouldRenderFace(EnumFacing.WEST)) {
                 bufferbuilder.pos(x, y, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x, y, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x, y + 1.0D, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x, y + 1.0D, z).color(f3, f4, f5, 1.0F).endVertex();
             }
 
-            if (te.shouldRenderFace(EnumFacing.DOWN))
-            {
+            if (te.shouldRenderFace(EnumFacing.DOWN)) {
                 bufferbuilder.pos(x, y, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y, z).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x + 1.0D, y, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
                 bufferbuilder.pos(x, y, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
             }
 
-            if (te.shouldRenderFace(EnumFacing.UP))
-            {
-                bufferbuilder.pos(x, y + (double)f, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                bufferbuilder.pos(x + 1.0D, y + (double)f, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                bufferbuilder.pos(x + 1.0D, y + (double)f, z).color(f3, f4, f5, 1.0F).endVertex();
-                bufferbuilder.pos(x, y + (double)f, z).color(f3, f4, f5, 1.0F).endVertex();
+            if (te.shouldRenderFace(EnumFacing.UP)) {
+                bufferbuilder.pos(x, y + (double) f, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
+                bufferbuilder.pos(x + 1.0D, y + (double) f, z + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
+                bufferbuilder.pos(x + 1.0D, y + (double) f, z).color(f3, f4, f5, 1.0F).endVertex();
+                bufferbuilder.pos(x, y + (double) f, z).color(f3, f4, f5, 1.0F).endVertex();
             }
 
             tessellator.draw();
@@ -149,63 +138,42 @@
         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.R);
         GlStateManager.enableLighting();
 
-        if (flag)
-        {
+        if (flag) {
             Minecraft.getMinecraft().entityRenderer.setupFogColor(false);
         }
     }
 
-    protected int getPasses(double p_191286_1_)
-    {
+    protected int getPasses(double p_191286_1_) {
         int i;
 
-        if (p_191286_1_ > 36864.0D)
-        {
+        if (p_191286_1_ > 36864.0D) {
             i = 1;
-        }
-        else if (p_191286_1_ > 25600.0D)
-        {
+        } else if (p_191286_1_ > 25600.0D) {
             i = 3;
-        }
-        else if (p_191286_1_ > 16384.0D)
-        {
+        } else if (p_191286_1_ > 16384.0D) {
             i = 5;
-        }
-        else if (p_191286_1_ > 9216.0D)
-        {
+        } else if (p_191286_1_ > 9216.0D) {
             i = 7;
-        }
-        else if (p_191286_1_ > 4096.0D)
-        {
+        } else if (p_191286_1_ > 4096.0D) {
             i = 9;
-        }
-        else if (p_191286_1_ > 1024.0D)
-        {
+        } else if (p_191286_1_ > 1024.0D) {
             i = 11;
-        }
-        else if (p_191286_1_ > 576.0D)
-        {
+        } else if (p_191286_1_ > 576.0D) {
             i = 13;
-        }
-        else if (p_191286_1_ > 256.0D)
-        {
+        } else if (p_191286_1_ > 256.0D) {
             i = 14;
-        }
-        else
-        {
+        } else {
             i = 15;
         }
 
         return i;
     }
 
-    protected float getOffset()
-    {
+    protected float getOffset() {
         return 0.75F;
     }
 
-    private FloatBuffer getBuffer(float p_147525_1_, float p_147525_2_, float p_147525_3_, float p_147525_4_)
-    {
+    private FloatBuffer getBuffer(float p_147525_1_, float p_147525_2_, float p_147525_3_, float p_147525_4_) {
         this.buffer.clear();
         this.buffer.put(p_147525_1_).put(p_147525_2_).put(p_147525_3_).put(p_147525_4_);
         this.buffer.flip();
