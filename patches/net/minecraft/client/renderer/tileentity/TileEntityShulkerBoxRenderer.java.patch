--- ../src-base/minecraft/net/minecraft/client/renderer/tileentity/TileEntityShulkerBoxRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/tileentity/TileEntityShulkerBoxRenderer.java
@@ -11,26 +11,21 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class TileEntityShulkerBoxRenderer extends TileEntitySpecialRenderer<TileEntityShulkerBox>
-{
+public class TileEntityShulkerBoxRenderer extends TileEntitySpecialRenderer<TileEntityShulkerBox> {
     private final ModelShulker model;
 
-    public TileEntityShulkerBoxRenderer(ModelShulker modelIn)
-    {
+    public TileEntityShulkerBoxRenderer(ModelShulker modelIn) {
         this.model = modelIn;
     }
 
-    public void render(TileEntityShulkerBox te, double x, double y, double z, float partialTicks, int destroyStage, float alpha)
-    {
+    public void render(TileEntityShulkerBox te, double x, double y, double z, float partialTicks, int destroyStage, float alpha) {
         EnumFacing enumfacing = EnumFacing.UP;
 
-        if (te.hasWorld())
-        {
+        if (te.hasWorld()) {
             IBlockState iblockstate = this.getWorld().getBlockState(te.getPos());
 
-            if (iblockstate.getBlock() instanceof BlockShulkerBox)
-            {
-                enumfacing = (EnumFacing)iblockstate.getValue(BlockShulkerBox.FACING);
+            if (iblockstate.getBlock() instanceof BlockShulkerBox) {
+                enumfacing = (EnumFacing) iblockstate.getValue(BlockShulkerBox.FACING);
             }
         }
 
@@ -39,37 +34,32 @@
         GlStateManager.depthMask(true);
         GlStateManager.disableCull();
 
-        if (destroyStage >= 0)
-        {
+        if (destroyStage >= 0) {
             this.bindTexture(DESTROY_STAGES[destroyStage]);
             GlStateManager.matrixMode(5890);
             GlStateManager.pushMatrix();
             GlStateManager.scale(4.0F, 4.0F, 1.0F);
             GlStateManager.translate(0.0625F, 0.0625F, 0.0625F);
             GlStateManager.matrixMode(5888);
-        }
-        else
-        {
+        } else {
             this.bindTexture(RenderShulker.SHULKER_ENDERGOLEM_TEXTURE[te.getColor().getMetadata()]);
         }
 
         GlStateManager.pushMatrix();
         GlStateManager.enableRescaleNormal();
 
-        if (destroyStage < 0)
-        {
+        if (destroyStage < 0) {
             GlStateManager.color(1.0F, 1.0F, 1.0F, alpha);
         }
 
-        GlStateManager.translate((float)x + 0.5F, (float)y + 1.5F, (float)z + 0.5F);
+        GlStateManager.translate((float) x + 0.5F, (float) y + 1.5F, (float) z + 0.5F);
         GlStateManager.scale(1.0F, -1.0F, -1.0F);
         GlStateManager.translate(0.0F, 1.0F, 0.0F);
         float f = 0.9995F;
         GlStateManager.scale(0.9995F, 0.9995F, 0.9995F);
         GlStateManager.translate(0.0F, -1.0F, 0.0F);
 
-        switch (enumfacing)
-        {
+        switch (enumfacing) {
             case DOWN:
                 GlStateManager.translate(0.0F, 2.0F, 0.0F);
                 GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
@@ -105,8 +95,7 @@
         GlStateManager.popMatrix();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
 
-        if (destroyStage >= 0)
-        {
+        if (destroyStage >= 0) {
             GlStateManager.matrixMode(5890);
             GlStateManager.popMatrix();
             GlStateManager.matrixMode(5888);
