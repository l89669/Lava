--- ../src-base/minecraft/net/minecraft/client/renderer/BlockRendererDispatcher.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/BlockRendererDispatcher.java
@@ -2,7 +2,6 @@
 
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.block.model.IBakedModel;
-import net.minecraft.client.renderer.block.model.SimpleBakedModel;
 import net.minecraft.client.renderer.color.BlockColors;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.resources.IResourceManager;
@@ -18,29 +17,24 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class BlockRendererDispatcher implements IResourceManagerReloadListener
-{
+public class BlockRendererDispatcher implements IResourceManagerReloadListener {
     private final BlockModelShapes blockModelShapes;
     private final BlockModelRenderer blockModelRenderer;
     private final ChestRenderer chestRenderer = new ChestRenderer();
     private final BlockFluidRenderer fluidRenderer;
 
-    public BlockRendererDispatcher(BlockModelShapes p_i46577_1_, BlockColors p_i46577_2_)
-    {
+    public BlockRendererDispatcher(BlockModelShapes p_i46577_1_, BlockColors p_i46577_2_) {
         this.blockModelShapes = p_i46577_1_;
         this.blockModelRenderer = new net.minecraftforge.client.model.pipeline.ForgeBlockModelRenderer(p_i46577_2_);
         this.fluidRenderer = new BlockFluidRenderer(p_i46577_2_);
     }
 
-    public BlockModelShapes getBlockModelShapes()
-    {
+    public BlockModelShapes getBlockModelShapes() {
         return this.blockModelShapes;
     }
 
-    public void renderBlockDamage(IBlockState state, BlockPos pos, TextureAtlasSprite texture, IBlockAccess blockAccess)
-    {
-        if (state.getRenderType() == EnumBlockRenderType.MODEL)
-        {
+    public void renderBlockDamage(IBlockState state, BlockPos pos, TextureAtlasSprite texture, IBlockAccess blockAccess) {
+        if (state.getRenderType() == EnumBlockRenderType.MODEL) {
             state = state.getActualState(blockAccess, pos);
             IBakedModel ibakedmodel = this.blockModelShapes.getModelForState(state);
             IBakedModel ibakedmodel1 = net.minecraftforge.client.ForgeHooksClient.getDamageModel(ibakedmodel, texture, state, blockAccess, pos);
@@ -48,32 +42,22 @@
         }
     }
 
-    public boolean renderBlock(IBlockState state, BlockPos pos, IBlockAccess blockAccess, BufferBuilder bufferBuilderIn)
-    {
-        try
-        {
+    public boolean renderBlock(IBlockState state, BlockPos pos, IBlockAccess blockAccess, BufferBuilder bufferBuilderIn) {
+        try {
             EnumBlockRenderType enumblockrendertype = state.getRenderType();
 
-            if (enumblockrendertype == EnumBlockRenderType.INVISIBLE)
-            {
+            if (enumblockrendertype == EnumBlockRenderType.INVISIBLE) {
                 return false;
-            }
-            else
-            {
-                if (blockAccess.getWorldType() != WorldType.DEBUG_ALL_BLOCK_STATES)
-                {
-                    try
-                    {
+            } else {
+                if (blockAccess.getWorldType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
+                    try {
                         state = state.getActualState(blockAccess, pos);
-                    }
-                    catch (Exception var8)
-                    {
+                    } catch (Exception var8) {
                         ;
                     }
                 }
 
-                switch (enumblockrendertype)
-                {
+                switch (enumblockrendertype) {
                     case MODEL:
                         IBakedModel model = this.getModelForState(state);
                         state = state.getBlock().getExtendedState(state, blockAccess, pos);
@@ -86,9 +70,7 @@
                         return false;
                 }
             }
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Tesselating block in world");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Block being tesselated");
             CrashReportCategory.addBlockInfo(crashreportcategory, pos, state.getBlock(), state.getBlock().getMetaFromState(state));
@@ -96,25 +78,20 @@
         }
     }
 
-    public BlockModelRenderer getBlockModelRenderer()
-    {
+    public BlockModelRenderer getBlockModelRenderer() {
         return this.blockModelRenderer;
     }
 
-    public IBakedModel getModelForState(IBlockState state)
-    {
+    public IBakedModel getModelForState(IBlockState state) {
         return this.blockModelShapes.getModelForState(state);
     }
 
     @SuppressWarnings("incomplete-switch")
-    public void renderBlockBrightness(IBlockState state, float brightness)
-    {
+    public void renderBlockBrightness(IBlockState state, float brightness) {
         EnumBlockRenderType enumblockrendertype = state.getRenderType();
 
-        if (enumblockrendertype != EnumBlockRenderType.INVISIBLE)
-        {
-            switch (enumblockrendertype)
-            {
+        if (enumblockrendertype != EnumBlockRenderType.INVISIBLE) {
+            switch (enumblockrendertype) {
                 case MODEL:
                     IBakedModel ibakedmodel = this.getModelForState(state);
                     this.blockModelRenderer.renderModelBrightness(ibakedmodel, state, brightness, true);
@@ -126,8 +103,7 @@
         }
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         this.fluidRenderer.initAtlasSprites();
     }
 }
