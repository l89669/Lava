--- ../src-base/minecraft/net/minecraft/client/renderer/EntityRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/EntityRenderer.java
@@ -3,6 +3,7 @@
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
+
 import java.awt.Graphics;
 import java.awt.image.BufferedImage;
 import java.awt.image.ImageObserver;
@@ -12,6 +13,7 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -77,8 +79,7 @@
 import org.lwjgl.util.glu.Project;
 
 @SideOnly(Side.CLIENT)
-public class EntityRenderer implements IResourceManagerReloadListener
-{
+public class EntityRenderer implements IResourceManagerReloadListener {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ResourceLocation RAIN_TEXTURES = new ResourceLocation("textures/environment/rain.png");
     private static final ResourceLocation SNOW_TEXTURES = new ResourceLocation("textures/environment/snow.png");
@@ -136,14 +137,13 @@
     private float itemActivationOffX;
     private float itemActivationOffY;
     private ShaderGroup shaderGroup;
-    private static final ResourceLocation[] SHADERS_TEXTURES = new ResourceLocation[] {new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json"), new ResourceLocation("shaders/post/creeper.json"), new ResourceLocation("shaders/post/spider.json")};
+    private static final ResourceLocation[] SHADERS_TEXTURES = new ResourceLocation[]{new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json"), new ResourceLocation("shaders/post/creeper.json"), new ResourceLocation("shaders/post/spider.json")};
     public static final int SHADER_COUNT = SHADERS_TEXTURES.length;
     private int shaderIndex;
     private boolean useShader;
     private int frameCount;
 
-    public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn)
-    {
+    public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn) {
         this.shaderIndex = SHADER_COUNT;
         this.mc = mcIn;
         this.resourceManager = resourceManagerIn;
@@ -154,12 +154,10 @@
         this.lightmapColors = this.lightmapTexture.getTextureData();
         this.shaderGroup = null;
 
-        for (int i = 0; i < 32; ++i)
-        {
-            for (int j = 0; j < 32; ++j)
-            {
-                float f = (float)(j - 16);
-                float f1 = (float)(i - 16);
+        for (int i = 0; i < 32; ++i) {
+            for (int j = 0; j < 32; ++j) {
+                float f = (float) (j - 16);
+                float f1 = (float) (i - 16);
                 float f2 = MathHelper.sqrt(f * f + f1 * f1);
                 this.rainXCoords[i << 5 | j] = -f1 / f2;
                 this.rainYCoords[i << 5 | j] = f / f2;
@@ -167,15 +165,12 @@
         }
     }
 
-    public boolean isShaderActive()
-    {
+    public boolean isShaderActive() {
         return OpenGlHelper.shadersSupported && this.shaderGroup != null;
     }
 
-    public void stopUseShader()
-    {
-        if (this.shaderGroup != null)
-        {
+    public void stopUseShader() {
+        if (this.shaderGroup != null) {
             this.shaderGroup.deleteShaderGroup();
         }
 
@@ -183,83 +178,56 @@
         this.shaderIndex = SHADER_COUNT;
     }
 
-    public void switchUseShader()
-    {
+    public void switchUseShader() {
         this.useShader = !this.useShader;
     }
 
-    public void loadEntityShader(@Nullable Entity entityIn)
-    {
-        if (OpenGlHelper.shadersSupported)
-        {
-            if (this.shaderGroup != null)
-            {
+    public void loadEntityShader(@Nullable Entity entityIn) {
+        if (OpenGlHelper.shadersSupported) {
+            if (this.shaderGroup != null) {
                 this.shaderGroup.deleteShaderGroup();
             }
 
             this.shaderGroup = null;
 
-            if (entityIn instanceof EntityCreeper)
-            {
+            if (entityIn instanceof EntityCreeper) {
                 this.loadShader(new ResourceLocation("shaders/post/creeper.json"));
-            }
-            else if (entityIn instanceof EntitySpider)
-            {
+            } else if (entityIn instanceof EntitySpider) {
                 this.loadShader(new ResourceLocation("shaders/post/spider.json"));
-            }
-            else if (entityIn instanceof EntityEnderman)
-            {
+            } else if (entityIn instanceof EntityEnderman) {
                 this.loadShader(new ResourceLocation("shaders/post/invert.json"));
-            }
-            else net.minecraftforge.client.ForgeHooksClient.loadEntityShader(entityIn, this);
+            } else net.minecraftforge.client.ForgeHooksClient.loadEntityShader(entityIn, this);
         }
     }
 
-    public void loadShader(ResourceLocation resourceLocationIn)
-    {
-        try
-        {
+    public void loadShader(ResourceLocation resourceLocationIn) {
+        try {
             this.shaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
             this.shaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
             this.useShader = true;
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException | JsonSyntaxException ioexception) {
             LOGGER.warn("Failed to load shader: {}", resourceLocationIn, ioexception);
             this.shaderIndex = SHADER_COUNT;
             this.useShader = false;
         }
-        catch (JsonSyntaxException jsonsyntaxexception)
-        {
-            LOGGER.warn("Failed to load shader: {}", resourceLocationIn, jsonsyntaxexception);
-            this.shaderIndex = SHADER_COUNT;
-            this.useShader = false;
-        }
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
-        if (this.shaderGroup != null)
-        {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
+        if (this.shaderGroup != null) {
             this.shaderGroup.deleteShaderGroup();
         }
 
         this.shaderGroup = null;
 
-        if (this.shaderIndex == SHADER_COUNT)
-        {
+        if (this.shaderIndex == SHADER_COUNT) {
             this.loadEntityShader(this.mc.getRenderViewEntity());
-        }
-        else
-        {
+        } else {
             this.loadShader(SHADERS_TEXTURES[this.shaderIndex]);
         }
     }
 
-    public void updateRenderer()
-    {
-        if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null)
-        {
+    public void updateRenderer() {
+        if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null) {
             ShaderLinkHelper.setNewStaticShaderLinkHelper();
         }
 
@@ -268,8 +236,7 @@
         this.fogColor2 = this.fogColor1;
         this.thirdPersonDistancePrev = 4.0F;
 
-        if (this.mc.gameSettings.smoothCamera)
-        {
+        if (this.mc.gameSettings.smoothCamera) {
             float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
             float f1 = f * f * f * 8.0F;
             this.smoothCamFilterX = this.mouseFilterXAxis.smooth(this.smoothCamYaw, 0.05F * f1);
@@ -277,22 +244,19 @@
             this.smoothCamPartialTicks = 0.0F;
             this.smoothCamYaw = 0.0F;
             this.smoothCamPitch = 0.0F;
-        }
-        else
-        {
+        } else {
             this.smoothCamFilterX = 0.0F;
             this.smoothCamFilterY = 0.0F;
             this.mouseFilterXAxis.reset();
             this.mouseFilterYAxis.reset();
         }
 
-        if (this.mc.getRenderViewEntity() == null)
-        {
+        if (this.mc.getRenderViewEntity() == null) {
             this.mc.setRenderViewEntity(this.mc.player);
         }
 
         float f3 = this.mc.world.getLightBrightness(new BlockPos(this.mc.getRenderViewEntity().getPositionEyes(1F))); // Forge: fix MC-51150
-        float f4 = (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
+        float f4 = (float) this.mc.gameSettings.renderDistanceChunks / 32.0F;
         float f2 = f3 * (1.0F - f4) + f4;
         this.fogColor1 += (f2 - this.fogColor1) * 0.1F;
         ++this.rendererUpdateCount;
@@ -300,42 +264,32 @@
         this.addRainParticles();
         this.bossColorModifierPrev = this.bossColorModifier;
 
-        if (this.mc.ingameGUI.getBossOverlay().shouldDarkenSky())
-        {
+        if (this.mc.ingameGUI.getBossOverlay().shouldDarkenSky()) {
             this.bossColorModifier += 0.05F;
 
-            if (this.bossColorModifier > 1.0F)
-            {
+            if (this.bossColorModifier > 1.0F) {
                 this.bossColorModifier = 1.0F;
             }
-        }
-        else if (this.bossColorModifier > 0.0F)
-        {
+        } else if (this.bossColorModifier > 0.0F) {
             this.bossColorModifier -= 0.0125F;
         }
 
-        if (this.itemActivationTicks > 0)
-        {
+        if (this.itemActivationTicks > 0) {
             --this.itemActivationTicks;
 
-            if (this.itemActivationTicks == 0)
-            {
+            if (this.itemActivationTicks == 0) {
                 this.itemActivationItem = null;
             }
         }
     }
 
-    public ShaderGroup getShaderGroup()
-    {
+    public ShaderGroup getShaderGroup() {
         return this.shaderGroup;
     }
 
-    public void updateShaderGroupSize(int width, int height)
-    {
-        if (OpenGlHelper.shadersSupported)
-        {
-            if (this.shaderGroup != null)
-            {
+    public void updateShaderGroupSize(int width, int height) {
+        if (OpenGlHelper.shadersSupported) {
+            if (this.shaderGroup != null) {
                 this.shaderGroup.createBindFramebuffers(width, height);
             }
 
@@ -343,38 +297,30 @@
         }
     }
 
-    public void getMouseOver(float partialTicks)
-    {
+    public void getMouseOver(float partialTicks) {
         Entity entity = this.mc.getRenderViewEntity();
 
-        if (entity != null)
-        {
-            if (this.mc.world != null)
-            {
+        if (entity != null) {
+            if (this.mc.world != null) {
                 this.mc.mcProfiler.startSection("pick");
                 this.mc.pointedEntity = null;
-                double d0 = (double)this.mc.playerController.getBlockReachDistance();
+                double d0 = this.mc.playerController.getBlockReachDistance();
                 this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
                 Vec3d vec3d = entity.getPositionEyes(partialTicks);
                 boolean flag = false;
                 int i = 3;
                 double d1 = d0;
 
-                if (this.mc.playerController.extendedReach())
-                {
+                if (this.mc.playerController.extendedReach()) {
                     d1 = 6.0D;
                     d0 = d1;
-                }
-                else
-                {
-                    if (d0 > 3.0D)
-                    {
+                } else {
+                    if (d0 > 3.0D) {
                         flag = true;
                     }
                 }
 
-                if (this.mc.objectMouseOver != null)
-                {
+                if (this.mc.objectMouseOver != null) {
                     d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3d);
                 }
 
@@ -383,46 +329,34 @@
                 this.pointedEntity = null;
                 Vec3d vec3d3 = null;
                 float f = 1.0F;
-                List<Entity> list = this.mc.world.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().expand(vec3d1.x * d0, vec3d1.y * d0, vec3d1.z * d0).grow(1.0D, 1.0D, 1.0D), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
-                {
-                    public boolean apply(@Nullable Entity p_apply_1_)
-                    {
+                List<Entity> list = this.mc.world.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().expand(vec3d1.x * d0, vec3d1.y * d0, vec3d1.z * d0).grow(1.0D, 1.0D, 1.0D), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>() {
+                    public boolean apply(@Nullable Entity p_apply_1_) {
                         return p_apply_1_ != null && p_apply_1_.canBeCollidedWith();
                     }
                 }));
                 double d2 = d1;
 
-                for (int j = 0; j < list.size(); ++j)
-                {
+                for (int j = 0; j < list.size(); ++j) {
                     Entity entity1 = list.get(j);
-                    AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow((double)entity1.getCollisionBorderSize());
+                    AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow(entity1.getCollisionBorderSize());
                     RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(vec3d, vec3d2);
 
-                    if (axisalignedbb.contains(vec3d))
-                    {
-                        if (d2 >= 0.0D)
-                        {
+                    if (axisalignedbb.contains(vec3d)) {
+                        if (d2 >= 0.0D) {
                             this.pointedEntity = entity1;
                             vec3d3 = raytraceresult == null ? vec3d : raytraceresult.hitVec;
                             d2 = 0.0D;
                         }
-                    }
-                    else if (raytraceresult != null)
-                    {
+                    } else if (raytraceresult != null) {
                         double d3 = vec3d.distanceTo(raytraceresult.hitVec);
 
-                        if (d3 < d2 || d2 == 0.0D)
-                        {
-                            if (entity1.getLowestRidingEntity() == entity.getLowestRidingEntity() && !entity1.canRiderInteract())
-                            {
-                                if (d2 == 0.0D)
-                                {
+                        if (d3 < d2 || d2 == 0.0D) {
+                            if (entity1.getLowestRidingEntity() == entity.getLowestRidingEntity() && !entity1.canRiderInteract()) {
+                                if (d2 == 0.0D) {
                                     this.pointedEntity = entity1;
                                     vec3d3 = raytraceresult.hitVec;
                                 }
-                            }
-                            else
-                            {
+                            } else {
                                 this.pointedEntity = entity1;
                                 vec3d3 = raytraceresult.hitVec;
                                 d2 = d3;
@@ -431,18 +365,15 @@
                     }
                 }
 
-                if (this.pointedEntity != null && flag && vec3d.distanceTo(vec3d3) > 3.0D)
-                {
+                if (this.pointedEntity != null && flag && vec3d.distanceTo(vec3d3) > 3.0D) {
                     this.pointedEntity = null;
-                    this.mc.objectMouseOver = new RayTraceResult(RayTraceResult.Type.MISS, vec3d3, (EnumFacing)null, new BlockPos(vec3d3));
+                    this.mc.objectMouseOver = new RayTraceResult(RayTraceResult.Type.MISS, vec3d3, null, new BlockPos(vec3d3));
                 }
 
-                if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
-                {
+                if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null)) {
                     this.mc.objectMouseOver = new RayTraceResult(this.pointedEntity, vec3d3);
 
-                    if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
-                    {
+                    if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame) {
                         this.mc.pointedEntity = this.pointedEntity;
                     }
                 }
@@ -452,57 +383,46 @@
         }
     }
 
-    private void updateFovModifierHand()
-    {
+    private void updateFovModifierHand() {
         float f = 1.0F;
 
-        if (this.mc.getRenderViewEntity() instanceof AbstractClientPlayer)
-        {
-            AbstractClientPlayer abstractclientplayer = (AbstractClientPlayer)this.mc.getRenderViewEntity();
+        if (this.mc.getRenderViewEntity() instanceof AbstractClientPlayer) {
+            AbstractClientPlayer abstractclientplayer = (AbstractClientPlayer) this.mc.getRenderViewEntity();
             f = abstractclientplayer.getFovModifier();
         }
 
         this.fovModifierHandPrev = this.fovModifierHand;
         this.fovModifierHand += (f - this.fovModifierHand) * 0.5F;
 
-        if (this.fovModifierHand > 1.5F)
-        {
+        if (this.fovModifierHand > 1.5F) {
             this.fovModifierHand = 1.5F;
         }
 
-        if (this.fovModifierHand < 0.1F)
-        {
+        if (this.fovModifierHand < 0.1F) {
             this.fovModifierHand = 0.1F;
         }
     }
 
-    private float getFOVModifier(float partialTicks, boolean useFOVSetting)
-    {
-        if (this.debugView)
-        {
+    private float getFOVModifier(float partialTicks, boolean useFOVSetting) {
+        if (this.debugView) {
             return 90.0F;
-        }
-        else
-        {
+        } else {
             Entity entity = this.mc.getRenderViewEntity();
             float f = 70.0F;
 
-            if (useFOVSetting)
-            {
+            if (useFOVSetting) {
                 f = this.mc.gameSettings.fovSetting;
                 f = f * (this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks);
             }
 
-            if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F)
-            {
-                float f1 = (float)((EntityLivingBase)entity).deathTime + partialTicks;
+            if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).getHealth() <= 0.0F) {
+                float f1 = (float) ((EntityLivingBase) entity).deathTime + partialTicks;
                 f /= (1.0F - 500.0F / (f1 + 500.0F)) * 2.0F + 1.0F;
             }
 
             IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
 
-            if (iblockstate.getMaterial() == Material.WATER)
-            {
+            if (iblockstate.getMaterial() == Material.WATER) {
                 f = f * 60.0F / 70.0F;
             }
 
@@ -510,26 +430,22 @@
         }
     }
 
-    private void hurtCameraEffect(float partialTicks)
-    {
-        if (this.mc.getRenderViewEntity() instanceof EntityLivingBase)
-        {
-            EntityLivingBase entitylivingbase = (EntityLivingBase)this.mc.getRenderViewEntity();
-            float f = (float)entitylivingbase.hurtTime - partialTicks;
+    private void hurtCameraEffect(float partialTicks) {
+        if (this.mc.getRenderViewEntity() instanceof EntityLivingBase) {
+            EntityLivingBase entitylivingbase = (EntityLivingBase) this.mc.getRenderViewEntity();
+            float f = (float) entitylivingbase.hurtTime - partialTicks;
 
-            if (entitylivingbase.getHealth() <= 0.0F)
-            {
-                float f1 = (float)entitylivingbase.deathTime + partialTicks;
+            if (entitylivingbase.getHealth() <= 0.0F) {
+                float f1 = (float) entitylivingbase.deathTime + partialTicks;
                 GlStateManager.rotate(40.0F - 8000.0F / (f1 + 200.0F), 0.0F, 0.0F, 1.0F);
             }
 
-            if (f < 0.0F)
-            {
+            if (f < 0.0F) {
                 return;
             }
 
-            f = f / (float)entitylivingbase.maxHurtTime;
-            f = MathHelper.sin(f * f * f * f * (float)Math.PI);
+            f = f / (float) entitylivingbase.maxHurtTime;
+            f = MathHelper.sin(f * f * f * f * (float) Math.PI);
             float f2 = entitylivingbase.attackedAtYaw;
             GlStateManager.rotate(-f2, 0.0F, 1.0F, 0.0F);
             GlStateManager.rotate(-f * 14.0F, 0.0F, 0.0F, 1.0F);
@@ -537,37 +453,32 @@
         }
     }
 
-    private void applyBobbing(float partialTicks)
-    {
-        if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
-        {
-            EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();
+    private void applyBobbing(float partialTicks) {
+        if (this.mc.getRenderViewEntity() instanceof EntityPlayer) {
+            EntityPlayer entityplayer = (EntityPlayer) this.mc.getRenderViewEntity();
             float f = entityplayer.distanceWalkedModified - entityplayer.prevDistanceWalkedModified;
             float f1 = -(entityplayer.distanceWalkedModified + f * partialTicks);
             float f2 = entityplayer.prevCameraYaw + (entityplayer.cameraYaw - entityplayer.prevCameraYaw) * partialTicks;
             float f3 = entityplayer.prevCameraPitch + (entityplayer.cameraPitch - entityplayer.prevCameraPitch) * partialTicks;
-            GlStateManager.translate(MathHelper.sin(f1 * (float)Math.PI) * f2 * 0.5F, -Math.abs(MathHelper.cos(f1 * (float)Math.PI) * f2), 0.0F);
-            GlStateManager.rotate(MathHelper.sin(f1 * (float)Math.PI) * f2 * 3.0F, 0.0F, 0.0F, 1.0F);
-            GlStateManager.rotate(Math.abs(MathHelper.cos(f1 * (float)Math.PI - 0.2F) * f2) * 5.0F, 1.0F, 0.0F, 0.0F);
+            GlStateManager.translate(MathHelper.sin(f1 * (float) Math.PI) * f2 * 0.5F, -Math.abs(MathHelper.cos(f1 * (float) Math.PI) * f2), 0.0F);
+            GlStateManager.rotate(MathHelper.sin(f1 * (float) Math.PI) * f2 * 3.0F, 0.0F, 0.0F, 1.0F);
+            GlStateManager.rotate(Math.abs(MathHelper.cos(f1 * (float) Math.PI - 0.2F) * f2) * 5.0F, 1.0F, 0.0F, 0.0F);
             GlStateManager.rotate(f3, 1.0F, 0.0F, 0.0F);
         }
     }
 
-    private void orientCamera(float partialTicks)
-    {
+    private void orientCamera(float partialTicks) {
         Entity entity = this.mc.getRenderViewEntity();
         float f = entity.getEyeHeight();
-        double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-        double d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + (double)f;
-        double d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
+        double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double) partialTicks;
+        double d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double) partialTicks + (double) f;
+        double d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double) partialTicks;
 
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPlayerSleeping())
-        {
-            f = (float)((double)f + 1.0D);
+        if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPlayerSleeping()) {
+            f = (float) ((double) f + 1.0D);
             GlStateManager.translate(0.0F, 0.3F, 0.0F);
 
-            if (!this.mc.gameSettings.debugCamEnable)
-            {
+            if (!this.mc.gameSettings.debugCamEnable) {
                 BlockPos blockpos = new BlockPos(entity);
                 IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
                 net.minecraftforge.client.ForgeHooksClient.orientBedCamera(this.mc.world, blockpos, iblockstate, entity);
@@ -575,75 +486,61 @@
                 GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, -1.0F, 0.0F);
                 GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, -1.0F, 0.0F, 0.0F);
             }
-        }
-        else if (this.mc.gameSettings.thirdPersonView > 0)
-        {
-            double d3 = (double)(this.thirdPersonDistancePrev + (4.0F - this.thirdPersonDistancePrev) * partialTicks);
+        } else if (this.mc.gameSettings.thirdPersonView > 0) {
+            double d3 = (this.thirdPersonDistancePrev + (4.0F - this.thirdPersonDistancePrev) * partialTicks);
 
-            if (this.mc.gameSettings.debugCamEnable)
-            {
-                GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
-            }
-            else
-            {
+            if (this.mc.gameSettings.debugCamEnable) {
+                GlStateManager.translate(0.0F, 0.0F, (float) (-d3));
+            } else {
                 float f1 = entity.rotationYaw;
                 float f2 = entity.rotationPitch;
 
-                if (this.mc.gameSettings.thirdPersonView == 2)
-                {
+                if (this.mc.gameSettings.thirdPersonView == 2) {
                     f2 += 180.0F;
                 }
 
-                double d4 = (double)(-MathHelper.sin(f1 * 0.017453292F) * MathHelper.cos(f2 * 0.017453292F)) * d3;
-                double d5 = (double)(MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f2 * 0.017453292F)) * d3;
-                double d6 = (double)(-MathHelper.sin(f2 * 0.017453292F)) * d3;
+                double d4 = (double) (-MathHelper.sin(f1 * 0.017453292F) * MathHelper.cos(f2 * 0.017453292F)) * d3;
+                double d5 = (double) (MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f2 * 0.017453292F)) * d3;
+                double d6 = (double) (-MathHelper.sin(f2 * 0.017453292F)) * d3;
 
-                for (int i = 0; i < 8; ++i)
-                {
-                    float f3 = (float)((i & 1) * 2 - 1);
-                    float f4 = (float)((i >> 1 & 1) * 2 - 1);
-                    float f5 = (float)((i >> 2 & 1) * 2 - 1);
+                for (int i = 0; i < 8; ++i) {
+                    float f3 = (float) ((i & 1) * 2 - 1);
+                    float f4 = (float) ((i >> 1 & 1) * 2 - 1);
+                    float f5 = (float) ((i >> 2 & 1) * 2 - 1);
                     f3 = f3 * 0.1F;
                     f4 = f4 * 0.1F;
                     f5 = f5 * 0.1F;
-                    RayTraceResult raytraceresult = this.mc.world.rayTraceBlocks(new Vec3d(d0 + (double)f3, d1 + (double)f4, d2 + (double)f5), new Vec3d(d0 - d4 + (double)f3 + (double)f5, d1 - d6 + (double)f4, d2 - d5 + (double)f5));
+                    RayTraceResult raytraceresult = this.mc.world.rayTraceBlocks(new Vec3d(d0 + (double) f3, d1 + (double) f4, d2 + (double) f5), new Vec3d(d0 - d4 + (double) f3 + (double) f5, d1 - d6 + (double) f4, d2 - d5 + (double) f5));
 
-                    if (raytraceresult != null)
-                    {
+                    if (raytraceresult != null) {
                         double d7 = raytraceresult.hitVec.distanceTo(new Vec3d(d0, d1, d2));
 
-                        if (d7 < d3)
-                        {
+                        if (d7 < d3) {
                             d3 = d7;
                         }
                     }
                 }
 
-                if (this.mc.gameSettings.thirdPersonView == 2)
-                {
+                if (this.mc.gameSettings.thirdPersonView == 2) {
                     GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                 }
 
                 GlStateManager.rotate(entity.rotationPitch - f2, 1.0F, 0.0F, 0.0F);
                 GlStateManager.rotate(entity.rotationYaw - f1, 0.0F, 1.0F, 0.0F);
-                GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
+                GlStateManager.translate(0.0F, 0.0F, (float) (-d3));
                 GlStateManager.rotate(f1 - entity.rotationYaw, 0.0F, 1.0F, 0.0F);
                 GlStateManager.rotate(f2 - entity.rotationPitch, 1.0F, 0.0F, 0.0F);
             }
-        }
-        else
-        {
+        } else {
             GlStateManager.translate(0.0F, 0.0F, 0.05F);
         }
 
-        if (!this.mc.gameSettings.debugCamEnable)
-        {
+        if (!this.mc.gameSettings.debugCamEnable) {
             float yaw = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F;
             float pitch = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
             float roll = 0.0F;
-            if (entity instanceof EntityAnimal)
-            {
-                EntityAnimal entityanimal = (EntityAnimal)entity;
+            if (entity instanceof EntityAnimal) {
+                EntityAnimal entityanimal = (EntityAnimal) entity;
                 yaw = entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * partialTicks + 180.0F;
             }
             IBlockState state = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
@@ -655,70 +552,61 @@
         }
 
         GlStateManager.translate(0.0F, -f, 0.0F);
-        d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-        d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + (double)f;
-        d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
+        d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double) partialTicks;
+        d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double) partialTicks + (double) f;
+        d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double) partialTicks;
         this.cloudFog = this.mc.renderGlobal.hasCloudFog(d0, d1, d2, partialTicks);
     }
 
-    private void setupCameraTransform(float partialTicks, int pass)
-    {
-        this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
+    private void setupCameraTransform(float partialTicks, int pass) {
+        this.farPlaneDistance = (float) (this.mc.gameSettings.renderDistanceChunks * 16);
         GlStateManager.matrixMode(5889);
         GlStateManager.loadIdentity();
         float f = 0.07F;
 
-        if (this.mc.gameSettings.anaglyph)
-        {
-            GlStateManager.translate((float)(-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
+        if (this.mc.gameSettings.anaglyph) {
+            GlStateManager.translate((float) (-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
         }
 
-        if (this.cameraZoom != 1.0D)
-        {
-            GlStateManager.translate((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
+        if (this.cameraZoom != 1.0D) {
+            GlStateManager.translate((float) this.cameraYaw, (float) (-this.cameraPitch), 0.0F);
             GlStateManager.scale(this.cameraZoom, this.cameraZoom, 1.0D);
         }
 
-        Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
+        Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
         GlStateManager.matrixMode(5888);
         GlStateManager.loadIdentity();
 
-        if (this.mc.gameSettings.anaglyph)
-        {
-            GlStateManager.translate((float)(pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
+        if (this.mc.gameSettings.anaglyph) {
+            GlStateManager.translate((float) (pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
         }
 
         this.hurtCameraEffect(partialTicks);
 
-        if (this.mc.gameSettings.viewBobbing)
-        {
+        if (this.mc.gameSettings.viewBobbing) {
             this.applyBobbing(partialTicks);
         }
 
         float f1 = this.mc.player.prevTimeInPortal + (this.mc.player.timeInPortal - this.mc.player.prevTimeInPortal) * partialTicks;
 
-        if (f1 > 0.0F)
-        {
+        if (f1 > 0.0F) {
             int i = 20;
 
-            if (this.mc.player.isPotionActive(MobEffects.NAUSEA))
-            {
+            if (this.mc.player.isPotionActive(MobEffects.NAUSEA)) {
                 i = 7;
             }
 
             float f2 = 5.0F / (f1 * f1 + 5.0F) - f1 * 0.04F;
             f2 = f2 * f2;
-            GlStateManager.rotate(((float)this.rendererUpdateCount + partialTicks) * (float)i, 0.0F, 1.0F, 1.0F);
+            GlStateManager.rotate(((float) this.rendererUpdateCount + partialTicks) * (float) i, 0.0F, 1.0F, 1.0F);
             GlStateManager.scale(1.0F / f2, 1.0F, 1.0F);
-            GlStateManager.rotate(-((float)this.rendererUpdateCount + partialTicks) * (float)i, 0.0F, 1.0F, 1.0F);
+            GlStateManager.rotate(-((float) this.rendererUpdateCount + partialTicks) * (float) i, 0.0F, 1.0F, 1.0F);
         }
 
         this.orientCamera(partialTicks);
 
-        if (this.debugView)
-        {
-            switch (this.debugViewDirection)
-            {
+        if (this.debugView) {
+            switch (this.debugViewDirection) {
                 case 0:
                     GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
                     break;
@@ -737,70 +625,60 @@
         }
     }
 
-    private void renderHand(float partialTicks, int pass)
-    {
-        if (!this.debugView)
-        {
+    private void renderHand(float partialTicks, int pass) {
+        if (!this.debugView) {
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
             float f = 0.07F;
 
-            if (this.mc.gameSettings.anaglyph)
-            {
-                GlStateManager.translate((float)(-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
+            if (this.mc.gameSettings.anaglyph) {
+                GlStateManager.translate((float) (-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
             }
 
-            Project.gluPerspective(this.getFOVModifier(partialTicks, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, false), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
             GlStateManager.matrixMode(5888);
             GlStateManager.loadIdentity();
 
-            if (this.mc.gameSettings.anaglyph)
-            {
-                GlStateManager.translate((float)(pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
+            if (this.mc.gameSettings.anaglyph) {
+                GlStateManager.translate((float) (pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
             }
 
             GlStateManager.pushMatrix();
             this.hurtCameraEffect(partialTicks);
 
-            if (this.mc.gameSettings.viewBobbing)
-            {
+            if (this.mc.gameSettings.viewBobbing) {
                 this.applyBobbing(partialTicks);
             }
 
-            boolean flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
+            boolean flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase) this.mc.getRenderViewEntity()).isPlayerSleeping();
 
             if (!net.minecraftforge.client.ForgeHooksClient.renderFirstPersonHand(mc.renderGlobal, partialTicks, pass))
-            if (this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
-            {
-                this.enableLightmap();
-                this.itemRenderer.renderItemInFirstPerson(partialTicks);
-                this.disableLightmap();
-            }
+                if (this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator()) {
+                    this.enableLightmap();
+                    this.itemRenderer.renderItemInFirstPerson(partialTicks);
+                    this.disableLightmap();
+                }
 
             GlStateManager.popMatrix();
 
-            if (this.mc.gameSettings.thirdPersonView == 0 && !flag)
-            {
+            if (this.mc.gameSettings.thirdPersonView == 0 && !flag) {
                 this.itemRenderer.renderOverlays(partialTicks);
                 this.hurtCameraEffect(partialTicks);
             }
 
-            if (this.mc.gameSettings.viewBobbing)
-            {
+            if (this.mc.gameSettings.viewBobbing) {
                 this.applyBobbing(partialTicks);
             }
         }
     }
 
-    public void disableLightmap()
-    {
+    public void disableLightmap() {
         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
         GlStateManager.disableTexture2D();
         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
     }
 
-    public void enableLightmap()
-    {
+    public void enableLightmap() {
         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
         GlStateManager.matrixMode(5890);
         GlStateManager.loadIdentity();
@@ -818,33 +696,27 @@
         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
     }
 
-    private void updateTorchFlicker()
-    {
-        this.torchFlickerDX = (float)((double)this.torchFlickerDX + (Math.random() - Math.random()) * Math.random() * Math.random());
-        this.torchFlickerDX = (float)((double)this.torchFlickerDX * 0.9D);
+    private void updateTorchFlicker() {
+        this.torchFlickerDX = (float) ((double) this.torchFlickerDX + (Math.random() - Math.random()) * Math.random() * Math.random());
+        this.torchFlickerDX = (float) ((double) this.torchFlickerDX * 0.9D);
         this.torchFlickerX += this.torchFlickerDX - this.torchFlickerX;
         this.lightmapUpdateNeeded = true;
     }
 
-    private void updateLightmap(float partialTicks)
-    {
-        if (this.lightmapUpdateNeeded)
-        {
+    public void updateLightmap(float partialTicks) {
+        if (this.lightmapUpdateNeeded) {
             this.mc.mcProfiler.startSection("lightTex");
             World world = this.mc.world;
 
-            if (world != null)
-            {
+            if (world != null) {
                 float f = world.getSunBrightness(1.0F);
                 float f1 = f * 0.95F + 0.05F;
 
-                for (int i = 0; i < 256; ++i)
-                {
+                for (int i = 0; i < 256; ++i) {
                     float f2 = world.provider.getLightBrightnessTable()[i / 16] * f1;
                     float f3 = world.provider.getLightBrightnessTable()[i % 16] * (this.torchFlickerX * 0.1F + 1.5F);
 
-                    if (world.getLastLightningBolt() > 0)
-                    {
+                    if (world.getLastLightningBolt() > 0) {
                         f2 = world.provider.getLightBrightnessTable()[i / 16];
                     }
 
@@ -859,16 +731,14 @@
                     f9 = f9 * 0.96F + 0.03F;
                     f10 = f10 * 0.96F + 0.03F;
 
-                    if (this.bossColorModifier > 0.0F)
-                    {
+                    if (this.bossColorModifier > 0.0F) {
                         float f11 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * partialTicks;
                         f8 = f8 * (1.0F - f11) + f8 * 0.7F * f11;
                         f9 = f9 * (1.0F - f11) + f9 * 0.6F * f11;
                         f10 = f10 * (1.0F - f11) + f10 * 0.6F * f11;
                     }
 
-                    if (world.provider.getDimensionType().getId() == 1)
-                    {
+                    if (world.provider.getDimensionType().getId() == 1) {
                         f8 = 0.22F + f3 * 0.75F;
                         f9 = 0.28F + f6 * 0.75F;
                         f10 = 0.25F + f7 * 0.75F;
@@ -876,25 +746,24 @@
 
                     float[] colors = {f8, f9, f10};
                     world.provider.getLightmapColors(partialTicks, f, f2, f3, colors);
-                    f8 = colors[0]; f9 = colors[1]; f10 = colors[2];
+                    f8 = colors[0];
+                    f9 = colors[1];
+                    f10 = colors[2];
 
                     // Forge: fix MC-58177
                     f8 = MathHelper.clamp(f8, 0f, 1f);
                     f9 = MathHelper.clamp(f9, 0f, 1f);
                     f10 = MathHelper.clamp(f10, 0f, 1f);
 
-                    if (this.mc.player.isPotionActive(MobEffects.NIGHT_VISION))
-                    {
+                    if (this.mc.player.isPotionActive(MobEffects.NIGHT_VISION)) {
                         float f15 = this.getNightVisionBrightness(this.mc.player, partialTicks);
                         float f12 = 1.0F / f8;
 
-                        if (f12 > 1.0F / f9)
-                        {
+                        if (f12 > 1.0F / f9) {
                             f12 = 1.0F / f9;
                         }
 
-                        if (f12 > 1.0F / f10)
-                        {
+                        if (f12 > 1.0F / f10) {
                             f12 = 1.0F / f10;
                         }
 
@@ -903,18 +772,15 @@
                         f10 = f10 * (1.0F - f15) + f10 * f12 * f15;
                     }
 
-                    if (f8 > 1.0F)
-                    {
+                    if (f8 > 1.0F) {
                         f8 = 1.0F;
                     }
 
-                    if (f9 > 1.0F)
-                    {
+                    if (f9 > 1.0F) {
                         f9 = 1.0F;
                     }
 
-                    if (f10 > 1.0F)
-                    {
+                    if (f10 > 1.0F) {
                         f10 = 1.0F;
                     }
 
@@ -932,40 +798,34 @@
                     f9 = f9 * 0.96F + 0.03F;
                     f10 = f10 * 0.96F + 0.03F;
 
-                    if (f8 > 1.0F)
-                    {
+                    if (f8 > 1.0F) {
                         f8 = 1.0F;
                     }
 
-                    if (f9 > 1.0F)
-                    {
+                    if (f9 > 1.0F) {
                         f9 = 1.0F;
                     }
 
-                    if (f10 > 1.0F)
-                    {
+                    if (f10 > 1.0F) {
                         f10 = 1.0F;
                     }
 
-                    if (f8 < 0.0F)
-                    {
+                    if (f8 < 0.0F) {
                         f8 = 0.0F;
                     }
 
-                    if (f9 < 0.0F)
-                    {
+                    if (f9 < 0.0F) {
                         f9 = 0.0F;
                     }
 
-                    if (f10 < 0.0F)
-                    {
+                    if (f10 < 0.0F) {
                         f10 = 0.0F;
                     }
 
                     int j = 255;
-                    int k = (int)(f8 * 255.0F);
-                    int l = (int)(f9 * 255.0F);
-                    int i1 = (int)(f10 * 255.0F);
+                    int k = (int) (f8 * 255.0F);
+                    int l = (int) (f9 * 255.0F);
+                    int i1 = (int) (f10 * 255.0F);
                     this.lightmapColors[i] = -16777216 | k << 16 | l << 8 | i1;
                 }
 
@@ -976,74 +836,61 @@
         }
     }
 
-    private float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
-    {
+    private float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks) {
         int i = entitylivingbaseIn.getActivePotionEffect(MobEffects.NIGHT_VISION).getDuration();
-        return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - partialTicks) * (float)Math.PI * 0.2F) * 0.3F;
+        return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float) i - partialTicks) * (float) Math.PI * 0.2F) * 0.3F;
     }
 
-    public void updateCameraAndRender(float partialTicks, long nanoTime)
-    {
+    public void updateCameraAndRender(float partialTicks, long nanoTime) {
         boolean flag = Display.isActive();
 
-        if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
-        {
-            if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
-            {
+        if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1))) {
+            if (Minecraft.getSystemTime() - this.prevFrameTime > 500L) {
                 this.mc.displayInGameMenu();
             }
-        }
-        else
-        {
+        } else {
             this.prevFrameTime = Minecraft.getSystemTime();
         }
 
         this.mc.mcProfiler.startSection("mouse");
 
-        if (flag && Minecraft.IS_RUNNING_ON_MAC && this.mc.inGameHasFocus && !Mouse.isInsideWindow())
-        {
+        if (flag && Minecraft.IS_RUNNING_ON_MAC && this.mc.inGameHasFocus && !Mouse.isInsideWindow()) {
             Mouse.setGrabbed(false);
             Mouse.setCursorPosition(Display.getWidth() / 2, Display.getHeight() / 2 - 20);
             Mouse.setGrabbed(true);
         }
 
-        if (this.mc.inGameHasFocus && flag)
-        {
+        if (this.mc.inGameHasFocus && flag) {
             this.mc.mouseHelper.mouseXYChange();
             this.mc.getTutorial().handleMouse(this.mc.mouseHelper);
             float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
             float f1 = f * f * f * 8.0F;
-            float f2 = (float)this.mc.mouseHelper.deltaX * f1;
-            float f3 = (float)this.mc.mouseHelper.deltaY * f1;
+            float f2 = (float) this.mc.mouseHelper.deltaX * f1;
+            float f3 = (float) this.mc.mouseHelper.deltaY * f1;
             int i = 1;
 
-            if (this.mc.gameSettings.invertMouse)
-            {
+            if (this.mc.gameSettings.invertMouse) {
                 i = -1;
             }
 
-            if (this.mc.gameSettings.smoothCamera)
-            {
+            if (this.mc.gameSettings.smoothCamera) {
                 this.smoothCamYaw += f2;
                 this.smoothCamPitch += f3;
                 float f4 = partialTicks - this.smoothCamPartialTicks;
                 this.smoothCamPartialTicks = partialTicks;
                 f2 = this.smoothCamFilterX * f4;
                 f3 = this.smoothCamFilterY * f4;
-                this.mc.player.turn(f2, f3 * (float)i);
-            }
-            else
-            {
+                this.mc.player.turn(f2, f3 * (float) i);
+            } else {
                 this.smoothCamYaw = 0.0F;
                 this.smoothCamPitch = 0.0F;
-                this.mc.player.turn(f2, f3 * (float)i);
+                this.mc.player.turn(f2, f3 * (float) i);
             }
         }
 
         this.mc.mcProfiler.endSection();
 
-        if (!this.mc.skipRenderWorld)
-        {
+        if (!this.mc.skipRenderWorld) {
             anaglyphEnable = this.mc.gameSettings.anaglyph;
             final ScaledResolution scaledresolution = new ScaledResolution(this.mc);
             int i1 = scaledresolution.getScaledWidth();
@@ -1052,31 +899,26 @@
             final int l1 = j1 - Mouse.getY() * j1 / this.mc.displayHeight - 1;
             int i2 = this.mc.gameSettings.limitFramerate;
 
-            if (this.mc.world != null)
-            {
+            if (this.mc.world != null) {
                 this.mc.mcProfiler.startSection("level");
                 int j = Math.min(Minecraft.getDebugFPS(), i2);
                 j = Math.max(j, 60);
                 long k = System.nanoTime() - nanoTime;
-                long l = Math.max((long)(1000000000 / j / 4) - k, 0L);
+                long l = Math.max((long) (1000000000 / j / 4) - k, 0L);
                 this.renderWorld(partialTicks, System.nanoTime() + l);
 
-                if (this.mc.isSingleplayer() && this.timeWorldIcon < Minecraft.getSystemTime() - 1000L)
-                {
+                if (this.mc.isSingleplayer() && this.timeWorldIcon < Minecraft.getSystemTime() - 1000L) {
                     this.timeWorldIcon = Minecraft.getSystemTime();
 
-                    if (!this.mc.getIntegratedServer().isWorldIconSet())
-                    {
+                    if (!this.mc.getIntegratedServer().isWorldIconSet()) {
                         this.createWorldIcon();
                     }
                 }
 
-                if (OpenGlHelper.shadersSupported)
-                {
+                if (OpenGlHelper.shadersSupported) {
                     this.mc.renderGlobal.renderEntityOutlineFramebuffer();
 
-                    if (this.shaderGroup != null && this.useShader)
-                    {
+                    if (this.shaderGroup != null && this.useShader) {
                         GlStateManager.matrixMode(5890);
                         GlStateManager.pushMatrix();
                         GlStateManager.loadIdentity();
@@ -1090,8 +932,7 @@
                 this.renderEndNanoTime = System.nanoTime();
                 this.mc.mcProfiler.endStartSection("gui");
 
-                if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
-                {
+                if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null) {
                     GlStateManager.alphaFunc(516, 0.1F);
                     this.setupOverlayRendering();
                     this.renderItemActivation(i1, j1, partialTicks);
@@ -1099,9 +940,7 @@
                 }
 
                 this.mc.mcProfiler.endSection();
-            }
-            else
-            {
+            } else {
                 GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
                 GlStateManager.matrixMode(5889);
                 GlStateManager.loadIdentity();
@@ -1115,36 +954,26 @@
                 net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher.instance.fontRenderer = this.mc.fontRenderer;
             }
 
-            if (this.mc.currentScreen != null)
-            {
+            if (this.mc.currentScreen != null) {
                 GlStateManager.clear(256);
 
-                try
-                {
+                try {
                     net.minecraftforge.client.ForgeHooksClient.drawScreen(this.mc.currentScreen, k1, l1, this.mc.getTickLength());
-                }
-                catch (Throwable throwable)
-                {
+                } catch (Throwable throwable) {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
-                    crashreportcategory.addDetail("Screen name", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
+                    crashreportcategory.addDetail("Screen name", new ICrashReportDetail<String>() {
+                        public String call() throws Exception {
                             return EntityRenderer.this.mc.currentScreen.getClass().getCanonicalName();
                         }
                     });
-                    crashreportcategory.addDetail("Mouse location", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
+                    crashreportcategory.addDetail("Mouse location", new ICrashReportDetail<String>() {
+                        public String call() throws Exception {
                             return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", k1, l1, Mouse.getX(), Mouse.getY());
                         }
                     });
-                    crashreportcategory.addDetail("Screen size", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
+                    crashreportcategory.addDetail("Screen size", new ICrashReportDetail<String>() {
+                        public String call() throws Exception {
                             return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", scaledresolution.getScaledWidth(), scaledresolution.getScaledHeight(), EntityRenderer.this.mc.displayWidth, EntityRenderer.this.mc.displayHeight, scaledresolution.getScaleFactor());
                         }
                     });
@@ -1154,72 +983,54 @@
         }
     }
 
-    private void createWorldIcon()
-    {
-        if (this.mc.renderGlobal.getRenderedChunks() > 10 && this.mc.renderGlobal.hasNoChunkUpdates() && !this.mc.getIntegratedServer().isWorldIconSet())
-        {
+    private void createWorldIcon() {
+        if (this.mc.renderGlobal.getRenderedChunks() > 10 && this.mc.renderGlobal.hasNoChunkUpdates() && !this.mc.getIntegratedServer().isWorldIconSet()) {
             BufferedImage bufferedimage = ScreenShotHelper.createScreenshot(this.mc.displayWidth, this.mc.displayHeight, this.mc.getFramebuffer());
             int i = bufferedimage.getWidth();
             int j = bufferedimage.getHeight();
             int k = 0;
             int l = 0;
 
-            if (i > j)
-            {
+            if (i > j) {
                 k = (i - j) / 2;
                 i = j;
-            }
-            else
-            {
+            } else {
                 l = (j - i) / 2;
             }
 
-            try
-            {
+            try {
                 BufferedImage bufferedimage1 = new BufferedImage(64, 64, 1);
                 Graphics graphics = bufferedimage1.createGraphics();
-                graphics.drawImage(bufferedimage, 0, 0, 64, 64, k, l, k + i, l + i, (ImageObserver)null);
+                graphics.drawImage(bufferedimage, 0, 0, 64, 64, k, l, k + i, l + i, (ImageObserver) null);
                 graphics.dispose();
                 ImageIO.write(bufferedimage1, "png", this.mc.getIntegratedServer().getWorldIconFile());
+            } catch (IOException ioexception) {
+                LOGGER.warn("Couldn't save auto screenshot", (Throwable) ioexception);
             }
-            catch (IOException ioexception)
-            {
-                LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception);
-            }
         }
     }
 
-    public void renderStreamIndicator(float partialTicks)
-    {
+    public void renderStreamIndicator(float partialTicks) {
         this.setupOverlayRendering();
     }
 
-    private boolean isDrawBlockOutline()
-    {
-        if (!this.drawBlockOutline)
-        {
+    private boolean isDrawBlockOutline() {
+        if (!this.drawBlockOutline) {
             return false;
-        }
-        else
-        {
+        } else {
             Entity entity = this.mc.getRenderViewEntity();
             boolean flag = entity instanceof EntityPlayer && !this.mc.gameSettings.hideGUI;
 
-            if (flag && !((EntityPlayer)entity).capabilities.allowEdit)
-            {
-                ItemStack itemstack = ((EntityPlayer)entity).getHeldItemMainhand();
+            if (flag && !((EntityPlayer) entity).capabilities.allowEdit) {
+                ItemStack itemstack = ((EntityPlayer) entity).getHeldItemMainhand();
 
-                if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
-                {
+                if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK) {
                     BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
                     Block block = this.mc.world.getBlockState(blockpos).getBlock();
 
-                    if (this.mc.playerController.getCurrentGameType() == GameType.SPECTATOR)
-                    {
+                    if (this.mc.playerController.getCurrentGameType() == GameType.SPECTATOR) {
                         flag = block.hasTileEntity(this.mc.world.getBlockState(blockpos)) && this.mc.world.getTileEntity(blockpos) instanceof IInventory;
-                    }
-                    else
-                    {
+                    } else {
                         flag = !itemstack.isEmpty() && (itemstack.canDestroy(block) || itemstack.canPlaceOn(block));
                     }
                 }
@@ -1229,12 +1040,10 @@
         }
     }
 
-    public void renderWorld(float partialTicks, long finishTimeNano)
-    {
+    public void renderWorld(float partialTicks, long finishTimeNano) {
         this.updateLightmap(partialTicks);
 
-        if (this.mc.getRenderViewEntity() == null)
-        {
+        if (this.mc.getRenderViewEntity() == null) {
             this.mc.setRenderViewEntity(this.mc.player);
         }
 
@@ -1244,8 +1053,7 @@
         GlStateManager.alphaFunc(516, 0.5F);
         this.mc.mcProfiler.startSection("center");
 
-        if (this.mc.gameSettings.anaglyph)
-        {
+        if (this.mc.gameSettings.anaglyph) {
             anaglyphField = 0;
             GlStateManager.colorMask(false, true, true, false);
             this.renderWorldPass(0, partialTicks, finishTimeNano);
@@ -1253,17 +1061,14 @@
             GlStateManager.colorMask(true, false, false, false);
             this.renderWorldPass(1, partialTicks, finishTimeNano);
             GlStateManager.colorMask(true, true, true, false);
-        }
-        else
-        {
+        } else {
             this.renderWorldPass(2, partialTicks, finishTimeNano);
         }
 
         this.mc.mcProfiler.endSection();
     }
 
-    private void renderWorldPass(int pass, float partialTicks, long finishTimeNano)
-    {
+    private void renderWorldPass(int pass, float partialTicks, long finishTimeNano) {
         RenderGlobal renderglobal = this.mc.renderGlobal;
         ParticleManager particlemanager = this.mc.effectRenderer;
         boolean flag = this.isDrawBlockOutline();
@@ -1280,31 +1085,29 @@
         this.mc.mcProfiler.endStartSection("culling");
         ICamera icamera = new Frustum();
         Entity entity = this.mc.getRenderViewEntity();
-        double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
-        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
-        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
+        double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double) partialTicks;
+        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks;
+        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double) partialTicks;
         icamera.setPosition(d0, d1, d2);
 
-        if (this.mc.gameSettings.renderDistanceChunks >= 4)
-        {
+        if (this.mc.gameSettings.renderDistanceChunks >= 4) {
             this.setupFog(-1, partialTicks);
             this.mc.mcProfiler.endStartSection("sky");
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
             GlStateManager.matrixMode(5888);
             renderglobal.renderSky(partialTicks, pass);
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
             GlStateManager.matrixMode(5888);
         }
 
         this.setupFog(0, partialTicks);
         GlStateManager.shadeModel(7425);
 
-        if (entity.posY + (double)entity.getEyeHeight() < 128.0D)
-        {
+        if (entity.posY + (double) entity.getEyeHeight() < 128.0D) {
             this.renderCloudsCheck(renderglobal, partialTicks, pass, d0, d1, d2);
         }
 
@@ -1313,10 +1116,9 @@
         this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         RenderHelper.disableStandardItemLighting();
         this.mc.mcProfiler.endStartSection("terrain_setup");
-        renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
+        renderglobal.setupTerrain(entity, (double) partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
 
-        if (pass == 0 || pass == 2)
-        {
+        if (pass == 0 || pass == 2) {
             this.mc.mcProfiler.endStartSection("updatechunks");
             this.mc.renderGlobal.updateChunks(finishTimeNano);
         }
@@ -1325,19 +1127,18 @@
         GlStateManager.matrixMode(5888);
         GlStateManager.pushMatrix();
         GlStateManager.disableAlpha();
-        renderglobal.renderBlockLayer(BlockRenderLayer.SOLID, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(BlockRenderLayer.SOLID, (double) partialTicks, pass, entity);
         GlStateManager.enableAlpha();
         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, this.mc.gameSettings.mipmapLevels > 0); // FORGE: fix flickering leaves when mods mess up the blurMipmap settings
-        renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT_MIPPED, (double) partialTicks, pass, entity);
         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
-        renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT, (double) partialTicks, pass, entity);
         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
         GlStateManager.shadeModel(7424);
         GlStateManager.alphaFunc(516, 0.1F);
 
-        if (!this.debugView)
-        {
+        if (!this.debugView) {
             GlStateManager.matrixMode(5888);
             GlStateManager.popMatrix();
             GlStateManager.pushMatrix();
@@ -1353,18 +1154,16 @@
         GlStateManager.matrixMode(5888);
         GlStateManager.popMatrix();
 
-        if (flag && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.WATER))
-        {
-            EntityPlayer entityplayer = (EntityPlayer)entity;
+        if (flag && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.WATER)) {
+            EntityPlayer entityplayer = (EntityPlayer) entity;
             GlStateManager.disableAlpha();
             this.mc.mcProfiler.endStartSection("outline");
             if (!net.minecraftforge.client.ForgeHooksClient.onDrawBlockHighlight(renderglobal, entityplayer, mc.objectMouseOver, 0, partialTicks))
-            renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
+                renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
             GlStateManager.enableAlpha();
         }
 
-        if (this.mc.debugRenderer.shouldRender())
-        {
+        if (this.mc.debugRenderer.shouldRender()) {
             this.mc.debugRenderer.renderDebug(partialTicks, finishTimeNano);
         }
 
@@ -1376,8 +1175,7 @@
         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
         GlStateManager.disableBlend();
 
-        if (!this.debugView)
-        {
+        if (!this.debugView) {
             this.enableLightmap();
             this.mc.mcProfiler.endStartSection("litParticles");
             particlemanager.renderLitParticles(entity, partialTicks);
@@ -1404,7 +1202,7 @@
         this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         GlStateManager.shadeModel(7425);
         this.mc.mcProfiler.endStartSection("translucent");
-        renderglobal.renderBlockLayer(BlockRenderLayer.TRANSLUCENT, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(BlockRenderLayer.TRANSLUCENT, (double) partialTicks, pass, entity);
         if (!this.debugView) //Only render if render pass 0 happens as well.
         {
             RenderHelper.enableStandardItemLighting();
@@ -1422,8 +1220,7 @@
         GlStateManager.disableBlend();
         GlStateManager.disableFog();
 
-        if (entity.posY + (double)entity.getEyeHeight() >= 128.0D)
-        {
+        if (entity.posY + (double) entity.getEyeHeight() >= 128.0D) {
             this.mc.mcProfiler.endStartSection("aboveClouds");
             this.renderCloudsCheck(renderglobal, partialTicks, pass, d0, d1, d2);
         }
@@ -1433,21 +1230,18 @@
 
         this.mc.mcProfiler.endStartSection("hand");
 
-        if (this.renderHand)
-        {
+        if (this.renderHand) {
             GlStateManager.clear(256);
             this.renderHand(partialTicks, pass);
         }
     }
 
-    private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass, double x, double y, double z)
-    {
-        if (this.mc.gameSettings.shouldRenderClouds() != 0)
-        {
+    private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass, double x, double y, double z) {
+        if (this.mc.gameSettings.shouldRenderClouds() != 0) {
             this.mc.mcProfiler.endStartSection("clouds");
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 4.0F);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * 4.0F);
             GlStateManager.matrixMode(5888);
             GlStateManager.pushMatrix();
             this.setupFog(0, partialTicks);
@@ -1456,23 +1250,20 @@
             GlStateManager.popMatrix();
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
             GlStateManager.matrixMode(5888);
         }
     }
 
-    private void addRainParticles()
-    {
+    private void addRainParticles() {
         float f = this.mc.world.getRainStrength(1.0F);
 
-        if (!this.mc.gameSettings.fancyGraphics)
-        {
+        if (!this.mc.gameSettings.fancyGraphics) {
             f /= 2.0F;
         }
 
-        if (f != 0.0F)
-        {
-            this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
+        if (f != 0.0F) {
+            this.random.setSeed((long) this.rendererUpdateCount * 312987231L);
             Entity entity = this.mc.getRenderViewEntity();
             World world = this.mc.world;
             BlockPos blockpos = new BlockPos(entity);
@@ -1481,82 +1272,65 @@
             double d1 = 0.0D;
             double d2 = 0.0D;
             int j = 0;
-            int k = (int)(100.0F * f * f);
+            int k = (int) (100.0F * f * f);
 
-            if (this.mc.gameSettings.particleSetting == 1)
-            {
+            if (this.mc.gameSettings.particleSetting == 1) {
                 k >>= 1;
-            }
-            else if (this.mc.gameSettings.particleSetting == 2)
-            {
+            } else if (this.mc.gameSettings.particleSetting == 2) {
                 k = 0;
             }
 
-            for (int l = 0; l < k; ++l)
-            {
+            for (int l = 0; l < k; ++l) {
                 BlockPos blockpos1 = world.getPrecipitationHeight(blockpos.add(this.random.nextInt(10) - this.random.nextInt(10), 0, this.random.nextInt(10) - this.random.nextInt(10)));
                 Biome biome = world.getBiome(blockpos1);
                 BlockPos blockpos2 = blockpos1.down();
                 IBlockState iblockstate = world.getBlockState(blockpos2);
 
-                if (blockpos1.getY() <= blockpos.getY() + 10 && blockpos1.getY() >= blockpos.getY() - 10 && biome.canRain() && biome.getTemperature(blockpos1) >= 0.15F)
-                {
+                if (blockpos1.getY() <= blockpos.getY() + 10 && blockpos1.getY() >= blockpos.getY() - 10 && biome.canRain() && biome.getTemperature(blockpos1) >= 0.15F) {
                     double d3 = this.random.nextDouble();
                     double d4 = this.random.nextDouble();
                     AxisAlignedBB axisalignedbb = iblockstate.getBoundingBox(world, blockpos2);
 
-                    if (iblockstate.getMaterial() != Material.LAVA && iblockstate.getBlock() != Blocks.MAGMA)
-                    {
-                        if (iblockstate.getMaterial() != Material.AIR)
-                        {
+                    if (iblockstate.getMaterial() != Material.LAVA && iblockstate.getBlock() != Blocks.MAGMA) {
+                        if (iblockstate.getMaterial() != Material.AIR) {
                             ++j;
 
-                            if (this.random.nextInt(j) == 0)
-                            {
-                                d0 = (double)blockpos2.getX() + d3;
-                                d1 = (double)((float)blockpos2.getY() + 0.1F) + axisalignedbb.maxY - 1.0D;
-                                d2 = (double)blockpos2.getZ() + d4;
+                            if (this.random.nextInt(j) == 0) {
+                                d0 = (double) blockpos2.getX() + d3;
+                                d1 = (double) ((float) blockpos2.getY() + 0.1F) + axisalignedbb.maxY - 1.0D;
+                                d2 = (double) blockpos2.getZ() + d4;
                             }
 
-                            this.mc.world.spawnParticle(EnumParticleTypes.WATER_DROP, (double)blockpos2.getX() + d3, (double)((float)blockpos2.getY() + 0.1F) + axisalignedbb.maxY, (double)blockpos2.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
+                            this.mc.world.spawnParticle(EnumParticleTypes.WATER_DROP, (double) blockpos2.getX() + d3, (double) ((float) blockpos2.getY() + 0.1F) + axisalignedbb.maxY, (double) blockpos2.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
                         }
+                    } else {
+                        this.mc.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, (double) blockpos1.getX() + d3, (double) ((float) blockpos1.getY() + 0.1F) - axisalignedbb.minY, (double) blockpos1.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
                     }
-                    else
-                    {
-                        this.mc.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, (double)blockpos1.getX() + d3, (double)((float)blockpos1.getY() + 0.1F) - axisalignedbb.minY, (double)blockpos1.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
-                    }
                 }
             }
 
-            if (j > 0 && this.random.nextInt(3) < this.rainSoundCounter++)
-            {
+            if (j > 0 && this.random.nextInt(3) < this.rainSoundCounter++) {
                 this.rainSoundCounter = 0;
 
-                if (d1 > (double)(blockpos.getY() + 1) && world.getPrecipitationHeight(blockpos).getY() > MathHelper.floor((float)blockpos.getY()))
-                {
+                if (d1 > (double) (blockpos.getY() + 1) && world.getPrecipitationHeight(blockpos).getY() > MathHelper.floor((float) blockpos.getY())) {
                     this.mc.world.playSound(d0, d1, d2, SoundEvents.WEATHER_RAIN_ABOVE, SoundCategory.WEATHER, 0.1F, 0.5F, false);
-                }
-                else
-                {
+                } else {
                     this.mc.world.playSound(d0, d1, d2, SoundEvents.WEATHER_RAIN, SoundCategory.WEATHER, 0.2F, 1.0F, false);
                 }
             }
         }
     }
 
-    protected void renderRainSnow(float partialTicks)
-    {
+    protected void renderRainSnow(float partialTicks) {
         net.minecraftforge.client.IRenderHandler renderer = this.mc.world.provider.getWeatherRenderer();
-        if (renderer != null)
-        {
+        if (renderer != null) {
             renderer.render(partialTicks, this.mc.world, mc);
             return;
         }
 
         float f = this.mc.world.getRainStrength(partialTicks);
 
-        if (f > 0.0F)
-        {
+        if (f > 0.0F) {
             this.enableLightmap();
             Entity entity = this.mc.getRenderViewEntity();
             World world = this.mc.world;
@@ -1570,68 +1344,57 @@
             GlStateManager.enableBlend();
             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
             GlStateManager.alphaFunc(516, 0.1F);
-            double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
-            double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
-            double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
+            double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double) partialTicks;
+            double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks;
+            double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double) partialTicks;
             int l = MathHelper.floor(d1);
             int i1 = 5;
 
-            if (this.mc.gameSettings.fancyGraphics)
-            {
+            if (this.mc.gameSettings.fancyGraphics) {
                 i1 = 10;
             }
 
             int j1 = -1;
-            float f1 = (float)this.rendererUpdateCount + partialTicks;
+            float f1 = (float) this.rendererUpdateCount + partialTicks;
             bufferbuilder.setTranslation(-d0, -d1, -d2);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-            for (int k1 = k - i1; k1 <= k + i1; ++k1)
-            {
-                for (int l1 = i - i1; l1 <= i + i1; ++l1)
-                {
+            for (int k1 = k - i1; k1 <= k + i1; ++k1) {
+                for (int l1 = i - i1; l1 <= i + i1; ++l1) {
                     int i2 = (k1 - k + 16) * 32 + l1 - i + 16;
-                    double d3 = (double)this.rainXCoords[i2] * 0.5D;
-                    double d4 = (double)this.rainYCoords[i2] * 0.5D;
+                    double d3 = (double) this.rainXCoords[i2] * 0.5D;
+                    double d4 = (double) this.rainYCoords[i2] * 0.5D;
                     blockpos$mutableblockpos.setPos(l1, 0, k1);
                     Biome biome = world.getBiome(blockpos$mutableblockpos);
 
-                    if (biome.canRain() || biome.getEnableSnow())
-                    {
+                    if (biome.canRain() || biome.getEnableSnow()) {
                         int j2 = world.getPrecipitationHeight(blockpos$mutableblockpos).getY();
                         int k2 = j - i1;
                         int l2 = j + i1;
 
-                        if (k2 < j2)
-                        {
+                        if (k2 < j2) {
                             k2 = j2;
                         }
 
-                        if (l2 < j2)
-                        {
+                        if (l2 < j2) {
                             l2 = j2;
                         }
 
                         int i3 = j2;
 
-                        if (j2 < l)
-                        {
+                        if (j2 < l) {
                             i3 = l;
                         }
 
-                        if (k2 != l2)
-                        {
-                            this.random.setSeed((long)(l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
+                        if (k2 != l2) {
+                            this.random.setSeed((long) (l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
                             blockpos$mutableblockpos.setPos(l1, k2, k1);
                             float f2 = biome.getTemperature(blockpos$mutableblockpos);
 
-                            if (world.getBiomeProvider().getTemperatureAtHeight(f2, j2) >= 0.15F)
-                            {
-                                if (j1 != 0)
-                                {
-                                    if (j1 >= 0)
-                                    {
+                            if (world.getBiomeProvider().getTemperatureAtHeight(f2, j2) >= 0.15F) {
+                                if (j1 != 0) {
+                                    if (j1 >= 0) {
                                         tessellator.draw();
                                     }
 
@@ -1640,26 +1403,22 @@
                                     bufferbuilder.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                 }
 
-                                double d5 = -((double)(this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double)partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
-                                double d6 = (double)((float)l1 + 0.5F) - entity.posX;
-                                double d7 = (double)((float)k1 + 0.5F) - entity.posZ;
-                                float f3 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float)i1;
+                                double d5 = -((double) (this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double) partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
+                                double d6 = (double) ((float) l1 + 0.5F) - entity.posX;
+                                double d7 = (double) ((float) k1 + 0.5F) - entity.posZ;
+                                float f3 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float) i1;
                                 float f4 = ((1.0F - f3 * f3) * 0.5F + 0.5F) * f;
                                 blockpos$mutableblockpos.setPos(l1, i3, k1);
                                 int j3 = world.getCombinedLight(blockpos$mutableblockpos, 0);
                                 int k3 = j3 >> 16 & 65535;
                                 int l3 = j3 & 65535;
-                                bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
-                                bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
-                                bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
-                                bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
-                            }
-                            else
-                            {
-                                if (j1 != 1)
-                                {
-                                    if (j1 >= 0)
-                                    {
+                                bufferbuilder.pos((double) l1 - d3 + 0.5D, (double) l2, (double) k1 - d4 + 0.5D).tex(0.0D, (double) k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
+                                bufferbuilder.pos((double) l1 + d3 + 0.5D, (double) l2, (double) k1 + d4 + 0.5D).tex(1.0D, (double) k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
+                                bufferbuilder.pos((double) l1 + d3 + 0.5D, (double) k2, (double) k1 + d4 + 0.5D).tex(1.0D, (double) l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
+                                bufferbuilder.pos((double) l1 - d3 + 0.5D, (double) k2, (double) k1 - d4 + 0.5D).tex(0.0D, (double) l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
+                            } else {
+                                if (j1 != 1) {
+                                    if (j1 >= 0) {
                                         tessellator.draw();
                                     }
 
@@ -1668,29 +1427,28 @@
                                     bufferbuilder.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                 }
 
-                                double d8 = (double)(-((float)(this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
-                                double d9 = this.random.nextDouble() + (double)f1 * 0.01D * (double)((float)this.random.nextGaussian());
-                                double d10 = this.random.nextDouble() + (double)(f1 * (float)this.random.nextGaussian()) * 0.001D;
-                                double d11 = (double)((float)l1 + 0.5F) - entity.posX;
-                                double d12 = (double)((float)k1 + 0.5F) - entity.posZ;
-                                float f6 = MathHelper.sqrt(d11 * d11 + d12 * d12) / (float)i1;
+                                double d8 = (double) (-((float) (this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
+                                double d9 = this.random.nextDouble() + (double) f1 * 0.01D * (double) ((float) this.random.nextGaussian());
+                                double d10 = this.random.nextDouble() + (double) (f1 * (float) this.random.nextGaussian()) * 0.001D;
+                                double d11 = (double) ((float) l1 + 0.5F) - entity.posX;
+                                double d12 = (double) ((float) k1 + 0.5F) - entity.posZ;
+                                float f6 = MathHelper.sqrt(d11 * d11 + d12 * d12) / (float) i1;
                                 float f5 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f;
                                 blockpos$mutableblockpos.setPos(l1, i3, k1);
                                 int i4 = (world.getCombinedLight(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
                                 int j4 = i4 >> 16 & 65535;
                                 int k4 = i4 & 65535;
-                                bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
-                                bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
-                                bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
-                                bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
+                                bufferbuilder.pos((double) l1 - d3 + 0.5D, (double) l2, (double) k1 - d4 + 0.5D).tex(0.0D + d9, (double) k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
+                                bufferbuilder.pos((double) l1 + d3 + 0.5D, (double) l2, (double) k1 + d4 + 0.5D).tex(1.0D + d9, (double) k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
+                                bufferbuilder.pos((double) l1 + d3 + 0.5D, (double) k2, (double) k1 + d4 + 0.5D).tex(1.0D + d9, (double) l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
+                                bufferbuilder.pos((double) l1 - d3 + 0.5D, (double) k2, (double) k1 - d4 + 0.5D).tex(0.0D + d9, (double) l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
                             }
                         }
                     }
                 }
             }
 
-            if (j1 >= 0)
-            {
+            if (j1 >= 0) {
                 tessellator.draw();
             }
 
@@ -1702,8 +1460,7 @@
         }
     }
 
-    public void setupOverlayRendering()
-    {
+    public void setupOverlayRendering() {
         ScaledResolution scaledresolution = new ScaledResolution(this.mc);
         GlStateManager.clear(256);
         GlStateManager.matrixMode(5889);
@@ -1714,38 +1471,33 @@
         GlStateManager.translate(0.0F, 0.0F, -2000.0F);
     }
 
-    private void updateFogColor(float partialTicks)
-    {
+    private void updateFogColor(float partialTicks) {
         World world = this.mc.world;
         Entity entity = this.mc.getRenderViewEntity();
-        float f = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
-        f = 1.0F - (float)Math.pow((double)f, 0.25D);
+        float f = 0.25F + 0.75F * (float) this.mc.gameSettings.renderDistanceChunks / 32.0F;
+        f = 1.0F - (float) Math.pow((double) f, 0.25D);
         Vec3d vec3d = world.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
-        float f1 = (float)vec3d.x;
-        float f2 = (float)vec3d.y;
-        float f3 = (float)vec3d.z;
+        float f1 = (float) vec3d.x;
+        float f2 = (float) vec3d.y;
+        float f3 = (float) vec3d.z;
         Vec3d vec3d1 = world.getFogColor(partialTicks);
-        this.fogColorRed = (float)vec3d1.x;
-        this.fogColorGreen = (float)vec3d1.y;
-        this.fogColorBlue = (float)vec3d1.z;
+        this.fogColorRed = (float) vec3d1.x;
+        this.fogColorGreen = (float) vec3d1.y;
+        this.fogColorBlue = (float) vec3d1.z;
 
-        if (this.mc.gameSettings.renderDistanceChunks >= 4)
-        {
+        if (this.mc.gameSettings.renderDistanceChunks >= 4) {
             double d0 = MathHelper.sin(world.getCelestialAngleRadians(partialTicks)) > 0.0F ? -1.0D : 1.0D;
             Vec3d vec3d2 = new Vec3d(d0, 0.0D, 0.0D);
-            float f5 = (float)entity.getLook(partialTicks).dotProduct(vec3d2);
+            float f5 = (float) entity.getLook(partialTicks).dotProduct(vec3d2);
 
-            if (f5 < 0.0F)
-            {
+            if (f5 < 0.0F) {
                 f5 = 0.0F;
             }
 
-            if (f5 > 0.0F)
-            {
+            if (f5 > 0.0F) {
                 float[] afloat = world.provider.calcSunriseSunsetColors(world.getCelestialAngle(partialTicks), partialTicks);
 
-                if (afloat != null)
-                {
+                if (afloat != null) {
                     f5 = f5 * afloat[3];
                     this.fogColorRed = this.fogColorRed * (1.0F - f5) + afloat[0] * f5;
                     this.fogColorGreen = this.fogColorGreen * (1.0F - f5) + afloat[1] * f5;
@@ -1759,8 +1511,7 @@
         this.fogColorBlue += (f3 - this.fogColorBlue) * f;
         float f8 = world.getRainStrength(partialTicks);
 
-        if (f8 > 0.0F)
-        {
+        if (f8 > 0.0F) {
             float f4 = 1.0F - f8 * 0.5F;
             float f10 = 1.0F - f8 * 0.4F;
             this.fogColorRed *= f4;
@@ -1770,8 +1521,7 @@
 
         float f9 = world.getThunderStrength(partialTicks);
 
-        if (f9 > 0.0F)
-        {
+        if (f9 > 0.0F) {
             float f11 = 1.0F - f9 * 0.5F;
             this.fogColorRed *= f11;
             this.fogColorGreen *= f11;
@@ -1780,78 +1530,65 @@
 
         IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
 
-        if (this.cloudFog)
-        {
+        if (this.cloudFog) {
             Vec3d vec3d3 = world.getCloudColour(partialTicks);
-            this.fogColorRed = (float)vec3d3.x;
-            this.fogColorGreen = (float)vec3d3.y;
-            this.fogColorBlue = (float)vec3d3.z;
-        }
-        else
-        {
+            this.fogColorRed = (float) vec3d3.x;
+            this.fogColorGreen = (float) vec3d3.y;
+            this.fogColorBlue = (float) vec3d3.z;
+        } else {
             //Forge Moved to Block.
             Vec3d viewport = ActiveRenderInfo.projectViewFromEntity(entity, partialTicks);
             BlockPos viewportPos = new BlockPos(viewport);
             IBlockState viewportState = this.mc.world.getBlockState(viewportPos);
             Vec3d inMaterialColor = viewportState.getBlock().getFogColor(this.mc.world, viewportPos, viewportState, entity, new Vec3d(fogColorRed, fogColorGreen, fogColorBlue), partialTicks);
-            this.fogColorRed = (float)inMaterialColor.x;
-            this.fogColorGreen = (float)inMaterialColor.y;
-            this.fogColorBlue = (float)inMaterialColor.z;
+            this.fogColorRed = (float) inMaterialColor.x;
+            this.fogColorGreen = (float) inMaterialColor.y;
+            this.fogColorBlue = (float) inMaterialColor.z;
         }
 
         float f13 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * partialTicks;
         this.fogColorRed *= f13;
         this.fogColorGreen *= f13;
         this.fogColorBlue *= f13;
-        double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks) * world.provider.getVoidFogYFactor();
+        double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks) * world.provider.getVoidFogYFactor();
 
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.BLINDNESS))
-        {
-            int i = ((EntityLivingBase)entity).getActivePotionEffect(MobEffects.BLINDNESS).getDuration();
+        if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(MobEffects.BLINDNESS)) {
+            int i = ((EntityLivingBase) entity).getActivePotionEffect(MobEffects.BLINDNESS).getDuration();
 
-            if (i < 20)
-            {
-                d1 *= (double)(1.0F - (float)i / 20.0F);
-            }
-            else
-            {
+            if (i < 20) {
+                d1 *= (double) (1.0F - (float) i / 20.0F);
+            } else {
                 d1 = 0.0D;
             }
         }
 
-        if (d1 < 1.0D)
-        {
-            if (d1 < 0.0D)
-            {
+        if (d1 < 1.0D) {
+            if (d1 < 0.0D) {
                 d1 = 0.0D;
             }
 
             d1 = d1 * d1;
-            this.fogColorRed = (float)((double)this.fogColorRed * d1);
-            this.fogColorGreen = (float)((double)this.fogColorGreen * d1);
-            this.fogColorBlue = (float)((double)this.fogColorBlue * d1);
+            this.fogColorRed = (float) ((double) this.fogColorRed * d1);
+            this.fogColorGreen = (float) ((double) this.fogColorGreen * d1);
+            this.fogColorBlue = (float) ((double) this.fogColorBlue * d1);
         }
 
-        if (this.bossColorModifier > 0.0F)
-        {
+        if (this.bossColorModifier > 0.0F) {
             float f14 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * partialTicks;
             this.fogColorRed = this.fogColorRed * (1.0F - f14) + this.fogColorRed * 0.7F * f14;
             this.fogColorGreen = this.fogColorGreen * (1.0F - f14) + this.fogColorGreen * 0.6F * f14;
             this.fogColorBlue = this.fogColorBlue * (1.0F - f14) + this.fogColorBlue * 0.6F * f14;
         }
 
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.NIGHT_VISION))
-        {
-            float f15 = this.getNightVisionBrightness((EntityLivingBase)entity, partialTicks);
+        if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(MobEffects.NIGHT_VISION)) {
+            float f15 = this.getNightVisionBrightness((EntityLivingBase) entity, partialTicks);
             float f6 = 1.0F / this.fogColorRed;
 
-            if (f6 > 1.0F / this.fogColorGreen)
-            {
+            if (f6 > 1.0F / this.fogColorGreen) {
                 f6 = 1.0F / this.fogColorGreen;
             }
 
-            if (f6 > 1.0F / this.fogColorBlue)
-            {
+            if (f6 > 1.0F / this.fogColorBlue) {
                 f6 = 1.0F / this.fogColorBlue;
             }
 
@@ -1863,8 +1600,7 @@
             this.fogColorBlue = this.fogColorBlue * (1.0F - f15) + this.fogColorBlue * f6 * f15;
         }
 
-        if (this.mc.gameSettings.anaglyph)
-        {
+        if (this.mc.gameSettings.anaglyph) {
             float f16 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
             float f17 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
             float f7 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
@@ -1883,8 +1619,7 @@
         GlStateManager.clearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
     }
 
-    private void setupFog(int startCoords, float partialTicks)
-    {
+    private void setupFog(int startCoords, float partialTicks) {
         Entity entity = this.mc.getRenderViewEntity();
         this.setupFogColor(false);
         GlStateManager.glNormal3f(0.0F, -1.0F, 0.0F);
@@ -1892,88 +1627,62 @@
         IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
         float hook = net.minecraftforge.client.ForgeHooksClient.getFogDensity(this, entity, iblockstate, partialTicks, 0.1F);
         if (hook >= 0) GlStateManager.setFogDensity(hook);
-        else
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.BLINDNESS))
-        {
+        else if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(MobEffects.BLINDNESS)) {
             float f1 = 5.0F;
-            int i = ((EntityLivingBase)entity).getActivePotionEffect(MobEffects.BLINDNESS).getDuration();
+            int i = ((EntityLivingBase) entity).getActivePotionEffect(MobEffects.BLINDNESS).getDuration();
 
-            if (i < 20)
-            {
-                f1 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
+            if (i < 20) {
+                f1 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float) i / 20.0F);
             }
 
             GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
 
-            if (startCoords == -1)
-            {
+            if (startCoords == -1) {
                 GlStateManager.setFogStart(0.0F);
                 GlStateManager.setFogEnd(f1 * 0.8F);
-            }
-            else
-            {
+            } else {
                 GlStateManager.setFogStart(f1 * 0.25F);
                 GlStateManager.setFogEnd(f1);
             }
 
-            if (GLContext.getCapabilities().GL_NV_fog_distance)
-            {
+            if (GLContext.getCapabilities().GL_NV_fog_distance) {
                 GlStateManager.glFogi(34138, 34139);
             }
-        }
-        else if (this.cloudFog)
-        {
+        } else if (this.cloudFog) {
             GlStateManager.setFog(GlStateManager.FogMode.EXP);
             GlStateManager.setFogDensity(0.1F);
-        }
-        else if (iblockstate.getMaterial() == Material.WATER)
-        {
+        } else if (iblockstate.getMaterial() == Material.WATER) {
             GlStateManager.setFog(GlStateManager.FogMode.EXP);
 
-            if (entity instanceof EntityLivingBase)
-            {
-                if (((EntityLivingBase)entity).isPotionActive(MobEffects.WATER_BREATHING))
-                {
+            if (entity instanceof EntityLivingBase) {
+                if (((EntityLivingBase) entity).isPotionActive(MobEffects.WATER_BREATHING)) {
                     GlStateManager.setFogDensity(0.01F);
+                } else {
+                    GlStateManager.setFogDensity(0.1F - (float) EnchantmentHelper.getRespirationModifier((EntityLivingBase) entity) * 0.03F);
                 }
-                else
-                {
-                    GlStateManager.setFogDensity(0.1F - (float)EnchantmentHelper.getRespirationModifier((EntityLivingBase)entity) * 0.03F);
-                }
-            }
-            else
-            {
+            } else {
                 GlStateManager.setFogDensity(0.1F);
             }
-        }
-        else if (iblockstate.getMaterial() == Material.LAVA)
-        {
+        } else if (iblockstate.getMaterial() == Material.LAVA) {
             GlStateManager.setFog(GlStateManager.FogMode.EXP);
             GlStateManager.setFogDensity(2.0F);
-        }
-        else
-        {
+        } else {
             float f = this.farPlaneDistance;
             GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
 
-            if (startCoords == -1)
-            {
+            if (startCoords == -1) {
                 GlStateManager.setFogStart(0.0F);
                 GlStateManager.setFogEnd(f);
-            }
-            else
-            {
+            } else {
                 GlStateManager.setFogStart(f * 0.75F);
                 GlStateManager.setFogEnd(f);
             }
 
-            if (GLContext.getCapabilities().GL_NV_fog_distance)
-            {
+            if (GLContext.getCapabilities().GL_NV_fog_distance) {
                 GlStateManager.glFogi(34138, 34139);
             }
 
-            if (this.mc.world.provider.doesXZShowFog((int)entity.posX, (int)entity.posZ) || this.mc.ingameGUI.getBossOverlay().shouldCreateFog())
-            {
+            if (this.mc.world.provider.doesXZShowFog((int) entity.posX, (int) entity.posZ) || this.mc.ingameGUI.getBossOverlay().shouldCreateFog()) {
                 GlStateManager.setFogStart(f * 0.05F);
                 GlStateManager.setFogEnd(Math.min(f, 192.0F) * 0.5F);
             }
@@ -1985,50 +1694,41 @@
         GlStateManager.colorMaterial(1028, 4608);
     }
 
-    public void setupFogColor(boolean black)
-    {
-        if (black)
-        {
+    public void setupFogColor(boolean black) {
+        if (black) {
             GlStateManager.glFog(2918, this.setFogColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
-        }
-        else
-        {
+        } else {
             GlStateManager.glFog(2918, this.setFogColorBuffer(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 1.0F));
         }
     }
 
-    private FloatBuffer setFogColorBuffer(float red, float green, float blue, float alpha)
-    {
+    private FloatBuffer setFogColorBuffer(float red, float green, float blue, float alpha) {
         this.fogColorBuffer.clear();
         this.fogColorBuffer.put(red).put(green).put(blue).put(alpha);
         this.fogColorBuffer.flip();
         return this.fogColorBuffer;
     }
 
-    public void resetData()
-    {
+    public void resetData() {
         this.itemActivationItem = null;
         this.mapItemRenderer.clearLoadedMaps();
     }
 
-    public MapItemRenderer getMapItemRenderer()
-    {
+    public MapItemRenderer getMapItemRenderer() {
         return this.mapItemRenderer;
     }
 
-    public static void drawNameplate(FontRenderer fontRendererIn, String str, float x, float y, float z, int verticalShift, float viewerYaw, float viewerPitch, boolean isThirdPersonFrontal, boolean isSneaking)
-    {
+    public static void drawNameplate(FontRenderer fontRendererIn, String str, float x, float y, float z, int verticalShift, float viewerYaw, float viewerPitch, boolean isThirdPersonFrontal, boolean isSneaking) {
         GlStateManager.pushMatrix();
         GlStateManager.translate(x, y, z);
         GlStateManager.glNormal3f(0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(-viewerYaw, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate((float)(isThirdPersonFrontal ? -1 : 1) * viewerPitch, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate((float) (isThirdPersonFrontal ? -1 : 1) * viewerPitch, 1.0F, 0.0F, 0.0F);
         GlStateManager.scale(-0.025F, -0.025F, 0.025F);
         GlStateManager.disableLighting();
         GlStateManager.depthMask(false);
 
-        if (!isSneaking)
-        {
+        if (!isSneaking) {
             GlStateManager.disableDepth();
         }
 
@@ -2039,15 +1739,14 @@
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
-        bufferbuilder.pos((double)(-i - 1), (double)(-1 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-        bufferbuilder.pos((double)(-i - 1), (double)(8 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-        bufferbuilder.pos((double)(i + 1), (double)(8 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-        bufferbuilder.pos((double)(i + 1), (double)(-1 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+        bufferbuilder.pos((double) (-i - 1), (double) (-1 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+        bufferbuilder.pos((double) (-i - 1), (double) (8 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+        bufferbuilder.pos((double) (i + 1), (double) (8 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+        bufferbuilder.pos((double) (i + 1), (double) (-1 + verticalShift), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
         tessellator.draw();
         GlStateManager.enableTexture2D();
 
-        if (!isSneaking)
-        {
+        if (!isSneaking) {
             fontRendererIn.drawString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift, 553648127);
             GlStateManager.enableDepth();
         }
@@ -2060,33 +1759,30 @@
         GlStateManager.popMatrix();
     }
 
-    public void displayItemActivation(ItemStack stack)
-    {
+    public void displayItemActivation(ItemStack stack) {
         this.itemActivationItem = stack;
         this.itemActivationTicks = 40;
         this.itemActivationOffX = this.random.nextFloat() * 2.0F - 1.0F;
         this.itemActivationOffY = this.random.nextFloat() * 2.0F - 1.0F;
     }
 
-    private void renderItemActivation(int p_190563_1_, int p_190563_2_, float p_190563_3_)
-    {
-        if (this.itemActivationItem != null && this.itemActivationTicks > 0)
-        {
+    private void renderItemActivation(int p_190563_1_, int p_190563_2_, float p_190563_3_) {
+        if (this.itemActivationItem != null && this.itemActivationTicks > 0) {
             int i = 40 - this.itemActivationTicks;
-            float f = ((float)i + p_190563_3_) / 40.0F;
+            float f = ((float) i + p_190563_3_) / 40.0F;
             float f1 = f * f;
             float f2 = f * f1;
             float f3 = 10.25F * f2 * f1 + -24.95F * f1 * f1 + 25.5F * f2 + -13.8F * f1 + 4.0F * f;
-            float f4 = f3 * (float)Math.PI;
-            float f5 = this.itemActivationOffX * (float)(p_190563_1_ / 4);
-            float f6 = this.itemActivationOffY * (float)(p_190563_2_ / 4);
+            float f4 = f3 * (float) Math.PI;
+            float f5 = this.itemActivationOffX * (float) (p_190563_1_ / 4);
+            float f6 = this.itemActivationOffY * (float) (p_190563_2_ / 4);
             GlStateManager.enableAlpha();
             GlStateManager.pushMatrix();
             GlStateManager.pushAttrib();
             GlStateManager.enableDepth();
             GlStateManager.disableCull();
             RenderHelper.enableStandardItemLighting();
-            GlStateManager.translate((float)(p_190563_1_ / 2) + f5 * MathHelper.abs(MathHelper.sin(f4 * 2.0F)), (float)(p_190563_2_ / 2) + f6 * MathHelper.abs(MathHelper.sin(f4 * 2.0F)), -50.0F);
+            GlStateManager.translate((float) (p_190563_1_ / 2) + f5 * MathHelper.abs(MathHelper.sin(f4 * 2.0F)), (float) (p_190563_2_ / 2) + f6 * MathHelper.abs(MathHelper.sin(f4 * 2.0F)), -50.0F);
             float f7 = 50.0F + 175.0F * MathHelper.sin(f4);
             GlStateManager.scale(f7, -f7, f7);
             GlStateManager.rotate(900.0F * MathHelper.abs(MathHelper.sin(f4)), 0.0F, 1.0F, 0.0F);
