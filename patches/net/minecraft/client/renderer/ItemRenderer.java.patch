--- ../src-base/minecraft/net/minecraft/client/renderer/ItemRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/ItemRenderer.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.renderer;
 
 import com.google.common.base.MoreObjects;
-import java.util.Objects;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -17,23 +16,19 @@
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraft.util.BlockRenderLayer;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.EnumHandSide;
-import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.storage.MapData;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Objects;
+
 @SideOnly(Side.CLIENT)
-public class ItemRenderer
-{
+public class ItemRenderer {
     private static final ResourceLocation RES_MAP_BACKGROUND = new ResourceLocation("textures/map/map_background.png");
     private static final ResourceLocation RES_UNDERWATER_OVERLAY = new ResourceLocation("textures/misc/underwater.png");
     private final Minecraft mc;
@@ -46,36 +41,30 @@
     private final RenderManager renderManager;
     private final RenderItem itemRenderer;
 
-    public ItemRenderer(Minecraft mcIn)
-    {
+    public ItemRenderer(Minecraft mcIn) {
         this.mc = mcIn;
         this.renderManager = mcIn.getRenderManager();
         this.itemRenderer = mcIn.getRenderItem();
     }
 
-    public void renderItem(EntityLivingBase entityIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform)
-    {
+    public void renderItem(EntityLivingBase entityIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform) {
         this.renderItemSide(entityIn, heldStack, transform, false);
     }
 
-    public void renderItemSide(EntityLivingBase entitylivingbaseIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform, boolean leftHanded)
-    {
-        if (!heldStack.isEmpty())
-        {
+    public void renderItemSide(EntityLivingBase entitylivingbaseIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform, boolean leftHanded) {
+        if (!heldStack.isEmpty()) {
             Item item = heldStack.getItem();
             Block block = Block.getBlockFromItem(item);
             GlStateManager.pushMatrix();
             boolean flag = this.itemRenderer.shouldRenderItemIn3D(heldStack) && block.getBlockLayer() == BlockRenderLayer.TRANSLUCENT;
 
-            if (flag)
-            {
+            if (flag) {
                 GlStateManager.depthMask(false);
             }
 
             this.itemRenderer.renderItem(heldStack, entitylivingbaseIn, transform, leftHanded);
 
-            if (flag)
-            {
+            if (flag) {
                 GlStateManager.depthMask(true);
             }
 
@@ -83,8 +72,7 @@
         }
     }
 
-    private void rotateArroundXAndY(float angle, float angleY)
-    {
+    private void rotateArroundXAndY(float angle, float angleY) {
         GlStateManager.pushMatrix();
         GlStateManager.rotate(angle, 1.0F, 0.0F, 0.0F);
         GlStateManager.rotate(angleY, 0.0F, 1.0F, 0.0F);
@@ -92,17 +80,15 @@
         GlStateManager.popMatrix();
     }
 
-    private void setLightmap()
-    {
+    private void setLightmap() {
         AbstractClientPlayer abstractclientplayer = this.mc.player;
-        int i = this.mc.world.getCombinedLight(new BlockPos(abstractclientplayer.posX, abstractclientplayer.posY + (double)abstractclientplayer.getEyeHeight(), abstractclientplayer.posZ), 0);
-        float f = (float)(i & 65535);
-        float f1 = (float)(i >> 16);
+        int i = this.mc.world.getCombinedLight(new BlockPos(abstractclientplayer.posX, abstractclientplayer.posY + (double) abstractclientplayer.getEyeHeight(), abstractclientplayer.posZ), 0);
+        float f = (float) (i & 65535);
+        float f1 = (float) (i >> 16);
         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, f, f1);
     }
 
-    private void rotateArm(float p_187458_1_)
-    {
+    private void rotateArm(float p_187458_1_) {
         EntityPlayerSP entityplayersp = this.mc.player;
         float f = entityplayersp.prevRenderArmPitch + (entityplayersp.renderArmPitch - entityplayersp.prevRenderArmPitch) * p_187458_1_;
         float f1 = entityplayersp.prevRenderArmYaw + (entityplayersp.renderArmYaw - entityplayersp.prevRenderArmYaw) * p_187458_1_;
@@ -110,18 +96,15 @@
         GlStateManager.rotate((entityplayersp.rotationYaw - f1) * 0.1F, 0.0F, 1.0F, 0.0F);
     }
 
-    private float getMapAngleFromPitch(float pitch)
-    {
+    private float getMapAngleFromPitch(float pitch) {
         float f = 1.0F - pitch / 45.0F + 0.1F;
         f = MathHelper.clamp(f, 0.0F, 1.0F);
-        f = -MathHelper.cos(f * (float)Math.PI) * 0.5F + 0.5F;
+        f = -MathHelper.cos(f * (float) Math.PI) * 0.5F + 0.5F;
         return f;
     }
 
-    private void renderArms()
-    {
-        if (!this.mc.player.isInvisible())
-        {
+    private void renderArms() {
+        if (!this.mc.player.isInvisible()) {
             GlStateManager.disableCull();
             GlStateManager.pushMatrix();
             GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
@@ -132,11 +115,10 @@
         }
     }
 
-    private void renderArm(EnumHandSide p_187455_1_)
-    {
+    private void renderArm(EnumHandSide p_187455_1_) {
         this.mc.getTextureManager().bindTexture(this.mc.player.getLocationSkin());
         Render<AbstractClientPlayer> render = this.renderManager.<AbstractClientPlayer>getEntityRenderObject(this.mc.player);
-        RenderPlayer renderplayer = (RenderPlayer)render;
+        RenderPlayer renderplayer = (RenderPlayer) render;
         GlStateManager.pushMatrix();
         float f = p_187455_1_ == EnumHandSide.RIGHT ? 1.0F : -1.0F;
         GlStateManager.rotate(92.0F, 0.0F, 1.0F, 0.0F);
@@ -144,25 +126,20 @@
         GlStateManager.rotate(f * -41.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.translate(f * 0.3F, -1.1F, 0.45F);
 
-        if (p_187455_1_ == EnumHandSide.RIGHT)
-        {
+        if (p_187455_1_ == EnumHandSide.RIGHT) {
             renderplayer.renderRightArm(this.mc.player);
-        }
-        else
-        {
+        } else {
             renderplayer.renderLeftArm(this.mc.player);
         }
 
         GlStateManager.popMatrix();
     }
 
-    private void renderMapFirstPersonSide(float p_187465_1_, EnumHandSide hand, float p_187465_3_, ItemStack stack)
-    {
+    private void renderMapFirstPersonSide(float p_187465_1_, EnumHandSide hand, float p_187465_3_, ItemStack stack) {
         float f = hand == EnumHandSide.RIGHT ? 1.0F : -1.0F;
         GlStateManager.translate(f * 0.125F, -0.125F, 0.0F);
 
-        if (!this.mc.player.isInvisible())
-        {
+        if (!this.mc.player.isInvisible()) {
             GlStateManager.pushMatrix();
             GlStateManager.rotate(f * 10.0F, 0.0F, 0.0F, 1.0F);
             this.renderArmFirstPerson(p_187465_1_, p_187465_3_, hand);
@@ -172,10 +149,10 @@
         GlStateManager.pushMatrix();
         GlStateManager.translate(f * 0.51F, -0.08F + p_187465_1_ * -1.2F, -0.75F);
         float f1 = MathHelper.sqrt(p_187465_3_);
-        float f2 = MathHelper.sin(f1 * (float)Math.PI);
+        float f2 = MathHelper.sin(f1 * (float) Math.PI);
         float f3 = -0.5F * f2;
-        float f4 = 0.4F * MathHelper.sin(f1 * ((float)Math.PI * 2F));
-        float f5 = -0.3F * MathHelper.sin(p_187465_3_ * (float)Math.PI);
+        float f4 = 0.4F * MathHelper.sin(f1 * ((float) Math.PI * 2F));
+        float f5 = -0.3F * MathHelper.sin(p_187465_3_ * (float) Math.PI);
         GlStateManager.translate(f * f3, f4 - 0.3F * f2, f5);
         GlStateManager.rotate(f2 * -45.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.rotate(f * f2 * -30.0F, 0.0F, 1.0F, 0.0F);
@@ -183,24 +160,22 @@
         GlStateManager.popMatrix();
     }
 
-    private void renderMapFirstPerson(float p_187463_1_, float p_187463_2_, float p_187463_3_)
-    {
+    private void renderMapFirstPerson(float p_187463_1_, float p_187463_2_, float p_187463_3_) {
         float f = MathHelper.sqrt(p_187463_3_);
-        float f1 = -0.2F * MathHelper.sin(p_187463_3_ * (float)Math.PI);
-        float f2 = -0.4F * MathHelper.sin(f * (float)Math.PI);
+        float f1 = -0.2F * MathHelper.sin(p_187463_3_ * (float) Math.PI);
+        float f2 = -0.4F * MathHelper.sin(f * (float) Math.PI);
         GlStateManager.translate(0.0F, -f1 / 2.0F, f2);
         float f3 = this.getMapAngleFromPitch(p_187463_1_);
         GlStateManager.translate(0.0F, 0.04F + p_187463_2_ * -1.2F + f3 * -0.5F, -0.72F);
         GlStateManager.rotate(f3 * -85.0F, 1.0F, 0.0F, 0.0F);
         this.renderArms();
-        float f4 = MathHelper.sin(f * (float)Math.PI);
+        float f4 = MathHelper.sin(f * (float) Math.PI);
         GlStateManager.rotate(f4 * 20.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.scale(2.0F, 2.0F, 2.0F);
         this.renderMapFirstPerson(this.itemStackMainHand);
     }
 
-    private void renderMapFirstPerson(ItemStack stack)
-    {
+    private void renderMapFirstPerson(ItemStack stack) {
         GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.scale(0.38F, 0.38F, 0.38F);
@@ -218,26 +193,24 @@
         tessellator.draw();
         MapData mapdata = ((net.minecraft.item.ItemMap) stack.getItem()).getMapData(stack, this.mc.world);
 
-        if (mapdata != null)
-        {
+        if (mapdata != null) {
             this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, false);
         }
 
         GlStateManager.enableLighting();
     }
 
-    private void renderArmFirstPerson(float p_187456_1_, float p_187456_2_, EnumHandSide p_187456_3_)
-    {
+    private void renderArmFirstPerson(float p_187456_1_, float p_187456_2_, EnumHandSide p_187456_3_) {
         boolean flag = p_187456_3_ != EnumHandSide.LEFT;
         float f = flag ? 1.0F : -1.0F;
         float f1 = MathHelper.sqrt(p_187456_2_);
-        float f2 = -0.3F * MathHelper.sin(f1 * (float)Math.PI);
-        float f3 = 0.4F * MathHelper.sin(f1 * ((float)Math.PI * 2F));
-        float f4 = -0.4F * MathHelper.sin(p_187456_2_ * (float)Math.PI);
+        float f2 = -0.3F * MathHelper.sin(f1 * (float) Math.PI);
+        float f3 = 0.4F * MathHelper.sin(f1 * ((float) Math.PI * 2F));
+        float f4 = -0.4F * MathHelper.sin(p_187456_2_ * (float) Math.PI);
         GlStateManager.translate(f * (f2 + 0.64000005F), f3 + -0.6F + p_187456_1_ * -0.6F, f4 + -0.71999997F);
         GlStateManager.rotate(f * 45.0F, 0.0F, 1.0F, 0.0F);
-        float f5 = MathHelper.sin(p_187456_2_ * p_187456_2_ * (float)Math.PI);
-        float f6 = MathHelper.sin(f1 * (float)Math.PI);
+        float f5 = MathHelper.sin(p_187456_2_ * p_187456_2_ * (float) Math.PI);
+        float f6 = MathHelper.sin(f1 * (float) Math.PI);
         GlStateManager.rotate(f * f6 * 70.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f * f5 * -20.0F, 0.0F, 0.0F, 1.0F);
         AbstractClientPlayer abstractclientplayer = this.mc.player;
@@ -247,73 +220,63 @@
         GlStateManager.rotate(200.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.rotate(f * -135.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.translate(f * 5.6F, 0.0F, 0.0F);
-        RenderPlayer renderplayer = (RenderPlayer)this.renderManager.<AbstractClientPlayer>getEntityRenderObject(abstractclientplayer);
+        RenderPlayer renderplayer = (RenderPlayer) this.renderManager.<AbstractClientPlayer>getEntityRenderObject(abstractclientplayer);
         GlStateManager.disableCull();
 
-        if (flag)
-        {
+        if (flag) {
             renderplayer.renderRightArm(abstractclientplayer);
-        }
-        else
-        {
+        } else {
             renderplayer.renderLeftArm(abstractclientplayer);
         }
 
         GlStateManager.enableCull();
     }
 
-    private void transformEatFirstPerson(float p_187454_1_, EnumHandSide hand, ItemStack stack)
-    {
-        float f = (float)this.mc.player.getItemInUseCount() - p_187454_1_ + 1.0F;
-        float f1 = f / (float)stack.getMaxItemUseDuration();
+    private void transformEatFirstPerson(float p_187454_1_, EnumHandSide hand, ItemStack stack) {
+        float f = (float) this.mc.player.getItemInUseCount() - p_187454_1_ + 1.0F;
+        float f1 = f / (float) stack.getMaxItemUseDuration();
 
-        if (f1 < 0.8F)
-        {
-            float f2 = MathHelper.abs(MathHelper.cos(f / 4.0F * (float)Math.PI) * 0.1F);
+        if (f1 < 0.8F) {
+            float f2 = MathHelper.abs(MathHelper.cos(f / 4.0F * (float) Math.PI) * 0.1F);
             GlStateManager.translate(0.0F, f2, 0.0F);
         }
 
-        float f3 = 1.0F - (float)Math.pow((double)f1, 27.0D);
+        float f3 = 1.0F - (float) Math.pow((double) f1, 27.0D);
         int i = hand == EnumHandSide.RIGHT ? 1 : -1;
-        GlStateManager.translate(f3 * 0.6F * (float)i, f3 * -0.5F, f3 * 0.0F);
-        GlStateManager.rotate((float)i * f3 * 90.0F, 0.0F, 1.0F, 0.0F);
+        GlStateManager.translate(f3 * 0.6F * (float) i, f3 * -0.5F, f3 * 0.0F);
+        GlStateManager.rotate((float) i * f3 * 90.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f3 * 10.0F, 1.0F, 0.0F, 0.0F);
-        GlStateManager.rotate((float)i * f3 * 30.0F, 0.0F, 0.0F, 1.0F);
+        GlStateManager.rotate((float) i * f3 * 30.0F, 0.0F, 0.0F, 1.0F);
     }
 
-    private void transformFirstPerson(EnumHandSide hand, float p_187453_2_)
-    {
+    private void transformFirstPerson(EnumHandSide hand, float p_187453_2_) {
         int i = hand == EnumHandSide.RIGHT ? 1 : -1;
-        float f = MathHelper.sin(p_187453_2_ * p_187453_2_ * (float)Math.PI);
-        GlStateManager.rotate((float)i * (45.0F + f * -20.0F), 0.0F, 1.0F, 0.0F);
-        float f1 = MathHelper.sin(MathHelper.sqrt(p_187453_2_) * (float)Math.PI);
-        GlStateManager.rotate((float)i * f1 * -20.0F, 0.0F, 0.0F, 1.0F);
+        float f = MathHelper.sin(p_187453_2_ * p_187453_2_ * (float) Math.PI);
+        GlStateManager.rotate((float) i * (45.0F + f * -20.0F), 0.0F, 1.0F, 0.0F);
+        float f1 = MathHelper.sin(MathHelper.sqrt(p_187453_2_) * (float) Math.PI);
+        GlStateManager.rotate((float) i * f1 * -20.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.rotate(f1 * -80.0F, 1.0F, 0.0F, 0.0F);
-        GlStateManager.rotate((float)i * -45.0F, 0.0F, 1.0F, 0.0F);
+        GlStateManager.rotate((float) i * -45.0F, 0.0F, 1.0F, 0.0F);
     }
 
-    private void transformSideFirstPerson(EnumHandSide hand, float p_187459_2_)
-    {
+    private void transformSideFirstPerson(EnumHandSide hand, float p_187459_2_) {
         int i = hand == EnumHandSide.RIGHT ? 1 : -1;
-        GlStateManager.translate((float)i * 0.56F, -0.52F + p_187459_2_ * -0.6F, -0.72F);
+        GlStateManager.translate((float) i * 0.56F, -0.52F + p_187459_2_ * -0.6F, -0.72F);
     }
 
-    public void renderItemInFirstPerson(float partialTicks)
-    {
+    public void renderItemInFirstPerson(float partialTicks) {
         AbstractClientPlayer abstractclientplayer = this.mc.player;
         float f = abstractclientplayer.getSwingProgress(partialTicks);
-        EnumHand enumhand = (EnumHand)MoreObjects.firstNonNull(abstractclientplayer.swingingHand, EnumHand.MAIN_HAND);
+        EnumHand enumhand = (EnumHand) MoreObjects.firstNonNull(abstractclientplayer.swingingHand, EnumHand.MAIN_HAND);
         float f1 = abstractclientplayer.prevRotationPitch + (abstractclientplayer.rotationPitch - abstractclientplayer.prevRotationPitch) * partialTicks;
         float f2 = abstractclientplayer.prevRotationYaw + (abstractclientplayer.rotationYaw - abstractclientplayer.prevRotationYaw) * partialTicks;
         boolean flag = true;
         boolean flag1 = true;
 
-        if (abstractclientplayer.isHandActive())
-        {
+        if (abstractclientplayer.isHandActive()) {
             ItemStack itemstack = abstractclientplayer.getActiveItemStack();
 
-            if (itemstack.getItem() instanceof net.minecraft.item.ItemBow)
-            {
+            if (itemstack.getItem() instanceof net.minecraft.item.ItemBow) {
                 EnumHand enumhand1 = abstractclientplayer.getActiveHand();
                 flag = enumhand1 == EnumHand.MAIN_HAND;
                 flag1 = !flag;
@@ -325,60 +288,46 @@
         this.rotateArm(partialTicks);
         GlStateManager.enableRescaleNormal();
 
-        if (flag)
-        {
+        if (flag) {
             float f3 = enumhand == EnumHand.MAIN_HAND ? f : 0.0F;
             float f5 = 1.0F - (this.prevEquippedProgressMainHand + (this.equippedProgressMainHand - this.prevEquippedProgressMainHand) * partialTicks);
-            if(!net.minecraftforge.client.ForgeHooksClient.renderSpecificFirstPersonHand(EnumHand.MAIN_HAND, partialTicks, f1, f3, f5, this.itemStackMainHand))
-            this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
+            if (!net.minecraftforge.client.ForgeHooksClient.renderSpecificFirstPersonHand(EnumHand.MAIN_HAND, partialTicks, f1, f3, f5, this.itemStackMainHand))
+                this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             float f4 = enumhand == EnumHand.OFF_HAND ? f : 0.0F;
             float f6 = 1.0F - (this.prevEquippedProgressOffHand + (this.equippedProgressOffHand - this.prevEquippedProgressOffHand) * partialTicks);
-            if(!net.minecraftforge.client.ForgeHooksClient.renderSpecificFirstPersonHand(EnumHand.OFF_HAND, partialTicks, f1, f4, f6, this.itemStackOffHand))
-            this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
+            if (!net.minecraftforge.client.ForgeHooksClient.renderSpecificFirstPersonHand(EnumHand.OFF_HAND, partialTicks, f1, f4, f6, this.itemStackOffHand))
+                this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
         }
 
         GlStateManager.disableRescaleNormal();
         RenderHelper.disableStandardItemLighting();
     }
 
-    public void renderItemInFirstPerson(AbstractClientPlayer player, float p_187457_2_, float p_187457_3_, EnumHand hand, float p_187457_5_, ItemStack stack, float p_187457_7_)
-    {
+    public void renderItemInFirstPerson(AbstractClientPlayer player, float p_187457_2_, float p_187457_3_, EnumHand hand, float p_187457_5_, ItemStack stack, float p_187457_7_) {
         boolean flag = hand == EnumHand.MAIN_HAND;
         EnumHandSide enumhandside = flag ? player.getPrimaryHand() : player.getPrimaryHand().opposite();
         GlStateManager.pushMatrix();
 
-        if (stack.isEmpty())
-        {
-            if (flag && !player.isInvisible())
-            {
+        if (stack.isEmpty()) {
+            if (flag && !player.isInvisible()) {
                 this.renderArmFirstPerson(p_187457_7_, p_187457_5_, enumhandside);
             }
-        }
-        else if (stack.getItem() instanceof net.minecraft.item.ItemMap)
-        {
-            if (flag && this.itemStackOffHand.isEmpty())
-            {
+        } else if (stack.getItem() instanceof net.minecraft.item.ItemMap) {
+            if (flag && this.itemStackOffHand.isEmpty()) {
                 this.renderMapFirstPerson(p_187457_3_, p_187457_7_, p_187457_5_);
-            }
-            else
-            {
+            } else {
                 this.renderMapFirstPersonSide(p_187457_7_, enumhandside, p_187457_5_, stack);
             }
-        }
-        else
-        {
+        } else {
             boolean flag1 = enumhandside == EnumHandSide.RIGHT;
 
-            if (player.isHandActive() && player.getItemInUseCount() > 0 && player.getActiveHand() == hand)
-            {
+            if (player.isHandActive() && player.getItemInUseCount() > 0 && player.getActiveHand() == hand) {
                 int j = flag1 ? 1 : -1;
 
-                switch (stack.getItemUseAction())
-                {
+                switch (stack.getItemUseAction()) {
                     case NONE:
                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
                         break;
@@ -392,21 +341,19 @@
                         break;
                     case BOW:
                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
-                        GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
+                        GlStateManager.translate((float) j * -0.2785682F, 0.18344387F, 0.15731531F);
                         GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
-                        GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
-                        GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
-                        float f5 = (float)stack.getMaxItemUseDuration() - ((float)this.mc.player.getItemInUseCount() - p_187457_2_ + 1.0F);
+                        GlStateManager.rotate((float) j * 35.3F, 0.0F, 1.0F, 0.0F);
+                        GlStateManager.rotate((float) j * -9.785F, 0.0F, 0.0F, 1.0F);
+                        float f5 = (float) stack.getMaxItemUseDuration() - ((float) this.mc.player.getItemInUseCount() - p_187457_2_ + 1.0F);
                         float f6 = f5 / 20.0F;
                         f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
 
-                        if (f6 > 1.0F)
-                        {
+                        if (f6 > 1.0F) {
                             f6 = 1.0F;
                         }
 
-                        if (f6 > 0.1F)
-                        {
+                        if (f6 > 0.1F) {
                             float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
                             float f3 = f6 - 0.1F;
                             float f4 = f7 * f3;
@@ -415,16 +362,14 @@
 
                         GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
                         GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
-                        GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
+                        GlStateManager.rotate((float) j * 45.0F, 0.0F, -1.0F, 0.0F);
                 }
-            }
-            else
-            {
-                float f = -0.4F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * (float)Math.PI);
-                float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * ((float)Math.PI * 2F));
-                float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float)Math.PI);
+            } else {
+                float f = -0.4F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * (float) Math.PI);
+                float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * ((float) Math.PI * 2F));
+                float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float) Math.PI);
                 int i = flag1 ? 1 : -1;
-                GlStateManager.translate((float)i * f, f1, f2);
+                GlStateManager.translate((float) i * f, f1, f2);
                 this.transformSideFirstPerson(enumhandside, p_187457_7_);
                 this.transformFirstPerson(enumhandside, p_187457_5_);
             }
@@ -435,58 +380,49 @@
         GlStateManager.popMatrix();
     }
 
-    public void renderOverlays(float partialTicks)
-    {
+    public void renderOverlays(float partialTicks) {
         GlStateManager.disableAlpha();
 
-        if (this.mc.player.isEntityInsideOpaqueBlock())
-        {
+        if (this.mc.player.isEntityInsideOpaqueBlock()) {
             IBlockState iblockstate = this.mc.world.getBlockState(new BlockPos(this.mc.player));
             BlockPos overlayPos = new BlockPos(this.mc.player);
             EntityPlayer entityplayer = this.mc.player;
 
-            for (int i = 0; i < 8; ++i)
-            {
-                double d0 = entityplayer.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
-                double d1 = entityplayer.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
-                double d2 = entityplayer.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
-                BlockPos blockpos = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
+            for (int i = 0; i < 8; ++i) {
+                double d0 = entityplayer.posX + (double) (((float) ((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
+                double d1 = entityplayer.posY + (double) (((float) ((i >> 1) % 2) - 0.5F) * 0.1F);
+                double d2 = entityplayer.posZ + (double) (((float) ((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
+                BlockPos blockpos = new BlockPos(d0, d1 + (double) entityplayer.getEyeHeight(), d2);
                 IBlockState iblockstate1 = this.mc.world.getBlockState(blockpos);
 
-                if (iblockstate1.causesSuffocation())
-                {
+                if (iblockstate1.causesSuffocation()) {
                     iblockstate = iblockstate1;
                     overlayPos = blockpos;
                 }
             }
 
-            if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE)
-            {
+            if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE) {
                 if (!net.minecraftforge.event.ForgeEventFactory.renderBlockOverlay(mc.player, partialTicks, net.minecraftforge.client.event.RenderBlockOverlayEvent.OverlayType.BLOCK, iblockstate, overlayPos))
-                this.renderBlockInHand(this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
+                    this.renderBlockInHand(this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
             }
         }
 
-        if (!this.mc.player.isSpectator())
-        {
-            if (this.mc.player.isInsideOfMaterial(Material.WATER))
-            {
+        if (!this.mc.player.isSpectator()) {
+            if (this.mc.player.isInsideOfMaterial(Material.WATER)) {
                 if (!net.minecraftforge.event.ForgeEventFactory.renderWaterOverlay(mc.player, partialTicks))
-                this.renderWaterOverlayTexture(partialTicks);
+                    this.renderWaterOverlayTexture(partialTicks);
             }
 
-            if (this.mc.player.isBurning())
-            {
+            if (this.mc.player.isBurning()) {
                 if (!net.minecraftforge.event.ForgeEventFactory.renderFireOverlay(mc.player, partialTicks))
-                this.renderFireInFirstPerson();
+                    this.renderFireInFirstPerson();
             }
         }
 
         GlStateManager.enableAlpha();
     }
 
-    private void renderBlockInHand(TextureAtlasSprite sprite)
-    {
+    private void renderBlockInHand(TextureAtlasSprite sprite) {
         this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
@@ -503,17 +439,16 @@
         float f8 = sprite.getMinV();
         float f9 = sprite.getMaxV();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-        bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double)f7, (double)f9).endVertex();
-        bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double)f6, (double)f9).endVertex();
-        bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double)f6, (double)f8).endVertex();
-        bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double)f7, (double)f8).endVertex();
+        bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double) f7, (double) f9).endVertex();
+        bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double) f6, (double) f9).endVertex();
+        bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double) f6, (double) f8).endVertex();
+        bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double) f7, (double) f8).endVertex();
         tessellator.draw();
         GlStateManager.popMatrix();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
     }
 
-    private void renderWaterOverlayTexture(float partialTicks)
-    {
+    private void renderWaterOverlayTexture(float partialTicks) {
         this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
@@ -531,18 +466,17 @@
         float f7 = -this.mc.player.rotationYaw / 64.0F;
         float f8 = this.mc.player.rotationPitch / 64.0F;
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-        bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
-        bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
-        bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
-        bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
+        bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double) (4.0F + f7), (double) (4.0F + f8)).endVertex();
+        bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double) (0.0F + f7), (double) (4.0F + f8)).endVertex();
+        bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double) (0.0F + f7), (double) (0.0F + f8)).endVertex();
+        bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double) (4.0F + f7), (double) (0.0F + f8)).endVertex();
         tessellator.draw();
         GlStateManager.popMatrix();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableBlend();
     }
 
-    private void renderFireInFirstPerson()
-    {
+    private void renderFireInFirstPerson() {
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 0.9F);
@@ -552,8 +486,7 @@
         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         float f = 1.0F;
 
-        for (int i = 0; i < 2; ++i)
-        {
+        for (int i = 0; i < 2; ++i) {
             GlStateManager.pushMatrix();
             TextureAtlasSprite textureatlassprite = this.mc.getTextureMapBlocks().getAtlasSprite("minecraft:blocks/fire_layer_1");
             this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -566,13 +499,13 @@
             float f7 = -0.5F;
             float f8 = 0.5F;
             float f9 = -0.5F;
-            GlStateManager.translate((float)(-(i * 2 - 1)) * 0.24F, -0.3F, 0.0F);
-            GlStateManager.rotate((float)(i * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
+            GlStateManager.translate((float) (-(i * 2 - 1)) * 0.24F, -0.3F, 0.0F);
+            GlStateManager.rotate((float) (i * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-            bufferbuilder.pos(-0.5D, -0.5D, -0.5D).tex((double)f2, (double)f4).endVertex();
-            bufferbuilder.pos(0.5D, -0.5D, -0.5D).tex((double)f1, (double)f4).endVertex();
-            bufferbuilder.pos(0.5D, 0.5D, -0.5D).tex((double)f1, (double)f3).endVertex();
-            bufferbuilder.pos(-0.5D, 0.5D, -0.5D).tex((double)f2, (double)f3).endVertex();
+            bufferbuilder.pos(-0.5D, -0.5D, -0.5D).tex((double) f2, (double) f4).endVertex();
+            bufferbuilder.pos(0.5D, -0.5D, -0.5D).tex((double) f1, (double) f4).endVertex();
+            bufferbuilder.pos(0.5D, 0.5D, -0.5D).tex((double) f1, (double) f3).endVertex();
+            bufferbuilder.pos(-0.5D, 0.5D, -0.5D).tex((double) f2, (double) f3).endVertex();
             tessellator.draw();
             GlStateManager.popMatrix();
         }
@@ -583,21 +516,17 @@
         GlStateManager.depthFunc(515);
     }
 
-    public void updateEquippedItem()
-    {
+    public void updateEquippedItem() {
         this.prevEquippedProgressMainHand = this.equippedProgressMainHand;
         this.prevEquippedProgressOffHand = this.equippedProgressOffHand;
         EntityPlayerSP entityplayersp = this.mc.player;
         ItemStack itemstack = entityplayersp.getHeldItemMainhand();
         ItemStack itemstack1 = entityplayersp.getHeldItemOffhand();
 
-        if (entityplayersp.isRowingBoat())
-        {
+        if (entityplayersp.isRowingBoat()) {
             this.equippedProgressMainHand = MathHelper.clamp(this.equippedProgressMainHand - 0.4F, 0.0F, 1.0F);
             this.equippedProgressOffHand = MathHelper.clamp(this.equippedProgressOffHand - 0.4F, 0.0F, 1.0F);
-        }
-        else
-        {
+        } else {
             float f = entityplayersp.getCooledAttackStrength(1.0F);
 
             boolean requipM = net.minecraftforge.client.ForgeHooksClient.shouldCauseReequipAnimation(this.itemStackMainHand, itemstack, entityplayersp.inventory.currentItem);
@@ -609,28 +538,22 @@
                 this.itemStackOffHand = itemstack1;
 
             this.equippedProgressMainHand += MathHelper.clamp((!requipM ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
-            this.equippedProgressOffHand += MathHelper.clamp((float)(!requipO ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
+            this.equippedProgressOffHand += MathHelper.clamp((float) (!requipO ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
         }
 
-        if (this.equippedProgressMainHand < 0.1F)
-        {
+        if (this.equippedProgressMainHand < 0.1F) {
             this.itemStackMainHand = itemstack;
         }
 
-        if (this.equippedProgressOffHand < 0.1F)
-        {
+        if (this.equippedProgressOffHand < 0.1F) {
             this.itemStackOffHand = itemstack1;
         }
     }
 
-    public void resetEquippedProgress(EnumHand hand)
-    {
-        if (hand == EnumHand.MAIN_HAND)
-        {
+    public void resetEquippedProgress(EnumHand hand) {
+        if (hand == EnumHand.MAIN_HAND) {
             this.equippedProgressMainHand = 0.0F;
-        }
-        else
-        {
+        } else {
             this.equippedProgressOffHand = 0.0F;
         }
     }
