--- ../src-base/minecraft/net/minecraft/client/multiplayer/WorldClient.java
+++ ../src-work/minecraft/net/minecraft/client/multiplayer/WorldClient.java
@@ -1,9 +1,6 @@
 package net.minecraft.client.multiplayer;
 
 import com.google.common.collect.Sets;
-import java.util.Random;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -32,12 +29,7 @@
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.TextComponentString;
-import net.minecraft.world.DimensionType;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.EnumSkyBlock;
-import net.minecraft.world.GameType;
-import net.minecraft.world.World;
-import net.minecraft.world.WorldSettings;
+import net.minecraft.world.*;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.storage.SaveDataMemoryStorage;
@@ -46,9 +38,12 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.Random;
+import java.util.Set;
+
 @SideOnly(Side.CLIENT)
-public class WorldClient extends World
-{
+public class WorldClient extends World {
     private final NetHandlerPlayClient connection;
     private ChunkProviderClient clientChunkProvider;
     private final Set<Entity> entityList = Sets.<Entity>newHashSet();
@@ -58,8 +53,7 @@
     private int ambienceTicks;
     protected Set<ChunkPos> visibleChunks;
 
-    public WorldClient(NetHandlerPlayClient netHandler, WorldSettings settings, int dimension, EnumDifficulty difficulty, Profiler profilerIn)
-    {
+    public WorldClient(NetHandlerPlayClient netHandler, WorldSettings settings, int dimension, EnumDifficulty difficulty, Profiler profilerIn) {
         super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), net.minecraftforge.common.DimensionManager.createProviderFor(dimension), profilerIn, true);
         this.ambienceTicks = this.rand.nextInt(12000);
         this.visibleChunks = Sets.<ChunkPos>newHashSet();
@@ -75,25 +69,21 @@
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(this));
     }
 
-    public void tick()
-    {
+    public void tick() {
         super.tick();
         this.setTotalWorldTime(this.getTotalWorldTime() + 1L);
 
-        if (this.getGameRules().getBoolean("doDaylightCycle"))
-        {
+        if (this.getGameRules().getBoolean("doDaylightCycle")) {
             this.setWorldTime(this.getWorldTime() + 1L);
         }
 
         this.profiler.startSection("reEntryProcessing");
 
-        for (int i = 0; i < 10 && !this.entitySpawnQueue.isEmpty(); ++i)
-        {
+        for (int i = 0; i < 10 && !this.entitySpawnQueue.isEmpty(); ++i) {
             Entity entity = this.entitySpawnQueue.iterator().next();
             this.entitySpawnQueue.remove(entity);
 
-            if (!this.loadedEntityList.contains(entity))
-            {
+            if (!this.loadedEntityList.contains(entity)) {
                 this.spawnEntity(entity);
             }
         }
@@ -105,33 +95,27 @@
         this.profiler.endSection();
     }
 
-    public void invalidateBlockReceiveRegion(int x1, int y1, int z1, int x2, int y2, int z2)
-    {
+    public void invalidateBlockReceiveRegion(int x1, int y1, int z1, int x2, int y2, int z2) {
     }
 
-    protected IChunkProvider createChunkProvider()
-    {
+    protected IChunkProvider createChunkProvider() {
         this.clientChunkProvider = new ChunkProviderClient(this);
         return this.clientChunkProvider;
     }
 
-    protected boolean isChunkLoaded(int x, int z, boolean allowEmpty)
-    {
+    public boolean isChunkLoaded(int x, int z, boolean allowEmpty) {
         return allowEmpty || !this.getChunkProvider().provideChunk(x, z).isEmpty();
     }
 
-    protected void refreshVisibleChunks()
-    {
+    protected void refreshVisibleChunks() {
         this.visibleChunks.clear();
         int i = this.mc.gameSettings.renderDistanceChunks;
         this.profiler.startSection("buildList");
         int j = MathHelper.floor(this.mc.player.posX / 16.0D);
         int k = MathHelper.floor(this.mc.player.posZ / 16.0D);
 
-        for (int l = -i; l <= i; ++l)
-        {
-            for (int i1 = -i; i1 <= i; ++i1)
-            {
+        for (int l = -i; l <= i; ++l) {
+            for (int i1 = -i; i1 <= i; ++i1) {
                 this.visibleChunks.add(new ChunkPos(l + j, i1 + k));
             }
         }
@@ -139,28 +123,23 @@
         this.profiler.endSection();
     }
 
-    protected void updateBlocks()
-    {
+    protected void updateBlocks() {
         this.refreshVisibleChunks();
 
-        if (this.ambienceTicks > 0)
-        {
+        if (this.ambienceTicks > 0) {
             --this.ambienceTicks;
         }
 
         this.previousActiveChunkSet.retainAll(this.visibleChunks);
 
-        if (this.previousActiveChunkSet.size() == this.visibleChunks.size())
-        {
+        if (this.previousActiveChunkSet.size() == this.visibleChunks.size()) {
             this.previousActiveChunkSet.clear();
         }
 
         int i = 0;
 
-        for (ChunkPos chunkpos : this.visibleChunks)
-        {
-            if (!this.previousActiveChunkSet.contains(chunkpos))
-            {
+        for (ChunkPos chunkpos : this.visibleChunks) {
+            if (!this.previousActiveChunkSet.contains(chunkpos)) {
                 int j = chunkpos.x * 16;
                 int k = chunkpos.z * 16;
                 this.profiler.startSection("getChunk");
@@ -170,94 +149,73 @@
                 this.previousActiveChunkSet.add(chunkpos);
                 ++i;
 
-                if (i >= 10)
-                {
+                if (i >= 10) {
                     return;
                 }
             }
         }
     }
 
-    public void doPreChunk(int chunkX, int chunkZ, boolean loadChunk)
-    {
-        if (loadChunk)
-        {
+    public void doPreChunk(int chunkX, int chunkZ, boolean loadChunk) {
+        if (loadChunk) {
             this.clientChunkProvider.loadChunk(chunkX, chunkZ);
-        }
-        else
-        {
+        } else {
             this.clientChunkProvider.unloadChunk(chunkX, chunkZ);
             this.markBlockRangeForRenderUpdate(chunkX * 16, 0, chunkZ * 16, chunkX * 16 + 15, 256, chunkZ * 16 + 15);
         }
     }
 
-    public boolean spawnEntity(Entity entityIn)
-    {
+    public boolean spawnEntity(Entity entityIn) {
         boolean flag = super.spawnEntity(entityIn);
         this.entityList.add(entityIn);
 
-        if (flag)
-        {
-            if (entityIn instanceof EntityMinecart)
-            {
-                this.mc.getSoundHandler().playSound(new MovingSoundMinecart((EntityMinecart)entityIn));
+        if (flag) {
+            if (entityIn instanceof EntityMinecart) {
+                this.mc.getSoundHandler().playSound(new MovingSoundMinecart((EntityMinecart) entityIn));
             }
-        }
-        else
-        {
+        } else {
             this.entitySpawnQueue.add(entityIn);
         }
 
         return flag;
     }
 
-    public void removeEntity(Entity entityIn)
-    {
+    public void removeEntity(Entity entityIn) {
         super.removeEntity(entityIn);
         this.entityList.remove(entityIn);
     }
 
-    public void onEntityAdded(Entity entityIn)
-    {
+    public void onEntityAdded(Entity entityIn) {
         super.onEntityAdded(entityIn);
 
-        if (this.entitySpawnQueue.contains(entityIn))
-        {
+        if (this.entitySpawnQueue.contains(entityIn)) {
             this.entitySpawnQueue.remove(entityIn);
         }
     }
 
-    public void onEntityRemoved(Entity entityIn)
-    {
+    public void onEntityRemoved(Entity entityIn) {
         super.onEntityRemoved(entityIn);
 
-        if (this.entityList.contains(entityIn))
-        {
-            if (entityIn.isEntityAlive())
-            {
+        if (this.entityList.contains(entityIn)) {
+            if (entityIn.isEntityAlive()) {
                 this.entitySpawnQueue.add(entityIn);
-            }
-            else
-            {
+            } else {
                 this.entityList.remove(entityIn);
             }
         }
     }
 
-    public void addEntityToWorld(int entityID, Entity entityToSpawn)
-    {
+    public void addEntityToWorld(int entityID, Entity entityToSpawn) {
         Entity entity = this.getEntityByID(entityID);
 
-        if (entity != null)
-        {
+        if (entity != null) {
             this.removeEntity(entity);
         }
 
         this.entityList.add(entityToSpawn);
         entityToSpawn.setEntityId(entityID);
 
-        if (!this.spawnEntity(entityToSpawn))
-        {
+        if (!this.spawnEntity(entityToSpawn)) {
             this.entitySpawnQueue.add(entityToSpawn);
         }
 
@@ -265,17 +223,14 @@
     }
 
     @Nullable
-    public Entity getEntityByID(int id)
-    {
-        return (Entity)(id == this.mc.player.getEntityId() ? this.mc.player : super.getEntityByID(id));
+    public Entity getEntityByID(int id) {
+        return (Entity) (id == this.mc.player.getEntityId() ? this.mc.player : super.getEntityByID(id));
     }
 
-    public Entity removeEntityFromWorld(int entityID)
-    {
+    public Entity removeEntityFromWorld(int entityID) {
         Entity entity = this.entitiesById.removeObject(entityID);
 
-        if (entity != null)
-        {
+        if (entity != null) {
             this.entityList.remove(entity);
             this.removeEntity(entity);
         }
@@ -284,8 +239,7 @@
     }
 
     @Deprecated
-    public boolean invalidateRegionAndSetBlock(BlockPos pos, IBlockState state)
-    {
+    public boolean invalidateRegionAndSetBlock(BlockPos pos, IBlockState state) {
         int i = pos.getX();
         int j = pos.getY();
         int k = pos.getZ();
@@ -293,21 +247,17 @@
         return super.setBlockState(pos, state, 3);
     }
 
-    public void sendQuittingDisconnectingPacket()
-    {
+    public void sendQuittingDisconnectingPacket() {
         this.connection.getNetworkManager().closeChannel(new TextComponentString("Quitting"));
     }
 
-    protected void updateWeather()
-    {
+    protected void updateWeather() {
     }
 
-    protected void playMoodSoundAndCheckLight(int p_147467_1_, int p_147467_2_, Chunk chunkIn)
-    {
+    protected void playMoodSoundAndCheckLight(int p_147467_1_, int p_147467_2_, Chunk chunkIn) {
         super.playMoodSoundAndCheckLight(p_147467_1_, p_147467_2_, chunkIn);
 
-        if (this.ambienceTicks == 0)
-        {
+        if (this.ambienceTicks == 0) {
             this.updateLCG = this.updateLCG * 3 + 1013904223;
             int i = this.updateLCG >> 2;
             int j = i & 15;
@@ -318,36 +268,31 @@
             j = j + p_147467_1_;
             k = k + p_147467_2_;
 
-            if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
-            {
-                double d0 = this.mc.player.getDistanceSq((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D);
+            if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0) {
+                double d0 = this.mc.player.getDistanceSq((double) j + 0.5D, (double) l + 0.5D, (double) k + 0.5D);
 
-                if (this.mc.player != null && d0 > 4.0D && d0 < 256.0D)
-                {
-                    this.playSound((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D, SoundEvents.AMBIENT_CAVE, SoundCategory.AMBIENT, 0.7F, 0.8F + this.rand.nextFloat() * 0.2F, false);
+                if (this.mc.player != null && d0 > 4.0D && d0 < 256.0D) {
+                    this.playSound((double) j + 0.5D, (double) l + 0.5D, (double) k + 0.5D, SoundEvents.AMBIENT_CAVE, SoundCategory.AMBIENT, 0.7F, 0.8F + this.rand.nextFloat() * 0.2F, false);
                     this.ambienceTicks = this.rand.nextInt(12000) + 6000;
                 }
             }
         }
     }
 
-    public void doVoidFogParticles(int posX, int posY, int posZ)
-    {
+    public void doVoidFogParticles(int posX, int posY, int posZ) {
         int i = 32;
         Random random = new Random();
         ItemStack itemstack = this.mc.player.getHeldItemMainhand();
         boolean flag = this.mc.playerController.getCurrentGameType() == GameType.CREATIVE && !itemstack.isEmpty() && itemstack.getItem() == Item.getItemFromBlock(Blocks.BARRIER);
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for (int j = 0; j < 667; ++j)
-        {
+        for (int j = 0; j < 667; ++j) {
             this.showBarrierParticles(posX, posY, posZ, 16, random, flag, blockpos$mutableblockpos);
             this.showBarrierParticles(posX, posY, posZ, 32, random, flag, blockpos$mutableblockpos);
         }
     }
 
-    public void showBarrierParticles(int x, int y, int z, int offset, Random random, boolean holdingBarrier, BlockPos.MutableBlockPos pos)
-    {
+    public void showBarrierParticles(int x, int y, int z, int offset, Random random, boolean holdingBarrier, BlockPos.MutableBlockPos pos) {
         int i = x + this.rand.nextInt(offset) - this.rand.nextInt(offset);
         int j = y + this.rand.nextInt(offset) - this.rand.nextInt(offset);
         int k = z + this.rand.nextInt(offset) - this.rand.nextInt(offset);
@@ -355,57 +300,47 @@
         IBlockState iblockstate = this.getBlockState(pos);
         iblockstate.getBlock().randomDisplayTick(iblockstate, this, pos, random);
 
-        if (holdingBarrier && iblockstate.getBlock() == Blocks.BARRIER)
-        {
-            this.spawnParticle(EnumParticleTypes.BARRIER, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), 0.0D, 0.0D, 0.0D, new int[0]);
+        if (holdingBarrier && iblockstate.getBlock() == Blocks.BARRIER) {
+            this.spawnParticle(EnumParticleTypes.BARRIER, (double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F), 0.0D, 0.0D, 0.0D, new int[0]);
         }
     }
 
-    public void removeAllEntities()
-    {
+    public void removeAllEntities() {
         this.loadedEntityList.removeAll(this.unloadedEntityList);
 
-        for (int i = 0; i < this.unloadedEntityList.size(); ++i)
-        {
+        for (int i = 0; i < this.unloadedEntityList.size(); ++i) {
             Entity entity = this.unloadedEntityList.get(i);
             int j = entity.chunkCoordX;
             int k = entity.chunkCoordZ;
 
-            if (entity.addedToChunk && this.isChunkLoaded(j, k, true))
-            {
+            if (entity.addedToChunk && this.isChunkLoaded(j, k, true)) {
                 this.getChunkFromChunkCoords(j, k).removeEntity(entity);
             }
         }
 
-        for (int i1 = 0; i1 < this.unloadedEntityList.size(); ++i1)
-        {
+        for (int i1 = 0; i1 < this.unloadedEntityList.size(); ++i1) {
             this.onEntityRemoved(this.unloadedEntityList.get(i1));
         }
 
         this.unloadedEntityList.clear();
 
-        for (int j1 = 0; j1 < this.loadedEntityList.size(); ++j1)
-        {
+        for (int j1 = 0; j1 < this.loadedEntityList.size(); ++j1) {
             Entity entity1 = this.loadedEntityList.get(j1);
             Entity entity2 = entity1.getRidingEntity();
 
-            if (entity2 != null)
-            {
-                if (!entity2.isDead && entity2.isPassenger(entity1))
-                {
+            if (entity2 != null) {
+                if (!entity2.isDead && entity2.isPassenger(entity1)) {
                     continue;
                 }
 
                 entity1.dismountRidingEntity();
             }
 
-            if (entity1.isDead)
-            {
+            if (entity1.isDead) {
                 int k1 = entity1.chunkCoordX;
                 int l = entity1.chunkCoordZ;
 
-                if (entity1.addedToChunk && this.isChunkLoaded(k1, l, true))
-                {
+                if (entity1.addedToChunk && this.isChunkLoaded(k1, l, true)) {
                     this.getChunkFromChunkCoords(k1, l).removeEntity(entity1);
                 }
 
@@ -415,101 +350,77 @@
         }
     }
 
-    public CrashReportCategory addWorldInfoToCrashReport(CrashReport report)
-    {
+    public CrashReportCategory addWorldInfoToCrashReport(CrashReport report) {
         CrashReportCategory crashreportcategory = super.addWorldInfoToCrashReport(report);
-        crashreportcategory.addDetail("Forced entities", new ICrashReportDetail<String>()
-        {
-            public String call()
-            {
+        crashreportcategory.addDetail("Forced entities", new ICrashReportDetail<String>() {
+            public String call() {
                 return WorldClient.this.entityList.size() + " total; " + WorldClient.this.entityList;
             }
         });
-        crashreportcategory.addDetail("Retry entities", new ICrashReportDetail<String>()
-        {
-            public String call()
-            {
+        crashreportcategory.addDetail("Retry entities", new ICrashReportDetail<String>() {
+            public String call() {
                 return WorldClient.this.entitySpawnQueue.size() + " total; " + WorldClient.this.entitySpawnQueue;
             }
         });
-        crashreportcategory.addDetail("Server brand", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        crashreportcategory.addDetail("Server brand", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return WorldClient.this.mc.player.getServerBrand();
             }
         });
-        crashreportcategory.addDetail("Server type", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        crashreportcategory.addDetail("Server type", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return WorldClient.this.mc.getIntegratedServer() == null ? "Non-integrated multiplayer server" : "Integrated singleplayer server";
             }
         });
         return crashreportcategory;
     }
 
-    public void playSound(@Nullable EntityPlayer player, double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch)
-    {
-        if (player == this.mc.player)
-        {
+    public void playSound(@Nullable EntityPlayer player, double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch) {
+        if (player == this.mc.player) {
             this.playSound(x, y, z, soundIn, category, volume, pitch, false);
         }
     }
 
-    public void playSound(BlockPos pos, SoundEvent soundIn, SoundCategory category, float volume, float pitch, boolean distanceDelay)
-    {
-        this.playSound((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, soundIn, category, volume, pitch, distanceDelay);
+    public void playSound(BlockPos pos, SoundEvent soundIn, SoundCategory category, float volume, float pitch, boolean distanceDelay) {
+        this.playSound((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, soundIn, category, volume, pitch, distanceDelay);
     }
 
-    public void playSound(double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch, boolean distanceDelay)
-    {
+    public void playSound(double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch, boolean distanceDelay) {
         double d0 = this.mc.getRenderViewEntity().getDistanceSq(x, y, z);
-        PositionedSoundRecord positionedsoundrecord = new PositionedSoundRecord(soundIn, category, volume, pitch, (float)x, (float)y, (float)z);
+        PositionedSoundRecord positionedsoundrecord = new PositionedSoundRecord(soundIn, category, volume, pitch, (float) x, (float) y, (float) z);
 
-        if (distanceDelay && d0 > 100.0D)
-        {
+        if (distanceDelay && d0 > 100.0D) {
             double d1 = Math.sqrt(d0) / 40.0D;
-            this.mc.getSoundHandler().playDelayedSound(positionedsoundrecord, (int)(d1 * 20.0D));
-        }
-        else
-        {
+            this.mc.getSoundHandler().playDelayedSound(positionedsoundrecord, (int) (d1 * 20.0D));
+        } else {
             this.mc.getSoundHandler().playSound(positionedsoundrecord);
         }
     }
 
-    public void makeFireworks(double x, double y, double z, double motionX, double motionY, double motionZ, @Nullable NBTTagCompound compound)
-    {
+    public void makeFireworks(double x, double y, double z, double motionX, double motionY, double motionZ, @Nullable NBTTagCompound compound) {
         this.mc.effectRenderer.addEffect(new ParticleFirework.Starter(this, x, y, z, motionX, motionY, motionZ, this.mc.effectRenderer, compound));
     }
 
-    public void sendPacketToServer(Packet<?> packetIn)
-    {
+    public void sendPacketToServer(Packet<?> packetIn) {
         this.connection.sendPacket(packetIn);
     }
 
-    public void setWorldScoreboard(Scoreboard scoreboardIn)
-    {
+    public void setWorldScoreboard(Scoreboard scoreboardIn) {
         this.worldScoreboard = scoreboardIn;
     }
 
-    public void setWorldTime(long time)
-    {
-        if (time < 0L)
-        {
+    public void setWorldTime(long time) {
+        if (time < 0L) {
             time = -time;
             this.getGameRules().setOrCreateGameRule("doDaylightCycle", "false");
-        }
-        else
-        {
+        } else {
             this.getGameRules().setOrCreateGameRule("doDaylightCycle", "true");
         }
 
         super.setWorldTime(time);
     }
 
-    public ChunkProviderClient getChunkProvider()
-    {
-        return (ChunkProviderClient)super.getChunkProvider();
+    public ChunkProviderClient getChunkProvider() {
+        return (ChunkProviderClient) super.getChunkProvider();
     }
 }
