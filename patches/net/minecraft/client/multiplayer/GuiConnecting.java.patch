--- ../src-base/minecraft/net/minecraft/client/multiplayer/GuiConnecting.java
+++ ../src-work/minecraft/net/minecraft/client/multiplayer/GuiConnecting.java
@@ -1,9 +1,5 @@
 package net.minecraft.client.multiplayer;
 
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.concurrent.atomic.AtomicInteger;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiDisconnected;
@@ -21,46 +17,43 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.concurrent.atomic.AtomicInteger;
+
 @SideOnly(Side.CLIENT)
-public class GuiConnecting extends GuiScreen
-{
+public class GuiConnecting extends GuiScreen {
     private static final AtomicInteger CONNECTION_ID = new AtomicInteger(0);
     private static final Logger LOGGER = LogManager.getLogger();
     private NetworkManager networkManager;
     private boolean cancel;
     private final GuiScreen previousGuiScreen;
 
-    public GuiConnecting(GuiScreen parent, Minecraft mcIn, ServerData serverDataIn)
-    {
+    public GuiConnecting(GuiScreen parent, Minecraft mcIn, ServerData serverDataIn) {
         this.mc = mcIn;
         this.previousGuiScreen = parent;
         ServerAddress serveraddress = ServerAddress.fromString(serverDataIn.serverIP);
-        mcIn.loadWorld((WorldClient)null);
+        mcIn.loadWorld((WorldClient) null);
         mcIn.setServerData(serverDataIn);
         this.connect(serveraddress.getIP(), serveraddress.getPort());
     }
 
-    public GuiConnecting(GuiScreen parent, Minecraft mcIn, String hostName, int port)
-    {
+    public GuiConnecting(GuiScreen parent, Minecraft mcIn, String hostName, int port) {
         this.mc = mcIn;
         this.previousGuiScreen = parent;
-        mcIn.loadWorld((WorldClient)null);
+        mcIn.loadWorld((WorldClient) null);
         this.connect(hostName, port);
     }
 
-    private void connect(final String ip, final int port)
-    {
+    private void connect(final String ip, final int port) {
         LOGGER.info("Connecting to {}, {}", ip, Integer.valueOf(port));
-        (new Thread("Server Connector #" + CONNECTION_ID.incrementAndGet())
-        {
-            public void run()
-            {
+        (new Thread("Server Connector #" + CONNECTION_ID.incrementAndGet()) {
+            public void run() {
                 InetAddress inetaddress = null;
 
-                try
-                {
-                    if (GuiConnecting.this.cancel)
-                    {
+                try {
+                    if (GuiConnecting.this.cancel) {
                         return;
                     }
 
@@ -69,72 +62,55 @@
                     GuiConnecting.this.networkManager.setNetHandler(new NetHandlerLoginClient(GuiConnecting.this.networkManager, GuiConnecting.this.mc, GuiConnecting.this.previousGuiScreen));
                     GuiConnecting.this.networkManager.sendPacket(new C00Handshake(ip, port, EnumConnectionState.LOGIN, true));
                     GuiConnecting.this.networkManager.sendPacket(new CPacketLoginStart(GuiConnecting.this.mc.getSession().getProfile()));
-                }
-                catch (UnknownHostException unknownhostexception)
-                {
-                    if (GuiConnecting.this.cancel)
-                    {
+                } catch (UnknownHostException unknownhostexception) {
+                    if (GuiConnecting.this.cancel) {
                         return;
                     }
 
-                    GuiConnecting.LOGGER.error("Couldn't connect to server", (Throwable)unknownhostexception);
-                    GuiConnecting.this.mc.displayGuiScreen(new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[] {"Unknown host"})));
-                }
-                catch (Exception exception)
-                {
-                    if (GuiConnecting.this.cancel)
-                    {
+                    GuiConnecting.LOGGER.error("Couldn't connect to server", (Throwable) unknownhostexception);
+                    GuiConnecting.this.mc.displayGuiScreen(new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[]{"Unknown host"})));
+                } catch (Exception exception) {
+                    if (GuiConnecting.this.cancel) {
                         return;
                     }
 
-                    GuiConnecting.LOGGER.error("Couldn't connect to server", (Throwable)exception);
+                    GuiConnecting.LOGGER.error("Couldn't connect to server", (Throwable) exception);
                     String s = exception.toString();
 
-                    if (inetaddress != null)
-                    {
+                    if (inetaddress != null) {
                         String s1 = inetaddress + ":" + port;
                         s = s.replaceAll(s1, "");
                     }
 
-                    GuiConnecting.this.mc.displayGuiScreen(new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[] {s})));
+                    GuiConnecting.this.mc.displayGuiScreen(new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[]{s})));
                 }
             }
         }).start();
     }
 
-    public void updateScreen()
-    {
-        if (this.networkManager != null)
-        {
-            if (this.networkManager.isChannelOpen())
-            {
+    public void updateScreen() {
+        if (this.networkManager != null) {
+            if (this.networkManager.isChannelOpen()) {
                 this.networkManager.processReceivedPackets();
-            }
-            else
-            {
+            } else {
                 this.networkManager.checkDisconnected();
             }
         }
     }
 
-    protected void keyTyped(char typedChar, int keyCode) throws IOException
-    {
+    protected void keyTyped(char typedChar, int keyCode) throws IOException {
     }
 
-    public void initGui()
-    {
+    public void initGui() {
         this.buttonList.clear();
         this.buttonList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, I18n.format("gui.cancel")));
     }
 
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.id == 0)
-        {
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.id == 0) {
             this.cancel = true;
 
-            if (this.networkManager != null)
-            {
+            if (this.networkManager != null) {
                 this.networkManager.closeChannel(new TextComponentString("Aborted"));
             }
 
@@ -142,16 +118,12 @@
         }
     }
 
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.drawDefaultBackground();
 
-        if (this.networkManager == null)
-        {
+        if (this.networkManager == null) {
             this.drawCenteredString(this.fontRenderer, I18n.format("connect.connecting"), this.width / 2, this.height / 2 - 50, 16777215);
-        }
-        else
-        {
+        } else {
             this.drawCenteredString(this.fontRenderer, I18n.format("connect.authorizing"), this.width / 2, this.height / 2 - 50, 16777215);
         }
 
