--- ../src-base/minecraft/net/minecraft/client/model/ModelBoat.java
+++ ../src-work/minecraft/net/minecraft/client/model/ModelBoat.java
@@ -9,15 +9,13 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class ModelBoat extends ModelBase implements IMultipassModel
-{
+public class ModelBoat extends ModelBase implements IMultipassModel {
     public ModelRenderer[] boatSides = new ModelRenderer[5];
     public ModelRenderer[] paddles = new ModelRenderer[2];
     public ModelRenderer noWater;
     private final int patchList = GLAllocation.generateDisplayLists(1);
 
-    public ModelBoat()
-    {
+    public ModelBoat() {
         this.boatSides[0] = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
         this.boatSides[1] = (new ModelRenderer(this, 0, 19)).setTextureSize(128, 64);
         this.boatSides[2] = (new ModelRenderer(this, 0, 27)).setTextureSize(128, 64);
@@ -38,31 +36,29 @@
         this.boatSides[3].setRotationPoint(0.0F, 4.0F, -9.0F);
         this.boatSides[4].addBox(-14.0F, -7.0F, -1.0F, 28, 6, 2, 0.0F);
         this.boatSides[4].setRotationPoint(0.0F, 4.0F, 9.0F);
-        this.boatSides[0].rotateAngleX = ((float)Math.PI / 2F);
-        this.boatSides[1].rotateAngleY = ((float)Math.PI * 3F / 2F);
-        this.boatSides[2].rotateAngleY = ((float)Math.PI / 2F);
-        this.boatSides[3].rotateAngleY = (float)Math.PI;
+        this.boatSides[0].rotateAngleX = ((float) Math.PI / 2F);
+        this.boatSides[1].rotateAngleY = ((float) Math.PI * 3F / 2F);
+        this.boatSides[2].rotateAngleY = ((float) Math.PI / 2F);
+        this.boatSides[3].rotateAngleY = (float) Math.PI;
         this.paddles[0] = this.makePaddle(true);
         this.paddles[0].setRotationPoint(3.0F, -5.0F, 9.0F);
         this.paddles[1] = this.makePaddle(false);
         this.paddles[1].setRotationPoint(3.0F, -5.0F, -9.0F);
-        this.paddles[1].rotateAngleY = (float)Math.PI;
+        this.paddles[1].rotateAngleY = (float) Math.PI;
         this.paddles[0].rotateAngleZ = 0.19634955F;
         this.paddles[1].rotateAngleZ = 0.19634955F;
         this.noWater = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
         this.noWater.addBox(-14.0F, -9.0F, -3.0F, 28, 16, 3, 0.0F);
         this.noWater.setRotationPoint(0.0F, -3.0F, 1.0F);
-        this.noWater.rotateAngleX = ((float)Math.PI / 2F);
+        this.noWater.rotateAngleX = ((float) Math.PI / 2F);
     }
 
-    public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale)
-    {
+    public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
         GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
-        EntityBoat entityboat = (EntityBoat)entityIn;
+        EntityBoat entityboat = (EntityBoat) entityIn;
         this.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entityIn);
 
-        for (int i = 0; i < 5; ++i)
-        {
+        for (int i = 0; i < 5; ++i) {
             this.boatSides[i].render(scale);
         }
 
@@ -70,16 +66,14 @@
         this.renderPaddle(entityboat, 1, scale, limbSwing);
     }
 
-    public void renderMultipass(Entity p_187054_1_, float p_187054_2_, float p_187054_3_, float p_187054_4_, float p_187054_5_, float p_187054_6_, float scale)
-    {
+    public void renderMultipass(Entity p_187054_1_, float p_187054_2_, float p_187054_3_, float p_187054_4_, float p_187054_5_, float p_187054_6_, float scale) {
         GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.colorMask(false, false, false, false);
         this.noWater.render(scale);
         GlStateManager.colorMask(true, true, true, true);
     }
 
-    protected ModelRenderer makePaddle(boolean p_187056_1_)
-    {
+    protected ModelRenderer makePaddle(boolean p_187056_1_) {
         ModelRenderer modelrenderer = (new ModelRenderer(this, 62, p_187056_1_ ? 0 : 20)).setTextureSize(128, 64);
         int i = 20;
         int j = 7;
@@ -90,16 +84,14 @@
         return modelrenderer;
     }
 
-    protected void renderPaddle(EntityBoat boat, int paddle, float scale, float limbSwing)
-    {
+    protected void renderPaddle(EntityBoat boat, int paddle, float scale, float limbSwing) {
         float f = boat.getRowingTime(paddle, limbSwing);
         ModelRenderer modelrenderer = this.paddles[paddle];
-        modelrenderer.rotateAngleX = (float)MathHelper.clampedLerp(-1.0471975803375244D, -0.2617993950843811D, (double)((MathHelper.sin(-f) + 1.0F) / 2.0F));
-        modelrenderer.rotateAngleY = (float)MathHelper.clampedLerp(-(Math.PI / 4D), (Math.PI / 4D), (double)((MathHelper.sin(-f + 1.0F) + 1.0F) / 2.0F));
+        modelrenderer.rotateAngleX = (float) MathHelper.clampedLerp(-1.0471975803375244D, -0.2617993950843811D, (double) ((MathHelper.sin(-f) + 1.0F) / 2.0F));
+        modelrenderer.rotateAngleY = (float) MathHelper.clampedLerp(-(Math.PI / 4D), (Math.PI / 4D), (double) ((MathHelper.sin(-f + 1.0F) + 1.0F) / 2.0F));
 
-        if (paddle == 1)
-        {
-            modelrenderer.rotateAngleY = (float)Math.PI - modelrenderer.rotateAngleY;
+        if (paddle == 1) {
+            modelrenderer.rotateAngleY = (float) Math.PI - modelrenderer.rotateAngleY;
         }
 
         modelrenderer.render(scale);
