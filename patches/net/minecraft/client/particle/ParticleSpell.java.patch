--- ../src-base/minecraft/net/minecraft/client/particle/ParticleSpell.java
+++ ../src-work/minecraft/net/minecraft/client/particle/ParticleSpell.java
@@ -1,44 +1,39 @@
 package net.minecraft.client.particle;
 
-import java.util.Random;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class ParticleSpell extends Particle
-{
+public class ParticleSpell extends Particle {
     private static final Random RANDOM = new Random();
     private int baseSpellTextureIndex = 128;
 
-    protected ParticleSpell(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double p_i1229_8_, double ySpeed, double p_i1229_12_)
-    {
+    protected ParticleSpell(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double p_i1229_8_, double ySpeed, double p_i1229_12_) {
         super(worldIn, xCoordIn, yCoordIn, zCoordIn, 0.5D - RANDOM.nextDouble(), ySpeed, 0.5D - RANDOM.nextDouble());
         this.motionY *= 0.20000000298023224D;
 
-        if (p_i1229_8_ == 0.0D && p_i1229_12_ == 0.0D)
-        {
+        if (p_i1229_8_ == 0.0D && p_i1229_12_ == 0.0D) {
             this.motionX *= 0.10000000149011612D;
             this.motionZ *= 0.10000000149011612D;
         }
 
         this.particleScale *= 0.75F;
-        this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
+        this.particleMaxAge = (int) (8.0D / (Math.random() * 0.8D + 0.2D));
     }
 
-    public boolean shouldDisableDepth()
-    {
+    public boolean shouldDisableDepth() {
         return true;
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         this.prevPosX = this.posX;
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
 
-        if (this.particleAge++ >= this.particleMaxAge)
-        {
+        if (this.particleAge++ >= this.particleMaxAge) {
             this.setExpired();
         }
 
@@ -46,8 +41,7 @@
         this.motionY += 0.004D;
         this.move(this.motionX, this.motionY, this.motionZ);
 
-        if (this.posY == this.prevPosY)
-        {
+        if (this.posY == this.prevPosY) {
             this.motionX *= 1.1D;
             this.motionZ *= 1.1D;
         }
@@ -56,71 +50,59 @@
         this.motionY *= 0.9599999785423279D;
         this.motionZ *= 0.9599999785423279D;
 
-        if (this.onGround)
-        {
+        if (this.onGround) {
             this.motionX *= 0.699999988079071D;
             this.motionZ *= 0.699999988079071D;
         }
     }
 
-    public void setBaseSpellTextureIndex(int baseSpellTextureIndexIn)
-    {
+    public void setBaseSpellTextureIndex(int baseSpellTextureIndexIn) {
         this.baseSpellTextureIndex = baseSpellTextureIndexIn;
     }
 
     @SideOnly(Side.CLIENT)
-    public static class AmbientMobFactory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
-                particle.setAlphaF(0.15F);
-                particle.setRBGColorF((float)xSpeedIn, (float)ySpeedIn, (float)zSpeedIn);
-                return particle;
-            }
+    public static class AmbientMobFactory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
+            particle.setAlphaF(0.15F);
+            particle.setRBGColorF((float) xSpeedIn, (float) ySpeedIn, (float) zSpeedIn);
+            return particle;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static class Factory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                return new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
-            }
+    public static class Factory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            return new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static class InstantFactory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
-                ((ParticleSpell)particle).setBaseSpellTextureIndex(144);
-                return particle;
-            }
+    public static class InstantFactory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
+            ((ParticleSpell) particle).setBaseSpellTextureIndex(144);
+            return particle;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static class MobFactory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
-                particle.setRBGColorF((float)xSpeedIn, (float)ySpeedIn, (float)zSpeedIn);
-                return particle;
-            }
+    public static class MobFactory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
+            particle.setRBGColorF((float) xSpeedIn, (float) ySpeedIn, (float) zSpeedIn);
+            return particle;
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static class WitchFactory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
-                ((ParticleSpell)particle).setBaseSpellTextureIndex(144);
-                float f = worldIn.rand.nextFloat() * 0.5F + 0.35F;
-                particle.setRBGColorF(1.0F * f, 0.0F * f, 1.0F * f);
-                return particle;
-            }
+    public static class WitchFactory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            Particle particle = new ParticleSpell(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
+            ((ParticleSpell) particle).setBaseSpellTextureIndex(144);
+            float f = worldIn.rand.nextFloat() * 0.5F + 0.35F;
+            particle.setRBGColorF(1.0F * f, 0.0F * f, 1.0F * f);
+            return particle;
         }
+    }
 }
