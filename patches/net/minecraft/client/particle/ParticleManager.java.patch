--- ../src-base/minecraft/net/minecraft/client/particle/ParticleManager.java
+++ ../src-work/minecraft/net/minecraft/client/particle/ParticleManager.java
@@ -3,14 +3,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
-import java.util.ArrayDeque;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Queue;
-import java.util.Random;
-import javax.annotation.Nullable;
-import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.ActiveRenderInfo;
 import net.minecraft.client.renderer.BufferBuilder;
@@ -23,11 +15,7 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
@@ -35,9 +23,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.*;
+
 @SideOnly(Side.CLIENT)
-public class ParticleManager
-{
+public class ParticleManager {
     private static final ResourceLocation PARTICLE_TEXTURES = new ResourceLocation("textures/particle/particles.png");
     protected World world;
     private final ArrayDeque<Particle>[][] fxLayers = new ArrayDeque[4][];
@@ -47,17 +37,14 @@
     private final Map<Integer, IParticleFactory> particleTypes = Maps.<Integer, IParticleFactory>newHashMap();
     private final Queue<Particle> queue = Queues.<Particle>newArrayDeque();
 
-    public ParticleManager(World worldIn, TextureManager rendererIn)
-    {
+    public ParticleManager(World worldIn, TextureManager rendererIn) {
         this.world = worldIn;
         this.renderer = rendererIn;
 
-        for (int i = 0; i < 4; ++i)
-        {
+        for (int i = 0; i < 4; ++i) {
             this.fxLayers[i] = new ArrayDeque[2];
 
-            for (int j = 0; j < 2; ++j)
-            {
+            for (int j = 0; j < 2; ++j) {
                 this.fxLayers[i][j] = Queues.newArrayDeque();
             }
         }
@@ -65,8 +52,7 @@
         this.registerVanillaParticles();
     }
 
-    private void registerVanillaParticles()
-    {
+    private void registerVanillaParticles() {
         this.registerParticle(EnumParticleTypes.EXPLOSION_NORMAL.getParticleID(), new ParticleExplosion.Factory());
         this.registerParticle(EnumParticleTypes.SPIT.getParticleID(), new ParticleSpit.Factory());
         this.registerParticle(EnumParticleTypes.WATER_BUBBLE.getParticleID(), new ParticleBubble.Factory());
@@ -117,32 +103,26 @@
         this.registerParticle(EnumParticleTypes.TOTEM.getParticleID(), new ParticleTotem.Factory());
     }
 
-    public void registerParticle(int id, IParticleFactory particleFactory)
-    {
+    public void registerParticle(int id, IParticleFactory particleFactory) {
         this.particleTypes.put(Integer.valueOf(id), particleFactory);
     }
 
-    public void emitParticleAtEntity(Entity entityIn, EnumParticleTypes particleTypes)
-    {
+    public void emitParticleAtEntity(Entity entityIn, EnumParticleTypes particleTypes) {
         this.particleEmitters.add(new ParticleEmitter(this.world, entityIn, particleTypes));
     }
 
-    public void emitParticleAtEntity(Entity p_191271_1_, EnumParticleTypes p_191271_2_, int p_191271_3_)
-    {
+    public void emitParticleAtEntity(Entity p_191271_1_, EnumParticleTypes p_191271_2_, int p_191271_3_) {
         this.particleEmitters.add(new ParticleEmitter(this.world, p_191271_1_, p_191271_2_, p_191271_3_));
     }
 
     @Nullable
-    public Particle spawnEffectParticle(int particleId, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters)
-    {
+    public Particle spawnEffectParticle(int particleId, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters) {
         IParticleFactory iparticlefactory = this.particleTypes.get(Integer.valueOf(particleId));
 
-        if (iparticlefactory != null)
-        {
+        if (iparticlefactory != null) {
             Particle particle = iparticlefactory.createParticle(particleId, this.world, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
 
-            if (particle != null)
-            {
+            if (particle != null) {
                 this.addEffect(particle);
                 return particle;
             }
@@ -151,29 +131,23 @@
         return null;
     }
 
-    public void addEffect(Particle effect)
-    {
+    public void addEffect(Particle effect) {
         if (effect == null) return; //Forge: Prevent modders from being bad and adding nulls causing untraceable NPEs.
         this.queue.add(effect);
     }
 
-    public void updateEffects()
-    {
-        for (int i = 0; i < 4; ++i)
-        {
+    public void updateEffects() {
+        for (int i = 0; i < 4; ++i) {
             this.updateEffectLayer(i);
         }
 
-        if (!this.particleEmitters.isEmpty())
-        {
+        if (!this.particleEmitters.isEmpty()) {
             List<ParticleEmitter> list = Lists.<ParticleEmitter>newArrayList();
 
-            for (ParticleEmitter particleemitter : this.particleEmitters)
-            {
+            for (ParticleEmitter particleemitter : this.particleEmitters) {
                 particleemitter.onUpdate();
 
-                if (!particleemitter.isAlive())
-                {
+                if (!particleemitter.isAlive()) {
                     list.add(particleemitter);
                 }
             }
@@ -181,15 +155,12 @@
             this.particleEmitters.removeAll(list);
         }
 
-        if (!this.queue.isEmpty())
-        {
-            for (Particle particle = this.queue.poll(); particle != null; particle = this.queue.poll())
-            {
+        if (!this.queue.isEmpty()) {
+            for (Particle particle = this.queue.poll(); particle != null; particle = this.queue.poll()) {
                 int j = particle.getFXLayer();
                 int k = particle.shouldDisableDepth() ? 0 : 1;
 
-                if (this.fxLayers[j][k].size() >= 16384)
-                {
+                if (this.fxLayers[j][k].size() >= 16384) {
                     this.fxLayers[j][k].removeFirst();
                 }
 
@@ -198,12 +169,10 @@
         }
     }
 
-    private void updateEffectLayer(int layer)
-    {
+    private void updateEffectLayer(int layer) {
         this.world.profiler.startSection(String.valueOf(layer));
 
-        for (int i = 0; i < 2; ++i)
-        {
+        for (int i = 0; i < 2; ++i) {
             this.world.profiler.startSection(String.valueOf(i));
             this.tickParticleList(this.fxLayers[layer][i]);
             this.world.profiler.endSection();
@@ -212,57 +181,40 @@
         this.world.profiler.endSection();
     }
 
-    private void tickParticleList(Queue<Particle> p_187240_1_)
-    {
-        if (!p_187240_1_.isEmpty())
-        {
+    private void tickParticleList(Queue<Particle> p_187240_1_) {
+        if (!p_187240_1_.isEmpty()) {
             Iterator<Particle> iterator = p_187240_1_.iterator();
 
-            while (iterator.hasNext())
-            {
+            while (iterator.hasNext()) {
                 Particle particle = iterator.next();
                 this.tickParticle(particle);
 
-                if (!particle.isAlive())
-                {
+                if (!particle.isAlive()) {
                     iterator.remove();
                 }
             }
         }
     }
 
-    private void tickParticle(final Particle particle)
-    {
-        try
-        {
+    private void tickParticle(final Particle particle) {
+        try {
             particle.onUpdate();
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Ticking Particle");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being ticked");
             final int i = particle.getFXLayer();
-            crashreportcategory.addDetail("Particle", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
+            crashreportcategory.addDetail("Particle", new ICrashReportDetail<String>() {
+                public String call() throws Exception {
                     return particle.toString();
                 }
             });
-            crashreportcategory.addDetail("Particle Type", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
-                    if (i == 0)
-                    {
+            crashreportcategory.addDetail("Particle Type", new ICrashReportDetail<String>() {
+                public String call() throws Exception {
+                    if (i == 0) {
                         return "MISC_TEXTURE";
-                    }
-                    else if (i == 1)
-                    {
+                    } else if (i == 1) {
                         return "TERRAIN_TEXTURE";
-                    }
-                    else
-                    {
+                    } else {
                         return i == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i;
                     }
                 }
@@ -271,31 +223,26 @@
         }
     }
 
-    public void renderParticles(Entity entityIn, float partialTicks)
-    {
+    public void renderParticles(Entity entityIn, float partialTicks) {
         float f = ActiveRenderInfo.getRotationX();
         float f1 = ActiveRenderInfo.getRotationZ();
         float f2 = ActiveRenderInfo.getRotationYZ();
         float f3 = ActiveRenderInfo.getRotationXY();
         float f4 = ActiveRenderInfo.getRotationXZ();
-        Particle.interpPosX = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
-        Particle.interpPosY = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
-        Particle.interpPosZ = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
+        Particle.interpPosX = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double) partialTicks;
+        Particle.interpPosY = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double) partialTicks;
+        Particle.interpPosZ = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double) partialTicks;
         Particle.cameraViewDir = entityIn.getLook(partialTicks);
         GlStateManager.enableBlend();
         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
         GlStateManager.alphaFunc(516, 0.003921569F);
 
-        for (int i_nf = 0; i_nf < 3; ++i_nf)
-        {
+        for (int i_nf = 0; i_nf < 3; ++i_nf) {
             final int i = i_nf;
 
-            for (int j = 0; j < 2; ++j)
-            {
-                if (!this.fxLayers[i][j].isEmpty())
-                {
-                    switch (j)
-                    {
+            for (int j = 0; j < 2; ++j) {
+                if (!this.fxLayers[i][j].isEmpty()) {
+                    switch (j) {
                         case 0:
                             GlStateManager.depthMask(false);
                             break;
@@ -303,8 +250,7 @@
                             GlStateManager.depthMask(true);
                     }
 
-                    switch (i)
-                    {
+                    switch (i) {
                         case 0:
                         default:
                             this.renderer.bindTexture(PARTICLE_TEXTURES);
@@ -318,37 +264,24 @@
                     BufferBuilder bufferbuilder = tessellator.getBuffer();
                     bufferbuilder.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
 
-                    for (final Particle particle : this.fxLayers[i][j])
-                    {
-                        try
-                        {
+                    for (final Particle particle : this.fxLayers[i][j]) {
+                        try {
                             particle.renderParticle(bufferbuilder, entityIn, partialTicks, f, f4, f1, f2, f3);
-                        }
-                        catch (Throwable throwable)
-                        {
+                        } catch (Throwable throwable) {
                             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering Particle");
                             CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being rendered");
-                            crashreportcategory.addDetail("Particle", new ICrashReportDetail<String>()
-                            {
-                                public String call() throws Exception
-                                {
+                            crashreportcategory.addDetail("Particle", new ICrashReportDetail<String>() {
+                                public String call() throws Exception {
                                     return particle.toString();
                                 }
                             });
-                            crashreportcategory.addDetail("Particle Type", new ICrashReportDetail<String>()
-                            {
-                                public String call() throws Exception
-                                {
-                                    if (i == 0)
-                                    {
+                            crashreportcategory.addDetail("Particle Type", new ICrashReportDetail<String>() {
+                                public String call() throws Exception {
+                                    if (i == 0) {
                                         return "MISC_TEXTURE";
-                                    }
-                                    else if (i == 1)
-                                    {
+                                    } else if (i == 1) {
                                         return "TERRAIN_TEXTURE";
-                                    }
-                                    else
-                                    {
+                                    } else {
                                         return i == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i;
                                     }
                                 }
@@ -367,8 +300,7 @@
         GlStateManager.alphaFunc(516, 0.1F);
     }
 
-    public void renderLitParticles(Entity entityIn, float partialTick)
-    {
+    public void renderLitParticles(Entity entityIn, float partialTick) {
         float f = 0.017453292F;
         float f1 = MathHelper.cos(entityIn.rotationYaw * 0.017453292F);
         float f2 = MathHelper.sin(entityIn.rotationYaw * 0.017453292F);
@@ -376,31 +308,25 @@
         float f4 = f1 * MathHelper.sin(entityIn.rotationPitch * 0.017453292F);
         float f5 = MathHelper.cos(entityIn.rotationPitch * 0.017453292F);
 
-        for (int i = 0; i < 2; ++i)
-        {
+        for (int i = 0; i < 2; ++i) {
             Queue<Particle> queue = this.fxLayers[3][i];
 
-            if (!queue.isEmpty())
-            {
+            if (!queue.isEmpty()) {
                 Tessellator tessellator = Tessellator.getInstance();
                 BufferBuilder bufferbuilder = tessellator.getBuffer();
 
-                for (Particle particle : queue)
-                {
+                for (Particle particle : queue) {
                     particle.renderParticle(bufferbuilder, entityIn, partialTick, f1, f5, f2, f3, f4);
                 }
             }
         }
     }
 
-    public void clearEffects(@Nullable World worldIn)
-    {
+    public void clearEffects(@Nullable World worldIn) {
         this.world = worldIn;
 
-        for (int i = 0; i < 4; ++i)
-        {
-            for (int j = 0; j < 2; ++j)
-            {
+        for (int i = 0; i < 4; ++i) {
+            for (int j = 0; j < 2; ++j) {
                 this.fxLayers[i][j].clear();
             }
         }
@@ -408,86 +334,70 @@
         this.particleEmitters.clear();
     }
 
-    public void addBlockDestroyEffects(BlockPos pos, IBlockState state)
-    {
-        if (!state.getBlock().isAir(state, this.world, pos) && !state.getBlock().addDestroyEffects(world, pos, this))
-        {
+    public void addBlockDestroyEffects(BlockPos pos, IBlockState state) {
+        if (!state.getBlock().isAir(state, this.world, pos) && !state.getBlock().addDestroyEffects(world, pos, this)) {
             state = state.getActualState(this.world, pos);
             int i = 4;
 
-            for (int j = 0; j < 4; ++j)
-            {
-                for (int k = 0; k < 4; ++k)
-                {
-                    for (int l = 0; l < 4; ++l)
-                    {
-                        double d0 = ((double)j + 0.5D) / 4.0D;
-                        double d1 = ((double)k + 0.5D) / 4.0D;
-                        double d2 = ((double)l + 0.5D) / 4.0D;
-                        this.addEffect((new ParticleDigging(this.world, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, state)).setBlockPos(pos));
+            for (int j = 0; j < 4; ++j) {
+                for (int k = 0; k < 4; ++k) {
+                    for (int l = 0; l < 4; ++l) {
+                        double d0 = ((double) j + 0.5D) / 4.0D;
+                        double d1 = ((double) k + 0.5D) / 4.0D;
+                        double d2 = ((double) l + 0.5D) / 4.0D;
+                        this.addEffect((new ParticleDigging(this.world, (double) pos.getX() + d0, (double) pos.getY() + d1, (double) pos.getZ() + d2, d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, state)).setBlockPos(pos));
                     }
                 }
             }
         }
     }
 
-    public void addBlockHitEffects(BlockPos pos, EnumFacing side)
-    {
+    public void addBlockHitEffects(BlockPos pos, EnumFacing side) {
         IBlockState iblockstate = this.world.getBlockState(pos);
 
-        if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE)
-        {
+        if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE) {
             int i = pos.getX();
             int j = pos.getY();
             int k = pos.getZ();
             float f = 0.1F;
             AxisAlignedBB axisalignedbb = iblockstate.getBoundingBox(this.world, pos);
-            double d0 = (double)i + this.rand.nextDouble() * (axisalignedbb.maxX - axisalignedbb.minX - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minX;
-            double d1 = (double)j + this.rand.nextDouble() * (axisalignedbb.maxY - axisalignedbb.minY - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minY;
-            double d2 = (double)k + this.rand.nextDouble() * (axisalignedbb.maxZ - axisalignedbb.minZ - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minZ;
+            double d0 = (double) i + this.rand.nextDouble() * (axisalignedbb.maxX - axisalignedbb.minX - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minX;
+            double d1 = (double) j + this.rand.nextDouble() * (axisalignedbb.maxY - axisalignedbb.minY - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minY;
+            double d2 = (double) k + this.rand.nextDouble() * (axisalignedbb.maxZ - axisalignedbb.minZ - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minZ;
 
-            if (side == EnumFacing.DOWN)
-            {
-                d1 = (double)j + axisalignedbb.minY - 0.10000000149011612D;
+            if (side == EnumFacing.DOWN) {
+                d1 = (double) j + axisalignedbb.minY - 0.10000000149011612D;
             }
 
-            if (side == EnumFacing.UP)
-            {
-                d1 = (double)j + axisalignedbb.maxY + 0.10000000149011612D;
+            if (side == EnumFacing.UP) {
+                d1 = (double) j + axisalignedbb.maxY + 0.10000000149011612D;
             }
 
-            if (side == EnumFacing.NORTH)
-            {
-                d2 = (double)k + axisalignedbb.minZ - 0.10000000149011612D;
+            if (side == EnumFacing.NORTH) {
+                d2 = (double) k + axisalignedbb.minZ - 0.10000000149011612D;
             }
 
-            if (side == EnumFacing.SOUTH)
-            {
-                d2 = (double)k + axisalignedbb.maxZ + 0.10000000149011612D;
+            if (side == EnumFacing.SOUTH) {
+                d2 = (double) k + axisalignedbb.maxZ + 0.10000000149011612D;
             }
 
-            if (side == EnumFacing.WEST)
-            {
-                d0 = (double)i + axisalignedbb.minX - 0.10000000149011612D;
+            if (side == EnumFacing.WEST) {
+                d0 = (double) i + axisalignedbb.minX - 0.10000000149011612D;
             }
 
-            if (side == EnumFacing.EAST)
-            {
-                d0 = (double)i + axisalignedbb.maxX + 0.10000000149011612D;
+            if (side == EnumFacing.EAST) {
+                d0 = (double) i + axisalignedbb.maxX + 0.10000000149011612D;
             }
 
             this.addEffect((new ParticleDigging(this.world, d0, d1, d2, 0.0D, 0.0D, 0.0D, iblockstate)).setBlockPos(pos).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
         }
     }
 
-    public String getStatistics()
-    {
+    public String getStatistics() {
         int i = 0;
 
-        for (int j = 0; j < 4; ++j)
-        {
-            for (int k = 0; k < 2; ++k)
-            {
+        for (int j = 0; j < 4; ++j) {
+            for (int k = 0; k < 2; ++k) {
                 i += this.fxLayers[j][k].size();
             }
         }
@@ -495,12 +405,10 @@
         return "" + i;
     }
 
-    public void addBlockHitEffects(BlockPos pos, net.minecraft.util.math.RayTraceResult target)
-    {
+    public void addBlockHitEffects(BlockPos pos, net.minecraft.util.math.RayTraceResult target) {
         IBlockState state = world.getBlockState(pos);
-        if (state != null && !state.getBlock().addHitEffects(state, world, target, this))
-        {
+        if (state != null && !state.getBlock().addHitEffects(state, world, target, this)) {
             addBlockHitEffects(pos, target.sideHit);
         }
-     }
+    }
 }
