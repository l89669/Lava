--- ../src-base/minecraft/net/minecraft/client/particle/Particle.java
+++ ../src-work/minecraft/net/minecraft/client/particle/Particle.java
@@ -1,7 +1,5 @@
 package net.minecraft.client.particle;
 
-import java.util.List;
-import java.util.Random;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.entity.Entity;
@@ -13,9 +11,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import java.util.List;
+import java.util.Random;
+
 @SideOnly(Side.CLIENT)
-public class Particle
-{
+public class Particle {
     private static final AxisAlignedBB EMPTY_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
     protected World world;
     protected double prevPosX;
@@ -54,8 +54,7 @@
     public static double interpPosZ;
     public static Vec3d cameraViewDir;
 
-    protected Particle(World worldIn, double posXIn, double posYIn, double posZIn)
-    {
+    protected Particle(World worldIn, double posXIn, double posYIn, double posZIn) {
         this.boundingBox = EMPTY_AABB;
         this.width = 0.6F;
         this.height = 1.8F;
@@ -73,196 +72,165 @@
         this.particleTextureJitterX = this.rand.nextFloat() * 3.0F;
         this.particleTextureJitterY = this.rand.nextFloat() * 3.0F;
         this.particleScale = (this.rand.nextFloat() * 0.5F + 0.5F) * 2.0F;
-        this.particleMaxAge = (int)(4.0F / (this.rand.nextFloat() * 0.9F + 0.1F));
+        this.particleMaxAge = (int) (4.0F / (this.rand.nextFloat() * 0.9F + 0.1F));
         this.particleAge = 0;
         this.canCollide = true;
     }
 
-    public Particle(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn)
-    {
+    public Particle(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn) {
         this(worldIn, xCoordIn, yCoordIn, zCoordIn);
         this.motionX = xSpeedIn + (Math.random() * 2.0D - 1.0D) * 0.4000000059604645D;
         this.motionY = ySpeedIn + (Math.random() * 2.0D - 1.0D) * 0.4000000059604645D;
         this.motionZ = zSpeedIn + (Math.random() * 2.0D - 1.0D) * 0.4000000059604645D;
-        float f = (float)(Math.random() + Math.random() + 1.0D) * 0.15F;
+        float f = (float) (Math.random() + Math.random() + 1.0D) * 0.15F;
         float f1 = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-        this.motionX = this.motionX / (double)f1 * (double)f * 0.4000000059604645D;
-        this.motionY = this.motionY / (double)f1 * (double)f * 0.4000000059604645D + 0.10000000149011612D;
-        this.motionZ = this.motionZ / (double)f1 * (double)f * 0.4000000059604645D;
+        this.motionX = this.motionX / (double) f1 * (double) f * 0.4000000059604645D;
+        this.motionY = this.motionY / (double) f1 * (double) f * 0.4000000059604645D + 0.10000000149011612D;
+        this.motionZ = this.motionZ / (double) f1 * (double) f * 0.4000000059604645D;
     }
 
-    public Particle multiplyVelocity(float multiplier)
-    {
-        this.motionX *= (double)multiplier;
-        this.motionY = (this.motionY - 0.10000000149011612D) * (double)multiplier + 0.10000000149011612D;
-        this.motionZ *= (double)multiplier;
+    public Particle multiplyVelocity(float multiplier) {
+        this.motionX *= (double) multiplier;
+        this.motionY = (this.motionY - 0.10000000149011612D) * (double) multiplier + 0.10000000149011612D;
+        this.motionZ *= (double) multiplier;
         return this;
     }
 
-    public Particle multipleParticleScaleBy(float scale)
-    {
+    public Particle multipleParticleScaleBy(float scale) {
         this.setSize(0.2F * scale, 0.2F * scale);
         this.particleScale *= scale;
         return this;
     }
 
-    public void setRBGColorF(float particleRedIn, float particleGreenIn, float particleBlueIn)
-    {
+    public void setRBGColorF(float particleRedIn, float particleGreenIn, float particleBlueIn) {
         this.particleRed = particleRedIn;
         this.particleGreen = particleGreenIn;
         this.particleBlue = particleBlueIn;
     }
 
-    public void setAlphaF(float alpha)
-    {
+    public void setAlphaF(float alpha) {
         this.particleAlpha = alpha;
     }
 
-    public boolean shouldDisableDepth()
-    {
+    public boolean shouldDisableDepth() {
         return false;
     }
 
-    public float getRedColorF()
-    {
+    public float getRedColorF() {
         return this.particleRed;
     }
 
-    public float getGreenColorF()
-    {
+    public float getGreenColorF() {
         return this.particleGreen;
     }
 
-    public float getBlueColorF()
-    {
+    public float getBlueColorF() {
         return this.particleBlue;
     }
 
-    public void setMaxAge(int p_187114_1_)
-    {
+    public void setMaxAge(int p_187114_1_) {
         this.particleMaxAge = p_187114_1_;
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         this.prevPosX = this.posX;
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
 
-        if (this.particleAge++ >= this.particleMaxAge)
-        {
+        if (this.particleAge++ >= this.particleMaxAge) {
             this.setExpired();
         }
 
-        this.motionY -= 0.04D * (double)this.particleGravity;
+        this.motionY -= 0.04D * (double) this.particleGravity;
         this.move(this.motionX, this.motionY, this.motionZ);
         this.motionX *= 0.9800000190734863D;
         this.motionY *= 0.9800000190734863D;
         this.motionZ *= 0.9800000190734863D;
 
-        if (this.onGround)
-        {
+        if (this.onGround) {
             this.motionX *= 0.699999988079071D;
             this.motionZ *= 0.699999988079071D;
         }
     }
 
-    public void renderParticle(BufferBuilder buffer, Entity entityIn, float partialTicks, float rotationX, float rotationZ, float rotationYZ, float rotationXY, float rotationXZ)
-    {
-        float f = (float)this.particleTextureIndexX / 16.0F;
+    public void renderParticle(BufferBuilder buffer, Entity entityIn, float partialTicks, float rotationX, float rotationZ, float rotationYZ, float rotationXY, float rotationXZ) {
+        float f = (float) this.particleTextureIndexX / 16.0F;
         float f1 = f + 0.0624375F;
-        float f2 = (float)this.particleTextureIndexY / 16.0F;
+        float f2 = (float) this.particleTextureIndexY / 16.0F;
         float f3 = f2 + 0.0624375F;
         float f4 = 0.1F * this.particleScale;
 
-        if (this.particleTexture != null)
-        {
+        if (this.particleTexture != null) {
             f = this.particleTexture.getMinU();
             f1 = this.particleTexture.getMaxU();
             f2 = this.particleTexture.getMinV();
             f3 = this.particleTexture.getMaxV();
         }
 
-        float f5 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)partialTicks - interpPosX);
-        float f6 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)partialTicks - interpPosY);
-        float f7 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)partialTicks - interpPosZ);
+        float f5 = (float) (this.prevPosX + (this.posX - this.prevPosX) * (double) partialTicks - interpPosX);
+        float f6 = (float) (this.prevPosY + (this.posY - this.prevPosY) * (double) partialTicks - interpPosY);
+        float f7 = (float) (this.prevPosZ + (this.posZ - this.prevPosZ) * (double) partialTicks - interpPosZ);
         int i = this.getBrightnessForRender(partialTicks);
         int j = i >> 16 & 65535;
         int k = i & 65535;
-        Vec3d[] avec3d = new Vec3d[] {new Vec3d((double)(-rotationX * f4 - rotationXY * f4), (double)(-rotationZ * f4), (double)(-rotationYZ * f4 - rotationXZ * f4)), new Vec3d((double)(-rotationX * f4 + rotationXY * f4), (double)(rotationZ * f4), (double)(-rotationYZ * f4 + rotationXZ * f4)), new Vec3d((double)(rotationX * f4 + rotationXY * f4), (double)(rotationZ * f4), (double)(rotationYZ * f4 + rotationXZ * f4)), new Vec3d((double)(rotationX * f4 - rotationXY * f4), (double)(-rotationZ * f4), (double)(rotationYZ * f4 - rotationXZ * f4))};
+        Vec3d[] avec3d = new Vec3d[]{new Vec3d((double) (-rotationX * f4 - rotationXY * f4), (double) (-rotationZ * f4), (double) (-rotationYZ * f4 - rotationXZ * f4)), new Vec3d((double) (-rotationX * f4 + rotationXY * f4), (double) (rotationZ * f4), (double) (-rotationYZ * f4 + rotationXZ * f4)), new Vec3d((double) (rotationX * f4 + rotationXY * f4), (double) (rotationZ * f4), (double) (rotationYZ * f4 + rotationXZ * f4)), new Vec3d((double) (rotationX * f4 - rotationXY * f4), (double) (-rotationZ * f4), (double) (rotationYZ * f4 - rotationXZ * f4))};
 
-        if (this.particleAngle != 0.0F)
-        {
+        if (this.particleAngle != 0.0F) {
             float f8 = this.particleAngle + (this.particleAngle - this.prevParticleAngle) * partialTicks;
             float f9 = MathHelper.cos(f8 * 0.5F);
-            float f10 = MathHelper.sin(f8 * 0.5F) * (float)cameraViewDir.x;
-            float f11 = MathHelper.sin(f8 * 0.5F) * (float)cameraViewDir.y;
-            float f12 = MathHelper.sin(f8 * 0.5F) * (float)cameraViewDir.z;
-            Vec3d vec3d = new Vec3d((double)f10, (double)f11, (double)f12);
+            float f10 = MathHelper.sin(f8 * 0.5F) * (float) cameraViewDir.x;
+            float f11 = MathHelper.sin(f8 * 0.5F) * (float) cameraViewDir.y;
+            float f12 = MathHelper.sin(f8 * 0.5F) * (float) cameraViewDir.z;
+            Vec3d vec3d = new Vec3d((double) f10, (double) f11, (double) f12);
 
-            for (int l = 0; l < 4; ++l)
-            {
-                avec3d[l] = vec3d.scale(2.0D * avec3d[l].dotProduct(vec3d)).add(avec3d[l].scale((double)(f9 * f9) - vec3d.dotProduct(vec3d))).add(vec3d.crossProduct(avec3d[l]).scale((double)(2.0F * f9)));
+            for (int l = 0; l < 4; ++l) {
+                avec3d[l] = vec3d.scale(2.0D * avec3d[l].dotProduct(vec3d)).add(avec3d[l].scale((double) (f9 * f9) - vec3d.dotProduct(vec3d))).add(vec3d.crossProduct(avec3d[l]).scale((double) (2.0F * f9)));
             }
         }
 
-        buffer.pos((double)f5 + avec3d[0].x, (double)f6 + avec3d[0].y, (double)f7 + avec3d[0].z).tex((double)f1, (double)f3).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
-        buffer.pos((double)f5 + avec3d[1].x, (double)f6 + avec3d[1].y, (double)f7 + avec3d[1].z).tex((double)f1, (double)f2).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
-        buffer.pos((double)f5 + avec3d[2].x, (double)f6 + avec3d[2].y, (double)f7 + avec3d[2].z).tex((double)f, (double)f2).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
-        buffer.pos((double)f5 + avec3d[3].x, (double)f6 + avec3d[3].y, (double)f7 + avec3d[3].z).tex((double)f, (double)f3).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double) f5 + avec3d[0].x, (double) f6 + avec3d[0].y, (double) f7 + avec3d[0].z).tex((double) f1, (double) f3).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double) f5 + avec3d[1].x, (double) f6 + avec3d[1].y, (double) f7 + avec3d[1].z).tex((double) f1, (double) f2).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double) f5 + avec3d[2].x, (double) f6 + avec3d[2].y, (double) f7 + avec3d[2].z).tex((double) f, (double) f2).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double) f5 + avec3d[3].x, (double) f6 + avec3d[3].y, (double) f7 + avec3d[3].z).tex((double) f, (double) f3).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
     }
 
-    public int getFXLayer()
-    {
+    public int getFXLayer() {
         return 0;
     }
 
-    public void setParticleTexture(TextureAtlasSprite texture)
-    {
+    public void setParticleTexture(TextureAtlasSprite texture) {
         int i = this.getFXLayer();
 
-        if (i == 1)
-        {
+        if (i == 1) {
             this.particleTexture = texture;
-        }
-        else
-        {
+        } else {
             throw new RuntimeException("Invalid call to Particle.setTex, use coordinate methods");
         }
     }
 
-    public void setParticleTextureIndex(int particleTextureIndex)
-    {
-        if (this.getFXLayer() != 0)
-        {
+    public void setParticleTextureIndex(int particleTextureIndex) {
+        if (this.getFXLayer() != 0) {
             throw new RuntimeException("Invalid call to Particle.setMiscTex");
-        }
-        else
-        {
+        } else {
             this.particleTextureIndexX = particleTextureIndex % 16;
             this.particleTextureIndexY = particleTextureIndex / 16;
         }
     }
 
-    public void nextTextureIndexX()
-    {
+    public void nextTextureIndexX() {
         ++this.particleTextureIndexX;
     }
 
-    public String toString()
-    {
+    public String toString() {
         return this.getClass().getSimpleName() + ", Pos (" + this.posX + "," + this.posY + "," + this.posZ + "), RGBA (" + this.particleRed + "," + this.particleGreen + "," + this.particleBlue + "," + this.particleAlpha + "), Age " + this.particleAge;
     }
 
-    public void setExpired()
-    {
+    public void setExpired() {
         this.isExpired = true;
     }
 
-    protected void setSize(float p_187115_1_, float p_187115_2_)
-    {
-        if (p_187115_1_ != this.width || p_187115_2_ != this.height)
-        {
+    protected void setSize(float p_187115_1_, float p_187115_2_) {
+        if (p_187115_1_ != this.width || p_187115_2_ != this.height) {
             this.width = p_187115_1_;
             this.height = p_187115_2_;
             // FORGE: Fix MC-12269 - Glitchy movement when setSize is called without setPosition
@@ -270,92 +238,77 @@
         }
     }
 
-    public void setPosition(double p_187109_1_, double p_187109_3_, double p_187109_5_)
-    {
+    public void setPosition(double p_187109_1_, double p_187109_3_, double p_187109_5_) {
         this.posX = p_187109_1_;
         this.posY = p_187109_3_;
         this.posZ = p_187109_5_;
         float f = this.width / 2.0F;
         float f1 = this.height;
-        this.setBoundingBox(new AxisAlignedBB(p_187109_1_ - (double)f, p_187109_3_, p_187109_5_ - (double)f, p_187109_1_ + (double)f, p_187109_3_ + (double)f1, p_187109_5_ + (double)f));
+        this.setBoundingBox(new AxisAlignedBB(p_187109_1_ - (double) f, p_187109_3_, p_187109_5_ - (double) f, p_187109_1_ + (double) f, p_187109_3_ + (double) f1, p_187109_5_ + (double) f));
     }
 
-    public void move(double x, double y, double z)
-    {
+    public void move(double x, double y, double z) {
         double d0 = y;
         double origX = x;
         double origZ = z;
 
-        if (this.canCollide)
-        {
-            List<AxisAlignedBB> list = this.world.getCollisionBoxes((Entity)null, this.getBoundingBox().expand(x, y, z));
+        if (this.canCollide) {
+            List<AxisAlignedBB> list = this.world.getCollisionBoxes((Entity) null, this.getBoundingBox().expand(x, y, z));
 
-            for (AxisAlignedBB axisalignedbb : list)
-            {
+            for (AxisAlignedBB axisalignedbb : list) {
                 y = axisalignedbb.calculateYOffset(this.getBoundingBox(), y);
             }
 
             this.setBoundingBox(this.getBoundingBox().offset(0.0D, y, 0.0D));
 
-            for (AxisAlignedBB axisalignedbb1 : list)
-            {
+            for (AxisAlignedBB axisalignedbb1 : list) {
                 x = axisalignedbb1.calculateXOffset(this.getBoundingBox(), x);
             }
 
             this.setBoundingBox(this.getBoundingBox().offset(x, 0.0D, 0.0D));
 
-            for (AxisAlignedBB axisalignedbb2 : list)
-            {
+            for (AxisAlignedBB axisalignedbb2 : list) {
                 z = axisalignedbb2.calculateZOffset(this.getBoundingBox(), z);
             }
 
             this.setBoundingBox(this.getBoundingBox().offset(0.0D, 0.0D, z));
-        }
-        else
-        {
+        } else {
             this.setBoundingBox(this.getBoundingBox().offset(x, y, z));
         }
 
         this.resetPositionToBB();
         this.onGround = d0 != y && d0 < 0.0D;
 
-        if (origX != x)
-        {
+        if (origX != x) {
             this.motionX = 0.0D;
         }
 
-        if (origZ != z)
-        {
+        if (origZ != z) {
             this.motionZ = 0.0D;
         }
     }
 
-    protected void resetPositionToBB()
-    {
+    protected void resetPositionToBB() {
         AxisAlignedBB axisalignedbb = this.getBoundingBox();
         this.posX = (axisalignedbb.minX + axisalignedbb.maxX) / 2.0D;
         this.posY = axisalignedbb.minY;
         this.posZ = (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0D;
     }
 
-    public int getBrightnessForRender(float p_189214_1_)
-    {
+    public int getBrightnessForRender(float p_189214_1_) {
         BlockPos blockpos = new BlockPos(this.posX, this.posY, this.posZ);
         return this.world.isBlockLoaded(blockpos) ? this.world.getCombinedLight(blockpos, 0) : 0;
     }
 
-    public boolean isAlive()
-    {
+    public boolean isAlive() {
         return !this.isExpired;
     }
 
-    public AxisAlignedBB getBoundingBox()
-    {
+    public AxisAlignedBB getBoundingBox() {
         return this.boundingBox;
     }
 
-    public void setBoundingBox(AxisAlignedBB bb)
-    {
+    public void setBoundingBox(AxisAlignedBB bb) {
         this.boundingBox = bb;
     }
 }
