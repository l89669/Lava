--- ../src-base/minecraft/net/minecraft/client/particle/ParticleDrip.java
+++ ../src-work/minecraft/net/minecraft/client/particle/ParticleDrip.java
@@ -11,26 +11,21 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class ParticleDrip extends Particle
-{
+public class ParticleDrip extends Particle {
     private final Material materialType;
     private int bobTimer;
 
-    protected ParticleDrip(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, Material p_i1203_8_)
-    {
+    protected ParticleDrip(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, Material p_i1203_8_) {
         super(worldIn, xCoordIn, yCoordIn, zCoordIn, 0.0D, 0.0D, 0.0D);
         this.motionX = 0.0D;
         this.motionY = 0.0D;
         this.motionZ = 0.0D;
 
-        if (p_i1203_8_ == Material.WATER)
-        {
+        if (p_i1203_8_ == Material.WATER) {
             this.particleRed = 0.0F;
             this.particleGreen = 0.0F;
             this.particleBlue = 1.0F;
-        }
-        else
-        {
+        } else {
             this.particleRed = 1.0F;
             this.particleGreen = 0.0F;
             this.particleBlue = 0.0F;
@@ -41,47 +36,39 @@
         this.particleGravity = 0.06F;
         this.materialType = p_i1203_8_;
         this.bobTimer = 40;
-        this.particleMaxAge = (int)(64.0D / (Math.random() * 0.8D + 0.2D));
+        this.particleMaxAge = (int) (64.0D / (Math.random() * 0.8D + 0.2D));
         this.motionX = 0.0D;
         this.motionY = 0.0D;
         this.motionZ = 0.0D;
     }
 
-    public int getBrightnessForRender(float p_189214_1_)
-    {
+    public int getBrightnessForRender(float p_189214_1_) {
         return this.materialType == Material.WATER ? super.getBrightnessForRender(p_189214_1_) : 257;
     }
 
-    public void onUpdate()
-    {
+    public void onUpdate() {
         this.prevPosX = this.posX;
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
 
-        if (this.materialType == Material.WATER)
-        {
+        if (this.materialType == Material.WATER) {
             this.particleRed = 0.2F;
             this.particleGreen = 0.3F;
             this.particleBlue = 1.0F;
-        }
-        else
-        {
+        } else {
             this.particleRed = 1.0F;
-            this.particleGreen = 16.0F / (float)(40 - this.bobTimer + 16);
-            this.particleBlue = 4.0F / (float)(40 - this.bobTimer + 8);
+            this.particleGreen = 16.0F / (float) (40 - this.bobTimer + 16);
+            this.particleBlue = 4.0F / (float) (40 - this.bobTimer + 8);
         }
 
-        this.motionY -= (double)this.particleGravity;
+        this.motionY -= (double) this.particleGravity;
 
-        if (this.bobTimer-- > 0)
-        {
+        if (this.bobTimer-- > 0) {
             this.motionX *= 0.02D;
             this.motionY *= 0.02D;
             this.motionZ *= 0.02D;
             this.setParticleTextureIndex(113);
-        }
-        else
-        {
+        } else {
             this.setParticleTextureIndex(112);
         }
 
@@ -90,20 +77,15 @@
         this.motionY *= 0.9800000190734863D;
         this.motionZ *= 0.9800000190734863D;
 
-        if (this.particleMaxAge-- <= 0)
-        {
+        if (this.particleMaxAge-- <= 0) {
             this.setExpired();
         }
 
-        if (this.onGround)
-        {
-            if (this.materialType == Material.WATER)
-            {
+        if (this.onGround) {
+            if (this.materialType == Material.WATER) {
                 this.setExpired();
                 this.world.spawnParticle(EnumParticleTypes.WATER_SPLASH, this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
-            }
-            else
-            {
+            } else {
                 this.setParticleTextureIndex(114);
             }
 
@@ -115,39 +97,32 @@
         IBlockState iblockstate = this.world.getBlockState(blockpos);
         Material material = iblockstate.getMaterial();
 
-        if (material.isLiquid() || material.isSolid())
-        {
+        if (material.isLiquid() || material.isSolid()) {
             double d0 = 0.0D;
 
-            if (iblockstate.getBlock() instanceof BlockLiquid)
-            {
-                d0 = (double)BlockLiquid.getLiquidHeightPercent(((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue());
+            if (iblockstate.getBlock() instanceof BlockLiquid) {
+                d0 = (double) BlockLiquid.getLiquidHeightPercent(((Integer) iblockstate.getValue(BlockLiquid.LEVEL)).intValue());
             }
 
-            double d1 = (double)(MathHelper.floor(this.posY) + 1) - d0;
+            double d1 = (double) (MathHelper.floor(this.posY) + 1) - d0;
 
-            if (this.posY < d1)
-            {
+            if (this.posY < d1) {
                 this.setExpired();
             }
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public static class LavaFactory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                return new ParticleDrip(worldIn, xCoordIn, yCoordIn, zCoordIn, Material.LAVA);
-            }
+    public static class LavaFactory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            return new ParticleDrip(worldIn, xCoordIn, yCoordIn, zCoordIn, Material.LAVA);
         }
+    }
 
     @SideOnly(Side.CLIENT)
-    public static class WaterFactory implements IParticleFactory
-        {
-            public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_)
-            {
-                return new ParticleDrip(worldIn, xCoordIn, yCoordIn, zCoordIn, Material.WATER);
-            }
+    public static class WaterFactory implements IParticleFactory {
+        public Particle createParticle(int particleID, World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn, int... p_178902_15_) {
+            return new ParticleDrip(worldIn, xCoordIn, yCoordIn, zCoordIn, Material.WATER);
         }
+    }
 }
