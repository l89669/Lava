--- ../src-base/minecraft/net/minecraft/server/management/UserListEntryBan.java
+++ ../src-work/minecraft/net/minecraft/server/management/UserListEntryBan.java
@@ -1,20 +1,19 @@
 package net.minecraft.server.management;
 
 import com.google.gson.JsonObject;
+
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-public abstract class UserListEntryBan<T> extends UserListEntry<T>
-{
+public abstract class UserListEntryBan<T> extends UserListEntry<T> {
     public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
     protected final Date banStartDate;
     protected final String bannedBy;
     protected final Date banEndDate;
     protected final String reason;
 
-    public UserListEntryBan(T valueIn, Date startDate, String banner, Date endDate, String banReason)
-    {
+    public UserListEntryBan(T valueIn, Date startDate, String banner, Date endDate, String banReason) {
         super(valueIn);
         this.banStartDate = startDate == null ? new Date() : startDate;
         this.bannedBy = banner == null ? "(Unknown)" : banner;
@@ -22,17 +21,13 @@
         this.reason = banReason == null ? "Banned by an operator." : banReason;
     }
 
-    protected UserListEntryBan(T valueIn, JsonObject json)
-    {
-        super(valueIn, json);
+    protected UserListEntryBan(T valueIn, JsonObject json) {
+        super(checkExpiry(valueIn, json), json);
         Date date;
 
-        try
-        {
+        try {
             date = json.has("created") ? DATE_FORMAT.parse(json.get("created").getAsString()) : new Date();
-        }
-        catch (ParseException var7)
-        {
+        } catch (ParseException var7) {
             date = new Date();
         }
 
@@ -40,12 +35,9 @@
         this.bannedBy = json.has("source") ? json.get("source").getAsString() : "(Unknown)";
         Date date1;
 
-        try
-        {
+        try {
             date1 = json.has("expires") ? DATE_FORMAT.parse(json.get("expires").getAsString()) : null;
-        }
-        catch (ParseException var6)
-        {
+        } catch (ParseException var6) {
             date1 = null;
         }
 
@@ -53,26 +45,46 @@
         this.reason = json.has("reason") ? json.get("reason").getAsString() : "Banned by an operator.";
     }
 
-    public Date getBanEndDate()
-    {
+    public Date getBanEndDate() {
         return this.banEndDate;
     }
 
-    public String getBanReason()
-    {
+    public String getBanReason() {
         return this.reason;
     }
 
-    boolean hasBanExpired()
-    {
+    boolean hasBanExpired() {
         return this.banEndDate == null ? false : this.banEndDate.before(new Date());
     }
 
-    protected void onSerialization(JsonObject data)
-    {
+    protected void onSerialization(JsonObject data) {
         data.addProperty("created", DATE_FORMAT.format(this.banStartDate));
         data.addProperty("source", this.bannedBy);
         data.addProperty("expires", this.banEndDate == null ? "forever" : DATE_FORMAT.format(this.banEndDate));
         data.addProperty("reason", this.reason);
     }
+
+    public String getSource() {
+        return this.bannedBy;
+    }
+
+    public Date getCreated() {
+        return this.banStartDate;
+    }
+
+    private static <T> T checkExpiry(T object, JsonObject jsonobject) {
+        Date expires = null;
+
+        try {
+            expires = jsonobject.has("expires") ? DATE_FORMAT.parse(jsonobject.get("expires").getAsString()) : null;
+        } catch (ParseException ex) {
+            // Guess we don't have a date
+        }
+
+        if (expires == null || expires.after(new Date())) {
+            return object;
+        } else {
+            return null;
+        }
+    }
 }
