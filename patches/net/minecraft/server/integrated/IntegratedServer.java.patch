--- ../src-base/minecraft/net/minecraft/server/integrated/IntegratedServer.java
+++ ../src-work/minecraft/net/minecraft/server/integrated/IntegratedServer.java
@@ -5,9 +5,6 @@
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import java.io.File;
-import java.io.IOException;
-import java.net.InetAddress;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.multiplayer.ThreadLanServerPing;
@@ -17,18 +14,12 @@
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.profiler.Snooper;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.HttpUtil;
 import net.minecraft.util.Util;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.GameType;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerDemo;
-import net.minecraft.world.WorldServerMulti;
-import net.minecraft.world.WorldSettings;
-import net.minecraft.world.WorldType;
+import net.minecraft.world.*;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.fml.relauncher.Side;
@@ -36,9 +27,12 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.io.File;
+import java.io.IOException;
+import java.net.InetAddress;
+
 @SideOnly(Side.CLIENT)
-public class IntegratedServer extends MinecraftServer
-{
+public class IntegratedServer extends MinecraftServer {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Minecraft mc;
     private final WorldSettings worldSettings;
@@ -46,9 +40,8 @@
     private boolean isPublic;
     private ThreadLanServerPing lanServerPing;
 
-    public IntegratedServer(Minecraft clientIn, String folderNameIn, String worldNameIn, WorldSettings worldSettingsIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
-    {
-        super(new File(clientIn.mcDataDir, "saves"), clientIn.getProxy(), clientIn.getDataFixer(), authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
+    public IntegratedServer(Minecraft clientIn, String folderNameIn, String worldNameIn, WorldSettings worldSettingsIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn) {
+        super(null, clientIn.getProxy(), clientIn.getDataFixer(), authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
         this.setServerOwner(clientIn.getSession().getUsername());
         this.setFolderName(folderNameIn);
         this.setWorldName(worldNameIn);
@@ -60,90 +53,77 @@
         this.worldSettings = this.isDemo() ? WorldServerDemo.DEMO_WORLD_SETTINGS : worldSettingsIn;
     }
 
-    public ServerCommandManager createCommandManager()
-    {
+    @Override
+    public PropertyManager getPropertyManager() {
+        return null;
+    }
+
+    public ServerCommandManager createCommandManager() {
         return new IntegratedServerCommandManager(this);
     }
 
-    public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions)
-    {
+    public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions) {
         this.convertMapIfNeeded(saveName);
         ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(saveName, true);
         this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
         WorldInfo worldinfo = isavehandler.loadWorldInfo();
 
-        if (worldinfo == null)
-        {
+        if (worldinfo == null) {
             worldinfo = new WorldInfo(this.worldSettings, worldNameIn);
-        }
-        else
-        {
+        } else {
             worldinfo.setWorldName(worldNameIn);
         }
 
         if (false) { //Forge: Dead Code, implement below.
-        for (int i = 0; i < this.worlds.length; ++i)
-        {
-            int j = 0;
+            for (int i = 0; i < this.worlds.length; ++i) {
+                int j = 0;
 
-            if (i == 1)
-            {
-                j = -1;
-            }
+                if (i == 1) {
+                    j = -1;
+                }
 
-            if (i == 2)
-            {
-                j = 1;
-            }
+                if (i == 2) {
+                    j = 1;
+                }
 
-            if (i == 0)
-            {
-                if (this.isDemo())
-                {
-                    this.worlds[i] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, j, this.profiler)).init();
+                if (i == 0) {
+                    if (this.isDemo()) {
+                        this.worlds[i] = (WorldServer) (new WorldServerDemo(this, isavehandler, worldinfo, j, this.profiler)).init();
+                    } else {
+                        this.worlds[i] = (WorldServer) (new WorldServer(this, isavehandler, worldinfo, j, this.profiler)).init();
+                    }
+
+                    this.worlds[i].initialize(this.worldSettings);
+                } else {
+                    this.worlds[i] = (WorldServer) (new WorldServerMulti(this, isavehandler, j, this.worlds[0], this.profiler)).init();
                 }
-                else
-                {
-                    this.worlds[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.profiler)).init();
-                }
 
-                this.worlds[i].initialize(this.worldSettings);
+                this.worlds[i].addEventListener(new ServerWorldEventHandler(this, this.worlds[i]));
             }
-            else
-            {
-                this.worlds[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.worlds[0], this.profiler)).init();
-            }
-
-            this.worlds[i].addEventListener(new ServerWorldEventHandler(this, this.worlds[i]));
-        }
         }// Forge: End Dead Code
 
-        WorldServer overWorld = (isDemo() ? (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, 0, this.profiler)).init() :
-                                            (WorldServer)(new WorldServer(this, isavehandler, worldinfo, 0, this.profiler)).init());
+        WorldServer overWorld = (isDemo() ? (WorldServer) (new WorldServerDemo(this, isavehandler, worldinfo, 0, this.profiler)).init() :
+                (WorldServer) (new WorldServer(this, isavehandler, worldinfo, 0, this.profiler)).init());
         overWorld.initialize(this.worldSettings);
-        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
-        {
-            WorldServer world = (dim == 0 ? overWorld : (WorldServer)(new WorldServerMulti(this, isavehandler, dim, overWorld, this.profiler)).init());
+        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs()) {
+            WorldServer world = (dim == 0 ? overWorld : (WorldServer) (new WorldServerMulti(this, isavehandler, dim, overWorld, this.profiler)).init());
             world.addEventListener(new ServerWorldEventHandler(this, world));
-            if (!this.isSinglePlayer())
-            {
+            if (!this.isSinglePlayer()) {
                 world.getWorldInfo().setGameType(getGameType());
             }
             net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
         }
 
-        this.getPlayerList().setPlayerManager(new WorldServer[]{ overWorld });
+        this.getPlayerList().setPlayerManager(new WorldServer[]{overWorld});
 
-        if (overWorld.getWorldInfo().getDifficulty() == null)
-        {
+        if (overWorld.getWorldInfo().getDifficulty() == null) {
             this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
         }
 
         this.initialWorldChunkLoad();
     }
 
-    public boolean init() throws IOException
-    {
+    public boolean init() throws IOException {
         LOGGER.info("Starting integrated minecraft server version 1.12.2");
         this.setOnlineMode(true);
         this.setCanSpawnAnimals(true);
@@ -158,56 +138,42 @@
         return net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStarting(this);
     }
 
-    public void tick()
-    {
+    public void tick() {
         boolean flag = this.isGamePaused;
         this.isGamePaused = Minecraft.getMinecraft().getConnection() != null && Minecraft.getMinecraft().isGamePaused();
 
-        if (!flag && this.isGamePaused)
-        {
+        if (!flag && this.isGamePaused) {
             LOGGER.info("Saving and pausing game...");
             this.getPlayerList().saveAllPlayerData();
             this.saveAllWorlds(false);
         }
 
-        if (this.isGamePaused)
-        {
-            synchronized (this.futureTaskQueue)
-            {
-                while (!this.futureTaskQueue.isEmpty())
-                {
+        if (this.isGamePaused) {
+            synchronized (this.futureTaskQueue) {
+                while (!this.futureTaskQueue.isEmpty()) {
                     Util.runTask(this.futureTaskQueue.poll(), LOGGER);
                 }
             }
-        }
-        else
-        {
+        } else {
             super.tick();
 
-            if (this.mc.gameSettings.renderDistanceChunks != this.getPlayerList().getViewDistance())
-            {
+            if (this.mc.gameSettings.renderDistanceChunks != this.getPlayerList().getViewDistance()) {
                 LOGGER.info("Changing view distance to {}, from {}", Integer.valueOf(this.mc.gameSettings.renderDistanceChunks), Integer.valueOf(this.getPlayerList().getViewDistance()));
                 this.getPlayerList().setViewDistance(this.mc.gameSettings.renderDistanceChunks);
             }
 
-            if (this.mc.world != null)
-            {
+            if (this.mc.world != null) {
                 WorldInfo worldinfo1 = this.worlds[0].getWorldInfo();
                 WorldInfo worldinfo = this.mc.world.getWorldInfo();
 
-                if (!worldinfo1.isDifficultyLocked() && worldinfo.getDifficulty() != worldinfo1.getDifficulty())
-                {
+                if (!worldinfo1.isDifficultyLocked() && worldinfo.getDifficulty() != worldinfo1.getDifficulty()) {
                     LOGGER.info("Changing difficulty to {}, from {}", worldinfo.getDifficulty(), worldinfo1.getDifficulty());
                     this.setDifficultyForAllWorlds(worldinfo.getDifficulty());
-                }
-                else if (worldinfo.isDifficultyLocked() && !worldinfo1.isDifficultyLocked())
-                {
-                    LOGGER.info("Locking difficulty to {}", (Object)worldinfo.getDifficulty());
+                } else if (worldinfo.isDifficultyLocked() && !worldinfo1.isDifficultyLocked()) {
+                    LOGGER.info("Locking difficulty to {}", (Object) worldinfo.getDifficulty());
 
-                    for (WorldServer worldserver : this.worlds)
-                    {
-                        if (worldserver != null)
-                        {
+                    for (WorldServer worldserver : this.worlds) {
+                        if (worldserver != null) {
                             worldserver.getWorldInfo().setDifficultyLocked(true);
                         }
                     }
@@ -216,92 +182,70 @@
         }
     }
 
-    public boolean canStructuresSpawn()
-    {
+    public boolean canStructuresSpawn() {
         return false;
     }
 
-    public GameType getGameType()
-    {
+    public GameType getGameType() {
         return this.worldSettings.getGameType();
     }
 
-    public EnumDifficulty getDifficulty()
-    {
+    public EnumDifficulty getDifficulty() {
         if (this.mc.world == null) return this.mc.gameSettings.difficulty; // Fix NPE just in case.
         return this.mc.world.getWorldInfo().getDifficulty();
     }
 
-    public boolean isHardcore()
-    {
+    public boolean isHardcore() {
         return this.worldSettings.getHardcoreEnabled();
     }
 
-    public boolean shouldBroadcastRconToOps()
-    {
+    public boolean shouldBroadcastRconToOps() {
         return true;
     }
 
-    public boolean shouldBroadcastConsoleToOps()
-    {
+    public boolean shouldBroadcastConsoleToOps() {
         return true;
     }
 
-    public void saveAllWorlds(boolean isSilent)
-    {
+    public void saveAllWorlds(boolean isSilent) {
         super.saveAllWorlds(isSilent);
     }
 
-    public File getDataDirectory()
-    {
+    public File getDataDirectory() {
         return this.mc.mcDataDir;
     }
 
-    public boolean isDedicatedServer()
-    {
+    public boolean isDedicatedServer() {
         return false;
     }
 
-    public boolean shouldUseNativeTransport()
-    {
+    public boolean shouldUseNativeTransport() {
         return false;
     }
 
-    public void finalTick(CrashReport report)
-    {
+    public void finalTick(CrashReport report) {
         this.mc.crashed(report);
     }
 
-    public CrashReport addServerInfoToCrashReport(CrashReport report)
-    {
+    public CrashReport addServerInfoToCrashReport(CrashReport report) {
         report = super.addServerInfoToCrashReport(report);
-        report.getCategory().addDetail("Type", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        report.getCategory().addDetail("Type", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 return "Integrated Server (map_client.txt)";
             }
         });
-        report.getCategory().addDetail("Is Modded", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
+        report.getCategory().addDetail("Is Modded", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
                 String s = ClientBrandRetriever.getClientModName();
 
-                if (!s.equals("vanilla"))
-                {
+                if (!s.equals("vanilla")) {
                     return "Definitely; Client brand changed to '" + s + "'";
-                }
-                else
-                {
+                } else {
                     s = IntegratedServer.this.getServerModName();
 
-                    if (!"vanilla".equals(s))
-                    {
+                    if (!"vanilla".equals(s)) {
                         return "Definitely; Server brand changed to '" + s + "'";
-                    }
-                    else
-                    {
+                    } else {
                         return Minecraft.class.getSigners() == null ? "Very likely; Jar signature invalidated" : "Probably not. Jar signature remains and both client + server brands are untouched.";
                     }
                 }
@@ -310,49 +254,39 @@
         return report;
     }
 
-    public void setDifficultyForAllWorlds(EnumDifficulty difficulty)
-    {
+    public void setDifficultyForAllWorlds(EnumDifficulty difficulty) {
         super.setDifficultyForAllWorlds(difficulty);
 
-        if (this.mc.world != null)
-        {
+        if (this.mc.world != null) {
             this.mc.world.getWorldInfo().setDifficulty(difficulty);
         }
     }
 
-    public void addServerStatsToSnooper(Snooper playerSnooper)
-    {
+    public void addServerStatsToSnooper(Snooper playerSnooper) {
         super.addServerStatsToSnooper(playerSnooper);
         playerSnooper.addClientStat("snooper_partner", this.mc.getPlayerUsageSnooper().getUniqueID());
     }
 
-    public boolean isSnooperEnabled()
-    {
+    public boolean isSnooperEnabled() {
         return Minecraft.getMinecraft().isSnooperEnabled();
     }
 
-    public String shareToLAN(GameType type, boolean allowCheats)
-    {
-        try
-        {
+    public String shareToLAN(GameType type, boolean allowCheats) {
+        try {
             int i = -1;
 
-            try
-            {
+            try {
                 i = HttpUtil.getSuitableLanPort();
-            }
-            catch (IOException var5)
-            {
+            } catch (IOException var5) {
                 ;
             }
 
-            if (i <= 0)
-            {
+            if (i <= 0) {
                 i = 25564;
             }
 
-            this.getNetworkSystem().addLanEndpoint((InetAddress)null, i);
-            LOGGER.info("Started on {}", (int)i);
+            this.getNetworkSystem().addLanEndpoint((InetAddress) null, i);
+            LOGGER.info("Started on {}", (int) i);
             this.isPublic = true;
             this.lanServerPing = new ThreadLanServerPing(this.getMOTD(), i + "");
             this.lanServerPing.start();
@@ -360,67 +294,57 @@
             this.getPlayerList().setCommandsAllowedForAll(allowCheats);
             this.mc.player.setPermissionLevel(allowCheats ? 4 : 0);
             return i + "";
-        }
-        catch (IOException var6)
-        {
+        } catch (IOException var6) {
             return null;
         }
     }
 
-    public void stopServer()
-    {
-        super.stopServer();
+    public void stopServer() {
+        try {
+            super.stopServer();
+        } catch (MinecraftException e) {
+            e.printStackTrace();
+        }
 
-        if (this.lanServerPing != null)
-        {
+        if (this.lanServerPing != null) {
             this.lanServerPing.interrupt();
             this.lanServerPing = null;
         }
     }
 
-    public void initiateShutdown()
-    {
+    public void initiateShutdown() {
         if (isServerRunning())
-        Futures.getUnchecked(this.addScheduledTask(new Runnable()
-        {
-            public void run()
-            {
-                for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayers()))
-                {
-                    if (!entityplayermp.getUniqueID().equals(IntegratedServer.this.mc.player.getUniqueID()))
-                    {
-                        IntegratedServer.this.getPlayerList().playerLoggedOut(entityplayermp);
+            Futures.getUnchecked(this.addScheduledTask(new Runnable() {
+                public void run() {
+                    for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayers())) {
+                        if (!entityplayermp.getUniqueID().equals(IntegratedServer.this.mc.player.getUniqueID())) {
+                            IntegratedServer.this.getPlayerList().playerLoggedOut(entityplayermp);
+                        }
                     }
                 }
-            }
-        }));
+            }));
         super.initiateShutdown();
 
-        if (this.lanServerPing != null)
-        {
+        if (this.lanServerPing != null) {
             this.lanServerPing.interrupt();
             this.lanServerPing = null;
         }
     }
 
-    public boolean getPublic()
-    {
+    public boolean getPublic() {
         return this.isPublic;
     }
 
-    public void setGameType(GameType gameMode)
-    {
+    public void setGameType(GameType gameMode) {
         super.setGameType(gameMode);
         this.getPlayerList().setGameType(gameMode);
     }
 
-    public boolean isCommandBlockEnabled()
-    {
+    public boolean isCommandBlockEnabled() {
         return true;
     }
 
-    public int getOpPermissionLevel()
-    {
+    public int getOpPermissionLevel() {
         return 4;
     }
 }
