--- ../src-base/minecraft/net/minecraft/creativetab/CreativeTabs.java
+++ ../src-work/minecraft/net/minecraft/creativetab/CreativeTabs.java
@@ -1,6 +1,5 @@
 package net.minecraft.creativetab;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.BlockDoublePlant;
 import net.minecraft.enchantment.EnumEnchantmentType;
 import net.minecraft.init.Blocks;
@@ -13,113 +12,90 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class CreativeTabs
-{
+import javax.annotation.Nullable;
+
+public abstract class CreativeTabs {
     public static CreativeTabs[] CREATIVE_TAB_ARRAY = new CreativeTabs[12];
-    public static final CreativeTabs BUILDING_BLOCKS = new CreativeTabs(0, "buildingBlocks")
-    {
+    public static final CreativeTabs BUILDING_BLOCKS = new CreativeTabs(0, "buildingBlocks") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Item.getItemFromBlock(Blocks.BRICK_BLOCK));
         }
     };
-    public static final CreativeTabs DECORATIONS = new CreativeTabs(1, "decorations")
-    {
+    public static final CreativeTabs DECORATIONS = new CreativeTabs(1, "decorations") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Item.getItemFromBlock(Blocks.DOUBLE_PLANT), 1, BlockDoublePlant.EnumPlantType.PAEONIA.getMeta());
         }
     };
-    public static final CreativeTabs REDSTONE = new CreativeTabs(2, "redstone")
-    {
+    public static final CreativeTabs REDSTONE = new CreativeTabs(2, "redstone") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Items.REDSTONE);
         }
     };
-    public static final CreativeTabs TRANSPORTATION = new CreativeTabs(3, "transportation")
-    {
+    public static final CreativeTabs TRANSPORTATION = new CreativeTabs(3, "transportation") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Item.getItemFromBlock(Blocks.GOLDEN_RAIL));
         }
     };
-    public static final CreativeTabs MISC = new CreativeTabs(6, "misc")
-    {
+    public static final CreativeTabs MISC = new CreativeTabs(6, "misc") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Items.LAVA_BUCKET);
         }
     };
-    public static final CreativeTabs SEARCH = (new CreativeTabs(5, "search")
-    {
+    public static final CreativeTabs SEARCH = (new CreativeTabs(5, "search") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Items.COMPASS);
         }
     }).setBackgroundImageName("item_search.png");
-    public static final CreativeTabs FOOD = new CreativeTabs(7, "food")
-    {
+    public static final CreativeTabs FOOD = new CreativeTabs(7, "food") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Items.APPLE);
         }
     };
-    public static final CreativeTabs TOOLS = (new CreativeTabs(8, "tools")
-    {
+    public static final CreativeTabs TOOLS = (new CreativeTabs(8, "tools") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Items.IRON_AXE);
         }
-    }).setRelevantEnchantmentTypes(new EnumEnchantmentType[] {EnumEnchantmentType.ALL, EnumEnchantmentType.DIGGER, EnumEnchantmentType.FISHING_ROD, EnumEnchantmentType.BREAKABLE});
-    public static final CreativeTabs COMBAT = (new CreativeTabs(9, "combat")
-    {
+    }).setRelevantEnchantmentTypes(new EnumEnchantmentType[]{EnumEnchantmentType.ALL, EnumEnchantmentType.DIGGER, EnumEnchantmentType.FISHING_ROD, EnumEnchantmentType.BREAKABLE});
+    public static final CreativeTabs COMBAT = (new CreativeTabs(9, "combat") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Items.GOLDEN_SWORD);
         }
-    }).setRelevantEnchantmentTypes(new EnumEnchantmentType[] {EnumEnchantmentType.ALL, EnumEnchantmentType.ARMOR, EnumEnchantmentType.ARMOR_FEET, EnumEnchantmentType.ARMOR_HEAD, EnumEnchantmentType.ARMOR_LEGS, EnumEnchantmentType.ARMOR_CHEST, EnumEnchantmentType.BOW, EnumEnchantmentType.WEAPON, EnumEnchantmentType.WEARABLE, EnumEnchantmentType.BREAKABLE});
-    public static final CreativeTabs BREWING = new CreativeTabs(10, "brewing")
-    {
+    }).setRelevantEnchantmentTypes(new EnumEnchantmentType[]{EnumEnchantmentType.ALL, EnumEnchantmentType.ARMOR, EnumEnchantmentType.ARMOR_FEET, EnumEnchantmentType.ARMOR_HEAD, EnumEnchantmentType.ARMOR_LEGS, EnumEnchantmentType.ARMOR_CHEST, EnumEnchantmentType.BOW, EnumEnchantmentType.WEAPON, EnumEnchantmentType.WEARABLE, EnumEnchantmentType.BREAKABLE});
+    public static final CreativeTabs BREWING = new CreativeTabs(10, "brewing") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER);
         }
     };
     public static final CreativeTabs MATERIALS = MISC;
-    public static final CreativeTabs HOTBAR = new CreativeTabs(4, "hotbar")
-    {
+    public static final CreativeTabs HOTBAR = new CreativeTabs(4, "hotbar") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Blocks.BOOKSHELF);
         }
+
         @SideOnly(Side.CLIENT)
-        public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_)
-        {
+        public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_) {
             throw new RuntimeException("Implement exception client-side.");
         }
+
         @SideOnly(Side.CLIENT)
-        public boolean isAlignedRight()
-        {
+        public boolean isAlignedRight() {
             return true;
         }
     };
-    public static final CreativeTabs INVENTORY = (new CreativeTabs(11, "inventory")
-    {
+    public static final CreativeTabs INVENTORY = (new CreativeTabs(11, "inventory") {
         @SideOnly(Side.CLIENT)
-        public ItemStack getTabIconItem()
-        {
+        public ItemStack getTabIconItem() {
             return new ItemStack(Item.getItemFromBlock(Blocks.CHEST));
         }
     }).setBackgroundImageName("inventory.png").setNoScrollbar().setNoTitle();
@@ -131,18 +107,14 @@
     private EnumEnchantmentType[] enchantmentTypes = new EnumEnchantmentType[0];
     private ItemStack iconItemStack;
 
-    public CreativeTabs(String label)
-    {
+    public CreativeTabs(String label) {
         this(getNextID(), label);
     }
 
-    public CreativeTabs(int index, String label)
-    {
-        if (index >= CREATIVE_TAB_ARRAY.length)
-        {
+    public CreativeTabs(int index, String label) {
+        if (index >= CREATIVE_TAB_ARRAY.length) {
             CreativeTabs[] tmp = new CreativeTabs[index + 1];
-            for (int x = 0; x < CREATIVE_TAB_ARRAY.length; x++)
-            {
+            for (int x = 0; x < CREATIVE_TAB_ARRAY.length; x++) {
                 tmp[x] = CREATIVE_TAB_ARRAY[x];
             }
             CREATIVE_TAB_ARRAY = tmp;
@@ -154,34 +126,28 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public int getTabIndex()
-    {
+    public int getTabIndex() {
         return this.tabIndex;
     }
 
-    public CreativeTabs setBackgroundImageName(String texture)
-    {
+    public CreativeTabs setBackgroundImageName(String texture) {
         this.backgroundTexture = texture;
         return this;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getTabLabel()
-    {
+    public String getTabLabel() {
         return this.tabLabel;
     }
 
     @SideOnly(Side.CLIENT)
-    public String getTranslatedTabLabel()
-    {
+    public String getTranslatedTabLabel() {
         return "itemGroup." + this.getTabLabel();
     }
 
     @SideOnly(Side.CLIENT)
-    public ItemStack getIconItemStack()
-    {
-        if (this.iconItemStack.isEmpty())
-        {
+    public ItemStack getIconItemStack() {
+        if (this.iconItemStack.isEmpty()) {
             this.iconItemStack = this.getTabIconItem();
         }
 
@@ -192,80 +158,64 @@
     public abstract ItemStack getTabIconItem();
 
     @SideOnly(Side.CLIENT)
-    public String getBackgroundImageName()
-    {
+    public String getBackgroundImageName() {
         return this.backgroundTexture;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean drawInForegroundOfTab()
-    {
+    public boolean drawInForegroundOfTab() {
         return this.drawTitle;
     }
 
-    public CreativeTabs setNoTitle()
-    {
+    public CreativeTabs setNoTitle() {
         this.drawTitle = false;
         return this;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean shouldHidePlayerInventory()
-    {
+    public boolean shouldHidePlayerInventory() {
         return this.hasScrollbar;
     }
 
-    public CreativeTabs setNoScrollbar()
-    {
+    public CreativeTabs setNoScrollbar() {
         this.hasScrollbar = false;
         return this;
     }
 
     @SideOnly(Side.CLIENT)
-    public int getTabColumn()
-    {
-        if (tabIndex > 11)
-        {
+    public int getTabColumn() {
+        if (tabIndex > 11) {
             return ((tabIndex - 12) % 10) % 5;
         }
         return this.tabIndex % 6;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isTabInFirstRow()
-    {
-        if (tabIndex > 11)
-        {
+    public boolean isTabInFirstRow() {
+        if (tabIndex > 11) {
             return ((tabIndex - 12) % 10) < 5;
         }
         return this.tabIndex < 6;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isAlignedRight()
-    {
+    public boolean isAlignedRight() {
         return this.getTabColumn() == 5;
     }
 
-    public EnumEnchantmentType[] getRelevantEnchantmentTypes()
-    {
+    public EnumEnchantmentType[] getRelevantEnchantmentTypes() {
         return this.enchantmentTypes;
     }
 
-    public CreativeTabs setRelevantEnchantmentTypes(EnumEnchantmentType... types)
-    {
+    public CreativeTabs setRelevantEnchantmentTypes(EnumEnchantmentType... types) {
         this.enchantmentTypes = types;
         return this;
     }
 
-    public boolean hasRelevantEnchantmentType(@Nullable EnumEnchantmentType enchantmentType)
-    {
-        if (enchantmentType != null)
-        {
-            for (EnumEnchantmentType enumenchantmenttype : this.enchantmentTypes)
-            {
-                if (enumenchantmenttype == enchantmentType)
-                {
+    public boolean hasRelevantEnchantmentType(@Nullable EnumEnchantmentType enchantmentType) {
+        if (enchantmentType != null) {
+            for (EnumEnchantmentType enumenchantmenttype : this.enchantmentTypes) {
+                if (enumenchantmenttype == enchantmentType) {
                     return true;
                 }
             }
@@ -275,25 +225,20 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_)
-    {
-        for (Item item : Item.REGISTRY)
-        {
+    public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_) {
+        for (Item item : Item.REGISTRY) {
             item.getSubItems(this, p_78018_1_);
         }
     }
 
-    public int getTabPage()
-    {
-        if (tabIndex > 11)
-        {
+    public int getTabPage() {
+        if (tabIndex > 11) {
             return ((tabIndex - 12) / 10) + 1;
         }
         return 0;
     }
 
-    public static int getNextID()
-    {
+    public static int getNextID() {
         return CREATIVE_TAB_ARRAY.length;
     }
 
@@ -302,8 +247,7 @@
      *
      * @return True to show the bar
      */
-    public boolean hasSearchBar()
-    {
+    public boolean hasSearchBar() {
         return tabIndex == CreativeTabs.SEARCH.tabIndex;
     }
 
@@ -313,19 +257,16 @@
      *
      * @return The width of the search bar, 89 by default
      */
-    public int getSearchbarWidth()
-    {
+    public int getSearchbarWidth() {
         return 89;
     }
 
     @SideOnly(Side.CLIENT)
-    public net.minecraft.util.ResourceLocation getBackgroundImage()
-    {
+    public net.minecraft.util.ResourceLocation getBackgroundImage() {
         return new net.minecraft.util.ResourceLocation("textures/gui/container/creative_inventory/tab_" + this.getBackgroundImageName());
     }
 
-    public int getLabelColor()
-    {
+    public int getLabelColor() {
         return 4210752;
     }
 }
