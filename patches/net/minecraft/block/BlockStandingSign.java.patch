--- ../src-base/minecraft/net/minecraft/block/BlockStandingSign.java
+++ ../src-work/minecraft/net/minecraft/block/BlockStandingSign.java
@@ -9,19 +9,15 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
-public class BlockStandingSign extends BlockSign
-{
+public class BlockStandingSign extends BlockSign {
     public static final PropertyInteger ROTATION = PropertyInteger.create("rotation", 0, 15);
 
-    public BlockStandingSign()
-    {
+    public BlockStandingSign() {
         this.setDefaultState(this.blockState.getBaseState().withProperty(ROTATION, Integer.valueOf(0)));
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
-        if (!worldIn.getBlockState(pos.down()).getMaterial().isSolid())
-        {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+        if (!worldIn.getBlockState(pos.down()).getMaterial().isSolid()) {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
         }
@@ -29,28 +25,23 @@
         super.neighborChanged(state, worldIn, pos, blockIn, fromPos);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(ROTATION, Integer.valueOf(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(ROTATION)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(ROTATION)).intValue();
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.withProperty(ROTATION, Integer.valueOf(rot.rotate(((Integer)state.getValue(ROTATION)).intValue(), 16)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.withProperty(ROTATION, Integer.valueOf(rot.rotate(((Integer) state.getValue(ROTATION)).intValue(), 16)));
     }
 
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        return state.withProperty(ROTATION, Integer.valueOf(mirrorIn.mirrorRotation(((Integer)state.getValue(ROTATION)).intValue(), 16)));
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        return state.withProperty(ROTATION, Integer.valueOf(mirrorIn.mirrorRotation(((Integer) state.getValue(ROTATION)).intValue(), 16)));
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {ROTATION});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{ROTATION});
     }
 }
