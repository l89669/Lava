--- ../src-base/minecraft/net/minecraft/block/BlockContainer.java
+++ ../src-work/minecraft/net/minecraft/block/BlockContainer.java
@@ -1,6 +1,5 @@
 package net.minecraft.block;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -18,72 +17,60 @@
 import net.minecraft.world.IWorldNameable;
 import net.minecraft.world.World;
 
-public abstract class BlockContainer extends Block implements ITileEntityProvider
-{
-    protected BlockContainer(Material materialIn)
-    {
+import javax.annotation.Nullable;
+
+public abstract class BlockContainer extends Block implements ITileEntityProvider {
+    protected BlockContainer(Material materialIn) {
         this(materialIn, materialIn.getMaterialMapColor());
     }
 
-    protected BlockContainer(Material materialIn, MapColor color)
-    {
+    protected BlockContainer(Material materialIn, MapColor color) {
         super(materialIn, color);
         this.hasTileEntity = true;
     }
 
-    protected boolean isInvalidNeighbor(World worldIn, BlockPos pos, EnumFacing facing)
-    {
+    protected boolean isInvalidNeighbor(World worldIn, BlockPos pos, EnumFacing facing) {
         return worldIn.getBlockState(pos.offset(facing)).getMaterial() == Material.CACTUS;
     }
 
-    protected boolean hasInvalidNeighbor(World worldIn, BlockPos pos)
-    {
+    protected boolean hasInvalidNeighbor(World worldIn, BlockPos pos) {
         return this.isInvalidNeighbor(worldIn, pos, EnumFacing.NORTH) || this.isInvalidNeighbor(worldIn, pos, EnumFacing.SOUTH) || this.isInvalidNeighbor(worldIn, pos, EnumFacing.WEST) || this.isInvalidNeighbor(worldIn, pos, EnumFacing.EAST);
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.INVISIBLE;
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         super.breakBlock(worldIn, pos, state);
         worldIn.removeTileEntity(pos);
     }
 
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, @Nullable TileEntity te, ItemStack stack)
-    {
-        if (te instanceof IWorldNameable && ((IWorldNameable)te).hasCustomName())
-        {
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, @Nullable TileEntity te, ItemStack stack) {
+        if (te instanceof IWorldNameable && ((IWorldNameable) te).hasCustomName()) {
             player.addStat(StatList.getBlockStats(this));
             player.addExhaustion(0.005F);
 
-            if (worldIn.isRemote)
-            {
+            if (worldIn.isRemote) {
                 return;
             }
 
             int i = EnchantmentHelper.getEnchantmentLevel(Enchantments.FORTUNE, stack);
             Item item = this.getItemDropped(state, worldIn.rand, i);
 
-            if (item == Items.AIR)
-            {
+            if (item == Items.AIR) {
                 return;
             }
 
             ItemStack itemstack = new ItemStack(item, this.quantityDropped(worldIn.rand));
-            itemstack.setStackDisplayName(((IWorldNameable)te).getName());
+            itemstack.setStackDisplayName(((IWorldNameable) te).getName());
             spawnAsEntity(worldIn, pos, itemstack);
+        } else {
+            super.harvestBlock(worldIn, player, pos, state, (TileEntity) null, stack);
         }
-        else
-        {
-            super.harvestBlock(worldIn, player, pos, state, (TileEntity)null, stack);
-        }
     }
 
-    public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param)
-    {
+    public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param) {
         super.eventReceived(state, worldIn, pos, id, param);
         TileEntity tileentity = worldIn.getTileEntity(pos);
         return tileentity == null ? false : tileentity.receiveClientEvent(id, param);
