--- ../src-base/minecraft/net/minecraft/block/BlockBed.java
+++ ../src-work/minecraft/net/minecraft/block/BlockBed.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
@@ -14,20 +12,13 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Biomes;
 import net.minecraft.init.Items;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityBed;
-import net.minecraft.util.BlockRenderLayer;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.TextComponentTranslation;
@@ -36,28 +27,26 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockBed extends BlockHorizontal implements ITileEntityProvider
-{
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public class BlockBed extends BlockHorizontal implements ITileEntityProvider {
     public static final PropertyEnum<BlockBed.EnumPartType> PART = PropertyEnum.<BlockBed.EnumPartType>create("part", BlockBed.EnumPartType.class);
     public static final PropertyBool OCCUPIED = PropertyBool.create("occupied");
     protected static final AxisAlignedBB BED_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.5625D, 1.0D);
 
-    public BlockBed()
-    {
+    public BlockBed() {
         super(Material.CLOTH);
         this.setDefaultState(this.blockState.getBaseState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(OCCUPIED, Boolean.valueOf(false)));
         this.hasTileEntity = true;
     }
 
-    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
-        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
+    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
+        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityBed)
-            {
-                EnumDyeColor enumdyecolor = ((TileEntityBed)tileentity).getColor();
+            if (tileentity instanceof TileEntityBed) {
+                EnumDyeColor enumdyecolor = ((TileEntityBed) tileentity).getColor();
                 return MapColor.getBlockColor(enumdyecolor);
             }
         }
@@ -65,35 +54,26 @@
         return MapColor.CLOTH;
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else
-        {
-            if (state.getValue(PART) != BlockBed.EnumPartType.HEAD)
-            {
-                pos = pos.offset((EnumFacing)state.getValue(FACING));
+        } else {
+            if (state.getValue(PART) != BlockBed.EnumPartType.HEAD) {
+                pos = pos.offset((EnumFacing) state.getValue(FACING));
                 state = worldIn.getBlockState(pos);
 
-                if (state.getBlock() != this)
-                {
+                if (state.getBlock() != this) {
                     return true;
                 }
             }
 
             net.minecraft.world.WorldProvider.WorldSleepResult sleepResult = worldIn.provider.canSleepAt(playerIn, pos);
-            if (sleepResult != net.minecraft.world.WorldProvider.WorldSleepResult.BED_EXPLODES)
-            {
+            if (sleepResult != net.minecraft.world.WorldProvider.WorldSleepResult.BED_EXPLODES) {
                 if (sleepResult == net.minecraft.world.WorldProvider.WorldSleepResult.DENY) return true;
-                if (((Boolean)state.getValue(OCCUPIED)).booleanValue())
-                {
+                if (((Boolean) state.getValue(OCCUPIED)).booleanValue()) {
                     EntityPlayer entityplayer = this.getPlayerInBed(worldIn, pos);
 
-                    if (entityplayer != null)
-                    {
+                    if (entityplayer != null) {
                         playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.occupied", new Object[0]), true);
                         return true;
                     }
@@ -104,53 +84,39 @@
 
                 EntityPlayer.SleepResult entityplayer$sleepresult = playerIn.trySleep(pos);
 
-                if (entityplayer$sleepresult == EntityPlayer.SleepResult.OK)
-                {
+                if (entityplayer$sleepresult == EntityPlayer.SleepResult.OK) {
                     state = state.withProperty(OCCUPIED, Boolean.valueOf(true));
                     worldIn.setBlockState(pos, state, 4);
                     return true;
-                }
-                else
-                {
-                    if (entityplayer$sleepresult == EntityPlayer.SleepResult.NOT_POSSIBLE_NOW)
-                    {
+                } else {
+                    if (entityplayer$sleepresult == EntityPlayer.SleepResult.NOT_POSSIBLE_NOW) {
                         playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.noSleep", new Object[0]), true);
-                    }
-                    else if (entityplayer$sleepresult == EntityPlayer.SleepResult.NOT_SAFE)
-                    {
+                    } else if (entityplayer$sleepresult == EntityPlayer.SleepResult.NOT_SAFE) {
                         playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.notSafe", new Object[0]), true);
-                    }
-                    else if (entityplayer$sleepresult == EntityPlayer.SleepResult.TOO_FAR_AWAY)
-                    {
+                    } else if (entityplayer$sleepresult == EntityPlayer.SleepResult.TOO_FAR_AWAY) {
                         playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.tooFarAway", new Object[0]), true);
                     }
 
                     return true;
                 }
-            }
-            else
-            {
+            } else {
                 worldIn.setBlockToAir(pos);
-                BlockPos blockpos = pos.offset(((EnumFacing)state.getValue(FACING)).getOpposite());
+                BlockPos blockpos = pos.offset(((EnumFacing) state.getValue(FACING)).getOpposite());
 
-                if (worldIn.getBlockState(blockpos).getBlock() == this)
-                {
+                if (worldIn.getBlockState(blockpos).getBlock() == this) {
                     worldIn.setBlockToAir(blockpos);
                 }
 
-                worldIn.newExplosion((Entity)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, 5.0F, true, true);
+                worldIn.newExplosion((Entity) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, 5.0F, true, true);
                 return true;
             }
         }
     }
 
     @Nullable
-    private EntityPlayer getPlayerInBed(World worldIn, BlockPos pos)
-    {
-        for (EntityPlayer entityplayer : worldIn.playerEntities)
-        {
-            if (entityplayer.isPlayerSleeping() && entityplayer.bedLocation.equals(pos))
-            {
+    private EntityPlayer getPlayerInBed(World worldIn, BlockPos pos) {
+        for (EntityPlayer entityplayer : worldIn.playerEntities) {
+            if (entityplayer.isPlayerSleeping() && entityplayer.bedLocation.equals(pos)) {
                 return entityplayer;
             }
         }
@@ -158,53 +124,39 @@
         return null;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)
-    {
+    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance) {
         super.onFallenUpon(worldIn, pos, entityIn, fallDistance * 0.5F);
     }
 
-    public void onLanded(World worldIn, Entity entityIn)
-    {
-        if (entityIn.isSneaking())
-        {
+    public void onLanded(World worldIn, Entity entityIn) {
+        if (entityIn.isSneaking()) {
             super.onLanded(worldIn, entityIn);
-        }
-        else if (entityIn.motionY < 0.0D)
-        {
+        } else if (entityIn.motionY < 0.0D) {
             entityIn.motionY = -entityIn.motionY * 0.6600000262260437D;
 
-            if (!(entityIn instanceof EntityLivingBase))
-            {
+            if (!(entityIn instanceof EntityLivingBase)) {
                 entityIn.motionY *= 0.8D;
             }
         }
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
 
-        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
-            if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() != this)
-            {
+        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
+            if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() != this) {
                 worldIn.setBlockToAir(pos);
             }
-        }
-        else if (worldIn.getBlockState(pos.offset(enumfacing.getOpposite())).getBlock() != this)
-        {
-            if (!worldIn.isRemote)
-            {
+        } else if (worldIn.getBlockState(pos.offset(enumfacing.getOpposite())).getBlock() != this) {
+            if (!worldIn.isRemote) {
                 this.dropBlockAsItem(worldIn, pos, state, 0);
             }
 
@@ -212,47 +164,38 @@
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return state.getValue(PART) == BlockBed.EnumPartType.FOOT ? Items.AIR : Items.BED;
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
         return BED_AABB;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean hasCustomBreakingProgress(IBlockState state)
-    {
+    public boolean hasCustomBreakingProgress(IBlockState state) {
         return true;
     }
 
     @Nullable
-    public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int tries)
-    {
-        EnumFacing enumfacing = (EnumFacing)worldIn.getBlockState(pos).getValue(FACING);
+    public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int tries) {
+        EnumFacing enumfacing = (EnumFacing) worldIn.getBlockState(pos).getValue(FACING);
         int i = pos.getX();
         int j = pos.getY();
         int k = pos.getZ();
 
-        for (int l = 0; l <= 1; ++l)
-        {
+        for (int l = 0; l <= 1; ++l) {
             int i1 = i - enumfacing.getFrontOffsetX() * l - 1;
             int j1 = k - enumfacing.getFrontOffsetZ() * l - 1;
             int k1 = i1 + 2;
             int l1 = j1 + 2;
 
-            for (int i2 = i1; i2 <= k1; ++i2)
-            {
-                for (int j2 = j1; j2 <= l1; ++j2)
-                {
+            for (int i2 = i1; i2 <= k1; ++i2) {
+                for (int j2 = j1; j2 <= l1; ++j2) {
                     BlockPos blockpos = new BlockPos(i2, j, j2);
 
-                    if (hasRoomForPlayer(worldIn, blockpos))
-                    {
-                        if (tries <= 0)
-                        {
+                    if (hasRoomForPlayer(worldIn, blockpos)) {
+                        if (tries <= 0) {
                             return blockpos;
                         }
 
@@ -265,98 +208,78 @@
         return null;
     }
 
-    protected static boolean hasRoomForPlayer(World worldIn, BlockPos pos)
-    {
+    protected static boolean hasRoomForPlayer(World worldIn, BlockPos pos) {
         return worldIn.getBlockState(pos.down()).isTopSolid() && !worldIn.getBlockState(pos).getMaterial().isSolid() && !worldIn.getBlockState(pos.up()).getMaterial().isSolid();
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
-        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD)
-        {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
-            EnumDyeColor enumdyecolor = tileentity instanceof TileEntityBed ? ((TileEntityBed)tileentity).getColor() : EnumDyeColor.RED;
+            EnumDyeColor enumdyecolor = tileentity instanceof TileEntityBed ? ((TileEntityBed) tileentity).getColor() : EnumDyeColor.RED;
             spawnAsEntity(worldIn, pos, new ItemStack(Items.BED, 1, enumdyecolor.getMetadata()));
         }
     }
 
-    public EnumPushReaction getMobilityFlag(IBlockState state)
-    {
+    public EnumPushReaction getMobilityFlag(IBlockState state) {
         return EnumPushReaction.DESTROY;
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockRenderLayer getBlockLayer()
-    {
+    public BlockRenderLayer getBlockLayer() {
         return BlockRenderLayer.CUTOUT;
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.ENTITYBLOCK_ANIMATED;
     }
 
-    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state) {
         BlockPos blockpos = pos;
 
-        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
-            blockpos = pos.offset((EnumFacing)state.getValue(FACING));
+        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
+            blockpos = pos.offset((EnumFacing) state.getValue(FACING));
         }
 
         TileEntity tileentity = worldIn.getTileEntity(blockpos);
-        EnumDyeColor enumdyecolor = tileentity instanceof TileEntityBed ? ((TileEntityBed)tileentity).getColor() : EnumDyeColor.RED;
+        EnumDyeColor enumdyecolor = tileentity instanceof TileEntityBed ? ((TileEntityBed) tileentity).getColor() : EnumDyeColor.RED;
         return new ItemStack(Items.BED, 1, enumdyecolor.getMetadata());
     }
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (player.capabilities.isCreativeMode && state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
-            BlockPos blockpos = pos.offset((EnumFacing)state.getValue(FACING));
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (player.capabilities.isCreativeMode && state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
+            BlockPos blockpos = pos.offset((EnumFacing) state.getValue(FACING));
 
-            if (worldIn.getBlockState(blockpos).getBlock() == this)
-            {
+            if (worldIn.getBlockState(blockpos).getBlock() == this) {
                 worldIn.setBlockToAir(blockpos);
             }
         }
     }
 
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te, ItemStack stack)
-    {
-        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD && te instanceof TileEntityBed)
-        {
-            TileEntityBed tileentitybed = (TileEntityBed)te;
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te, ItemStack stack) {
+        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD && te instanceof TileEntityBed) {
+            TileEntityBed tileentitybed = (TileEntityBed) te;
             ItemStack itemstack = tileentitybed.getItemStack();
             spawnAsEntity(worldIn, pos, itemstack);
+        } else {
+            super.harvestBlock(worldIn, player, pos, state, (TileEntity) null, stack);
         }
-        else
-        {
-            super.harvestBlock(worldIn, player, pos, state, (TileEntity)null, stack);
-        }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         super.breakBlock(worldIn, pos, state);
         worldIn.removeTileEntity(pos);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         EnumFacing enumfacing = EnumFacing.getHorizontal(meta);
         return (meta & 8) > 0 ? this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.HEAD).withProperty(FACING, enumfacing).withProperty(OCCUPIED, Boolean.valueOf((meta & 4) > 0)) : this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(FACING, enumfacing);
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
-        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
-        {
-            IBlockState iblockstate = worldIn.getBlockState(pos.offset((EnumFacing)state.getValue(FACING)));
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
+        if (state.getValue(PART) == BlockBed.EnumPartType.FOOT) {
+            IBlockState iblockstate = worldIn.getBlockState(pos.offset((EnumFacing) state.getValue(FACING)));
 
-            if (iblockstate.getBlock() == this)
-            {
+            if (iblockstate.getBlock() == this) {
                 state = state.withProperty(OCCUPIED, iblockstate.getValue(OCCUPIED));
             }
         }
@@ -364,27 +287,22 @@
         return state;
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.withProperty(FACING, rot.rotate((EnumFacing) state.getValue(FACING)));
     }
 
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        return state.withRotation(mirrorIn.toRotation((EnumFacing) state.getValue(FACING)));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         int i = 0;
-        i = i | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
+        i = i | ((EnumFacing) state.getValue(FACING)).getHorizontalIndex();
 
-        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD)
-        {
+        if (state.getValue(PART) == BlockBed.EnumPartType.HEAD) {
             i |= 8;
 
-            if (((Boolean)state.getValue(OCCUPIED)).booleanValue())
-            {
+            if (((Boolean) state.getValue(OCCUPIED)).booleanValue()) {
                 i |= 4;
             }
         }
@@ -392,46 +310,38 @@
         return i;
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {FACING, PART, OCCUPIED});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{FACING, PART, OCCUPIED});
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityBed();
     }
 
     @SideOnly(Side.CLIENT)
-    public static boolean isHeadPiece(int metadata)
-    {
+    public static boolean isHeadPiece(int metadata) {
         return (metadata & 8) != 0;
     }
 
-    public static enum EnumPartType implements IStringSerializable
-    {
+    public static enum EnumPartType implements IStringSerializable {
         HEAD("head"),
         FOOT("foot");
 
         private final String name;
 
-        private EnumPartType(String name)
-        {
+        private EnumPartType(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
