--- ../src-base/minecraft/net/minecraft/block/BlockNote.java
+++ ../src-work/minecraft/net/minecraft/block/BlockNote.java
@@ -1,7 +1,6 @@
 package net.minecraft.block;
 
 import com.google.common.collect.Lists;
-import java.util.List;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
@@ -10,38 +9,29 @@
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityNote;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.SoundCategory;
-import net.minecraft.util.SoundEvent;
+import net.minecraft.util.*;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
-public class BlockNote extends BlockContainer
-{
+import java.util.List;
+
+public class BlockNote extends BlockContainer {
     private static final List<SoundEvent> INSTRUMENTS = Lists.newArrayList(SoundEvents.BLOCK_NOTE_HARP, SoundEvents.BLOCK_NOTE_BASEDRUM, SoundEvents.BLOCK_NOTE_SNARE, SoundEvents.BLOCK_NOTE_HAT, SoundEvents.BLOCK_NOTE_BASS, SoundEvents.BLOCK_NOTE_FLUTE, SoundEvents.BLOCK_NOTE_BELL, SoundEvents.BLOCK_NOTE_GUITAR, SoundEvents.BLOCK_NOTE_CHIME, SoundEvents.BLOCK_NOTE_XYLOPHONE);
 
-    public BlockNote()
-    {
+    public BlockNote() {
         super(Material.WOOD);
         this.setCreativeTab(CreativeTabs.REDSTONE);
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
         boolean flag = worldIn.isBlockPowered(pos);
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityNote)
-        {
-            TileEntityNote tileentitynote = (TileEntityNote)tileentity;
+        if (tileentity instanceof TileEntityNote) {
+            TileEntityNote tileentitynote = (TileEntityNote) tileentity;
 
-            if (tileentitynote.previousRedstoneState != flag)
-            {
-                if (flag)
-                {
+            if (tileentitynote.previousRedstoneState != flag) {
+                if (flag) {
                     tileentitynote.triggerNote(worldIn, pos);
                 }
 
@@ -50,19 +40,14 @@
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else
-        {
+        } else {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityNote)
-            {
-                TileEntityNote tileentitynote = (TileEntityNote)tileentity;
+            if (tileentity instanceof TileEntityNote) {
+                TileEntityNote tileentitynote = (TileEntityNote) tileentity;
                 int old = tileentitynote.note;
                 tileentitynote.changePitch();
                 if (old == tileentitynote.note) return false;
@@ -74,49 +59,41 @@
         }
     }
 
-    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {
+        if (!worldIn.isRemote) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityNote)
-            {
-                ((TileEntityNote)tileentity).triggerNote(worldIn, pos);
+            if (tileentity instanceof TileEntityNote) {
+                ((TileEntityNote) tileentity).triggerNote(worldIn, pos);
                 playerIn.addStat(StatList.NOTEBLOCK_PLAYED);
             }
         }
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityNote();
     }
 
-    private SoundEvent getInstrument(int eventId)
-    {
-        if (eventId < 0 || eventId >= INSTRUMENTS.size())
-        {
+    private SoundEvent getInstrument(int eventId) {
+        if (eventId < 0 || eventId >= INSTRUMENTS.size()) {
             eventId = 0;
         }
 
         return INSTRUMENTS.get(eventId);
     }
 
-    public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param)
-    {
+    public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param) {
         net.minecraftforge.event.world.NoteBlockEvent.Play e = new net.minecraftforge.event.world.NoteBlockEvent.Play(worldIn, pos, state, param, id);
         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(e)) return false;
         id = e.getInstrument().ordinal();
         param = e.getVanillaNoteId();
-        float f = (float)Math.pow(2.0D, (double)(param - 12) / 12.0D);
-        worldIn.playSound((EntityPlayer)null, pos, this.getInstrument(id), SoundCategory.RECORDS, 3.0F, f);
-        worldIn.spawnParticle(EnumParticleTypes.NOTE, (double)pos.getX() + 0.5D, (double)pos.getY() + 1.2D, (double)pos.getZ() + 0.5D, (double)param / 24.0D, 0.0D, 0.0D);
+        float f = (float) Math.pow(2.0D, (double) (param - 12) / 12.0D);
+        worldIn.playSound((EntityPlayer) null, pos, this.getInstrument(id), SoundCategory.RECORDS, 3.0F, f);
+        worldIn.spawnParticle(EnumParticleTypes.NOTE, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.2D, (double) pos.getZ() + 0.5D, (double) param / 24.0D, 0.0D, 0.0D);
         return true;
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.MODEL;
     }
 }
