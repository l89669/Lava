--- ../src-base/minecraft/net/minecraft/block/BlockBeacon.java
+++ ../src-work/minecraft/net/minecraft/block/BlockBeacon.java
@@ -11,11 +11,7 @@
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityBeacon;
-import net.minecraft.util.BlockRenderLayer;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.HttpUtil;
+import net.minecraft.util.*;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
@@ -23,33 +19,25 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockBeacon extends BlockContainer
-{
-    public BlockBeacon()
-    {
+public class BlockBeacon extends BlockContainer {
+    public BlockBeacon() {
         super(Material.GLASS, MapColor.DIAMOND);
         this.setHardness(3.0F);
         this.setCreativeTab(CreativeTabs.MISC);
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityBeacon();
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else
-        {
+        } else {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityBeacon)
-            {
-                playerIn.displayGUIChest((TileEntityBeacon)tileentity);
+            if (tileentity instanceof TileEntityBeacon) {
+                playerIn.displayGUIChest((TileEntityBeacon) tileentity);
                 playerIn.addStat(StatList.BEACON_INTERACTION);
             }
 
@@ -57,83 +45,65 @@
         }
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.MODEL;
     }
 
-    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
-    {
+    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
         super.onBlockPlacedBy(worldIn, pos, state, placer, stack);
 
-        if (stack.hasDisplayName())
-        {
+        if (stack.hasDisplayName()) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityBeacon)
-            {
-                ((TileEntityBeacon)tileentity).setName(stack.getDisplayName());
+            if (tileentity instanceof TileEntityBeacon) {
+                ((TileEntityBeacon) tileentity).setName(stack.getDisplayName());
             }
         }
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityBeacon)
-        {
-            ((TileEntityBeacon)tileentity).updateBeacon();
+        if (tileentity instanceof TileEntityBeacon) {
+            ((TileEntityBeacon) tileentity).updateBeacon();
             worldIn.addBlockEvent(pos, this, 1, 0);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockRenderLayer getBlockLayer()
-    {
+    public BlockRenderLayer getBlockLayer() {
         return BlockRenderLayer.CUTOUT;
     }
 
-    public static void updateColorAsync(final World worldIn, final BlockPos glassPos)
-    {
-        HttpUtil.DOWNLOADER_EXECUTOR.submit(new Runnable()
-        {
-            public void run()
-            {
+    public static void updateColorAsync(final World worldIn, final BlockPos glassPos) {
+        HttpUtil.DOWNLOADER_EXECUTOR.submit(new Runnable() {
+            public void run() {
                 Chunk chunk = worldIn.getChunkFromBlockCoords(glassPos);
 
-                for (int i = glassPos.getY() - 1; i >= 0; --i)
-                {
+                for (int i = glassPos.getY() - 1; i >= 0; --i) {
                     final BlockPos blockpos = new BlockPos(glassPos.getX(), i, glassPos.getZ());
 
-                    if (!chunk.canSeeSky(blockpos))
-                    {
+                    if (!chunk.canSeeSky(blockpos)) {
                         break;
                     }
 
                     IBlockState iblockstate = worldIn.getBlockState(blockpos);
 
-                    if (iblockstate.getBlock() == Blocks.BEACON)
-                    {
-                        ((WorldServer)worldIn).addScheduledTask(new Runnable()
-                        {
-                            public void run()
-                            {
+                    if (iblockstate.getBlock() == Blocks.BEACON) {
+                        ((WorldServer) worldIn).addScheduledTask(new Runnable() {
+                            public void run() {
                                 TileEntity tileentity = worldIn.getTileEntity(blockpos);
 
-                                if (tileentity instanceof TileEntityBeacon)
-                                {
-                                    ((TileEntityBeacon)tileentity).updateBeacon();
+                                if (tileentity instanceof TileEntityBeacon) {
+                                    ((TileEntityBeacon) tileentity).updateBeacon();
                                     worldIn.addBlockEvent(blockpos, Blocks.BEACON, 1, 0);
                                 }
                             }
