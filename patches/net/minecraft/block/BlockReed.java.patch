--- ../src-base/minecraft/net/minecraft/block/BlockReed.java
+++ ../src-work/minecraft/net/minecraft/block/BlockReed.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
@@ -21,82 +19,68 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockReed extends Block implements net.minecraftforge.common.IPlantable
-{
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public class BlockReed extends Block implements net.minecraftforge.common.IPlantable {
     public static final PropertyInteger AGE = PropertyInteger.create("age", 0, 15);
     protected static final AxisAlignedBB REED_AABB = new AxisAlignedBB(0.125D, 0.0D, 0.125D, 0.875D, 1.0D, 0.875D);
 
-    protected BlockReed()
-    {
+    protected BlockReed() {
         super(Material.PLANTS);
         this.setDefaultState(this.blockState.getBaseState().withProperty(AGE, Integer.valueOf(0)));
         this.setTickRandomly(true);
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
         return REED_AABB;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (worldIn.getBlockState(pos.down()).getBlock() == Blocks.REEDS || this.checkForDrop(worldIn, pos, state))
-        {
-            if (worldIn.isAirBlock(pos.up()))
-            {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (worldIn.getBlockState(pos.down()).getBlock() == Blocks.REEDS || this.checkForDrop(worldIn, pos, state)) {
+            if (worldIn.isAirBlock(pos.up())) {
                 int i;
 
-                for (i = 1; worldIn.getBlockState(pos.down(i)).getBlock() == this; ++i)
-                {
+                for (i = 1; worldIn.getBlockState(pos.down(i)).getBlock() == this; ++i) {
                     ;
                 }
 
-                if (i < 3)
-                {
-                    int j = ((Integer)state.getValue(AGE)).intValue();
+                if (i < 3) {
+                    int j = ((Integer) state.getValue(AGE)).intValue();
 
-                    if(net.minecraftforge.common.ForgeHooks.onCropsGrowPre(worldIn, pos, state, true))
-                    {
-                    if (j == 15)
-                    {
-                        worldIn.setBlockState(pos.up(), this.getDefaultState());
-                        worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(0)), 4);
+                    if (net.minecraftforge.common.ForgeHooks.onCropsGrowPre(worldIn, pos, state, true)) {
+                        if (j >= (byte) Block.range(3.0f, 100.0f / worldIn.spigotConfig.caneModifier * 15.0f + 0.5f, 15.0f)) // Spigot
+                        {
+//                        worldIn.setBlockState(pos.up(), this.getDefaultState());
+                            BlockPos upPos = pos.up();
+                            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(worldIn, upPos.getX(), upPos.getY(), upPos.getZ(), this, 0);
+                            worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(0)), 4);
+                        } else {
+                            worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(j + 1)), 4);
+                        }
+                        net.minecraftforge.common.ForgeHooks.onCropsGrowPost(worldIn, pos, state, worldIn.getBlockState(pos));
                     }
-                    else
-                    {
-                        worldIn.setBlockState(pos, state.withProperty(AGE, Integer.valueOf(j + 1)), 4);
-                    }
-                    net.minecraftforge.common.ForgeHooks.onCropsGrowPost(worldIn, pos, state, worldIn.getBlockState(pos));
-                    }
                 }
             }
         }
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         IBlockState state = worldIn.getBlockState(pos.down());
         Block block = state.getBlock();
         if (block.canSustainPlant(state, worldIn, pos.down(), EnumFacing.UP, this)) return true;
 
-        if (block == this)
-        {
+        if (block == this) {
             return true;
-        }
-        else if (block != Blocks.GRASS && block != Blocks.DIRT && block != Blocks.SAND)
-        {
+        } else if (block != Blocks.GRASS && block != Blocks.DIRT && block != Blocks.SAND) {
             return false;
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = pos.down();
 
-            for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
-            {
+            for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL) {
                 IBlockState iblockstate = worldIn.getBlockState(blockpos.offset(enumfacing));
 
-                if (iblockstate.getMaterial() == Material.WATER || iblockstate.getBlock() == Blocks.FROSTED_ICE)
-                {
+                if (iblockstate.getMaterial() == Material.WATER || iblockstate.getBlock() == Blocks.FROSTED_ICE) {
                     return true;
                 }
             }
@@ -105,90 +89,73 @@
         }
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
         this.checkForDrop(worldIn, pos, state);
     }
 
-    protected final boolean checkForDrop(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.canBlockStay(worldIn, pos))
-        {
+    protected final boolean checkForDrop(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.canBlockStay(worldIn, pos)) {
             return true;
-        }
-        else
-        {
+        } else {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
             return false;
         }
     }
 
-    public boolean canBlockStay(World worldIn, BlockPos pos)
-    {
+    public boolean canBlockStay(World worldIn, BlockPos pos) {
         return this.canPlaceBlockAt(worldIn, pos);
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos) {
         return NULL_AABB;
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Items.REEDS;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state) {
         return new ItemStack(Items.REEDS);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(AGE, Integer.valueOf(meta));
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockRenderLayer getBlockLayer()
-    {
+    public BlockRenderLayer getBlockLayer() {
         return BlockRenderLayer.CUTOUT;
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(AGE)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(AGE)).intValue();
     }
 
     @Override
-    public net.minecraftforge.common.EnumPlantType getPlantType(IBlockAccess world, BlockPos pos)
-    {
+    public net.minecraftforge.common.EnumPlantType getPlantType(IBlockAccess world, BlockPos pos) {
         return net.minecraftforge.common.EnumPlantType.Beach;
     }
+
     @Override
-    public IBlockState getPlant(IBlockAccess world, BlockPos pos)
-    {
+    public IBlockState getPlant(IBlockAccess world, BlockPos pos) {
         return this.getDefaultState();
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {AGE});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{AGE});
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
 }
