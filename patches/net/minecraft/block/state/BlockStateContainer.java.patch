--- ../src-base/minecraft/net/minecraft/block/state/BlockStateContainer.java
+++ ../src-work/minecraft/net/minecraft/block/state/BlockStateContainer.java
@@ -2,24 +2,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.MoreObjects;
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.ImmutableCollection;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSortedMap;
-import com.google.common.collect.ImmutableTable;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Table;
-import com.google.common.collect.UnmodifiableIterator;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.regex.Pattern;
-import javax.annotation.Nullable;
+import com.google.common.collect.*;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
@@ -27,93 +10,78 @@
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.MapPopulator;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
-import net.minecraft.util.math.AxisAlignedBB;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.Cartesian;
-import net.minecraft.util.math.RayTraceResult;
-import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.*;
+import net.minecraft.util.math.*;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockStateContainer
-{
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+
+public class BlockStateContainer {
     private static final Pattern NAME_PATTERN = Pattern.compile("^[a-z0-9_]+$");
-    private static final Function < IProperty<?>, String > GET_NAME_FUNC = new Function < IProperty<?>, String > ()
-    {
+    private static final Function<IProperty<?>, String> GET_NAME_FUNC = new Function<IProperty<?>, String>() {
         @Nullable
-        public String apply(@Nullable IProperty<?> p_apply_1_)
-        {
+        public String apply(@Nullable IProperty<?> p_apply_1_) {
             return p_apply_1_ == null ? "<NULL>" : p_apply_1_.getName();
         }
     };
     private final Block block;
-    private final ImmutableSortedMap < String, IProperty<? >> properties;
+    private final ImmutableSortedMap<String, IProperty<?>> properties;
     private final ImmutableList<IBlockState> validStates;
 
-    public BlockStateContainer(Block blockIn, IProperty<?>... properties)
-    {
+    public BlockStateContainer(Block blockIn, IProperty<?>... properties) {
         this(blockIn, properties, null);
     }
 
-    protected StateImplementation createState(Block block, ImmutableMap<IProperty<?>, Comparable<?>> properties, @Nullable ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, java.util.Optional<?>> unlistedProperties)
-    {
+    protected StateImplementation createState(Block block, ImmutableMap<IProperty<?>, Comparable<?>> properties, @Nullable ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, java.util.Optional<?>> unlistedProperties) {
         return new StateImplementation(block, properties);
     }
 
-    protected BlockStateContainer(Block blockIn, IProperty<?>[] properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, java.util.Optional<?>> unlistedProperties)
-    {
+    protected BlockStateContainer(Block blockIn, IProperty<?>[] properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, java.util.Optional<?>> unlistedProperties) {
         this.block = blockIn;
-        Map < String, IProperty<? >> map = Maps. < String, IProperty<? >> newHashMap();
+        Map<String, IProperty<?>> map = Maps.<String, IProperty<?>>newHashMap();
 
-        for (IProperty<?> iproperty : properties)
-        {
+        for (IProperty<?> iproperty : properties) {
             validateProperty(blockIn, iproperty);
             map.put(iproperty.getName(), iproperty);
         }
 
         this.properties = ImmutableSortedMap.copyOf(map);
-        Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map2 = Maps. < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > newLinkedHashMap();
+        Map<Map<IProperty<?>, Comparable<?>>, BlockStateContainer.StateImplementation> map2 = Maps.<Map<IProperty<?>, Comparable<?>>, BlockStateContainer.StateImplementation>newLinkedHashMap();
         List<BlockStateContainer.StateImplementation> list1 = Lists.<BlockStateContainer.StateImplementation>newArrayList();
 
-        for (List < Comparable<? >> list : Cartesian.cartesianProduct(this.getAllowedValues()))
-        {
-            Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> createMap(this.properties.values(), list);
+        for (List<Comparable<?>> list : Cartesian.cartesianProduct(this.getAllowedValues())) {
+            Map<IProperty<?>, Comparable<?>> map1 = MapPopulator.<IProperty<?>, Comparable<?>>createMap(this.properties.values(), list);
             BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = createState(blockIn, ImmutableMap.copyOf(map1), unlistedProperties);
             map2.put(map1, blockstatecontainer$stateimplementation);
             list1.add(blockstatecontainer$stateimplementation);
         }
 
-        for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list1)
-        {
+        for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list1) {
             blockstatecontainer$stateimplementation1.buildPropertyValueTable(map2);
         }
 
         this.validStates = ImmutableList.<IBlockState>copyOf(list1);
     }
 
-    public static <T extends Comparable<T>> String validateProperty(Block block, IProperty<T> property)
-    {
+    public static <T extends Comparable<T>> String validateProperty(Block block, IProperty<T> property) {
         String s = property.getName();
 
-        if (!NAME_PATTERN.matcher(s).matches())
-        {
+        if (!NAME_PATTERN.matcher(s).matches()) {
             throw new IllegalArgumentException("Block: " + block.getClass() + " has invalidly named property: " + s);
-        }
-        else
-        {
-            for (T t : property.getAllowedValues())
-            {
+        } else {
+            for (T t : property.getAllowedValues()) {
                 String s1 = property.getName(t);
 
-                if (!NAME_PATTERN.matcher(s1).matches())
-                {
+                if (!NAME_PATTERN.matcher(s1).matches()) {
                     throw new IllegalArgumentException("Block: " + block.getClass() + " has property: " + s + " with invalidly named value: " + s1);
                 }
             }
@@ -122,453 +90,365 @@
         }
     }
 
-    public ImmutableList<IBlockState> getValidStates()
-    {
+    public ImmutableList<IBlockState> getValidStates() {
         return this.validStates;
     }
 
-    private List < Iterable < Comparable<? >>> getAllowedValues()
-    {
-        List < Iterable < Comparable<? >>> list = Lists. < Iterable < Comparable<? >>> newArrayList();
-        ImmutableCollection < IProperty<? >> immutablecollection = this.properties.values();
+    private List<Iterable<Comparable<?>>> getAllowedValues() {
+        List<Iterable<Comparable<?>>> list = Lists.<Iterable<Comparable<?>>>newArrayList();
+        ImmutableCollection<IProperty<?>> immutablecollection = this.properties.values();
         UnmodifiableIterator unmodifiableiterator = immutablecollection.iterator();
 
-        while (unmodifiableiterator.hasNext())
-        {
-            IProperty<?> iproperty = (IProperty)unmodifiableiterator.next();
-            list.add(((IProperty)iproperty).getAllowedValues());
+        while (unmodifiableiterator.hasNext()) {
+            IProperty<?> iproperty = (IProperty) unmodifiableiterator.next();
+            list.add(((IProperty) iproperty).getAllowedValues());
         }
 
         return list;
     }
 
-    public IBlockState getBaseState()
-    {
-        return (IBlockState)this.validStates.get(0);
+    public IBlockState getBaseState() {
+        return (IBlockState) this.validStates.get(0);
     }
 
-    public Block getBlock()
-    {
+    public Block getBlock() {
         return this.block;
     }
 
-    public Collection < IProperty<? >> getProperties()
-    {
+    public Collection<IProperty<?>> getProperties() {
         return this.properties.values();
     }
 
-    public String toString()
-    {
+    public String toString() {
         return MoreObjects.toStringHelper(this).add("block", Block.REGISTRY.getNameForObject(this.block)).add("properties", Iterables.transform(this.properties.values(), GET_NAME_FUNC)).toString();
     }
 
     @Nullable
-    public IProperty<?> getProperty(String propertyName)
-    {
-        return (IProperty)this.properties.get(propertyName);
+    public IProperty<?> getProperty(String propertyName) {
+        return (IProperty) this.properties.get(propertyName);
     }
 
-    public static class StateImplementation extends BlockStateBase
-        {
-            private final Block block;
-            private final ImmutableMap < IProperty<?>, Comparable<? >> properties;
-            protected ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > propertyValueTable;
+    public static class StateImplementation extends BlockStateBase {
+        private final Block block;
+        private final ImmutableMap<IProperty<?>, Comparable<?>> properties;
+        protected ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> propertyValueTable;
 
-            protected StateImplementation(Block blockIn, ImmutableMap < IProperty<?>, Comparable<? >> propertiesIn)
-            {
-                this.block = blockIn;
-                this.properties = propertiesIn;
-            }
+        protected StateImplementation(Block blockIn, ImmutableMap<IProperty<?>, Comparable<?>> propertiesIn) {
+            this.block = blockIn;
+            this.properties = propertiesIn;
+        }
 
-            protected StateImplementation(Block blockIn, ImmutableMap<IProperty<?>, Comparable<?>> propertiesIn, ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> propertyValueTable)
-            {
-                this.block = blockIn;
-                this.properties = propertiesIn;
-                this.propertyValueTable = propertyValueTable;
-            }
+        protected StateImplementation(Block blockIn, ImmutableMap<IProperty<?>, Comparable<?>> propertiesIn, ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> propertyValueTable) {
+            this.block = blockIn;
+            this.properties = propertiesIn;
+            this.propertyValueTable = propertyValueTable;
+        }
 
-            public Collection < IProperty<? >> getPropertyKeys()
-            {
-                return Collections. < IProperty<? >> unmodifiableCollection(this.properties.keySet());
-            }
+        public Collection<IProperty<?>> getPropertyKeys() {
+            return Collections.<IProperty<?>>unmodifiableCollection(this.properties.keySet());
+        }
 
-            public <T extends Comparable<T>> T getValue(IProperty<T> property)
-            {
-                Comparable<?> comparable = (Comparable)this.properties.get(property);
+        public <T extends Comparable<T>> T getValue(IProperty<T> property) {
+            Comparable<?> comparable = (Comparable) this.properties.get(property);
 
-                if (comparable == null)
-                {
-                    throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.block.getBlockState());
-                }
-                else
-                {
-                    return (T)(property.getValueClass().cast(comparable));
-                }
+            if (comparable == null) {
+                throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.block.getBlockState());
+            } else {
+                return (T) (property.getValueClass().cast(comparable));
             }
+        }
 
-            public <T extends Comparable<T>, V extends T> IBlockState withProperty(IProperty<T> property, V value)
-            {
-                Comparable<?> comparable = (Comparable)this.properties.get(property);
+        public <T extends Comparable<T>, V extends T> IBlockState withProperty(IProperty<T> property, V value) {
+            Comparable<?> comparable = (Comparable) this.properties.get(property);
 
-                if (comparable == null)
-                {
-                    throw new IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.block.getBlockState());
-                }
-                else if (comparable == value)
-                {
-                    return this;
-                }
-                else
-                {
-                    IBlockState iblockstate = (IBlockState)this.propertyValueTable.get(property, value);
+            if (comparable == null) {
+                throw new IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.block.getBlockState());
+            } else if (comparable == value) {
+                return this;
+            } else {
+                IBlockState iblockstate = (IBlockState) this.propertyValueTable.get(property, value);
 
-                    if (iblockstate == null)
-                    {
-                        throw new IllegalArgumentException("Cannot set property " + property + " to " + value + " on block " + Block.REGISTRY.getNameForObject(this.block) + ", it is not an allowed value");
-                    }
-                    else
-                    {
-                        return iblockstate;
-                    }
+                if (iblockstate == null) {
+                    throw new IllegalArgumentException("Cannot set property " + property + " to " + value + " on block " + Block.REGISTRY.getNameForObject(this.block) + ", it is not an allowed value");
+                } else {
+                    return iblockstate;
                 }
             }
+        }
 
-            public ImmutableMap < IProperty<?>, Comparable<? >> getProperties()
-            {
-                return this.properties;
-            }
+        public ImmutableMap<IProperty<?>, Comparable<?>> getProperties() {
+            return this.properties;
+        }
 
-            public Block getBlock()
-            {
-                return this.block;
-            }
+        public Block getBlock() {
+            return this.block;
+        }
 
-            public boolean equals(Object p_equals_1_)
-            {
-                return this == p_equals_1_;
-            }
+        public boolean equals(Object p_equals_1_) {
+            return this == p_equals_1_;
+        }
 
-            public int hashCode()
-            {
-                return this.properties.hashCode();
-            }
+        public int hashCode() {
+            return this.properties.hashCode();
+        }
 
-            public void buildPropertyValueTable(Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map)
-            {
-                if (this.propertyValueTable != null)
-                {
-                    throw new IllegalStateException();
-                }
-                else
-                {
-                    Table < IProperty<?>, Comparable<?>, IBlockState > table = HashBasedTable. < IProperty<?>, Comparable<?>, IBlockState > create();
-                    UnmodifiableIterator unmodifiableiterator = this.properties.entrySet().iterator();
+        public void buildPropertyValueTable(Map<Map<IProperty<?>, Comparable<?>>, BlockStateContainer.StateImplementation> map) {
+            if (this.propertyValueTable != null) {
+                throw new IllegalStateException();
+            } else {
+                Table<IProperty<?>, Comparable<?>, IBlockState> table = HashBasedTable.<IProperty<?>, Comparable<?>, IBlockState>create();
+                UnmodifiableIterator unmodifiableiterator = this.properties.entrySet().iterator();
 
-                    while (unmodifiableiterator.hasNext())
-                    {
-                        Entry < IProperty<?>, Comparable<? >> entry = (Entry)unmodifiableiterator.next();
-                        IProperty<?> iproperty = (IProperty)entry.getKey();
+                while (unmodifiableiterator.hasNext()) {
+                    Entry<IProperty<?>, Comparable<?>> entry = (Entry) unmodifiableiterator.next();
+                    IProperty<?> iproperty = (IProperty) entry.getKey();
 
-                        for (Comparable<?> comparable : iproperty.getAllowedValues())
-                        {
-                            if (comparable != entry.getValue())
-                            {
-                                table.put(iproperty, comparable, map.get(this.getPropertiesWithValue(iproperty, comparable)));
-                            }
+                    for (Comparable<?> comparable : iproperty.getAllowedValues()) {
+                        if (comparable != entry.getValue()) {
+                            table.put(iproperty, comparable, map.get(this.getPropertiesWithValue(iproperty, comparable)));
                         }
                     }
-
-                    this.propertyValueTable = ImmutableTable.copyOf(table);
                 }
-            }
 
-            private Map < IProperty<?>, Comparable<? >> getPropertiesWithValue(IProperty<?> property, Comparable<?> value)
-            {
-                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newHashMap(this.properties);
-                map.put(property, value);
-                return map;
+                this.propertyValueTable = ImmutableTable.copyOf(table);
             }
+        }
 
-            public Material getMaterial()
-            {
-                return this.block.getMaterial(this);
-            }
+        private Map<IProperty<?>, Comparable<?>> getPropertiesWithValue(IProperty<?> property, Comparable<?> value) {
+            Map<IProperty<?>, Comparable<?>> map = Maps.<IProperty<?>, Comparable<?>>newHashMap(this.properties);
+            map.put(property, value);
+            return map;
+        }
 
-            public boolean isFullBlock()
-            {
-                return this.block.isFullBlock(this);
-            }
+        public Material getMaterial() {
+            return this.block.getMaterial(this);
+        }
 
-            public boolean canEntitySpawn(Entity entityIn)
-            {
-                return this.block.canEntitySpawn(this, entityIn);
-            }
+        public boolean isFullBlock() {
+            return this.block.isFullBlock(this);
+        }
 
-            public int getLightOpacity()
-            {
-                return this.block.getLightOpacity(this);
-            }
+        public boolean canEntitySpawn(Entity entityIn) {
+            return this.block.canEntitySpawn(this, entityIn);
+        }
 
-            public int getLightValue()
-            {
-                return this.block.getLightValue(this);
-            }
+        public int getLightOpacity() {
+            return this.block.getLightOpacity(this);
+        }
 
-            @SideOnly(Side.CLIENT)
-            public boolean isTranslucent()
-            {
-                return this.block.isTranslucent(this);
-            }
+        public int getLightValue() {
+            return this.block.getLightValue(this);
+        }
 
-            public boolean useNeighborBrightness()
-            {
-                return this.block.getUseNeighborBrightness(this);
-            }
+        @SideOnly(Side.CLIENT)
+        public boolean isTranslucent() {
+            return this.block.isTranslucent(this);
+        }
 
-            public MapColor getMapColor(IBlockAccess p_185909_1_, BlockPos p_185909_2_)
-            {
-                return this.block.getMapColor(this, p_185909_1_, p_185909_2_);
-            }
+        public boolean useNeighborBrightness() {
+            return this.block.getUseNeighborBrightness(this);
+        }
 
-            public IBlockState withRotation(Rotation rot)
-            {
-                return this.block.withRotation(this, rot);
-            }
+        public MapColor getMapColor(IBlockAccess p_185909_1_, BlockPos p_185909_2_) {
+            return this.block.getMapColor(this, p_185909_1_, p_185909_2_);
+        }
 
-            public IBlockState withMirror(Mirror mirrorIn)
-            {
-                return this.block.withMirror(this, mirrorIn);
-            }
+        public IBlockState withRotation(Rotation rot) {
+            return this.block.withRotation(this, rot);
+        }
 
-            public boolean isFullCube()
-            {
-                return this.block.isFullCube(this);
-            }
+        public IBlockState withMirror(Mirror mirrorIn) {
+            return this.block.withMirror(this, mirrorIn);
+        }
 
-            @SideOnly(Side.CLIENT)
-            public boolean hasCustomBreakingProgress()
-            {
-                return this.block.hasCustomBreakingProgress(this);
-            }
+        public boolean isFullCube() {
+            return this.block.isFullCube(this);
+        }
 
-            public EnumBlockRenderType getRenderType()
-            {
-                return this.block.getRenderType(this);
-            }
+        @SideOnly(Side.CLIENT)
+        public boolean hasCustomBreakingProgress() {
+            return this.block.hasCustomBreakingProgress(this);
+        }
 
-            @SideOnly(Side.CLIENT)
-            public int getPackedLightmapCoords(IBlockAccess source, BlockPos pos)
-            {
-                return this.block.getPackedLightmapCoords(this, source, pos);
-            }
+        public EnumBlockRenderType getRenderType() {
+            return this.block.getRenderType(this);
+        }
 
-            @SideOnly(Side.CLIENT)
-            public float getAmbientOcclusionLightValue()
-            {
-                return this.block.getAmbientOcclusionLightValue(this);
-            }
+        @SideOnly(Side.CLIENT)
+        public int getPackedLightmapCoords(IBlockAccess source, BlockPos pos) {
+            return this.block.getPackedLightmapCoords(this, source, pos);
+        }
 
-            public boolean isBlockNormalCube()
-            {
-                return this.block.isBlockNormalCube(this);
-            }
+        @SideOnly(Side.CLIENT)
+        public float getAmbientOcclusionLightValue() {
+            return this.block.getAmbientOcclusionLightValue(this);
+        }
 
-            public boolean isNormalCube()
-            {
-                return this.block.isNormalCube(this);
-            }
+        public boolean isBlockNormalCube() {
+            return this.block.isBlockNormalCube(this);
+        }
 
-            public boolean canProvidePower()
-            {
-                return this.block.canProvidePower(this);
-            }
+        public boolean isNormalCube() {
+            return this.block.isNormalCube(this);
+        }
 
-            public int getWeakPower(IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-            {
-                return this.block.getWeakPower(this, blockAccess, pos, side);
-            }
+        public boolean canProvidePower() {
+            return this.block.canProvidePower(this);
+        }
 
-            public boolean hasComparatorInputOverride()
-            {
-                return this.block.hasComparatorInputOverride(this);
-            }
+        public int getWeakPower(IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
+            return this.block.getWeakPower(this, blockAccess, pos, side);
+        }
 
-            public int getComparatorInputOverride(World worldIn, BlockPos pos)
-            {
-                return this.block.getComparatorInputOverride(this, worldIn, pos);
-            }
+        public boolean hasComparatorInputOverride() {
+            return this.block.hasComparatorInputOverride(this);
+        }
 
-            public float getBlockHardness(World worldIn, BlockPos pos)
-            {
-                return this.block.getBlockHardness(this, worldIn, pos);
-            }
+        public int getComparatorInputOverride(World worldIn, BlockPos pos) {
+            return this.block.getComparatorInputOverride(this, worldIn, pos);
+        }
 
-            public float getPlayerRelativeBlockHardness(EntityPlayer player, World worldIn, BlockPos pos)
-            {
-                return this.block.getPlayerRelativeBlockHardness(this, player, worldIn, pos);
-            }
+        public float getBlockHardness(World worldIn, BlockPos pos) {
+            return this.block.getBlockHardness(this, worldIn, pos);
+        }
 
-            public int getStrongPower(IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-            {
-                return this.block.getStrongPower(this, blockAccess, pos, side);
-            }
+        public float getPlayerRelativeBlockHardness(EntityPlayer player, World worldIn, BlockPos pos) {
+            return this.block.getPlayerRelativeBlockHardness(this, player, worldIn, pos);
+        }
 
-            public EnumPushReaction getMobilityFlag()
-            {
-                return this.block.getMobilityFlag(this);
-            }
+        public int getStrongPower(IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
+            return this.block.getStrongPower(this, blockAccess, pos, side);
+        }
 
-            public IBlockState getActualState(IBlockAccess blockAccess, BlockPos pos)
-            {
-                return this.block.getActualState(this, blockAccess, pos);
-            }
+        public EnumPushReaction getMobilityFlag() {
+            return this.block.getMobilityFlag(this);
+        }
 
-            @SideOnly(Side.CLIENT)
-            public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos)
-            {
-                return this.block.getSelectedBoundingBox(this, worldIn, pos);
-            }
+        public IBlockState getActualState(IBlockAccess blockAccess, BlockPos pos) {
+            return this.block.getActualState(this, blockAccess, pos);
+        }
 
-            @SideOnly(Side.CLIENT)
-            public boolean shouldSideBeRendered(IBlockAccess blockAccess, BlockPos pos, EnumFacing facing)
-            {
-                return this.block.shouldSideBeRendered(this, blockAccess, pos, facing);
-            }
+        @SideOnly(Side.CLIENT)
+        public AxisAlignedBB getSelectedBoundingBox(World worldIn, BlockPos pos) {
+            return this.block.getSelectedBoundingBox(this, worldIn, pos);
+        }
 
-            public boolean isOpaqueCube()
-            {
-                return this.block.isOpaqueCube(this);
-            }
+        @SideOnly(Side.CLIENT)
+        public boolean shouldSideBeRendered(IBlockAccess blockAccess, BlockPos pos, EnumFacing facing) {
+            return this.block.shouldSideBeRendered(this, blockAccess, pos, facing);
+        }
 
-            @Nullable
-            public AxisAlignedBB getCollisionBoundingBox(IBlockAccess worldIn, BlockPos pos)
-            {
-                return this.block.getCollisionBoundingBox(this, worldIn, pos);
-            }
+        public boolean isOpaqueCube() {
+            return this.block.isOpaqueCube(this);
+        }
 
-            public void addCollisionBoxToList(World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean p_185908_6_)
-            {
-                this.block.addCollisionBoxToList(this, worldIn, pos, entityBox, collidingBoxes, entityIn, p_185908_6_);
-            }
+        @Nullable
+        public AxisAlignedBB getCollisionBoundingBox(IBlockAccess worldIn, BlockPos pos) {
+            return this.block.getCollisionBoundingBox(this, worldIn, pos);
+        }
 
-            public AxisAlignedBB getBoundingBox(IBlockAccess blockAccess, BlockPos pos)
-            {
-                return this.block.getBoundingBox(this, blockAccess, pos);
-            }
+        public void addCollisionBoxToList(World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean p_185908_6_) {
+            this.block.addCollisionBoxToList(this, worldIn, pos, entityBox, collidingBoxes, entityIn, p_185908_6_);
+        }
 
-            public RayTraceResult collisionRayTrace(World worldIn, BlockPos pos, Vec3d start, Vec3d end)
-            {
-                return this.block.collisionRayTrace(this, worldIn, pos, start, end);
-            }
+        public AxisAlignedBB getBoundingBox(IBlockAccess blockAccess, BlockPos pos) {
+            return this.block.getBoundingBox(this, blockAccess, pos);
+        }
 
-            public boolean isTopSolid()
-            {
-                return this.block.isTopSolid(this);
-            }
+        public RayTraceResult collisionRayTrace(World worldIn, BlockPos pos, Vec3d start, Vec3d end) {
+            return this.block.collisionRayTrace(this, worldIn, pos, start, end);
+        }
 
-            public Vec3d getOffset(IBlockAccess access, BlockPos pos)
-            {
-                return this.block.getOffset(this, access, pos);
-            }
+        public boolean isTopSolid() {
+            return this.block.isTopSolid(this);
+        }
 
-            public boolean onBlockEventReceived(World worldIn, BlockPos pos, int id, int param)
-            {
-                return this.block.eventReceived(this, worldIn, pos, id, param);
-            }
+        public Vec3d getOffset(IBlockAccess access, BlockPos pos) {
+            return this.block.getOffset(this, access, pos);
+        }
 
-            public void neighborChanged(World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-            {
-                this.block.neighborChanged(this, worldIn, pos, blockIn, fromPos);
-            }
+        public boolean onBlockEventReceived(World worldIn, BlockPos pos, int id, int param) {
+            return this.block.eventReceived(this, worldIn, pos, id, param);
+        }
 
-            public boolean causesSuffocation()
-            {
-                return this.block.causesSuffocation(this);
-            }
+        public void neighborChanged(World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+            this.block.neighborChanged(this, worldIn, pos, blockIn, fromPos);
+        }
 
-            public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, BlockPos pos, EnumFacing facing)
-            {
-                return this.block.getBlockFaceShape(worldIn, this, pos, facing);
-            }
+        public boolean causesSuffocation() {
+            return this.block.causesSuffocation(this);
+        }
 
-            //Forge Start
-            @Override
-            public ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> getPropertyValueTable()
-            {
-                return propertyValueTable;
-            }
+        public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, BlockPos pos, EnumFacing facing) {
+            return this.block.getBlockFaceShape(worldIn, this, pos, facing);
+        }
 
-            @Override
-            public int getLightOpacity(IBlockAccess world, BlockPos pos)
-            {
-                return this.block.getLightOpacity(this, world, pos);
-            }
+        //Forge Start
+        @Override
+        public ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> getPropertyValueTable() {
+            return propertyValueTable;
+        }
 
-            @Override
-            public int getLightValue(IBlockAccess world, BlockPos pos)
-            {
-                return this.block.getLightValue(this, world, pos);
-            }
+        @Override
+        public int getLightOpacity(IBlockAccess world, BlockPos pos) {
+            return this.block.getLightOpacity(this, world, pos);
+        }
 
-            @Override
-            public boolean isSideSolid(IBlockAccess world, BlockPos pos, EnumFacing side)
-            {
-                return this.block.isSideSolid(this, world, pos, side);
-            }
+        @Override
+        public int getLightValue(IBlockAccess world, BlockPos pos) {
+            return this.block.getLightValue(this, world, pos);
+        }
 
-            @Override
-            public boolean doesSideBlockChestOpening(IBlockAccess world, BlockPos pos, EnumFacing side)
-            {
-                return this.block.doesSideBlockChestOpening(this, world, pos, side);
-            }
+        @Override
+        public boolean isSideSolid(IBlockAccess world, BlockPos pos, EnumFacing side) {
+            return this.block.isSideSolid(this, world, pos, side);
+        }
 
-            @Override
-            public boolean doesSideBlockRendering(IBlockAccess world, BlockPos pos, EnumFacing side)
-            {
-                return this.block.doesSideBlockRendering(this, world, pos, side);
-            }
+        @Override
+        public boolean doesSideBlockChestOpening(IBlockAccess world, BlockPos pos, EnumFacing side) {
+            return this.block.doesSideBlockChestOpening(this, world, pos, side);
         }
 
+        @Override
+        public boolean doesSideBlockRendering(IBlockAccess world, BlockPos pos, EnumFacing side) {
+            return this.block.doesSideBlockRendering(this, world, pos, side);
+        }
+    }
+
     /**
      * Forge added class to make building things easier.
      * Will return an instance of BlockStateContainer appropriate for
      * the list of properties passed in.
-     *
+     * <p>
      * Example usage:
-     *
-     *   protected BlockStateContainer createBlockState()
-     *   {
-     *       return (new BlockStateContainer.Builder(this)).add(FACING).add(SOME_UNLISTED).build();
-     *   }
-     *
+     * <p>
+     * protected BlockStateContainer createBlockState()
+     * {
+     * return (new BlockStateContainer.Builder(this)).add(FACING).add(SOME_UNLISTED).build();
+     * }
      */
-    public static class Builder
-    {
+    public static class Builder {
         private final Block block;
         private final List<IProperty<?>> listed = Lists.newArrayList();
         private final List<net.minecraftforge.common.property.IUnlistedProperty<?>> unlisted = Lists.newArrayList();
 
-        public Builder(Block block)
-        {
+        public Builder(Block block) {
             this.block = block;
         }
 
-        public Builder add(IProperty<?>... props)
-        {
+        public Builder add(IProperty<?>... props) {
             for (IProperty<?> prop : props)
                 this.listed.add(prop);
             return this;
         }
 
-        public Builder add(net.minecraftforge.common.property.IUnlistedProperty<?>... props)
-        {
+        public Builder add(net.minecraftforge.common.property.IUnlistedProperty<?>... props) {
             for (net.minecraftforge.common.property.IUnlistedProperty<?> prop : props)
                 this.unlisted.add(prop);
             return this;
         }
 
-        public BlockStateContainer build()
-        {
+        public BlockStateContainer build() {
             IProperty<?>[] listed = new IProperty[this.listed.size()];
             listed = this.listed.toArray(listed);
             if (this.unlisted.size() == 0)
