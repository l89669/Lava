--- ../src-base/minecraft/net/minecraft/block/BlockDispenser.java
+++ ../src-work/minecraft/net/minecraft/block/BlockDispenser.java
@@ -1,6 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
@@ -8,11 +7,7 @@
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
-import net.minecraft.dispenser.BehaviorDefaultDispenseItem;
-import net.minecraft.dispenser.IBehaviorDispenseItem;
-import net.minecraft.dispenser.IBlockSource;
-import net.minecraft.dispenser.IPosition;
-import net.minecraft.dispenser.PositionImpl;
+import net.minecraft.dispenser.*;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Container;
@@ -23,67 +18,51 @@
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityDispenser;
 import net.minecraft.tileentity.TileEntityDropper;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.registry.RegistryDefaulted;
 import net.minecraft.world.World;
 
-public class BlockDispenser extends BlockContainer
-{
+import java.util.Random;
+
+public class BlockDispenser extends BlockContainer {
     public static final PropertyDirection FACING = BlockDirectional.FACING;
     public static final PropertyBool TRIGGERED = PropertyBool.create("triggered");
     public static final RegistryDefaulted<Item, IBehaviorDispenseItem> DISPENSE_BEHAVIOR_REGISTRY = new RegistryDefaulted<Item, IBehaviorDispenseItem>(new BehaviorDefaultDispenseItem());
     protected Random rand = new Random();
 
-    protected BlockDispenser()
-    {
+    protected BlockDispenser() {
         super(Material.ROCK);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(TRIGGERED, Boolean.valueOf(false)));
         this.setCreativeTab(CreativeTabs.REDSTONE);
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 4;
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         super.onBlockAdded(worldIn, pos, state);
         this.setDefaultDirection(worldIn, pos, state);
     }
 
-    private void setDefaultDirection(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!worldIn.isRemote)
-        {
-            EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+    private void setDefaultDirection(World worldIn, BlockPos pos, IBlockState state) {
+        if (!worldIn.isRemote) {
+            EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
             boolean flag = worldIn.getBlockState(pos.north()).isFullBlock();
             boolean flag1 = worldIn.getBlockState(pos.south()).isFullBlock();
 
-            if (enumfacing == EnumFacing.NORTH && flag && !flag1)
-            {
+            if (enumfacing == EnumFacing.NORTH && flag && !flag1) {
                 enumfacing = EnumFacing.SOUTH;
-            }
-            else if (enumfacing == EnumFacing.SOUTH && flag1 && !flag)
-            {
+            } else if (enumfacing == EnumFacing.SOUTH && flag1 && !flag) {
                 enumfacing = EnumFacing.NORTH;
-            }
-            else
-            {
+            } else {
                 boolean flag2 = worldIn.getBlockState(pos.west()).isFullBlock();
                 boolean flag3 = worldIn.getBlockState(pos.east()).isFullBlock();
 
-                if (enumfacing == EnumFacing.WEST && flag2 && !flag3)
-                {
+                if (enumfacing == EnumFacing.WEST && flag2 && !flag3) {
                     enumfacing = EnumFacing.EAST;
-                }
-                else if (enumfacing == EnumFacing.EAST && flag3 && !flag2)
-                {
+                } else if (enumfacing == EnumFacing.EAST && flag3 && !flag2) {
                     enumfacing = EnumFacing.WEST;
                 }
             }
@@ -92,26 +71,18 @@
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else
-        {
+        } else {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityDispenser)
-            {
-                playerIn.displayGUIChest((TileEntityDispenser)tileentity);
+            if (tileentity instanceof TileEntityDispenser) {
+                playerIn.displayGUIChest((TileEntityDispenser) tileentity);
 
-                if (tileentity instanceof TileEntityDropper)
-                {
+                if (tileentity instanceof TileEntityDropper) {
                     playerIn.addStat(StatList.DROPPER_INSPECTED);
-                }
-                else
-                {
+                } else {
                     playerIn.addStat(StatList.DISPENSER_INSPECTED);
                 }
             }
@@ -120,153 +91,123 @@
         }
     }
 
-    protected void dispense(World worldIn, BlockPos pos)
-    {
+    public void dispense(World worldIn, BlockPos pos) {
         BlockSourceImpl blocksourceimpl = new BlockSourceImpl(worldIn, pos);
-        TileEntityDispenser tileentitydispenser = (TileEntityDispenser)blocksourceimpl.getBlockTileEntity();
+        TileEntityDispenser tileentitydispenser = (TileEntityDispenser) blocksourceimpl.getBlockTileEntity();
 
-        if (tileentitydispenser != null)
-        {
+        if (tileentitydispenser != null) {
             int i = tileentitydispenser.getDispenseSlot();
 
-            if (i < 0)
-            {
+            if (i < 0) {
                 worldIn.playEvent(1001, pos, 0);
-            }
-            else
-            {
+            } else {
                 ItemStack itemstack = tileentitydispenser.getStackInSlot(i);
                 IBehaviorDispenseItem ibehaviordispenseitem = this.getBehavior(itemstack);
 
-                if (ibehaviordispenseitem != IBehaviorDispenseItem.DEFAULT_BEHAVIOR)
-                {
+                if (ibehaviordispenseitem != IBehaviorDispenseItem.DEFAULT_BEHAVIOR) {
                     tileentitydispenser.setInventorySlotContents(i, ibehaviordispenseitem.dispense(blocksourceimpl, itemstack));
                 }
             }
         }
     }
 
-    protected IBehaviorDispenseItem getBehavior(ItemStack stack)
-    {
+    protected IBehaviorDispenseItem getBehavior(ItemStack stack) {
         return DISPENSE_BEHAVIOR_REGISTRY.getObject(stack.getItem());
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
         boolean flag = worldIn.isBlockPowered(pos) || worldIn.isBlockPowered(pos.up());
-        boolean flag1 = ((Boolean)state.getValue(TRIGGERED)).booleanValue();
+        boolean flag1 = ((Boolean) state.getValue(TRIGGERED)).booleanValue();
 
-        if (flag && !flag1)
-        {
+        if (flag && !flag1) {
             worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
             worldIn.setBlockState(pos, state.withProperty(TRIGGERED, Boolean.valueOf(true)), 4);
-        }
-        else if (!flag && flag1)
-        {
+        } else if (!flag && flag1) {
             worldIn.setBlockState(pos, state.withProperty(TRIGGERED, Boolean.valueOf(false)), 4);
         }
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
             this.dispense(worldIn, pos);
         }
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityDispenser();
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getDirectionFromEntityLiving(pos, placer)).withProperty(TRIGGERED, Boolean.valueOf(false));
     }
 
-    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
-    {
+    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
         worldIn.setBlockState(pos, state.withProperty(FACING, EnumFacing.getDirectionFromEntityLiving(pos, placer)), 2);
 
-        if (stack.hasDisplayName())
-        {
+        if (stack.hasDisplayName()) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityDispenser)
-            {
-                ((TileEntityDispenser)tileentity).setCustomName(stack.getDisplayName());
+            if (tileentity instanceof TileEntityDispenser) {
+                ((TileEntityDispenser) tileentity).setCustomName(stack.getDisplayName());
             }
         }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityDispenser)
-        {
-            InventoryHelper.dropInventoryItems(worldIn, pos, (TileEntityDispenser)tileentity);
+        if (tileentity instanceof TileEntityDispenser) {
+            InventoryHelper.dropInventoryItems(worldIn, pos, (TileEntityDispenser) tileentity);
             worldIn.updateComparatorOutputLevel(pos, this);
         }
 
         super.breakBlock(worldIn, pos, state);
     }
 
-    public static IPosition getDispensePosition(IBlockSource coords)
-    {
-        EnumFacing enumfacing = (EnumFacing)coords.getBlockState().getValue(FACING);
-        double d0 = coords.getX() + 0.7D * (double)enumfacing.getFrontOffsetX();
-        double d1 = coords.getY() + 0.7D * (double)enumfacing.getFrontOffsetY();
-        double d2 = coords.getZ() + 0.7D * (double)enumfacing.getFrontOffsetZ();
+    public static IPosition getDispensePosition(IBlockSource coords) {
+        EnumFacing enumfacing = (EnumFacing) coords.getBlockState().getValue(FACING);
+        double d0 = coords.getX() + 0.7D * (double) enumfacing.getFrontOffsetX();
+        double d1 = coords.getY() + 0.7D * (double) enumfacing.getFrontOffsetY();
+        double d2 = coords.getZ() + 0.7D * (double) enumfacing.getFrontOffsetZ();
         return new PositionImpl(d0, d1, d2);
     }
 
-    public boolean hasComparatorInputOverride(IBlockState state)
-    {
+    public boolean hasComparatorInputOverride(IBlockState state) {
         return true;
     }
 
-    public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos)
-    {
+    public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos) {
         return Container.calcRedstone(worldIn.getTileEntity(pos));
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.MODEL;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getFront(meta & 7)).withProperty(TRIGGERED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         int i = 0;
-        i = i | ((EnumFacing)state.getValue(FACING)).getIndex();
+        i = i | ((EnumFacing) state.getValue(FACING)).getIndex();
 
-        if (((Boolean)state.getValue(TRIGGERED)).booleanValue())
-        {
+        if (((Boolean) state.getValue(TRIGGERED)).booleanValue()) {
             i |= 8;
         }
 
         return i;
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.withProperty(FACING, rot.rotate((EnumFacing) state.getValue(FACING)));
     }
 
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        return state.withRotation(mirrorIn.toRotation((EnumFacing) state.getValue(FACING)));
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {FACING, TRIGGERED});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{FACING, TRIGGERED});
     }
 }
