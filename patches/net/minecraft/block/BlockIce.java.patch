--- ../src-base/minecraft/net/minecraft/block/BlockIce.java
+++ ../src-work/minecraft/net/minecraft/block/BlockIce.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -20,10 +18,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockIce extends BlockBreakable
-{
-    public BlockIce()
-    {
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public class BlockIce extends BlockBreakable {
+    public BlockIce() {
         super(Material.ICE, false);
         this.slipperiness = 0.98F;
         this.setTickRandomly(true);
@@ -31,29 +30,23 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockRenderLayer getBlockLayer()
-    {
+    public BlockRenderLayer getBlockLayer() {
         return BlockRenderLayer.TRANSLUCENT;
     }
 
-    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, @Nullable TileEntity te, ItemStack stack)
-    {
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, @Nullable TileEntity te, ItemStack stack) {
         player.addStat(StatList.getBlockStats(this));
         player.addExhaustion(0.005F);
 
-        if (this.canSilkHarvest(worldIn, pos, state, player) && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, stack) > 0)
-        {
+        if (this.canSilkHarvest(worldIn, pos, state, player) && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, stack) > 0) {
             java.util.List<ItemStack> items = new java.util.ArrayList<ItemStack>();
             items.add(this.getSilkTouchDrop(state));
 
             net.minecraftforge.event.ForgeEventFactory.fireBlockHarvesting(items, worldIn, pos, state, 0, 1.0f, true, player);
             for (ItemStack is : items)
                 spawnAsEntity(worldIn, pos, is);
-        }
-        else
-        {
-            if (worldIn.provider.doesWaterVaporize())
-            {
+        } else {
+            if (worldIn.provider.doesWaterVaporize()) {
                 worldIn.setBlockToAir(pos);
                 return;
             }
@@ -64,42 +57,36 @@
             harvesters.set(null);
             Material material = worldIn.getBlockState(pos.down()).getMaterial();
 
-            if (material.blocksMovement() || material.isLiquid())
-            {
+            if (material.blocksMovement() || material.isLiquid()) {
                 worldIn.setBlockState(pos, Blocks.FLOWING_WATER.getDefaultState());
             }
         }
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (worldIn.getLightFor(EnumSkyBlock.BLOCK, pos) > 11 - this.getDefaultState().getLightOpacity())
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (worldIn.getLightFor(EnumSkyBlock.BLOCK, pos) > 11 - this.getDefaultState().getLightOpacity()) {
             this.turnIntoWater(worldIn, pos);
         }
     }
 
-    protected void turnIntoWater(World worldIn, BlockPos pos)
-    {
-        if (worldIn.provider.doesWaterVaporize())
-        {
-            worldIn.setBlockToAir(pos);
+    protected void turnIntoWater(World worldIn, BlockPos pos) {
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), worldIn.provider.doesWaterVaporize() ? Blocks.AIR : Blocks.WATER).isCancelled()) {
+            return;
         }
-        else
-        {
+        if (worldIn.provider.doesWaterVaporize()) {
+            worldIn.setBlockToAir(pos);
+        } else {
             this.dropBlockAsItem(worldIn, pos, worldIn.getBlockState(pos), 0);
             worldIn.setBlockState(pos, Blocks.WATER.getDefaultState());
             worldIn.neighborChanged(pos, Blocks.WATER, pos);
         }
     }
 
-    public EnumPushReaction getMobilityFlag(IBlockState state)
-    {
+    public EnumPushReaction getMobilityFlag(IBlockState state) {
         return EnumPushReaction.NORMAL;
     }
 }
