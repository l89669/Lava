--- ../src-base/minecraft/net/minecraft/block/BlockRailPowered.java
+++ ../src-work/minecraft/net/minecraft/block/BlockRailPowered.java
@@ -1,7 +1,6 @@
 package net.minecraft.block;
 
 import com.google.common.base.Predicate;
-import javax.annotation.Nullable;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyEnum;
@@ -11,216 +10,173 @@
 import net.minecraft.util.Rotation;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
-public class BlockRailPowered extends BlockRailBase
-{
-    public static final PropertyEnum<BlockRailBase.EnumRailDirection> SHAPE = PropertyEnum.<BlockRailBase.EnumRailDirection>create("shape", BlockRailBase.EnumRailDirection.class, new Predicate<BlockRailBase.EnumRailDirection>()
-    {
-        public boolean apply(@Nullable BlockRailBase.EnumRailDirection p_apply_1_)
-        {
-            return p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_WEST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_WEST;
+import javax.annotation.Nullable;
+
+public class BlockRailPowered extends BlockRailBase {
+    public static final PropertyEnum<EnumRailDirection> SHAPE = PropertyEnum.<EnumRailDirection>create("shape", EnumRailDirection.class, new Predicate<EnumRailDirection>() {
+        public boolean apply(@Nullable EnumRailDirection p_apply_1_) {
+            return p_apply_1_ != EnumRailDirection.NORTH_EAST && p_apply_1_ != EnumRailDirection.NORTH_WEST && p_apply_1_ != EnumRailDirection.SOUTH_EAST && p_apply_1_ != EnumRailDirection.SOUTH_WEST;
         }
     });
     public static final PropertyBool POWERED = PropertyBool.create("powered");
 
     private final boolean isActivator;
 
-    protected BlockRailPowered()
-    {
+    protected BlockRailPowered() {
         this(false);
     }
 
-    protected BlockRailPowered(boolean isActivator)
-    {
+    protected BlockRailPowered(boolean isActivator) {
         super(true);
         this.isActivator = isActivator;
-        this.setDefaultState(this.blockState.getBaseState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH).withProperty(POWERED, Boolean.valueOf(false)));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH).withProperty(POWERED, Boolean.valueOf(false)));
     }
 
     @SuppressWarnings("incomplete-switch")
-    protected boolean findPoweredRailSignal(World worldIn, BlockPos pos, IBlockState state, boolean p_176566_4_, int p_176566_5_)
-    {
-        if (p_176566_5_ >= 8)
-        {
+    protected boolean findPoweredRailSignal(World worldIn, BlockPos pos, IBlockState state, boolean p_176566_4_, int p_176566_5_) {
+        if (p_176566_5_ >= 8) {
             return false;
-        }
-        else
-        {
+        } else {
             int i = pos.getX();
             int j = pos.getY();
             int k = pos.getZ();
             boolean flag = true;
-            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(SHAPE);
+            EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection) state.getValue(SHAPE);
 
-            switch (blockrailbase$enumraildirection)
-            {
+            switch (blockrailbase$enumraildirection) {
                 case NORTH_SOUTH:
 
-                    if (p_176566_4_)
-                    {
+                    if (p_176566_4_) {
                         ++k;
-                    }
-                    else
-                    {
+                    } else {
                         --k;
                     }
 
                     break;
                 case EAST_WEST:
 
-                    if (p_176566_4_)
-                    {
+                    if (p_176566_4_) {
                         --i;
-                    }
-                    else
-                    {
+                    } else {
                         ++i;
                     }
 
                     break;
                 case ASCENDING_EAST:
 
-                    if (p_176566_4_)
-                    {
+                    if (p_176566_4_) {
                         --i;
-                    }
-                    else
-                    {
+                    } else {
                         ++i;
                         ++j;
                         flag = false;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.EAST_WEST;
+                    blockrailbase$enumraildirection = EnumRailDirection.EAST_WEST;
                     break;
                 case ASCENDING_WEST:
 
-                    if (p_176566_4_)
-                    {
+                    if (p_176566_4_) {
                         --i;
                         ++j;
                         flag = false;
-                    }
-                    else
-                    {
+                    } else {
                         ++i;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.EAST_WEST;
+                    blockrailbase$enumraildirection = EnumRailDirection.EAST_WEST;
                     break;
                 case ASCENDING_NORTH:
 
-                    if (p_176566_4_)
-                    {
+                    if (p_176566_4_) {
                         ++k;
-                    }
-                    else
-                    {
+                    } else {
                         --k;
                         ++j;
                         flag = false;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.NORTH_SOUTH;
+                    blockrailbase$enumraildirection = EnumRailDirection.NORTH_SOUTH;
                     break;
                 case ASCENDING_SOUTH:
 
-                    if (p_176566_4_)
-                    {
+                    if (p_176566_4_) {
                         ++k;
                         ++j;
                         flag = false;
-                    }
-                    else
-                    {
+                    } else {
                         --k;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.NORTH_SOUTH;
+                    blockrailbase$enumraildirection = EnumRailDirection.NORTH_SOUTH;
             }
 
-            if (this.isSameRailWithPower(worldIn, new BlockPos(i, j, k), p_176566_4_, p_176566_5_, blockrailbase$enumraildirection))
-            {
+            if (this.isSameRailWithPower(worldIn, new BlockPos(i, j, k), p_176566_4_, p_176566_5_, blockrailbase$enumraildirection)) {
                 return true;
-            }
-            else
-            {
+            } else {
                 return flag && this.isSameRailWithPower(worldIn, new BlockPos(i, j - 1, k), p_176566_4_, p_176566_5_, blockrailbase$enumraildirection);
             }
         }
     }
 
-    protected boolean isSameRailWithPower(World worldIn, BlockPos pos, boolean p_176567_3_, int distance, BlockRailBase.EnumRailDirection p_176567_5_)
-    {
+    protected boolean isSameRailWithPower(World worldIn, BlockPos pos, boolean p_176567_3_, int distance, EnumRailDirection p_176567_5_) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
-        if (!(iblockstate.getBlock() instanceof BlockRailPowered) || isActivator != ((BlockRailPowered)iblockstate.getBlock()).isActivator)
-        {
+        if (!(iblockstate.getBlock() instanceof BlockRailPowered) || isActivator != ((BlockRailPowered) iblockstate.getBlock()).isActivator) {
             return false;
-        }
-        else
-        {
-            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)iblockstate.getValue(SHAPE);
+        } else {
+            EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection) iblockstate.getValue(SHAPE);
 
-            if (p_176567_5_ != BlockRailBase.EnumRailDirection.EAST_WEST || blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.NORTH_SOUTH && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_NORTH && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_SOUTH)
-            {
-                if (p_176567_5_ != BlockRailBase.EnumRailDirection.NORTH_SOUTH || blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.EAST_WEST && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_EAST && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_WEST)
-                {
-                    if (((Boolean)iblockstate.getValue(POWERED)).booleanValue())
-                    {
+            if (p_176567_5_ != EnumRailDirection.EAST_WEST || blockrailbase$enumraildirection != EnumRailDirection.NORTH_SOUTH && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_NORTH && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_SOUTH) {
+                if (p_176567_5_ != EnumRailDirection.NORTH_SOUTH || blockrailbase$enumraildirection != EnumRailDirection.EAST_WEST && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_EAST && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_WEST) {
+                    if (((Boolean) iblockstate.getValue(POWERED)).booleanValue()) {
                         return worldIn.isBlockPowered(pos) ? true : this.findPoweredRailSignal(worldIn, pos, iblockstate, p_176567_3_, distance + 1);
-                    }
-                    else
-                    {
+                    } else {
                         return false;
                     }
-                }
-                else
-                {
+                } else {
                     return false;
                 }
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
     }
 
-    protected void updateState(IBlockState state, World worldIn, BlockPos pos, Block blockIn)
-    {
-        boolean flag = ((Boolean)state.getValue(POWERED)).booleanValue();
+    protected void updateState(IBlockState state, World worldIn, BlockPos pos, Block blockIn) {
+        boolean flag = ((Boolean) state.getValue(POWERED)).booleanValue();
         boolean flag1 = worldIn.isBlockPowered(pos) || this.findPoweredRailSignal(worldIn, pos, state, true, 0) || this.findPoweredRailSignal(worldIn, pos, state, false, 0);
 
-        if (flag1 != flag)
-        {
+        if (flag1 != flag) {
+            int power = state.getValue(POWERED) ? 15 : 0;
+            int newPower = CraftEventFactory.callRedstoneChange(worldIn, pos.getX(), pos.getY(), pos.getZ(), power, 15 - power).getNewCurrent();
+            if (newPower == power) {
+                return;
+            }
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(flag1)), 3);
             worldIn.notifyNeighborsOfStateChange(pos.down(), this, false);
 
-            if (((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).isAscending())
-            {
+            if (((EnumRailDirection) state.getValue(SHAPE)).isAscending()) {
                 worldIn.notifyNeighborsOfStateChange(pos.up(), this, false);
             }
         }
     }
 
-    public IProperty<BlockRailBase.EnumRailDirection> getShapeProperty()
-    {
+    public IProperty<EnumRailDirection> getShapeProperty() {
         return SHAPE;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
-        return this.getDefaultState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
+    public IBlockState getStateFromMeta(int meta) {
+        return this.getDefaultState().withProperty(SHAPE, EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         int i = 0;
-        i = i | ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).getMetadata();
+        i = i | ((EnumRailDirection) state.getValue(SHAPE)).getMetadata();
 
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
             i |= 8;
         }
 
@@ -228,82 +184,77 @@
     }
 
     @SuppressWarnings("incomplete-switch")
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        switch (rot)
-        {
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        switch (rot) {
             case CLOCKWISE_180:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
-                {
+                switch ((EnumRailDirection) state.getValue(SHAPE)) {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                 }
 
             case COUNTERCLOCKWISE_90:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
-                {
+                switch ((EnumRailDirection) state.getValue(SHAPE)) {
                     case NORTH_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.EAST_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.EAST_WEST);
                     case EAST_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                 }
 
             case CLOCKWISE_90:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
-                {
+                switch ((EnumRailDirection) state.getValue(SHAPE)) {
                     case NORTH_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.EAST_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.EAST_WEST);
                     case EAST_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                 }
 
             default:
@@ -312,60 +263,55 @@
     }
 
     @SuppressWarnings("incomplete-switch")
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(SHAPE);
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection) state.getValue(SHAPE);
 
-        switch (mirrorIn)
-        {
+        switch (mirrorIn) {
             case LEFT_RIGHT:
 
-                switch (blockrailbase$enumraildirection)
-                {
+                switch (blockrailbase$enumraildirection) {
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     default:
                         return super.withMirror(state, mirrorIn);
                 }
 
             case FRONT_BACK:
 
-                switch (blockrailbase$enumraildirection)
-                {
+                switch (blockrailbase$enumraildirection) {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                 }
         }
 
         return super.withMirror(state, mirrorIn);
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {SHAPE, POWERED});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{SHAPE, POWERED});
     }
 }
