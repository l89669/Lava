--- ../src-base/minecraft/net/minecraft/block/BlockShulkerBox.java
+++ ../src-work/minecraft/net/minecraft/block/BlockShulkerBox.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
@@ -26,12 +24,7 @@
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityShulkerBox;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.NonNullList;
-import net.minecraft.util.Rotation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.TextFormatting;
@@ -41,256 +34,208 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockShulkerBox extends BlockContainer
-{
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class BlockShulkerBox extends BlockContainer {
     public static final PropertyEnum<EnumFacing> FACING = PropertyDirection.create("facing");
-    private final EnumDyeColor color;
+    public final EnumDyeColor color;
 
-    public BlockShulkerBox(EnumDyeColor colorIn)
-    {
+    public BlockShulkerBox(EnumDyeColor colorIn) {
         super(Material.ROCK, MapColor.AIR);
         this.color = colorIn;
         this.setCreativeTab(CreativeTabs.DECORATIONS);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.UP));
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityShulkerBox(this.color);
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean causesSuffocation(IBlockState state)
-    {
+    public boolean causesSuffocation(IBlockState state) {
         return true;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean hasCustomBreakingProgress(IBlockState state)
-    {
+    public boolean hasCustomBreakingProgress(IBlockState state) {
         return true;
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.ENTITYBLOCK_ANIMATED;
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (worldIn.isRemote) {
             return true;
-        }
-        else if (playerIn.isSpectator())
-        {
+        } else if (playerIn.isSpectator()) {
             return true;
-        }
-        else
-        {
+        } else {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityShulkerBox)
-            {
-                EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+            if (tileentity instanceof TileEntityShulkerBox) {
+                EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
                 boolean flag;
 
-                if (((TileEntityShulkerBox)tileentity).getAnimationStatus() == TileEntityShulkerBox.AnimationStatus.CLOSED)
-                {
-                    AxisAlignedBB axisalignedbb = FULL_BLOCK_AABB.expand((double)(0.5F * (float)enumfacing.getFrontOffsetX()), (double)(0.5F * (float)enumfacing.getFrontOffsetY()), (double)(0.5F * (float)enumfacing.getFrontOffsetZ())).contract((double)enumfacing.getFrontOffsetX(), (double)enumfacing.getFrontOffsetY(), (double)enumfacing.getFrontOffsetZ());
+                if (((TileEntityShulkerBox) tileentity).getAnimationStatus() == TileEntityShulkerBox.AnimationStatus.CLOSED) {
+                    AxisAlignedBB axisalignedbb = FULL_BLOCK_AABB.expand((double) (0.5F * (float) enumfacing.getFrontOffsetX()), (double) (0.5F * (float) enumfacing.getFrontOffsetY()), (double) (0.5F * (float) enumfacing.getFrontOffsetZ())).contract((double) enumfacing.getFrontOffsetX(), (double) enumfacing.getFrontOffsetY(), (double) enumfacing.getFrontOffsetZ());
                     flag = !worldIn.collidesWithAnyBlock(axisalignedbb.offset(pos.offset(enumfacing)));
-                }
-                else
-                {
+                } else {
                     flag = true;
                 }
 
-                if (flag)
-                {
+                if (flag) {
                     playerIn.addStat(StatList.OPEN_SHULKER_BOX);
-                    playerIn.displayGUIChest((IInventory)tileentity);
+                    playerIn.displayGUIChest((IInventory) tileentity);
                 }
 
                 return true;
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return this.getDefaultState().withProperty(FACING, facing);
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {FACING});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{FACING});
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((EnumFacing)state.getValue(FACING)).getIndex();
+    public int getMetaFromState(IBlockState state) {
+        return ((EnumFacing) state.getValue(FACING)).getIndex();
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         EnumFacing enumfacing = EnumFacing.getFront(meta);
         return this.getDefaultState().withProperty(FACING, enumfacing);
     }
 
-    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
-    {
-        if (worldIn.getTileEntity(pos) instanceof TileEntityShulkerBox)
-        {
-            TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox)worldIn.getTileEntity(pos);
+    public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player) {
+        if (worldIn.getTileEntity(pos) instanceof TileEntityShulkerBox) {
+            TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox) worldIn.getTileEntity(pos);
             tileentityshulkerbox.setDestroyedByCreativePlayer(player.capabilities.isCreativeMode);
             tileentityshulkerbox.fillWithLoot(player);
         }
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
     }
 
-    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
-    {
-        if (stack.hasDisplayName())
-        {
+    public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
+        if (stack.hasDisplayName()) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof TileEntityShulkerBox)
-            {
-                ((TileEntityShulkerBox)tileentity).setCustomName(stack.getDisplayName());
+            if (tileentity instanceof TileEntityShulkerBox) {
+                ((TileEntityShulkerBox) tileentity).setCustomName(stack.getDisplayName());
             }
         }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityShulkerBox)
-        {
-            TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox)tileentity;
+        if (tileentity instanceof TileEntityShulkerBox) {
+            TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox) tileentity;
 
-            if (!tileentityshulkerbox.isCleared() && tileentityshulkerbox.shouldDrop())
-            {
+            if (!tileentityshulkerbox.isCleared() && tileentityshulkerbox.shouldDrop()) {
                 ItemStack itemstack = new ItemStack(Item.getItemFromBlock(this));
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-                nbttagcompound.setTag("BlockEntityTag", ((TileEntityShulkerBox)tileentity).saveToNbt(nbttagcompound1));
+                nbttagcompound.setTag("BlockEntityTag", ((TileEntityShulkerBox) tileentity).saveToNbt(nbttagcompound1));
                 itemstack.setTagCompound(nbttagcompound);
 
-                if (tileentityshulkerbox.hasCustomName())
-                {
+                if (tileentityshulkerbox.hasCustomName()) {
                     itemstack.setStackDisplayName(tileentityshulkerbox.getName());
                     tileentityshulkerbox.setCustomName("");
                 }
 
                 spawnAsEntity(worldIn, pos, itemstack);
             }
-
             worldIn.updateComparatorOutputLevel(pos, state.getBlock());
+            tileentityshulkerbox.clear(); // Paper - This was intended to be called in Vanilla (is checked in the if statement above if has been called) - Fixes dupe issues
         }
 
         super.breakBlock(worldIn, pos, state);
     }
 
     @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, @Nullable World player, List<String> tooltip, ITooltipFlag advanced)
-    {
+    public void addInformation(ItemStack stack, @Nullable World player, List<String> tooltip, ITooltipFlag advanced) {
         super.addInformation(stack, player, tooltip, advanced);
         NBTTagCompound nbttagcompound = stack.getTagCompound();
 
-        if (nbttagcompound != null && nbttagcompound.hasKey("BlockEntityTag", 10))
-        {
+        if (nbttagcompound != null && nbttagcompound.hasKey("BlockEntityTag", 10)) {
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("BlockEntityTag");
 
-            if (nbttagcompound1.hasKey("LootTable", 8))
-            {
+            if (nbttagcompound1.hasKey("LootTable", 8)) {
                 tooltip.add("???????");
             }
 
-            if (nbttagcompound1.hasKey("Items", 9))
-            {
+            if (nbttagcompound1.hasKey("Items", 9)) {
                 NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(27, ItemStack.EMPTY);
                 ItemStackHelper.loadAllItems(nbttagcompound1, nonnulllist);
                 int i = 0;
                 int j = 0;
 
-                for (ItemStack itemstack : nonnulllist)
-                {
-                    if (!itemstack.isEmpty())
-                    {
+                for (ItemStack itemstack : nonnulllist) {
+                    if (!itemstack.isEmpty()) {
                         ++j;
 
-                        if (i <= 4)
-                        {
+                        if (i <= 4) {
                             ++i;
                             tooltip.add(String.format("%s x%d", itemstack.getDisplayName(), itemstack.getCount()));
                         }
                     }
                 }
 
-                if (j - i > 0)
-                {
+                if (j - i > 0) {
                     tooltip.add(String.format(TextFormatting.ITALIC + I18n.translateToLocal("container.shulkerBox.more"), j - i));
                 }
             }
         }
     }
 
-    public EnumPushReaction getMobilityFlag(IBlockState state)
-    {
+    public EnumPushReaction getMobilityFlag(IBlockState state) {
         return EnumPushReaction.DESTROY;
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
         TileEntity tileentity = source.getTileEntity(pos);
-        return tileentity instanceof TileEntityShulkerBox ? ((TileEntityShulkerBox)tileentity).getBoundingBox(state) : FULL_BLOCK_AABB;
+        return tileentity instanceof TileEntityShulkerBox ? ((TileEntityShulkerBox) tileentity).getBoundingBox(state) : FULL_BLOCK_AABB;
     }
 
-    public boolean hasComparatorInputOverride(IBlockState state)
-    {
+    public boolean hasComparatorInputOverride(IBlockState state) {
         return true;
     }
 
-    public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos)
-    {
-        return Container.calcRedstoneFromInventory((IInventory)worldIn.getTileEntity(pos));
+    public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos) {
+        return Container.calcRedstoneFromInventory((IInventory) worldIn.getTileEntity(pos));
     }
 
-    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state) {
         ItemStack itemstack = super.getItem(worldIn, pos, state);
-        TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox)worldIn.getTileEntity(pos);
+        TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox) worldIn.getTileEntity(pos);
         NBTTagCompound nbttagcompound = tileentityshulkerbox.saveToNbt(new NBTTagCompound());
 
-        if (!nbttagcompound.hasNoTags())
-        {
+        if (!nbttagcompound.hasNoTags()) {
             itemstack.setTagInfo("BlockEntityTag", nbttagcompound);
         }
 
         return itemstack;
     }
 
-    public static Block getBlockByColor(EnumDyeColor colorIn)
-    {
-        switch (colorIn)
-        {
+    public static Block getBlockByColor(EnumDyeColor colorIn) {
+        switch (colorIn) {
             case WHITE:
                 return Blocks.WHITE_SHULKER_BOX;
             case ORANGE:
@@ -328,43 +273,36 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public static EnumDyeColor getColorFromItem(Item itemIn)
-    {
+    public static EnumDyeColor getColorFromItem(Item itemIn) {
         return getColorFromBlock(Block.getBlockFromItem(itemIn));
     }
 
-    public static ItemStack getColoredItemStack(EnumDyeColor colorIn)
-    {
+    public static ItemStack getColoredItemStack(EnumDyeColor colorIn) {
         return new ItemStack(getBlockByColor(colorIn));
     }
 
     @SideOnly(Side.CLIENT)
-    public static EnumDyeColor getColorFromBlock(Block blockIn)
-    {
-        return blockIn instanceof BlockShulkerBox ? ((BlockShulkerBox)blockIn).getColor() : EnumDyeColor.PURPLE;
+    public static EnumDyeColor getColorFromBlock(Block blockIn) {
+        return blockIn instanceof BlockShulkerBox ? ((BlockShulkerBox) blockIn).getColor() : EnumDyeColor.PURPLE;
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.withProperty(FACING, rot.rotate((EnumFacing) state.getValue(FACING)));
     }
 
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        return state.withRotation(mirrorIn.toRotation((EnumFacing) state.getValue(FACING)));
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         state = this.getActualState(state, worldIn, pos);
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
-        TileEntityShulkerBox.AnimationStatus tileentityshulkerbox$animationstatus = ((TileEntityShulkerBox)worldIn.getTileEntity(pos)).getAnimationStatus();
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
+        TileEntityShulkerBox.AnimationStatus tileentityshulkerbox$animationstatus = ((TileEntityShulkerBox) worldIn.getTileEntity(pos)).getAnimationStatus();
         return tileentityshulkerbox$animationstatus != TileEntityShulkerBox.AnimationStatus.CLOSED && (tileentityshulkerbox$animationstatus != TileEntityShulkerBox.AnimationStatus.OPENED || enumfacing != face.getOpposite() && enumfacing != face) ? BlockFaceShape.UNDEFINED : BlockFaceShape.SOLID;
     }
 
     @SideOnly(Side.CLIENT)
-    public EnumDyeColor getColor()
-    {
+    public EnumDyeColor getColor() {
         return this.color;
     }
 }
