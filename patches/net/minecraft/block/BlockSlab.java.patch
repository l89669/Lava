--- ../src-base/minecraft/net/minecraft/block/BlockSlab.java
+++ ../src-work/minecraft/net/minecraft/block/BlockSlab.java
@@ -1,6 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
@@ -19,146 +18,108 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class BlockSlab extends Block
-{
+import java.util.Random;
+
+public abstract class BlockSlab extends Block {
     public static final PropertyEnum<BlockSlab.EnumBlockHalf> HALF = PropertyEnum.<BlockSlab.EnumBlockHalf>create("half", BlockSlab.EnumBlockHalf.class);
     protected static final AxisAlignedBB AABB_BOTTOM_HALF = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.5D, 1.0D);
     protected static final AxisAlignedBB AABB_TOP_HALF = new AxisAlignedBB(0.0D, 0.5D, 0.0D, 1.0D, 1.0D, 1.0D);
 
-    public BlockSlab(Material materialIn)
-    {
+    public BlockSlab(Material materialIn) {
         this(materialIn, materialIn.getMaterialMapColor());
     }
 
-    public BlockSlab(Material p_i47249_1_, MapColor p_i47249_2_)
-    {
+    public BlockSlab(Material p_i47249_1_, MapColor p_i47249_2_) {
         super(p_i47249_1_, p_i47249_2_);
         this.fullBlock = this.isDouble();
         this.setLightOpacity(255);
     }
 
-    protected boolean canSilkHarvest()
-    {
+    protected boolean canSilkHarvest() {
         return false;
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
-        if (this.isDouble())
-        {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
+        if (this.isDouble()) {
             return FULL_BLOCK_AABB;
-        }
-        else
-        {
+        } else {
             return state.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP ? AABB_TOP_HALF : AABB_BOTTOM_HALF;
         }
     }
 
-    public boolean isTopSolid(IBlockState state)
-    {
-        return ((BlockSlab)state.getBlock()).isDouble() || state.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP;
+    public boolean isTopSolid(IBlockState state) {
+        return ((BlockSlab) state.getBlock()).isDouble() || state.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP;
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
-        if (((BlockSlab)state.getBlock()).isDouble())
-        {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
+        if (((BlockSlab) state.getBlock()).isDouble()) {
             return BlockFaceShape.SOLID;
-        }
-        else if (face == EnumFacing.UP && state.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP)
-        {
+        } else if (face == EnumFacing.UP && state.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP) {
             return BlockFaceShape.SOLID;
-        }
-        else
-        {
+        } else {
             return face == EnumFacing.DOWN && state.getValue(HALF) == BlockSlab.EnumBlockHalf.BOTTOM ? BlockFaceShape.SOLID : BlockFaceShape.UNDEFINED;
         }
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return this.isDouble();
     }
 
     @Override
-    public boolean doesSideBlockRendering(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing face)
-    {
+    public boolean doesSideBlockRendering(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing face) {
         if (net.minecraftforge.common.ForgeModContainer.disableStairSlabCulling)
             return super.doesSideBlockRendering(state, world, pos, face);
 
-        if ( state.isOpaqueCube() )
+        if (state.isOpaqueCube())
             return true;
 
         EnumBlockHalf side = state.getValue(HALF);
         return (side == EnumBlockHalf.TOP && face == EnumFacing.UP) || (side == EnumBlockHalf.BOTTOM && face == EnumFacing.DOWN);
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         IBlockState iblockstate = super.getStateForPlacement(worldIn, pos, facing, hitX, hitY, hitZ, meta, placer).withProperty(HALF, BlockSlab.EnumBlockHalf.BOTTOM);
 
-        if (this.isDouble())
-        {
+        if (this.isDouble()) {
             return iblockstate;
+        } else {
+            return facing != EnumFacing.DOWN && (facing == EnumFacing.UP || (double) hitY <= 0.5D) ? iblockstate : iblockstate.withProperty(HALF, BlockSlab.EnumBlockHalf.TOP);
         }
-        else
-        {
-            return facing != EnumFacing.DOWN && (facing == EnumFacing.UP || (double)hitY <= 0.5D) ? iblockstate : iblockstate.withProperty(HALF, BlockSlab.EnumBlockHalf.TOP);
-        }
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return this.isDouble() ? 2 : 1;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return this.isDouble();
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
-        if (this.isDouble())
-        {
+    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
+        if (this.isDouble()) {
             return super.shouldSideBeRendered(blockState, blockAccess, pos, side);
-        }
-        else if (side != EnumFacing.UP && side != EnumFacing.DOWN && !super.shouldSideBeRendered(blockState, blockAccess, pos, side))
-        {
+        } else if (side != EnumFacing.UP && side != EnumFacing.DOWN && !super.shouldSideBeRendered(blockState, blockAccess, pos, side)) {
             return false;
-        }
-        else if (false) // Forge: Additional logic breaks doesSideBlockRendering and is no longer useful.
+        } else if (false) // Forge: Additional logic breaks doesSideBlockRendering and is no longer useful.
         {
             IBlockState iblockstate = blockAccess.getBlockState(pos.offset(side));
             boolean flag = isHalfSlab(iblockstate) && iblockstate.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP;
             boolean flag1 = isHalfSlab(blockState) && blockState.getValue(HALF) == BlockSlab.EnumBlockHalf.TOP;
 
-            if (flag1)
-            {
-                if (side == EnumFacing.DOWN)
-                {
+            if (flag1) {
+                if (side == EnumFacing.DOWN) {
                     return true;
-                }
-                else if (side == EnumFacing.UP && super.shouldSideBeRendered(blockState, blockAccess, pos, side))
-                {
+                } else if (side == EnumFacing.UP && super.shouldSideBeRendered(blockState, blockAccess, pos, side)) {
                     return true;
-                }
-                else
-                {
+                } else {
                     return !isHalfSlab(iblockstate) || !flag;
                 }
-            }
-            else if (side == EnumFacing.UP)
-            {
+            } else if (side == EnumFacing.UP) {
                 return true;
-            }
-            else if (side == EnumFacing.DOWN && super.shouldSideBeRendered(blockState, blockAccess, pos, side))
-            {
+            } else if (side == EnumFacing.DOWN && super.shouldSideBeRendered(blockState, blockAccess, pos, side)) {
                 return true;
-            }
-            else
-            {
+            } else {
                 return !isHalfSlab(iblockstate) || flag;
             }
         }
@@ -166,8 +127,7 @@
     }
 
     @SideOnly(Side.CLIENT)
-    protected static boolean isHalfSlab(IBlockState state)
-    {
+    protected static boolean isHalfSlab(IBlockState state) {
         Block block = state.getBlock();
         return block == Blocks.STONE_SLAB || block == Blocks.WOODEN_SLAB || block == Blocks.STONE_SLAB2 || block == Blocks.PURPUR_SLAB;
     }
@@ -180,25 +140,21 @@
 
     public abstract Comparable<?> getTypeForItem(ItemStack stack);
 
-    public static enum EnumBlockHalf implements IStringSerializable
-    {
+    public static enum EnumBlockHalf implements IStringSerializable {
         TOP("top"),
         BOTTOM("bottom");
 
         private final String name;
 
-        private EnumBlockHalf(String name)
-        {
+        private EnumBlockHalf(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
