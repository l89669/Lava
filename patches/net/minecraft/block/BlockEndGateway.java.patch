--- ../src-base/minecraft/net/minecraft/block/BlockEndGateway.java
+++ ../src-work/minecraft/net/minecraft/block/BlockEndGateway.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.BlockFaceShape;
@@ -19,95 +17,81 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockEndGateway extends BlockContainer
-{
-    protected BlockEndGateway(Material p_i46687_1_)
-    {
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public class BlockEndGateway extends BlockContainer {
+    protected BlockEndGateway(Material p_i46687_1_) {
         super(p_i46687_1_);
         this.setLightLevel(1.0F);
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new TileEntityEndGateway();
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
+    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
         IBlockState iblockstate = blockAccess.getBlockState(pos.offset(side));
         Block block = iblockstate.getBlock();
         return !iblockstate.isOpaqueCube() && block != Blocks.END_GATEWAY;
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos) {
         return NULL_AABB;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
     @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
-    {
+    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof TileEntityEndGateway)
-        {
-            int i = ((TileEntityEndGateway)tileentity).getParticleAmount();
+        if (tileentity instanceof TileEntityEndGateway) {
+            int i = ((TileEntityEndGateway) tileentity).getParticleAmount();
 
-            for (int j = 0; j < i; ++j)
-            {
-                double d0 = (double)((float)pos.getX() + rand.nextFloat());
-                double d1 = (double)((float)pos.getY() + rand.nextFloat());
-                double d2 = (double)((float)pos.getZ() + rand.nextFloat());
-                double d3 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
-                double d4 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
-                double d5 = ((double)rand.nextFloat() - 0.5D) * 0.5D;
+            for (int j = 0; j < i; ++j) {
+                double d0 = (double) ((float) pos.getX() + rand.nextFloat());
+                double d1 = (double) ((float) pos.getY() + rand.nextFloat());
+                double d2 = (double) ((float) pos.getZ() + rand.nextFloat());
+                double d3 = ((double) rand.nextFloat() - 0.5D) * 0.5D;
+                double d4 = ((double) rand.nextFloat() - 0.5D) * 0.5D;
+                double d5 = ((double) rand.nextFloat() - 0.5D) * 0.5D;
                 int k = rand.nextInt(2) * 2 - 1;
 
-                if (rand.nextBoolean())
-                {
-                    d2 = (double)pos.getZ() + 0.5D + 0.25D * (double)k;
-                    d5 = (double)(rand.nextFloat() * 2.0F * (float)k);
+                if (rand.nextBoolean()) {
+                    d2 = (double) pos.getZ() + 0.5D + 0.25D * (double) k;
+                    d5 = (double) (rand.nextFloat() * 2.0F * (float) k);
+                } else {
+                    d0 = (double) pos.getX() + 0.5D + 0.25D * (double) k;
+                    d3 = (double) (rand.nextFloat() * 2.0F * (float) k);
                 }
-                else
-                {
-                    d0 = (double)pos.getX() + 0.5D + 0.25D * (double)k;
-                    d3 = (double)(rand.nextFloat() * 2.0F * (float)k);
-                }
 
                 worldIn.spawnParticle(EnumParticleTypes.PORTAL, d0, d1, d2, d3, d4, d5);
             }
         }
     }
 
-    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state) {
         return ItemStack.EMPTY;
     }
 
-    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return MapColor.BLACK;
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
 }
