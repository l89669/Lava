--- ../src-base/minecraft/net/minecraft/block/BlockFarmland.java
+++ ../src-work/minecraft/net/minecraft/block/BlockFarmland.java
@@ -1,6 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
@@ -8,7 +7,6 @@
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.item.Item;
@@ -19,123 +17,122 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityInteractEvent;
 
-public class BlockFarmland extends Block
-{
+import java.util.Random;
+
+public class BlockFarmland extends Block {
     public static final PropertyInteger MOISTURE = PropertyInteger.create("moisture", 0, 7);
     protected static final AxisAlignedBB FARMLAND_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.9375D, 1.0D);
     protected static final AxisAlignedBB field_194405_c = new AxisAlignedBB(0.0D, 0.9375D, 0.0D, 1.0D, 1.0D, 1.0D);
 
-    protected BlockFarmland()
-    {
+    protected BlockFarmland() {
         super(Material.GROUND);
         this.setDefaultState(this.blockState.getBaseState().withProperty(MOISTURE, Integer.valueOf(0)));
         this.setTickRandomly(true);
         this.setLightOpacity(255);
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
         return FARMLAND_AABB;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        int i = ((Integer)state.getValue(MOISTURE)).intValue();
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        int i = ((Integer) state.getValue(MOISTURE)).intValue();
 
-        if (!this.hasWater(worldIn, pos) && !worldIn.isRainingAt(pos.up()))
-        {
-            if (i > 0)
-            {
+        if (!this.hasWater(worldIn, pos) && !worldIn.isRainingAt(pos.up())) {
+            if (i > 0) {
                 worldIn.setBlockState(pos, state.withProperty(MOISTURE, Integer.valueOf(i - 1)), 2);
-            }
-            else if (!this.hasCrops(worldIn, pos))
-            {
+            } else if (!this.hasCrops(worldIn, pos)) {
                 turnToDirt(worldIn, pos);
             }
-        }
-        else if (i < 7)
-        {
+        } else if (i < 7) {
             worldIn.setBlockState(pos, state.withProperty(MOISTURE, Integer.valueOf(7)), 2);
         }
     }
 
-    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)
-    {
+    public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance) {
+        super.onFallenUpon(worldIn, pos, entityIn, fallDistance); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
         if (net.minecraftforge.common.ForgeHooks.onFarmlandTrample(worldIn, pos, Blocks.DIRT.getDefaultState(), fallDistance, entityIn)) // Forge: Move logic to Entity#canTrample
         {
+            org.bukkit.event.Cancellable cancellable;
+            if (entityIn instanceof EntityPlayer) {
+                cancellable = CraftEventFactory.callPlayerInteractEvent((EntityPlayer) entityIn, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+            } else {
+                cancellable = new EntityInteractEvent(entityIn.getBukkitEntity(), worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+                worldIn.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+            }
+
+            if (cancellable.isCancelled()) {
+                return;
+            }
+
+            if (CraftEventFactory.callEntityChangeBlockEvent(entityIn, pos, Blocks.DIRT, 0).isCancelled()) {
+                return;
+            }
             turnToDirt(worldIn, pos);
         }
 
-        super.onFallenUpon(worldIn, pos, entityIn, fallDistance);
+//        super.onFallenUpon(worldIn, pos, entityIn, fallDistance); // CraftBukkit - moved up
     }
 
-    protected static void turnToDirt(World p_190970_0_, BlockPos worldIn)
-    {
+    protected static void turnToDirt(World p_190970_0_, BlockPos worldIn) {
+        org.bukkit.block.Block block = p_190970_0_.getWorld().getBlockAt(worldIn.getX(), worldIn.getY(), worldIn.getZ());
+        if (CraftEventFactory.callBlockFadeEvent(block, Blocks.DIRT).isCancelled()) {
+            return;
+        }
         p_190970_0_.setBlockState(worldIn, Blocks.DIRT.getDefaultState());
         AxisAlignedBB axisalignedbb = field_194405_c.offset(worldIn);
 
-        for (Entity entity : p_190970_0_.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb))
-        {
+        for (Entity entity : p_190970_0_.getEntitiesWithinAABBExcludingEntity((Entity) null, axisalignedbb)) {
             double d0 = Math.min(axisalignedbb.maxY - axisalignedbb.minY, axisalignedbb.maxY - entity.getEntityBoundingBox().minY);
             entity.setPositionAndUpdate(entity.posX, entity.posY + d0 + 0.001D, entity.posZ);
         }
     }
 
-    private boolean hasCrops(World worldIn, BlockPos pos)
-    {
+    private boolean hasCrops(World worldIn, BlockPos pos) {
         Block block = worldIn.getBlockState(pos.up()).getBlock();
-        return block instanceof net.minecraftforge.common.IPlantable && canSustainPlant(worldIn.getBlockState(pos), worldIn, pos, net.minecraft.util.EnumFacing.UP, (net.minecraftforge.common.IPlantable)block);
+        return block instanceof net.minecraftforge.common.IPlantable && canSustainPlant(worldIn.getBlockState(pos), worldIn, pos, EnumFacing.UP, (net.minecraftforge.common.IPlantable) block);
     }
 
-    private boolean hasWater(World worldIn, BlockPos pos)
-    {
-        for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(pos.add(-4, 0, -4), pos.add(4, 1, 4)))
-        {
-            if (worldIn.getBlockState(blockpos$mutableblockpos).getMaterial() == Material.WATER)
-            {
+    private boolean hasWater(World worldIn, BlockPos pos) {
+        for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(pos.add(-4, 0, -4), pos.add(4, 1, 4))) {
+            if (worldIn.getBlockState(blockpos$mutableblockpos).getMaterial() == Material.WATER) {
                 return true;
             }
         }
 
-        return net.minecraftforge.common.FarmlandWaterManager.hasBlockWaterTicket(worldIn, pos);
+        return false;
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
         super.neighborChanged(state, worldIn, pos, blockIn, fromPos);
 
-        if (worldIn.getBlockState(pos.up()).getMaterial().isSolid())
-        {
+        if (worldIn.getBlockState(pos.up()).getMaterial().isSolid()) {
             turnToDirt(worldIn, pos);
         }
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         super.onBlockAdded(worldIn, pos, state);
 
-        if (worldIn.getBlockState(pos.up()).getMaterial().isSolid())
-        {
+        if (worldIn.getBlockState(pos.up()).getMaterial().isSolid()) {
             turnToDirt(worldIn, pos);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
-        switch (side)
-        {
+    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
+        switch (side) {
             case UP:
                 return true;
             case NORTH:
@@ -150,28 +147,23 @@
         }
     }
 
-    public Item getItemDropped(IBlockState state, Random rand, int fortune)
-    {
+    public Item getItemDropped(IBlockState state, Random rand, int fortune) {
         return Blocks.DIRT.getItemDropped(Blocks.DIRT.getDefaultState().withProperty(BlockDirt.VARIANT, BlockDirt.DirtType.DIRT), rand, fortune);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(MOISTURE, Integer.valueOf(meta & 7));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(MOISTURE)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(MOISTURE)).intValue();
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {MOISTURE});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{MOISTURE});
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return face == EnumFacing.DOWN ? BlockFaceShape.SOLID : BlockFaceShape.UNDEFINED;
     }
 }
