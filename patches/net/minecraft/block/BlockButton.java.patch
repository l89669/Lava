--- ../src-base/minecraft/net/minecraft/block/BlockButton.java
+++ ../src-work/minecraft/net/minecraft/block/BlockButton.java
@@ -1,8 +1,5 @@
 package net.minecraft.block;
 
-import java.util.List;
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
@@ -14,7 +11,6 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.projectile.EntityArrow;
-import net.minecraft.init.Blocks;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.Mirror;
@@ -23,9 +19,14 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.entity.EntityInteractEvent;
 
-public abstract class BlockButton extends BlockDirectional
-{
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Random;
+
+public abstract class BlockButton extends BlockDirectional {
     public static final PropertyBool POWERED = PropertyBool.create("powered");
     protected static final AxisAlignedBB AABB_DOWN_OFF = new AxisAlignedBB(0.3125D, 0.875D, 0.375D, 0.6875D, 1.0D, 0.625D);
     protected static final AxisAlignedBB AABB_UP_OFF = new AxisAlignedBB(0.3125D, 0.0D, 0.375D, 0.6875D, 0.125D, 0.625D);
@@ -41,8 +42,7 @@
     protected static final AxisAlignedBB AABB_EAST_ON = new AxisAlignedBB(0.0D, 0.375D, 0.3125D, 0.0625D, 0.625D, 0.6875D);
     private final boolean wooden;
 
-    protected BlockButton(boolean wooden)
-    {
+    protected BlockButton(boolean wooden) {
         super(Material.CIRCUITS);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(POWERED, Boolean.valueOf(false)));
         this.setTickRandomly(true);
@@ -51,37 +51,29 @@
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos) {
         return NULL_AABB;
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return this.wooden ? 30 : 20;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side)
-    {
+    public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side) {
         return canPlaceBlock(worldIn, pos, side);
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
-        for (EnumFacing enumfacing : EnumFacing.values())
-        {
-            if (canPlaceBlock(worldIn, pos, enumfacing))
-            {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
+        for (EnumFacing enumfacing : EnumFacing.values()) {
+            if (canPlaceBlock(worldIn, pos, enumfacing)) {
                 return true;
             }
         }
@@ -89,58 +81,45 @@
         return false;
     }
 
-    protected static boolean canPlaceBlock(World worldIn, BlockPos pos, EnumFacing direction)
-    {
+    protected static boolean canPlaceBlock(World worldIn, BlockPos pos, EnumFacing direction) {
         BlockPos blockpos = pos.offset(direction.getOpposite());
         IBlockState iblockstate = worldIn.getBlockState(blockpos);
         boolean flag = iblockstate.getBlockFaceShape(worldIn, blockpos, direction) == BlockFaceShape.SOLID;
         Block block = iblockstate.getBlock();
 
-        if (direction == EnumFacing.UP)
-        {
+        if (direction == EnumFacing.UP) {
             return iblockstate.isTopSolid() || !isExceptionBlockForAttaching(block) && flag;
-        }
-        else
-        {
+        } else {
             return !isExceptBlockForAttachWithPiston(block) && flag;
         }
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         return canPlaceBlock(worldIn, pos, facing) ? this.getDefaultState().withProperty(FACING, facing).withProperty(POWERED, Boolean.valueOf(false)) : this.getDefaultState().withProperty(FACING, EnumFacing.DOWN).withProperty(POWERED, Boolean.valueOf(false));
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
-        if (this.checkForDrop(worldIn, pos, state) && !canPlaceBlock(worldIn, pos, (EnumFacing)state.getValue(FACING)))
-        {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+        if (this.checkForDrop(worldIn, pos, state) && !canPlaceBlock(worldIn, pos, (EnumFacing) state.getValue(FACING))) {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
         }
     }
 
-    private boolean checkForDrop(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.canPlaceBlockAt(worldIn, pos))
-        {
+    private boolean checkForDrop(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.canPlaceBlockAt(worldIn, pos)) {
             return true;
-        }
-        else
-        {
+        } else {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
             return false;
         }
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
-        boolean flag = ((Boolean)state.getValue(POWERED)).booleanValue();
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
+        boolean flag = ((Boolean) state.getValue(POWERED)).booleanValue();
 
-        switch (enumfacing)
-        {
+        switch (enumfacing) {
             case EAST:
                 return flag ? AABB_EAST_ON : AABB_EAST_OFF;
             case WEST:
@@ -157,18 +136,25 @@
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
             return true;
-        }
-        else
-        {
+        } else {
+            boolean powered = ((Boolean) state.getValue(POWERED));
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            int old = (powered) ? 15 : 0;
+            int current = (!powered) ? 15 : 0;
+
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+            worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
+                return true;
+            }
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 3);
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
             this.playClickSound(playerIn, worldIn, pos);
-            this.notifyNeighbors(worldIn, pos, (EnumFacing)state.getValue(FACING));
+            this.notifyNeighbors(worldIn, pos, (EnumFacing) state.getValue(FACING));
             worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
             return true;
         }
@@ -178,56 +164,49 @@
 
     protected abstract void playReleaseSound(World worldIn, BlockPos pos);
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
-            this.notifyNeighbors(worldIn, pos, (EnumFacing)state.getValue(FACING));
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
+            this.notifyNeighbors(worldIn, pos, (EnumFacing) state.getValue(FACING));
         }
 
         super.breakBlock(worldIn, pos, state);
     }
 
-    public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
-        return ((Boolean)blockState.getValue(POWERED)).booleanValue() ? 15 : 0;
+    public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
+        return ((Boolean) blockState.getValue(POWERED)).booleanValue() ? 15 : 0;
     }
 
-    public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
-        if (!((Boolean)blockState.getValue(POWERED)).booleanValue())
-        {
+    public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
+        if (!((Boolean) blockState.getValue(POWERED)).booleanValue()) {
             return 0;
-        }
-        else
-        {
+        } else {
             return blockState.getValue(FACING) == side ? 15 : 0;
         }
     }
 
-    public boolean canProvidePower(IBlockState state)
-    {
+    public boolean canProvidePower(IBlockState state) {
         return true;
     }
 
-    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random)
-    {
+    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (((Boolean)state.getValue(POWERED)).booleanValue())
-            {
-                if (this.wooden)
-                {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
+            if (((Boolean) state.getValue(POWERED)).booleanValue()) {
+                if (this.wooden) {
                     this.checkPressed(state, worldIn, pos);
-                }
-                else
-                {
+                } else {
+                    org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
+                    worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+
+                    if (eventRedstone.getNewCurrent() > 0) {
+                        return;
+                    }
                     worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)));
-                    this.notifyNeighbors(worldIn, pos, (EnumFacing)state.getValue(FACING));
+                    this.notifyNeighbors(worldIn, pos, (EnumFacing) state.getValue(FACING));
                     this.playReleaseSound(worldIn, pos);
                     worldIn.markBlockRangeForRenderUpdate(pos, pos);
                 }
@@ -235,60 +214,88 @@
         }
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
-    {
-        if (!worldIn.isRemote)
-        {
-            if (this.wooden)
-            {
-                if (!((Boolean)state.getValue(POWERED)).booleanValue())
-                {
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {
+        if (!worldIn.isRemote) {
+            if (this.wooden) {
+                if (!((Boolean) state.getValue(POWERED)).booleanValue()) {
                     this.checkPressed(state, worldIn, pos);
                 }
             }
         }
     }
 
-    private void checkPressed(IBlockState state, World worldIn, BlockPos pos)
-    {
-        List <? extends Entity > list = worldIn.<Entity>getEntitiesWithinAABB(EntityArrow.class, state.getBoundingBox(worldIn, pos).offset(pos));
+    private void checkPressed(IBlockState state, World worldIn, BlockPos pos) {
+        List<? extends Entity> list = worldIn.<Entity>getEntitiesWithinAABB(EntityArrow.class, state.getBoundingBox(worldIn, pos).offset(pos));
         boolean flag = !list.isEmpty();
-        boolean flag1 = ((Boolean)state.getValue(POWERED)).booleanValue();
+        boolean flag1 = ((Boolean) state.getValue(POWERED)).booleanValue();
 
-        if (flag && !flag1)
-        {
+        // CraftBukkit start - Call interact event when arrows turn on wooden buttons
+        if (flag1 != flag && flag) {
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            boolean allowed = false;
+
+            // If all of the events are cancelled block the button press, else allow
+            for (Object object : list) {
+                if (object != null) {
+                    EntityInteractEvent event = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
+                    worldIn.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled()) {
+                        allowed = true;
+                        break;
+                    }
+                }
+            }
+
+            if (!allowed) {
+                return;
+            }
+        }
+
+        if (flag && !flag1) {
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 0, 15);
+            worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if (eventRedstone.getNewCurrent() <= 0) {
+                return;
+            }
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)));
-            this.notifyNeighbors(worldIn, pos, (EnumFacing)state.getValue(FACING));
+            this.notifyNeighbors(worldIn, pos, (EnumFacing) state.getValue(FACING));
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
-            this.playClickSound((EntityPlayer)null, worldIn, pos);
+            this.playClickSound((EntityPlayer) null, worldIn, pos);
         }
 
-        if (!flag && flag1)
-        {
+        if (!flag && flag1) {
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
+            worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if (eventRedstone.getNewCurrent() > 0) {
+                return;
+            }
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)));
-            this.notifyNeighbors(worldIn, pos, (EnumFacing)state.getValue(FACING));
+            this.notifyNeighbors(worldIn, pos, (EnumFacing) state.getValue(FACING));
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
             this.playReleaseSound(worldIn, pos);
         }
 
-        if (flag)
-        {
+        if (flag) {
             worldIn.scheduleUpdate(new BlockPos(pos), this, this.tickRate(worldIn));
         }
     }
 
-    private void notifyNeighbors(World worldIn, BlockPos pos, EnumFacing facing)
-    {
+    private void notifyNeighbors(World worldIn, BlockPos pos, EnumFacing facing) {
         worldIn.notifyNeighborsOfStateChange(pos, this, false);
         worldIn.notifyNeighborsOfStateChange(pos.offset(facing.getOpposite()), this, false);
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         EnumFacing enumfacing;
 
-        switch (meta & 7)
-        {
+        switch (meta & 7) {
             case 0:
                 enumfacing = EnumFacing.DOWN;
                 break;
@@ -312,12 +319,10 @@
         return this.getDefaultState().withProperty(FACING, enumfacing).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         int i;
 
-        switch ((EnumFacing)state.getValue(FACING))
-        {
+        switch ((EnumFacing) state.getValue(FACING)) {
             case EAST:
                 i = 1;
                 break;
@@ -338,31 +343,26 @@
                 i = 0;
         }
 
-        if (((Boolean)state.getValue(POWERED)).booleanValue())
-        {
+        if (((Boolean) state.getValue(POWERED)).booleanValue()) {
             i |= 8;
         }
 
         return i;
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.withProperty(FACING, rot.rotate((EnumFacing) state.getValue(FACING)));
     }
 
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        return state.withRotation(mirrorIn.toRotation((EnumFacing) state.getValue(FACING)));
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {FACING, POWERED});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{FACING, POWERED});
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
 }
