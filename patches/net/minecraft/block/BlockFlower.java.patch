--- ../src-base/minecraft/net/minecraft/block/BlockFlower.java
+++ ../src-work/minecraft/net/minecraft/block/BlockFlower.java
@@ -3,8 +3,6 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Collections2;
 import com.google.common.collect.Lists;
-import java.util.Collection;
-import javax.annotation.Nullable;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockStateContainer;
@@ -18,48 +16,40 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IBlockAccess;
 
-public abstract class BlockFlower extends BlockBush
-{
+import javax.annotation.Nullable;
+import java.util.Collection;
+
+public abstract class BlockFlower extends BlockBush {
     protected PropertyEnum<BlockFlower.EnumFlowerType> type;
 
-    protected BlockFlower()
-    {
+    protected BlockFlower() {
         this.setDefaultState(this.blockState.getBaseState().withProperty(this.getTypeProperty(), this.getBlockType() == BlockFlower.EnumFlowerColor.RED ? BlockFlower.EnumFlowerType.POPPY : BlockFlower.EnumFlowerType.DANDELION));
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
         return super.getBoundingBox(state, source, pos).offset(state.getOffset(source, pos));
     }
 
-    public int damageDropped(IBlockState state)
-    {
-        return ((BlockFlower.EnumFlowerType)state.getValue(this.getTypeProperty())).getMeta();
+    public int damageDropped(IBlockState state) {
+        return ((BlockFlower.EnumFlowerType) state.getValue(this.getTypeProperty())).getMeta();
     }
 
-    public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
-    {
-        for (BlockFlower.EnumFlowerType blockflower$enumflowertype : BlockFlower.EnumFlowerType.getTypes(this.getBlockType()))
-        {
+    public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items) {
+        for (BlockFlower.EnumFlowerType blockflower$enumflowertype : BlockFlower.EnumFlowerType.getTypes(this.getBlockType())) {
             items.add(new ItemStack(this, 1, blockflower$enumflowertype.getMeta()));
         }
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(this.getTypeProperty(), BlockFlower.EnumFlowerType.getType(this.getBlockType(), meta));
     }
 
     public abstract BlockFlower.EnumFlowerColor getBlockType();
 
-    public IProperty<BlockFlower.EnumFlowerType> getTypeProperty()
-    {
-        if (this.type == null)
-        {
-            this.type = PropertyEnum.<BlockFlower.EnumFlowerType>create("type", BlockFlower.EnumFlowerType.class, new Predicate<BlockFlower.EnumFlowerType>()
-            {
-                public boolean apply(@Nullable BlockFlower.EnumFlowerType p_apply_1_)
-                {
+    public IProperty<BlockFlower.EnumFlowerType> getTypeProperty() {
+        if (this.type == null) {
+            this.type = PropertyEnum.<BlockFlower.EnumFlowerType>create("type", BlockFlower.EnumFlowerType.class, new Predicate<BlockFlower.EnumFlowerType>() {
+                public boolean apply(@Nullable BlockFlower.EnumFlowerType p_apply_1_) {
                     return p_apply_1_.getBlockType() == BlockFlower.this.getBlockType();
                 }
             });
@@ -68,34 +58,28 @@
         return this.type;
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((BlockFlower.EnumFlowerType)state.getValue(this.getTypeProperty())).getMeta();
+    public int getMetaFromState(IBlockState state) {
+        return ((BlockFlower.EnumFlowerType) state.getValue(this.getTypeProperty())).getMeta();
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {this.getTypeProperty()});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{this.getTypeProperty()});
     }
 
-    public Block.EnumOffsetType getOffsetType()
-    {
+    public Block.EnumOffsetType getOffsetType() {
         return Block.EnumOffsetType.XZ;
     }
 
-    public static enum EnumFlowerColor
-    {
+    public static enum EnumFlowerColor {
         YELLOW,
         RED;
 
-        public BlockFlower getBlock()
-        {
+        public BlockFlower getBlock() {
             return this == YELLOW ? Blocks.YELLOW_FLOWER : Blocks.RED_FLOWER;
         }
     }
 
-    public static enum EnumFlowerType implements IStringSerializable
-    {
+    public static enum EnumFlowerType implements IStringSerializable {
         DANDELION(BlockFlower.EnumFlowerColor.YELLOW, 0, "dandelion"),
         POPPY(BlockFlower.EnumFlowerColor.RED, 0, "poppy"),
         BLUE_ORCHID(BlockFlower.EnumFlowerColor.RED, 1, "blue_orchid", "blueOrchid"),
@@ -113,73 +97,59 @@
         private final String name;
         private final String unlocalizedName;
 
-        private EnumFlowerType(BlockFlower.EnumFlowerColor blockType, int meta, String name)
-        {
+        private EnumFlowerType(BlockFlower.EnumFlowerColor blockType, int meta, String name) {
             this(blockType, meta, name, name);
         }
 
-        private EnumFlowerType(BlockFlower.EnumFlowerColor blockType, int meta, String name, String unlocalizedName)
-        {
+        private EnumFlowerType(BlockFlower.EnumFlowerColor blockType, int meta, String name, String unlocalizedName) {
             this.blockType = blockType;
             this.meta = meta;
             this.name = name;
             this.unlocalizedName = unlocalizedName;
         }
 
-        public BlockFlower.EnumFlowerColor getBlockType()
-        {
+        public BlockFlower.EnumFlowerColor getBlockType() {
             return this.blockType;
         }
 
-        public int getMeta()
-        {
+        public int getMeta() {
             return this.meta;
         }
 
-        public static BlockFlower.EnumFlowerType getType(BlockFlower.EnumFlowerColor blockType, int meta)
-        {
+        public static BlockFlower.EnumFlowerType getType(BlockFlower.EnumFlowerColor blockType, int meta) {
             BlockFlower.EnumFlowerType[] ablockflower$enumflowertype = TYPES_FOR_BLOCK[blockType.ordinal()];
 
-            if (meta < 0 || meta >= ablockflower$enumflowertype.length)
-            {
+            if (meta < 0 || meta >= ablockflower$enumflowertype.length) {
                 meta = 0;
             }
 
             return ablockflower$enumflowertype[meta];
         }
 
-        public static BlockFlower.EnumFlowerType[] getTypes(BlockFlower.EnumFlowerColor flowerColor)
-        {
+        public static BlockFlower.EnumFlowerType[] getTypes(BlockFlower.EnumFlowerColor flowerColor) {
             return TYPES_FOR_BLOCK[flowerColor.ordinal()];
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
 
-        public String getUnlocalizedName()
-        {
+        public String getUnlocalizedName() {
             return this.unlocalizedName;
         }
 
-        static
-        {
-            for (final BlockFlower.EnumFlowerColor blockflower$enumflowercolor : BlockFlower.EnumFlowerColor.values())
-            {
-                Collection<BlockFlower.EnumFlowerType> collection = Collections2.<BlockFlower.EnumFlowerType>filter(Lists.newArrayList(values()), new Predicate<BlockFlower.EnumFlowerType>()
-                {
-                    public boolean apply(@Nullable BlockFlower.EnumFlowerType p_apply_1_)
-                    {
+        static {
+            for (final BlockFlower.EnumFlowerColor blockflower$enumflowercolor : BlockFlower.EnumFlowerColor.values()) {
+                Collection<BlockFlower.EnumFlowerType> collection = Collections2.<BlockFlower.EnumFlowerType>filter(Lists.newArrayList(values()), new Predicate<BlockFlower.EnumFlowerType>() {
+                    public boolean apply(@Nullable BlockFlower.EnumFlowerType p_apply_1_) {
                         return p_apply_1_.getBlockType() == blockflower$enumflowercolor;
                     }
                 });
-                TYPES_FOR_BLOCK[blockflower$enumflowercolor.ordinal()] = (BlockFlower.EnumFlowerType[])collection.toArray(new BlockFlower.EnumFlowerType[collection.size()]);
+                TYPES_FOR_BLOCK[blockflower$enumflowercolor.ordinal()] = (BlockFlower.EnumFlowerType[]) collection.toArray(new BlockFlower.EnumFlowerType[collection.size()]);
             }
         }
     }
