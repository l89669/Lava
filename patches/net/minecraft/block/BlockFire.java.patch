--- ../src-base/minecraft/net/minecraft/block/BlockFire.java
+++ ../src-work/minecraft/net/minecraft/block/BlockFire.java
@@ -1,9 +1,6 @@
 package net.minecraft.block;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.IProperty;
@@ -22,12 +19,17 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldProviderEnd;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockBurnEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
 
-public class BlockFire extends Block
-{
+import javax.annotation.Nullable;
+import java.util.Map;
+import java.util.Random;
+
+public class BlockFire extends Block {
     public static final PropertyInteger AGE = PropertyInteger.create("age", 0, 15);
     public static final PropertyBool NORTH = PropertyBool.create("north");
     public static final PropertyBool EAST = PropertyBool.create("east");
@@ -37,28 +39,24 @@
     private final Map<Block, Integer> encouragements = Maps.<Block, Integer>newIdentityHashMap();
     private final Map<Block, Integer> flammabilities = Maps.<Block, Integer>newIdentityHashMap();
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
-        if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP) && !Blocks.FIRE.canCatchFire(worldIn, pos.down(), EnumFacing.UP))
-        {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
+        if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP) && !Blocks.FIRE.canCatchFire(worldIn, pos.down(), EnumFacing.UP)) {
             return state.withProperty(NORTH, this.canCatchFire(worldIn, pos.north(), EnumFacing.SOUTH))
-                        .withProperty(EAST,  this.canCatchFire(worldIn, pos.east(), EnumFacing.WEST))
-                        .withProperty(SOUTH, this.canCatchFire(worldIn, pos.south(), EnumFacing.NORTH))
-                        .withProperty(WEST,  this.canCatchFire(worldIn, pos.west(), EnumFacing.EAST))
-                        .withProperty(UPPER, this.canCatchFire(worldIn, pos.up(), EnumFacing.DOWN));
+                    .withProperty(EAST, this.canCatchFire(worldIn, pos.east(), EnumFacing.WEST))
+                    .withProperty(SOUTH, this.canCatchFire(worldIn, pos.south(), EnumFacing.NORTH))
+                    .withProperty(WEST, this.canCatchFire(worldIn, pos.west(), EnumFacing.EAST))
+                    .withProperty(UPPER, this.canCatchFire(worldIn, pos.up(), EnumFacing.DOWN));
         }
         return this.getDefaultState();
     }
 
-    protected BlockFire()
-    {
+    protected BlockFire() {
         super(Material.FIRE);
         this.setDefaultState(this.blockState.getBaseState().withProperty(AGE, Integer.valueOf(0)).withProperty(NORTH, Boolean.valueOf(false)).withProperty(EAST, Boolean.valueOf(false)).withProperty(SOUTH, Boolean.valueOf(false)).withProperty(WEST, Boolean.valueOf(false)).withProperty(UPPER, Boolean.valueOf(false)));
         this.setTickRandomly(true);
     }
 
-    public static void init()
-    {
+    public static void init() {
         Blocks.FIRE.setFireInfo(Blocks.PLANKS, 5, 20);
         Blocks.FIRE.setFireInfo(Blocks.DOUBLE_WOODEN_SLAB, 5, 20);
         Blocks.FIRE.setFireInfo(Blocks.WOODEN_SLAB, 5, 20);
@@ -98,83 +96,66 @@
         Blocks.FIRE.setFireInfo(Blocks.CARPET, 60, 20);
     }
 
-    public void setFireInfo(Block blockIn, int encouragement, int flammability)
-    {
+    public void setFireInfo(Block blockIn, int encouragement, int flammability) {
         if (blockIn == Blocks.AIR) throw new IllegalArgumentException("Tried to set air on fire... This is bad.");
         this.encouragements.put(blockIn, Integer.valueOf(encouragement));
         this.flammabilities.put(blockIn, Integer.valueOf(flammability));
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos) {
         return NULL_AABB;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public int quantityDropped(Random random)
-    {
+    public int quantityDropped(Random random) {
         return 0;
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 30;
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (worldIn.getGameRules().getBoolean("doFireTick"))
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (worldIn.getGameRules().getBoolean("doFireTick")) {
             if (!worldIn.isAreaLoaded(pos, 2)) return; // Forge: prevent loading unloaded chunks when spreading fire
-            if (!this.canPlaceBlockAt(worldIn, pos))
-            {
-                worldIn.setBlockToAir(pos);
+            if (!this.canPlaceBlockAt(worldIn, pos)) {
+                fireExtinguished(worldIn, pos); // CraftBukkit - invalid place location
             }
 
             Block block = worldIn.getBlockState(pos.down()).getBlock();
             boolean flag = block.isFireSource(worldIn, pos.down(), EnumFacing.UP);
 
-            int i = ((Integer)state.getValue(AGE)).intValue();
+            int i = ((Integer) state.getValue(AGE)).intValue();
 
-            if (!flag && worldIn.isRaining() && this.canDie(worldIn, pos) && rand.nextFloat() < 0.2F + (float)i * 0.03F)
-            {
-                worldIn.setBlockToAir(pos);
-            }
-            else
-            {
-                if (i < 15)
-                {
+            if (!flag && worldIn.isRaining() && this.canDie(worldIn, pos) && rand.nextFloat() < 0.2F + (float) i * 0.03F) {
+                fireExtinguished(worldIn, pos); // CraftBukkit - extinguished by rain
+            } else {
+                if (i < 15) {
                     state = state.withProperty(AGE, Integer.valueOf(i + rand.nextInt(3) / 2));
                     worldIn.setBlockState(pos, state, 4);
                 }
 
                 worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn) + rand.nextInt(10));
 
-                if (!flag)
-                {
-                    if (!this.canNeighborCatchFire(worldIn, pos))
-                    {
-                        if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP) || i > 3)
-                        {
-                            worldIn.setBlockToAir(pos);
+                if (!flag) {
+                    if (!this.canNeighborCatchFire(worldIn, pos)) {
+                        if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP) || i > 3) {
+                            fireExtinguished(worldIn, pos);
                         }
 
                         return;
                     }
 
-                    if (!this.canCatchFire(worldIn, pos.down(), EnumFacing.UP) && i == 15 && rand.nextInt(4) == 0)
-                    {
-                        worldIn.setBlockToAir(pos);
+                    if (!this.canCatchFire(worldIn, pos.down(), EnumFacing.UP) && i == 15 && rand.nextInt(4) == 0) {
+                        fireExtinguished(worldIn, pos);
                         return;
                     }
                 }
@@ -182,55 +163,67 @@
                 boolean flag1 = worldIn.isBlockinHighHumidity(pos);
                 int j = 0;
 
-                if (flag1)
-                {
+                if (flag1) {
                     j = -50;
                 }
 
-                this.tryCatchFire(worldIn, pos.east(), 300 + j, rand, i, EnumFacing.WEST);
-                this.tryCatchFire(worldIn, pos.west(), 300 + j, rand, i, EnumFacing.EAST);
-                this.tryCatchFire(worldIn, pos.down(), 250 + j, rand, i, EnumFacing.UP);
-                this.tryCatchFire(worldIn, pos.up(), 250 + j, rand, i, EnumFacing.DOWN);
-                this.tryCatchFire(worldIn, pos.north(), 300 + j, rand, i, EnumFacing.SOUTH);
-                this.tryCatchFire(worldIn, pos.south(), 300 + j, rand, i, EnumFacing.NORTH);
+                // CraftBukkit start - add source blockposition to burn calls
+                this.tryCatchFire(worldIn, pos.east(), 300 + j, rand, i, EnumFacing.WEST, pos);
+                this.tryCatchFire(worldIn, pos.west(), 300 + j, rand, i, EnumFacing.EAST, pos);
+                this.tryCatchFire(worldIn, pos.down(), 250 + j, rand, i, EnumFacing.UP, pos);
+                this.tryCatchFire(worldIn, pos.up(), 250 + j, rand, i, EnumFacing.DOWN, pos);
+                this.tryCatchFire(worldIn, pos.north(), 300 + j, rand, i, EnumFacing.SOUTH, pos);
+                this.tryCatchFire(worldIn, pos.south(), 300 + j, rand, i, EnumFacing.NORTH, pos);
+                // CraftBukkit end
 
-                for (int k = -1; k <= 1; ++k)
-                {
-                    for (int l = -1; l <= 1; ++l)
-                    {
-                        for (int i1 = -1; i1 <= 4; ++i1)
-                        {
-                            if (k != 0 || i1 != 0 || l != 0)
-                            {
+                for (int k = -1; k <= 1; ++k) {
+                    for (int l = -1; l <= 1; ++l) {
+                        for (int i1 = -1; i1 <= 4; ++i1) {
+                            if (k != 0 || i1 != 0 || l != 0) {
                                 int j1 = 100;
 
-                                if (i1 > 1)
-                                {
+                                if (i1 > 1) {
                                     j1 += (i1 - 1) * 100;
                                 }
 
                                 BlockPos blockpos = pos.add(k, i1, l);
+                                if (!worldIn.isBlockLoaded(blockpos)) continue; // Paper
                                 int k1 = this.getNeighborEncouragement(worldIn, blockpos);
 
-                                if (k1 > 0)
-                                {
+                                if (k1 > 0) {
                                     int l1 = (k1 + 40 + worldIn.getDifficulty().getDifficultyId() * 7) / (i + 30);
 
-                                    if (flag1)
-                                    {
+                                    if (flag1) {
                                         l1 /= 2;
                                     }
 
-                                    if (l1 > 0 && rand.nextInt(j1) <= l1 && (!worldIn.isRaining() || !this.canDie(worldIn, blockpos)))
-                                    {
+                                    if (l1 > 0 && rand.nextInt(j1) <= l1 && (!worldIn.isRaining() || !this.canDie(worldIn, blockpos))) {
                                         int i2 = i + rand.nextInt(5) / 4;
 
-                                        if (i2 > 15)
-                                        {
+                                        if (i2 > 15) {
                                             i2 = 15;
                                         }
 
-                                        worldIn.setBlockState(blockpos, state.withProperty(AGE, Integer.valueOf(i2)), 3);
+                                        // CraftBukkit start - Call to stop spread of fire
+                                        if (worldIn.getBlockState(blockpos) != Blocks.FIRE) {
+                                            if (CraftEventFactory.callBlockIgniteEvent(worldIn, blockpos.getX(), blockpos.getY(), blockpos.getZ(), pos.getX(), pos.getY(), pos.getZ()).isCancelled()) {
+                                                continue;
+                                            }
+
+                                            org.bukkit.Server server = worldIn.getServer();
+                                            org.bukkit.World bworld = worldIn.getWorld();
+                                            org.bukkit.block.BlockState blockState = bworld.getBlockAt(blockpos.getX(), blockpos.getY(), blockpos.getZ()).getState();
+                                            blockState.setTypeId(Block.getIdFromBlock(this));
+                                            blockState.setData(new org.bukkit.material.MaterialData(Block.getIdFromBlock(this), (byte) l1));
+
+                                            BlockSpreadEvent spreadEvent = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), blockState);
+                                            server.getPluginManager().callEvent(spreadEvent);
+
+                                            if (!spreadEvent.isCancelled()) {
+                                                blockState.update(true);
+                                            }
+                                        }
+                                        // CraftBukkit end
                                     }
                                 }
                             }
@@ -241,73 +234,93 @@
         }
     }
 
-    protected boolean canDie(World worldIn, BlockPos pos)
-    {
+    protected boolean canDie(World worldIn, BlockPos pos) {
         return worldIn.isRainingAt(pos) || worldIn.isRainingAt(pos.west()) || worldIn.isRainingAt(pos.east()) || worldIn.isRainingAt(pos.north()) || worldIn.isRainingAt(pos.south());
     }
 
-    public boolean requiresUpdates()
-    {
+    public boolean requiresUpdates() {
         return false;
     }
 
     @Deprecated // Use Block.getFlammability
-    public int getFlammability(Block blockIn)
-    {
+    public int getFlammability(Block blockIn) {
         Integer integer = this.flammabilities.get(blockIn);
         return integer == null ? 0 : integer.intValue();
     }
 
     @Deprecated // Use Block.getFireSpreadSpeed
-    public int getEncouragement(Block blockIn)
-    {
+    public int getEncouragement(Block blockIn) {
         Integer integer = this.encouragements.get(blockIn);
         return integer == null ? 0 : integer.intValue();
     }
 
     @Deprecated // Use tryCatchFire with face below
-    private void catchOnFire(World worldIn, BlockPos pos, int chance, Random random, int age)
-    {
+    private void catchOnFire(World worldIn, BlockPos pos, int chance, Random random, int age) {
         this.tryCatchFire(worldIn, pos, chance, random, age, EnumFacing.UP);
     }
 
-    private void tryCatchFire(World worldIn, BlockPos pos, int chance, Random random, int age, EnumFacing face)
-    {
+    private void tryCatchFire(World worldIn, BlockPos pos, int chance, Random random, int age, EnumFacing face) {
         int i = worldIn.getBlockState(pos).getBlock().getFlammability(worldIn, pos, face);
 
-        if (random.nextInt(chance) < i)
-        {
+        if (random.nextInt(chance) < i) {
             IBlockState iblockstate = worldIn.getBlockState(pos);
 
-            if (random.nextInt(age + 10) < 5 && !worldIn.isRainingAt(pos))
-            {
+            if (random.nextInt(age + 10) < 5 && !worldIn.isRainingAt(pos)) {
                 int j = age + random.nextInt(5) / 4;
 
-                if (j > 15)
-                {
+                if (j > 15) {
                     j = 15;
                 }
 
                 worldIn.setBlockState(pos, this.getDefaultState().withProperty(AGE, Integer.valueOf(j)), 3);
+            } else {
+                worldIn.setBlockToAir(pos);
             }
-            else
-            {
+
+            if (iblockstate.getBlock() == Blocks.TNT) {
+                Blocks.TNT.onBlockDestroyedByPlayer(worldIn, pos, iblockstate.withProperty(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            }
+        }
+    }
+
+    // Atom: Create a new method, instead of the method modification above for sanity
+    private void tryCatchFire(World worldIn, BlockPos pos, int chance, Random random, int age, EnumFacing face, BlockPos sourcePos) {
+        final IBlockState iblockstate = worldIn.getBlockState(pos);
+        if (iblockstate == null) return;
+        int i = worldIn.getBlockState(pos).getBlock().getFlammability(worldIn, pos, face);
+
+        if (random.nextInt(chance) < i) {
+            org.bukkit.block.Block theBlock = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            org.bukkit.block.Block sourceBlock = worldIn.getWorld().getBlockAt(sourcePos.getX(), sourcePos.getY(), sourcePos.getZ());
+
+            BlockBurnEvent event = new BlockBurnEvent(theBlock, sourceBlock);
+            worldIn.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            if (random.nextInt(age + 10) < 5 && !worldIn.isRainingAt(pos)) {
+                int j = age + random.nextInt(5) / 4;
+
+                if (j > 15) {
+                    j = 15;
+                }
+
+                worldIn.setBlockState(pos, this.getDefaultState().withProperty(AGE, Integer.valueOf(j)), 3);
+            } else {
                 worldIn.setBlockToAir(pos);
             }
 
-            if (iblockstate.getBlock() == Blocks.TNT)
-            {
+            if (iblockstate.getBlock() == Blocks.TNT) {
                 Blocks.TNT.onBlockDestroyedByPlayer(worldIn, pos, iblockstate.withProperty(BlockTNT.EXPLODE, Boolean.valueOf(true)));
             }
         }
     }
 
-    private boolean canNeighborCatchFire(World worldIn, BlockPos pos)
-    {
-        for (EnumFacing enumfacing : EnumFacing.values())
-        {
-            if (this.canCatchFire(worldIn, pos.offset(enumfacing), enumfacing.getOpposite()))
-            {
+    private boolean canNeighborCatchFire(World worldIn, BlockPos pos) {
+        for (EnumFacing enumfacing : EnumFacing.values()) {
+            if (this.canCatchFire(worldIn, pos.offset(enumfacing), enumfacing.getOpposite())) {
                 return true;
             }
         }
@@ -315,18 +328,13 @@
         return false;
     }
 
-    private int getNeighborEncouragement(World worldIn, BlockPos pos)
-    {
-        if (!worldIn.isAirBlock(pos))
-        {
+    private int getNeighborEncouragement(World worldIn, BlockPos pos) {
+        if (!worldIn.isAirBlock(pos)) {
             return 0;
-        }
-        else
-        {
+        } else {
             int i = 0;
 
-            for (EnumFacing enumfacing : EnumFacing.values())
-            {
+            for (EnumFacing enumfacing : EnumFacing.values()) {
                 i = Math.max(worldIn.getBlockState(pos.offset(enumfacing)).getBlock().getFireSpreadSpeed(worldIn, pos.offset(enumfacing), enumfacing.getOpposite()), i);
             }
 
@@ -334,165 +342,139 @@
         }
     }
 
-    public boolean isCollidable()
-    {
+    public boolean isCollidable() {
         return false;
     }
 
     @Deprecated // Use canCatchFire with face sensitive version below
-    public boolean canCatchFire(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean canCatchFire(IBlockAccess worldIn, BlockPos pos) {
         return canCatchFire(worldIn, pos, EnumFacing.UP);
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return worldIn.getBlockState(pos.down()).isTopSolid() || this.canNeighborCatchFire(worldIn, pos);
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
-        if (!worldIn.getBlockState(pos.down()).isTopSolid() && !this.canNeighborCatchFire(worldIn, pos))
-        {
-            worldIn.setBlockToAir(pos);
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+        if (!worldIn.getBlockState(pos.down()).isTopSolid() && !this.canNeighborCatchFire(worldIn, pos)) {
+            fireExtinguished(worldIn, pos); // CraftBukkit - fuel block gone
         }
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (worldIn.provider.getDimensionType().getId() > 0 || !Blocks.PORTAL.trySpawnPortal(worldIn, pos))
-        {
-            if (!worldIn.getBlockState(pos.down()).isTopSolid() && !this.canNeighborCatchFire(worldIn, pos))
-            {
-                worldIn.setBlockToAir(pos);
-            }
-            else
-            {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
+        if (worldIn.provider.getDimensionType().getId() > 0 || !Blocks.PORTAL.trySpawnPortal(worldIn, pos)) {
+            if (!worldIn.getBlockState(pos.down()).isTopSolid() && !this.canNeighborCatchFire(worldIn, pos)) {
+                fireExtinguished(worldIn, pos); // CraftBukkit - fuel block broke
+            } else {
                 worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn) + worldIn.rand.nextInt(10));
             }
         }
     }
 
-    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return MapColor.TNT;
     }
 
     @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
-    {
-        if (rand.nextInt(24) == 0)
-        {
-            worldIn.playSound((double)((float)pos.getX() + 0.5F), (double)((float)pos.getY() + 0.5F), (double)((float)pos.getZ() + 0.5F), SoundEvents.BLOCK_FIRE_AMBIENT, SoundCategory.BLOCKS, 1.0F + rand.nextFloat(), rand.nextFloat() * 0.7F + 0.3F, false);
+    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand) {
+        if (rand.nextInt(24) == 0) {
+            worldIn.playSound((double) ((float) pos.getX() + 0.5F), (double) ((float) pos.getY() + 0.5F), (double) ((float) pos.getZ() + 0.5F), SoundEvents.BLOCK_FIRE_AMBIENT, SoundCategory.BLOCKS, 1.0F + rand.nextFloat(), rand.nextFloat() * 0.7F + 0.3F, false);
         }
 
-        if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP) && !Blocks.FIRE.canCatchFire(worldIn, pos.down(), EnumFacing.UP))
-        {
-            if (Blocks.FIRE.canCatchFire(worldIn, pos.west(), EnumFacing.EAST))
-            {
-                for (int j = 0; j < 2; ++j)
-                {
-                    double d3 = (double)pos.getX() + rand.nextDouble() * 0.10000000149011612D;
-                    double d8 = (double)pos.getY() + rand.nextDouble();
-                    double d13 = (double)pos.getZ() + rand.nextDouble();
+        if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP) && !Blocks.FIRE.canCatchFire(worldIn, pos.down(), EnumFacing.UP)) {
+            if (Blocks.FIRE.canCatchFire(worldIn, pos.west(), EnumFacing.EAST)) {
+                for (int j = 0; j < 2; ++j) {
+                    double d3 = (double) pos.getX() + rand.nextDouble() * 0.10000000149011612D;
+                    double d8 = (double) pos.getY() + rand.nextDouble();
+                    double d13 = (double) pos.getZ() + rand.nextDouble();
                     worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d3, d8, d13, 0.0D, 0.0D, 0.0D);
                 }
             }
 
-            if (Blocks.FIRE.canCatchFire(worldIn, pos.east(), EnumFacing.WEST))
-            {
-                for (int k = 0; k < 2; ++k)
-                {
-                    double d4 = (double)(pos.getX() + 1) - rand.nextDouble() * 0.10000000149011612D;
-                    double d9 = (double)pos.getY() + rand.nextDouble();
-                    double d14 = (double)pos.getZ() + rand.nextDouble();
+            if (Blocks.FIRE.canCatchFire(worldIn, pos.east(), EnumFacing.WEST)) {
+                for (int k = 0; k < 2; ++k) {
+                    double d4 = (double) (pos.getX() + 1) - rand.nextDouble() * 0.10000000149011612D;
+                    double d9 = (double) pos.getY() + rand.nextDouble();
+                    double d14 = (double) pos.getZ() + rand.nextDouble();
                     worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d4, d9, d14, 0.0D, 0.0D, 0.0D);
                 }
             }
 
-            if (Blocks.FIRE.canCatchFire(worldIn, pos.north(), EnumFacing.SOUTH))
-            {
-                for (int l = 0; l < 2; ++l)
-                {
-                    double d5 = (double)pos.getX() + rand.nextDouble();
-                    double d10 = (double)pos.getY() + rand.nextDouble();
-                    double d15 = (double)pos.getZ() + rand.nextDouble() * 0.10000000149011612D;
+            if (Blocks.FIRE.canCatchFire(worldIn, pos.north(), EnumFacing.SOUTH)) {
+                for (int l = 0; l < 2; ++l) {
+                    double d5 = (double) pos.getX() + rand.nextDouble();
+                    double d10 = (double) pos.getY() + rand.nextDouble();
+                    double d15 = (double) pos.getZ() + rand.nextDouble() * 0.10000000149011612D;
                     worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d5, d10, d15, 0.0D, 0.0D, 0.0D);
                 }
             }
 
-            if (Blocks.FIRE.canCatchFire(worldIn, pos.south(), EnumFacing.NORTH))
-            {
-                for (int i1 = 0; i1 < 2; ++i1)
-                {
-                    double d6 = (double)pos.getX() + rand.nextDouble();
-                    double d11 = (double)pos.getY() + rand.nextDouble();
-                    double d16 = (double)(pos.getZ() + 1) - rand.nextDouble() * 0.10000000149011612D;
+            if (Blocks.FIRE.canCatchFire(worldIn, pos.south(), EnumFacing.NORTH)) {
+                for (int i1 = 0; i1 < 2; ++i1) {
+                    double d6 = (double) pos.getX() + rand.nextDouble();
+                    double d11 = (double) pos.getY() + rand.nextDouble();
+                    double d16 = (double) (pos.getZ() + 1) - rand.nextDouble() * 0.10000000149011612D;
                     worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d6, d11, d16, 0.0D, 0.0D, 0.0D);
                 }
             }
 
-            if (Blocks.FIRE.canCatchFire(worldIn, pos.up(), EnumFacing.DOWN))
-            {
-                for (int j1 = 0; j1 < 2; ++j1)
-                {
-                    double d7 = (double)pos.getX() + rand.nextDouble();
-                    double d12 = (double)(pos.getY() + 1) - rand.nextDouble() * 0.10000000149011612D;
-                    double d17 = (double)pos.getZ() + rand.nextDouble();
+            if (Blocks.FIRE.canCatchFire(worldIn, pos.up(), EnumFacing.DOWN)) {
+                for (int j1 = 0; j1 < 2; ++j1) {
+                    double d7 = (double) pos.getX() + rand.nextDouble();
+                    double d12 = (double) (pos.getY() + 1) - rand.nextDouble() * 0.10000000149011612D;
+                    double d17 = (double) pos.getZ() + rand.nextDouble();
                     worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d7, d12, d17, 0.0D, 0.0D, 0.0D);
                 }
             }
-        }
-        else
-        {
-            for (int i = 0; i < 3; ++i)
-            {
-                double d0 = (double)pos.getX() + rand.nextDouble();
-                double d1 = (double)pos.getY() + rand.nextDouble() * 0.5D + 0.5D;
-                double d2 = (double)pos.getZ() + rand.nextDouble();
+        } else {
+            for (int i = 0; i < 3; ++i) {
+                double d0 = (double) pos.getX() + rand.nextDouble();
+                double d1 = (double) pos.getY() + rand.nextDouble() * 0.5D + 0.5D;
+                double d2 = (double) pos.getZ() + rand.nextDouble();
                 worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
             }
         }
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(AGE, Integer.valueOf(meta));
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockRenderLayer getBlockLayer()
-    {
+    public BlockRenderLayer getBlockLayer() {
         return BlockRenderLayer.CUTOUT;
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Integer)state.getValue(AGE)).intValue();
+    public int getMetaFromState(IBlockState state) {
+        return ((Integer) state.getValue(AGE)).intValue();
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {AGE, NORTH, EAST, SOUTH, WEST, UPPER});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{AGE, NORTH, EAST, SOUTH, WEST, UPPER});
     }
 
     /*================================= Forge Start ======================================*/
+
     /**
      * Side sensitive version that calls the block function.
      *
      * @param world The current world
-     * @param pos Block position
-     * @param face The side the fire is coming from
+     * @param pos   Block position
+     * @param face  The side the fire is coming from
      * @return True if the face can catch fire.
      */
-    public boolean canCatchFire(IBlockAccess world, BlockPos pos, EnumFacing face)
-    {
+    public boolean canCatchFire(IBlockAccess world, BlockPos pos, EnumFacing face) {
         return world.getBlockState(pos).getBlock().isFlammable(world, pos, face);
     }
     /*================================= Forge Start ======================================*/
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
+
+    private void fireExtinguished(World world, BlockPos position) {
+        if (!CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), Blocks.AIR).isCancelled()) {
+            world.setBlockToAir(position);
+        }
+    }
 }
