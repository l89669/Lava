--- ../src-base/minecraft/net/minecraft/block/BlockBasePressurePlate.java
+++ ../src-work/minecraft/net/minecraft/block/BlockBasePressurePlate.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
@@ -14,136 +12,124 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
-public abstract class BlockBasePressurePlate extends Block
-{
+import javax.annotation.Nullable;
+import java.util.Random;
+
+public abstract class BlockBasePressurePlate extends Block {
     protected static final AxisAlignedBB PRESSED_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 0.03125D, 0.9375D);
     protected static final AxisAlignedBB UNPRESSED_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 0.0625D, 0.9375D);
     protected static final AxisAlignedBB PRESSURE_AABB = new AxisAlignedBB(0.125D, 0.0D, 0.125D, 0.875D, 0.25D, 0.875D);
 
-    protected BlockBasePressurePlate(Material materialIn)
-    {
+    protected BlockBasePressurePlate(Material materialIn) {
         this(materialIn, materialIn.getMaterialMapColor());
     }
 
-    protected BlockBasePressurePlate(Material materialIn, MapColor mapColorIn)
-    {
+    protected BlockBasePressurePlate(Material materialIn, MapColor mapColorIn) {
         super(materialIn, mapColorIn);
         this.setCreativeTab(CreativeTabs.REDSTONE);
         this.setTickRandomly(true);
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
         boolean flag = this.getRedstoneStrength(state) > 0;
         return flag ? PRESSED_AABB : UNPRESSED_AABB;
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return 20;
     }
 
     @Nullable
-    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos) {
         return NULL_AABB;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
-    {
+    public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
         return true;
     }
 
-    public boolean canSpawnInBlock()
-    {
+    public boolean canSpawnInBlock() {
         return true;
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return this.canBePlacedOn(worldIn, pos.down());
     }
 
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
-        if (!this.canBePlacedOn(worldIn, pos.down()))
-        {
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+        if (!this.canBePlacedOn(worldIn, pos.down())) {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
         }
     }
 
-    private boolean canBePlacedOn(World worldIn, BlockPos pos)
-    {
+    private boolean canBePlacedOn(World worldIn, BlockPos pos) {
         return worldIn.getBlockState(pos).isTopSolid() || worldIn.getBlockState(pos).getBlock() instanceof BlockFence;
     }
 
-    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random)
-    {
+    public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random) {
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
+        if (!worldIn.isRemote) {
             int i = this.getRedstoneStrength(state);
 
-            if (i > 0)
-            {
+            if (i > 0) {
                 this.updateState(worldIn, pos, state, i);
             }
         }
     }
 
-    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn) {
+        if (!worldIn.isRemote) {
             int i = this.getRedstoneStrength(state);
 
-            if (i == 0)
-            {
+            if (i == 0) {
                 this.updateState(worldIn, pos, state, i);
             }
         }
     }
 
-    protected void updateState(World worldIn, BlockPos pos, IBlockState state, int oldRedstoneStrength)
-    {
+    protected void updateState(World worldIn, BlockPos pos, IBlockState state, int oldRedstoneStrength) {
         int i = this.computeRedstoneStrength(worldIn, pos);
         boolean flag = oldRedstoneStrength > 0;
         boolean flag1 = i > 0;
 
-        if (oldRedstoneStrength != i)
-        {
+        org.bukkit.World bworld = worldIn.getWorld();
+        org.bukkit.plugin.PluginManager manager = worldIn.getServer().getPluginManager();
+
+        if (flag != flag1) {
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldRedstoneStrength, i);
+            manager.callEvent(eventRedstone);
+
+            flag1 = eventRedstone.getNewCurrent() > 0;
+            i = eventRedstone.getNewCurrent();
+        }
+
+        if (oldRedstoneStrength != i) {
             state = this.setRedstoneStrength(state, i);
             worldIn.setBlockState(pos, state, 2);
             this.updateNeighbors(worldIn, pos);
             worldIn.markBlockRangeForRenderUpdate(pos, pos);
         }
 
-        if (!flag1 && flag)
-        {
+        if (!flag1 && flag) {
             this.playClickOffSound(worldIn, pos);
-        }
-        else if (flag1 && !flag)
-        {
+        } else if (flag1 && !flag) {
             this.playClickOnSound(worldIn, pos);
         }
 
-        if (flag1)
-        {
+        if (flag1) {
             worldIn.scheduleUpdate(new BlockPos(pos), this, this.tickRate(worldIn));
         }
     }
@@ -152,39 +138,32 @@
 
     protected abstract void playClickOffSound(World worldIn, BlockPos pos);
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.getRedstoneStrength(state) > 0)
-        {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
+        if (this.getRedstoneStrength(state) > 0) {
             this.updateNeighbors(worldIn, pos);
         }
 
         super.breakBlock(worldIn, pos, state);
     }
 
-    protected void updateNeighbors(World worldIn, BlockPos pos)
-    {
+    protected void updateNeighbors(World worldIn, BlockPos pos) {
         worldIn.notifyNeighborsOfStateChange(pos, this, false);
         worldIn.notifyNeighborsOfStateChange(pos.down(), this, false);
     }
 
-    public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
+    public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
         return this.getRedstoneStrength(blockState);
     }
 
-    public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
+    public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
         return side == EnumFacing.UP ? this.getRedstoneStrength(blockState) : 0;
     }
 
-    public boolean canProvidePower(IBlockState state)
-    {
+    public boolean canProvidePower(IBlockState state) {
         return true;
     }
 
-    public EnumPushReaction getMobilityFlag(IBlockState state)
-    {
+    public EnumPushReaction getMobilityFlag(IBlockState state) {
         return EnumPushReaction.DESTROY;
     }
 
@@ -194,8 +173,7 @@
 
     protected abstract IBlockState setRedstoneStrength(IBlockState state, int strength);
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
 }
