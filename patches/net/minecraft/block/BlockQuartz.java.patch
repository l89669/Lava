--- ../src-base/minecraft/net/minecraft/block/BlockQuartz.java
+++ ../src-work/minecraft/net/minecraft/block/BlockQuartz.java
@@ -18,23 +18,18 @@
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
-public class BlockQuartz extends Block
-{
+public class BlockQuartz extends Block {
     public static final PropertyEnum<BlockQuartz.EnumType> VARIANT = PropertyEnum.<BlockQuartz.EnumType>create("variant", BlockQuartz.EnumType.class);
 
-    public BlockQuartz()
-    {
+    public BlockQuartz() {
         super(Material.ROCK);
         this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockQuartz.EnumType.DEFAULT));
         this.setCreativeTab(CreativeTabs.BUILDING_BLOCKS);
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
-        if (meta == BlockQuartz.EnumType.LINES_Y.getMetadata())
-        {
-            switch (facing.getAxis())
-            {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
+        if (meta == BlockQuartz.EnumType.LINES_Y.getMetadata()) {
+            switch (facing.getAxis()) {
                 case Z:
                     return this.getDefaultState().withProperty(VARIANT, BlockQuartz.EnumType.LINES_Z);
                 case X:
@@ -47,49 +42,40 @@
         return meta == BlockQuartz.EnumType.CHISELED.getMetadata() ? this.getDefaultState().withProperty(VARIANT, BlockQuartz.EnumType.CHISELED) : this.getDefaultState().withProperty(VARIANT, BlockQuartz.EnumType.DEFAULT);
     }
 
-    public int damageDropped(IBlockState state)
-    {
-        BlockQuartz.EnumType blockquartz$enumtype = (BlockQuartz.EnumType)state.getValue(VARIANT);
+    public int damageDropped(IBlockState state) {
+        BlockQuartz.EnumType blockquartz$enumtype = (BlockQuartz.EnumType) state.getValue(VARIANT);
         return blockquartz$enumtype != BlockQuartz.EnumType.LINES_X && blockquartz$enumtype != BlockQuartz.EnumType.LINES_Z ? blockquartz$enumtype.getMetadata() : BlockQuartz.EnumType.LINES_Y.getMetadata();
     }
 
-    protected ItemStack getSilkTouchDrop(IBlockState state)
-    {
-        BlockQuartz.EnumType blockquartz$enumtype = (BlockQuartz.EnumType)state.getValue(VARIANT);
+    protected ItemStack getSilkTouchDrop(IBlockState state) {
+        BlockQuartz.EnumType blockquartz$enumtype = (BlockQuartz.EnumType) state.getValue(VARIANT);
         return blockquartz$enumtype != BlockQuartz.EnumType.LINES_X && blockquartz$enumtype != BlockQuartz.EnumType.LINES_Z ? super.getSilkTouchDrop(state) : new ItemStack(Item.getItemFromBlock(this), 1, BlockQuartz.EnumType.LINES_Y.getMetadata());
     }
 
-    public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
-    {
+    public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items) {
         items.add(new ItemStack(this, 1, BlockQuartz.EnumType.DEFAULT.getMetadata()));
         items.add(new ItemStack(this, 1, BlockQuartz.EnumType.CHISELED.getMetadata()));
         items.add(new ItemStack(this, 1, BlockQuartz.EnumType.LINES_Y.getMetadata()));
     }
 
-    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return MapColor.QUARTZ;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(VARIANT, BlockQuartz.EnumType.byMetadata(meta));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((BlockQuartz.EnumType)state.getValue(VARIANT)).getMetadata();
+    public int getMetaFromState(IBlockState state) {
+        return ((BlockQuartz.EnumType) state.getValue(VARIANT)).getMetadata();
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        switch (rot)
-        {
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        switch (rot) {
             case COUNTERCLOCKWISE_90:
             case CLOCKWISE_90:
 
-                switch ((BlockQuartz.EnumType)state.getValue(VARIANT))
-                {
+                switch ((BlockQuartz.EnumType) state.getValue(VARIANT)) {
                     case LINES_X:
                         return state.withProperty(VARIANT, BlockQuartz.EnumType.LINES_Z);
                     case LINES_Z:
@@ -103,21 +89,17 @@
         }
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {VARIANT});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{VARIANT});
     }
 
-    public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis)
-    {
+    public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis) {
         IBlockState state = world.getBlockState(pos);
-        for (IProperty prop : state.getProperties().keySet())
-        {
-            if (prop.getName().equals("variant") && prop.getValueClass() == EnumType.class)
-            {
-                EnumType current = (EnumType)state.getValue(prop);
+        for (IProperty prop : state.getProperties().keySet()) {
+            if (prop.getName().equals("variant") && prop.getValueClass() == EnumType.class) {
+                EnumType current = (EnumType) state.getValue(prop);
                 EnumType next = current == EnumType.LINES_X ? EnumType.LINES_Y :
-                                current == EnumType.LINES_Y ? EnumType.LINES_Z :
+                        current == EnumType.LINES_Y ? EnumType.LINES_Z :
                                 current == EnumType.LINES_Z ? EnumType.LINES_X : current;
                 if (next == current)
                     return false;
@@ -128,8 +110,7 @@
         return false;
     }
 
-    public static enum EnumType implements IStringSerializable
-    {
+    public static enum EnumType implements IStringSerializable {
         DEFAULT(0, "default", "default"),
         CHISELED(1, "chiseled", "chiseled"),
         LINES_Y(2, "lines_y", "lines"),
@@ -141,42 +122,34 @@
         private final String serializedName;
         private final String unlocalizedName;
 
-        private EnumType(int meta, String name, String unlocalizedName)
-        {
+        private EnumType(int meta, String name, String unlocalizedName) {
             this.meta = meta;
             this.serializedName = name;
             this.unlocalizedName = unlocalizedName;
         }
 
-        public int getMetadata()
-        {
+        public int getMetadata() {
             return this.meta;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.unlocalizedName;
         }
 
-        public static BlockQuartz.EnumType byMetadata(int meta)
-        {
-            if (meta < 0 || meta >= META_LOOKUP.length)
-            {
+        public static BlockQuartz.EnumType byMetadata(int meta) {
+            if (meta < 0 || meta >= META_LOOKUP.length) {
                 meta = 0;
             }
 
             return META_LOOKUP[meta];
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.serializedName;
         }
 
-        static
-        {
-            for (BlockQuartz.EnumType blockquartz$enumtype : values())
-            {
+        static {
+            for (BlockQuartz.EnumType blockquartz$enumtype : values()) {
                 META_LOOKUP[blockquartz$enumtype.getMetadata()] = blockquartz$enumtype;
             }
         }
