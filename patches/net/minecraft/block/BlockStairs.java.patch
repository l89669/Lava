--- ../src-base/minecraft/net/minecraft/block/BlockStairs.java
+++ ../src-work/minecraft/net/minecraft/block/BlockStairs.java
@@ -1,9 +1,6 @@
 package net.minecraft.block;
 
 import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
@@ -16,12 +13,7 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
-import net.minecraft.util.BlockRenderLayer;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.RayTraceResult;
@@ -32,8 +24,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class BlockStairs extends Block
-{
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Random;
+
+public class BlockStairs extends Block {
     public static final PropertyDirection FACING = BlockHorizontal.FACING;
     public static final PropertyEnum<BlockStairs.EnumHalf> HALF = PropertyEnum.<BlockStairs.EnumHalf>create("half", BlockStairs.EnumHalf.class);
     public static final PropertyEnum<BlockStairs.EnumShape> SHAPE = PropertyEnum.<BlockStairs.EnumShape>create("shape", BlockStairs.EnumShape.class);
@@ -58,8 +53,7 @@
     private final Block modelBlock;
     private final IBlockState modelState;
 
-    protected BlockStairs(IBlockState modelState)
-    {
+    protected BlockStairs(IBlockState modelState) {
         super(modelState.getBlock().blockMaterial);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(HALF, BlockStairs.EnumHalf.BOTTOM).withProperty(SHAPE, BlockStairs.EnumShape.STRAIGHT));
         this.modelBlock = modelState.getBlock();
@@ -71,45 +65,37 @@
         this.setCreativeTab(CreativeTabs.BUILDING_BLOCKS);
     }
 
-    public void addCollisionBoxToList(IBlockState state, World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean isActualState)
-    {
-        if (!isActualState)
-        {
+    public void addCollisionBoxToList(IBlockState state, World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean isActualState) {
+        if (!isActualState) {
             state = this.getActualState(state, worldIn, pos);
         }
 
-        for (AxisAlignedBB axisalignedbb : getCollisionBoxList(state))
-        {
+        for (AxisAlignedBB axisalignedbb : getCollisionBoxList(state)) {
             addCollisionBoxToList(pos, entityBox, collidingBoxes, axisalignedbb);
         }
     }
 
-    private static List<AxisAlignedBB> getCollisionBoxList(IBlockState bstate)
-    {
+    private static List<AxisAlignedBB> getCollisionBoxList(IBlockState bstate) {
         List<AxisAlignedBB> list = Lists.<AxisAlignedBB>newArrayList();
         boolean flag = bstate.getValue(HALF) == BlockStairs.EnumHalf.TOP;
         list.add(flag ? AABB_SLAB_TOP : AABB_SLAB_BOTTOM);
-        BlockStairs.EnumShape blockstairs$enumshape = (BlockStairs.EnumShape)bstate.getValue(SHAPE);
+        BlockStairs.EnumShape blockstairs$enumshape = (BlockStairs.EnumShape) bstate.getValue(SHAPE);
 
-        if (blockstairs$enumshape == BlockStairs.EnumShape.STRAIGHT || blockstairs$enumshape == BlockStairs.EnumShape.INNER_LEFT || blockstairs$enumshape == BlockStairs.EnumShape.INNER_RIGHT)
-        {
+        if (blockstairs$enumshape == BlockStairs.EnumShape.STRAIGHT || blockstairs$enumshape == BlockStairs.EnumShape.INNER_LEFT || blockstairs$enumshape == BlockStairs.EnumShape.INNER_RIGHT) {
             list.add(getCollQuarterBlock(bstate));
         }
 
-        if (blockstairs$enumshape != BlockStairs.EnumShape.STRAIGHT)
-        {
+        if (blockstairs$enumshape != BlockStairs.EnumShape.STRAIGHT) {
             list.add(getCollEighthBlock(bstate));
         }
 
         return list;
     }
 
-    private static AxisAlignedBB getCollQuarterBlock(IBlockState bstate)
-    {
+    private static AxisAlignedBB getCollQuarterBlock(IBlockState bstate) {
         boolean flag = bstate.getValue(HALF) == BlockStairs.EnumHalf.TOP;
 
-        switch ((EnumFacing)bstate.getValue(FACING))
-        {
+        switch ((EnumFacing) bstate.getValue(FACING)) {
             case NORTH:
             default:
                 return flag ? AABB_QTR_BOT_NORTH : AABB_QTR_TOP_NORTH;
@@ -122,13 +108,11 @@
         }
     }
 
-    private static AxisAlignedBB getCollEighthBlock(IBlockState bstate)
-    {
-        EnumFacing enumfacing = (EnumFacing)bstate.getValue(FACING);
+    private static AxisAlignedBB getCollEighthBlock(IBlockState bstate) {
+        EnumFacing enumfacing = (EnumFacing) bstate.getValue(FACING);
         EnumFacing enumfacing1;
 
-        switch ((BlockStairs.EnumShape)bstate.getValue(SHAPE))
-        {
+        switch ((BlockStairs.EnumShape) bstate.getValue(SHAPE)) {
             case OUTER_LEFT:
             default:
                 enumfacing1 = enumfacing;
@@ -145,8 +129,7 @@
 
         boolean flag = bstate.getValue(HALF) == BlockStairs.EnumHalf.TOP;
 
-        switch (enumfacing1)
-        {
+        switch (enumfacing1) {
             case NORTH:
             default:
                 return flag ? AABB_OCT_BOT_NW : AABB_OCT_TOP_NW;
@@ -159,24 +142,18 @@
         }
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         state = this.getActualState(state, worldIn, pos);
 
-        if (face.getAxis() == EnumFacing.Axis.Y)
-        {
+        if (face.getAxis() == EnumFacing.Axis.Y) {
             return face == EnumFacing.UP == (state.getValue(HALF) == BlockStairs.EnumHalf.TOP) ? BlockFaceShape.SOLID : BlockFaceShape.UNDEFINED;
-        }
-        else
-        {
-            BlockStairs.EnumShape blockstairs$enumshape = (BlockStairs.EnumShape)state.getValue(SHAPE);
+        } else {
+            BlockStairs.EnumShape blockstairs$enumshape = (BlockStairs.EnumShape) state.getValue(SHAPE);
 
-            if (blockstairs$enumshape != BlockStairs.EnumShape.OUTER_LEFT && blockstairs$enumshape != BlockStairs.EnumShape.OUTER_RIGHT)
-            {
-                EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+            if (blockstairs$enumshape != BlockStairs.EnumShape.OUTER_LEFT && blockstairs$enumshape != BlockStairs.EnumShape.OUTER_RIGHT) {
+                EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
 
-                switch (blockstairs$enumshape)
-                {
+                switch (blockstairs$enumshape) {
                     case INNER_RIGHT:
                         return enumfacing != face && enumfacing != face.rotateYCCW() ? BlockFaceShape.UNDEFINED : BlockFaceShape.SOLID;
                     case INNER_LEFT:
@@ -186,157 +163,127 @@
                     default:
                         return BlockFaceShape.UNDEFINED;
                 }
-            }
-            else
-            {
+            } else {
                 return BlockFaceShape.UNDEFINED;
             }
         }
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
-    {
+    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand) {
         this.modelBlock.randomDisplayTick(stateIn, worldIn, pos, rand);
     }
 
-    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn)
-    {
+    public void onBlockClicked(World worldIn, BlockPos pos, EntityPlayer playerIn) {
         this.modelBlock.onBlockClicked(worldIn, pos, playerIn);
     }
 
-    public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockDestroyedByPlayer(World worldIn, BlockPos pos, IBlockState state) {
         this.modelBlock.onBlockDestroyedByPlayer(worldIn, pos, state);
     }
 
     @SideOnly(Side.CLIENT)
-    public int getPackedLightmapCoords(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
+    public int getPackedLightmapCoords(IBlockState state, IBlockAccess source, BlockPos pos) {
         return this.modelState.getPackedLightmapCoords(source, pos);
     }
 
-    public float getExplosionResistance(Entity exploder)
-    {
+    public float getExplosionResistance(Entity exploder) {
         return this.modelBlock.getExplosionResistance(exploder);
     }
 
-    public int tickRate(World worldIn)
-    {
+    public int tickRate(World worldIn) {
         return this.modelBlock.tickRate(worldIn);
     }
 
-    public Vec3d modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3d motion)
-    {
+    public Vec3d modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3d motion) {
         return this.modelBlock.modifyAcceleration(worldIn, pos, entityIn, motion);
     }
 
     @SideOnly(Side.CLIENT)
-    public BlockRenderLayer getBlockLayer()
-    {
+    public BlockRenderLayer getBlockLayer() {
         return this.modelBlock.getBlockLayer();
     }
 
     @SideOnly(Side.CLIENT)
-    public AxisAlignedBB getSelectedBoundingBox(IBlockState state, World worldIn, BlockPos pos)
-    {
+    public AxisAlignedBB getSelectedBoundingBox(IBlockState state, World worldIn, BlockPos pos) {
         return this.modelState.getSelectedBoundingBox(worldIn, pos);
     }
 
-    public boolean isCollidable()
-    {
+    public boolean isCollidable() {
         return this.modelBlock.isCollidable();
     }
 
-    public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid)
-    {
+    public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid) {
         return this.modelBlock.canCollideCheck(state, hitIfLiquid);
     }
 
-    public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
-    {
+    public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {
         return this.modelBlock.canPlaceBlockAt(worldIn, pos);
     }
 
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {
         this.modelState.neighborChanged(worldIn, pos, Blocks.AIR, pos);
         this.modelBlock.onBlockAdded(worldIn, pos, this.modelState);
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         this.modelBlock.breakBlock(worldIn, pos, this.modelState);
     }
 
-    public void onEntityWalk(World worldIn, BlockPos pos, Entity entityIn)
-    {
+    public void onEntityWalk(World worldIn, BlockPos pos, Entity entityIn) {
         this.modelBlock.onEntityWalk(worldIn, pos, entityIn);
     }
 
-    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
-    {
+    public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand) {
         this.modelBlock.updateTick(worldIn, pos, state, rand);
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
         return this.modelBlock.onBlockActivated(worldIn, pos, this.modelState, playerIn, hand, EnumFacing.DOWN, 0.0F, 0.0F, 0.0F);
     }
 
-    public void onBlockDestroyedByExplosion(World worldIn, BlockPos pos, Explosion explosionIn)
-    {
+    public void onBlockDestroyedByExplosion(World worldIn, BlockPos pos, Explosion explosionIn) {
         this.modelBlock.onBlockDestroyedByExplosion(worldIn, pos, explosionIn);
     }
 
-    public boolean isTopSolid(IBlockState state)
-    {
+    public boolean isTopSolid(IBlockState state) {
         return state.getValue(HALF) == BlockStairs.EnumHalf.TOP;
     }
 
-    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return this.modelBlock.getMapColor(this.modelState, worldIn, pos);
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         IBlockState iblockstate = super.getStateForPlacement(worldIn, pos, facing, hitX, hitY, hitZ, meta, placer);
         iblockstate = iblockstate.withProperty(FACING, placer.getHorizontalFacing()).withProperty(SHAPE, BlockStairs.EnumShape.STRAIGHT);
-        return facing != EnumFacing.DOWN && (facing == EnumFacing.UP || (double)hitY <= 0.5D) ? iblockstate.withProperty(HALF, BlockStairs.EnumHalf.BOTTOM) : iblockstate.withProperty(HALF, BlockStairs.EnumHalf.TOP);
+        return facing != EnumFacing.DOWN && (facing == EnumFacing.UP || (double) hitY <= 0.5D) ? iblockstate.withProperty(HALF, BlockStairs.EnumHalf.BOTTOM) : iblockstate.withProperty(HALF, BlockStairs.EnumHalf.TOP);
     }
 
     @Nullable
-    public RayTraceResult collisionRayTrace(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end)
-    {
+    public RayTraceResult collisionRayTrace(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end) {
         List<RayTraceResult> list = Lists.<RayTraceResult>newArrayList();
 
-        for (AxisAlignedBB axisalignedbb : getCollisionBoxList(this.getActualState(blockState, worldIn, pos)))
-        {
+        for (AxisAlignedBB axisalignedbb : getCollisionBoxList(this.getActualState(blockState, worldIn, pos))) {
             list.add(this.rayTrace(pos, start, end, axisalignedbb));
         }
 
         RayTraceResult raytraceresult1 = null;
         double d1 = 0.0D;
 
-        for (RayTraceResult raytraceresult : list)
-        {
-            if (raytraceresult != null)
-            {
+        for (RayTraceResult raytraceresult : list) {
+            if (raytraceresult != null) {
                 double d0 = raytraceresult.hitVec.squareDistanceTo(end);
 
-                if (d0 > d1)
-                {
+                if (d0 > d1) {
                     raytraceresult1 = raytraceresult;
                     d1 = d0;
                 }
@@ -346,44 +293,36 @@
         return raytraceresult1;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         IBlockState iblockstate = this.getDefaultState().withProperty(HALF, (meta & 4) > 0 ? BlockStairs.EnumHalf.TOP : BlockStairs.EnumHalf.BOTTOM);
         iblockstate = iblockstate.withProperty(FACING, EnumFacing.getFront(5 - (meta & 3)));
         return iblockstate;
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         int i = 0;
 
-        if (state.getValue(HALF) == BlockStairs.EnumHalf.TOP)
-        {
+        if (state.getValue(HALF) == BlockStairs.EnumHalf.TOP) {
             i |= 4;
         }
 
-        i = i | 5 - ((EnumFacing)state.getValue(FACING)).getIndex();
+        i = i | 5 - ((EnumFacing) state.getValue(FACING)).getIndex();
         return i;
     }
 
-    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
-    {
+    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
         return state.withProperty(SHAPE, getStairsShape(state, worldIn, pos));
     }
 
-    private static BlockStairs.EnumShape getStairsShape(IBlockState p_185706_0_, IBlockAccess p_185706_1_, BlockPos p_185706_2_)
-    {
-        EnumFacing enumfacing = (EnumFacing)p_185706_0_.getValue(FACING);
+    private static BlockStairs.EnumShape getStairsShape(IBlockState p_185706_0_, IBlockAccess p_185706_1_, BlockPos p_185706_2_) {
+        EnumFacing enumfacing = (EnumFacing) p_185706_0_.getValue(FACING);
         IBlockState iblockstate = p_185706_1_.getBlockState(p_185706_2_.offset(enumfacing));
 
-        if (isBlockStairs(iblockstate) && p_185706_0_.getValue(HALF) == iblockstate.getValue(HALF))
-        {
-            EnumFacing enumfacing1 = (EnumFacing)iblockstate.getValue(FACING);
+        if (isBlockStairs(iblockstate) && p_185706_0_.getValue(HALF) == iblockstate.getValue(HALF)) {
+            EnumFacing enumfacing1 = (EnumFacing) iblockstate.getValue(FACING);
 
-            if (enumfacing1.getAxis() != ((EnumFacing)p_185706_0_.getValue(FACING)).getAxis() && isDifferentStairs(p_185706_0_, p_185706_1_, p_185706_2_, enumfacing1.getOpposite()))
-            {
-                if (enumfacing1 == enumfacing.rotateYCCW())
-                {
+            if (enumfacing1.getAxis() != ((EnumFacing) p_185706_0_.getValue(FACING)).getAxis() && isDifferentStairs(p_185706_0_, p_185706_1_, p_185706_2_, enumfacing1.getOpposite())) {
+                if (enumfacing1 == enumfacing.rotateYCCW()) {
                     return BlockStairs.EnumShape.OUTER_LEFT;
                 }
 
@@ -393,14 +332,11 @@
 
         IBlockState iblockstate1 = p_185706_1_.getBlockState(p_185706_2_.offset(enumfacing.getOpposite()));
 
-        if (isBlockStairs(iblockstate1) && p_185706_0_.getValue(HALF) == iblockstate1.getValue(HALF))
-        {
-            EnumFacing enumfacing2 = (EnumFacing)iblockstate1.getValue(FACING);
+        if (isBlockStairs(iblockstate1) && p_185706_0_.getValue(HALF) == iblockstate1.getValue(HALF)) {
+            EnumFacing enumfacing2 = (EnumFacing) iblockstate1.getValue(FACING);
 
-            if (enumfacing2.getAxis() != ((EnumFacing)p_185706_0_.getValue(FACING)).getAxis() && isDifferentStairs(p_185706_0_, p_185706_1_, p_185706_2_, enumfacing2))
-            {
-                if (enumfacing2 == enumfacing.rotateYCCW())
-                {
+            if (enumfacing2.getAxis() != ((EnumFacing) p_185706_0_.getValue(FACING)).getAxis() && isDifferentStairs(p_185706_0_, p_185706_1_, p_185706_2_, enumfacing2)) {
+                if (enumfacing2 == enumfacing.rotateYCCW()) {
                     return BlockStairs.EnumShape.INNER_LEFT;
                 }
 
@@ -411,36 +347,29 @@
         return BlockStairs.EnumShape.STRAIGHT;
     }
 
-    private static boolean isDifferentStairs(IBlockState p_185704_0_, IBlockAccess p_185704_1_, BlockPos p_185704_2_, EnumFacing p_185704_3_)
-    {
+    private static boolean isDifferentStairs(IBlockState p_185704_0_, IBlockAccess p_185704_1_, BlockPos p_185704_2_, EnumFacing p_185704_3_) {
         IBlockState iblockstate = p_185704_1_.getBlockState(p_185704_2_.offset(p_185704_3_));
         return !isBlockStairs(iblockstate) || iblockstate.getValue(FACING) != p_185704_0_.getValue(FACING) || iblockstate.getValue(HALF) != p_185704_0_.getValue(HALF);
     }
 
-    public static boolean isBlockStairs(IBlockState state)
-    {
+    public static boolean isBlockStairs(IBlockState state) {
         return state.getBlock() instanceof BlockStairs;
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.withProperty(FACING, rot.rotate((EnumFacing) state.getValue(FACING)));
     }
 
     @SuppressWarnings("incomplete-switch")
-    public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
-    {
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
-        BlockStairs.EnumShape blockstairs$enumshape = (BlockStairs.EnumShape)state.getValue(SHAPE);
+    public IBlockState withMirror(IBlockState state, Mirror mirrorIn) {
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
+        BlockStairs.EnumShape blockstairs$enumshape = (BlockStairs.EnumShape) state.getValue(SHAPE);
 
-        switch (mirrorIn)
-        {
+        switch (mirrorIn) {
             case LEFT_RIGHT:
 
-                if (enumfacing.getAxis() == EnumFacing.Axis.Z)
-                {
-                    switch (blockstairs$enumshape)
-                    {
+                if (enumfacing.getAxis() == EnumFacing.Axis.Z) {
+                    switch (blockstairs$enumshape) {
                         case OUTER_LEFT:
                             return state.withRotation(Rotation.CLOCKWISE_180).withProperty(SHAPE, BlockStairs.EnumShape.OUTER_RIGHT);
                         case OUTER_RIGHT:
@@ -457,10 +386,8 @@
                 break;
             case FRONT_BACK:
 
-                if (enumfacing.getAxis() == EnumFacing.Axis.X)
-                {
-                    switch (blockstairs$enumshape)
-                    {
+                if (enumfacing.getAxis() == EnumFacing.Axis.X) {
+                    switch (blockstairs$enumshape) {
                         case OUTER_LEFT:
                             return state.withRotation(Rotation.CLOCKWISE_180).withProperty(SHAPE, BlockStairs.EnumShape.OUTER_RIGHT);
                         case OUTER_RIGHT:
@@ -478,18 +405,16 @@
         return super.withMirror(state, mirrorIn);
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {FACING, HALF, SHAPE});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{FACING, HALF, SHAPE});
     }
 
     @Override
-    public boolean doesSideBlockRendering(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing face)
-    {
+    public boolean doesSideBlockRendering(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing face) {
         if (net.minecraftforge.common.ForgeModContainer.disableStairSlabCulling)
             return super.doesSideBlockRendering(state, world, pos, face);
 
-        if ( state.isOpaqueCube() )
+        if (state.isOpaqueCube())
             return true;
 
         state = this.getActualState(state, world, pos);
@@ -506,31 +431,26 @@
         return false;
     }
 
-    public static enum EnumHalf implements IStringSerializable
-    {
+    public static enum EnumHalf implements IStringSerializable {
         TOP("top"),
         BOTTOM("bottom");
 
         private final String name;
 
-        private EnumHalf(String name)
-        {
+        private EnumHalf(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
 
-    public static enum EnumShape implements IStringSerializable
-    {
+    public static enum EnumShape implements IStringSerializable {
         STRAIGHT("straight"),
         INNER_LEFT("inner_left"),
         INNER_RIGHT("inner_right"),
@@ -539,18 +459,15 @@
 
         private final String name;
 
-        private EnumShape(String name)
-        {
+        private EnumShape(String name) {
             this.name = name;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
     }
