--- ../src-base/minecraft/net/minecraft/block/BlockJukebox.java
+++ ../src-work/minecraft/net/minecraft/block/BlockJukebox.java
@@ -24,70 +24,57 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
-public class BlockJukebox extends BlockContainer
-{
+public class BlockJukebox extends BlockContainer {
     public static final PropertyBool HAS_RECORD = PropertyBool.create("has_record");
 
-    public static void registerFixesJukebox(DataFixer fixer)
-    {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackData(BlockJukebox.TileEntityJukebox.class, new String[] {"RecordItem"}));
+    public static void registerFixesJukebox(DataFixer fixer) {
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackData(BlockJukebox.TileEntityJukebox.class, new String[]{"RecordItem"}));
     }
 
-    protected BlockJukebox()
-    {
+    protected BlockJukebox() {
         super(Material.WOOD, MapColor.DIRT);
         this.setDefaultState(this.blockState.getBaseState().withProperty(HAS_RECORD, Boolean.valueOf(false)));
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (((Boolean)state.getValue(HAS_RECORD)).booleanValue())
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (((Boolean) state.getValue(HAS_RECORD)).booleanValue()) {
             this.dropRecord(worldIn, pos, state);
             state = state.withProperty(HAS_RECORD, Boolean.valueOf(false));
             worldIn.setBlockState(pos, state, 2);
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public void insertRecord(World worldIn, BlockPos pos, IBlockState state, ItemStack recordStack)
-    {
+    public void insertRecord(World worldIn, BlockPos pos, IBlockState state, ItemStack recordStack) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof BlockJukebox.TileEntityJukebox)
-        {
-            ((BlockJukebox.TileEntityJukebox)tileentity).setRecord(recordStack.copy());
+        if (tileentity instanceof BlockJukebox.TileEntityJukebox) {
+            ((BlockJukebox.TileEntityJukebox) tileentity).setRecord(recordStack.copy());
             worldIn.setBlockState(pos, state.withProperty(HAS_RECORD, Boolean.valueOf(true)), 2);
         }
     }
 
-    private void dropRecord(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void dropRecord(World worldIn, BlockPos pos, IBlockState state) {
+        if (!worldIn.isRemote) {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
-            if (tileentity instanceof BlockJukebox.TileEntityJukebox)
-            {
-                BlockJukebox.TileEntityJukebox blockjukebox$tileentityjukebox = (BlockJukebox.TileEntityJukebox)tileentity;
+            if (tileentity instanceof BlockJukebox.TileEntityJukebox) {
+                BlockJukebox.TileEntityJukebox blockjukebox$tileentityjukebox = (BlockJukebox.TileEntityJukebox) tileentity;
                 ItemStack itemstack = blockjukebox$tileentityjukebox.getRecord();
 
-                if (!itemstack.isEmpty())
-                {
+                if (!itemstack.isEmpty()) {
                     worldIn.playEvent(1010, pos, 0);
-                    worldIn.playRecord(pos, (SoundEvent)null);
+                    worldIn.playRecord(pos, (SoundEvent) null);
                     blockjukebox$tileentityjukebox.setRecord(ItemStack.EMPTY);
                     float f = 0.7F;
-                    double d0 = (double)(worldIn.rand.nextFloat() * 0.7F) + 0.15000000596046448D;
-                    double d1 = (double)(worldIn.rand.nextFloat() * 0.7F) + 0.06000000238418579D + 0.6D;
-                    double d2 = (double)(worldIn.rand.nextFloat() * 0.7F) + 0.15000000596046448D;
+                    double d0 = (double) (worldIn.rand.nextFloat() * 0.7F) + 0.15000000596046448D;
+                    double d1 = (double) (worldIn.rand.nextFloat() * 0.7F) + 0.06000000238418579D + 0.6D;
+                    double d2 = (double) (worldIn.rand.nextFloat() * 0.7F) + 0.15000000596046448D;
                     ItemStack itemstack1 = itemstack.copy();
-                    EntityItem entityitem = new EntityItem(worldIn, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, itemstack1);
+                    EntityItem entityitem = new EntityItem(worldIn, (double) pos.getX() + d0, (double) pos.getY() + d1, (double) pos.getZ() + d2, itemstack1);
                     entityitem.setDefaultPickupDelay();
                     worldIn.spawnEntity(entityitem);
                 }
@@ -95,40 +82,32 @@
         }
     }
 
-    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
-    {
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {
         this.dropRecord(worldIn, pos, state);
         super.breakBlock(worldIn, pos, state);
     }
 
-    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
-    {
-        if (!worldIn.isRemote)
-        {
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (!worldIn.isRemote) {
             super.dropBlockAsItemWithChance(worldIn, pos, state, chance, 0);
         }
     }
 
-    public TileEntity createNewTileEntity(World worldIn, int meta)
-    {
+    public TileEntity createNewTileEntity(World worldIn, int meta) {
         return new BlockJukebox.TileEntityJukebox();
     }
 
-    public boolean hasComparatorInputOverride(IBlockState state)
-    {
+    public boolean hasComparatorInputOverride(IBlockState state) {
         return true;
     }
 
-    public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos)
-    {
+    public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos) {
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (tileentity instanceof BlockJukebox.TileEntityJukebox)
-        {
-            ItemStack itemstack = ((BlockJukebox.TileEntityJukebox)tileentity).getRecord();
+        if (tileentity instanceof BlockJukebox.TileEntityJukebox) {
+            ItemStack itemstack = ((BlockJukebox.TileEntityJukebox) tileentity).getRecord();
 
-            if (!itemstack.isEmpty())
-            {
+            if (!itemstack.isEmpty()) {
                 return Item.getIdFromItem(itemstack.getItem()) + 1 - Item.getIdFromItem(Items.RECORD_13);
             }
         }
@@ -136,65 +115,57 @@
         return 0;
     }
 
-    public EnumBlockRenderType getRenderType(IBlockState state)
-    {
+    public EnumBlockRenderType getRenderType(IBlockState state) {
         return EnumBlockRenderType.MODEL;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(HAS_RECORD, Boolean.valueOf(meta > 0));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
-        return ((Boolean)state.getValue(HAS_RECORD)).booleanValue() ? 1 : 0;
+    public int getMetaFromState(IBlockState state) {
+        return ((Boolean) state.getValue(HAS_RECORD)).booleanValue() ? 1 : 0;
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {HAS_RECORD});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{HAS_RECORD});
     }
 
-    public static class TileEntityJukebox extends TileEntity
-        {
-            private ItemStack record = ItemStack.EMPTY;
+    public static class TileEntityJukebox extends TileEntity {
+        private ItemStack record = ItemStack.EMPTY;
 
-            public void readFromNBT(NBTTagCompound compound)
-            {
-                super.readFromNBT(compound);
+        public void readFromNBT(NBTTagCompound compound) {
+            super.readFromNBT(compound);
 
-                if (compound.hasKey("RecordItem", 10))
-                {
-                    this.setRecord(new ItemStack(compound.getCompoundTag("RecordItem")));
-                }
-                else if (compound.getInteger("Record") > 0)
-                {
-                    this.setRecord(new ItemStack(Item.getItemById(compound.getInteger("Record"))));
-                }
+            if (compound.hasKey("RecordItem", 10)) {
+                this.setRecord(new ItemStack(compound.getCompoundTag("RecordItem")));
+            } else if (compound.getInteger("Record") > 0) {
+                this.setRecord(new ItemStack(Item.getItemById(compound.getInteger("Record"))));
             }
+        }
 
-            public NBTTagCompound writeToNBT(NBTTagCompound compound)
-            {
-                super.writeToNBT(compound);
+        public NBTTagCompound writeToNBT(NBTTagCompound compound) {
+            super.writeToNBT(compound);
 
-                if (!this.getRecord().isEmpty())
-                {
-                    compound.setTag("RecordItem", this.getRecord().writeToNBT(new NBTTagCompound()));
-                }
-
-                return compound;
+            if (!this.getRecord().isEmpty()) {
+                compound.setTag("RecordItem", this.getRecord().writeToNBT(new NBTTagCompound()));
             }
 
-            public ItemStack getRecord()
-            {
-                return this.record;
-            }
+            return compound;
+        }
 
-            public void setRecord(ItemStack recordStack)
-            {
-                this.record = recordStack;
-                this.markDirty();
+        public ItemStack getRecord() {
+            return this.record;
+        }
+
+        public void setRecord(ItemStack recordStack) {
+            // CraftBukkit start - There can only be one
+            if (!recordStack.isEmpty()) {
+                recordStack.setCount(1);
             }
+            // CraftBukkit end
+            this.record = recordStack;
+            this.markDirty();
         }
+    }
 }
