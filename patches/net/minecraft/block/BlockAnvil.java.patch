--- ../src-base/minecraft/net/minecraft/block/BlockAnvil.java
+++ ../src-work/minecraft/net/minecraft/block/BlockAnvil.java
@@ -32,53 +32,42 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class BlockAnvil extends BlockFalling
-{
+public class BlockAnvil extends BlockFalling {
     public static final PropertyDirection FACING = BlockHorizontal.FACING;
     public static final PropertyInteger DAMAGE = PropertyInteger.create("damage", 0, 2);
     protected static final AxisAlignedBB X_AXIS_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.125D, 1.0D, 1.0D, 0.875D);
     protected static final AxisAlignedBB Z_AXIS_AABB = new AxisAlignedBB(0.125D, 0.0D, 0.0D, 0.875D, 1.0D, 1.0D);
     protected static final Logger LOGGER = LogManager.getLogger();
 
-    protected BlockAnvil()
-    {
+    protected BlockAnvil() {
         super(Material.ANVIL);
         this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(DAMAGE, Integer.valueOf(0)));
         this.setLightOpacity(0);
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    public boolean isFullCube(IBlockState state)
-    {
+    public boolean isFullCube(IBlockState state) {
         return false;
     }
 
-    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
-    {
+    public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face) {
         return BlockFaceShape.UNDEFINED;
     }
 
-    public boolean isOpaqueCube(IBlockState state)
-    {
+    public boolean isOpaqueCube(IBlockState state) {
         return false;
     }
 
-    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
-    {
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
         EnumFacing enumfacing = placer.getHorizontalFacing().rotateY();
 
-        try
-        {
+        try {
             return super.getStateForPlacement(worldIn, pos, facing, hitX, hitY, hitZ, meta, placer).withProperty(FACING, enumfacing).withProperty(DAMAGE, Integer.valueOf(meta >> 2));
-        }
-        catch (IllegalArgumentException var11)
-        {
-            if (!worldIn.isRemote)
-            {
+        } catch (IllegalArgumentException var11) {
+            if (!worldIn.isRemote) {
                 LOGGER.warn(String.format("Invalid damage property for anvil at %s. Found %d, must be in [0, 1, 2]", pos, meta >> 2));
 
-                if (placer instanceof EntityPlayer)
-                {
+                if (placer instanceof EntityPlayer) {
                     placer.sendMessage(new TextComponentTranslation("Invalid damage property. Please pick in [0, 1, 2]", new Object[0]));
                 }
             }
@@ -87,112 +76,92 @@
         }
     }
 
-    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (!worldIn.isRemote)
-        {
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (!worldIn.isRemote) {
             playerIn.displayGui(new BlockAnvil.Anvil(worldIn, pos));
         }
 
         return true;
     }
 
-    public int damageDropped(IBlockState state)
-    {
-        return ((Integer)state.getValue(DAMAGE)).intValue();
+    public int damageDropped(IBlockState state) {
+        return ((Integer) state.getValue(DAMAGE)).intValue();
     }
 
-    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
-    {
-        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
+        EnumFacing enumfacing = (EnumFacing) state.getValue(FACING);
         return enumfacing.getAxis() == EnumFacing.Axis.X ? X_AXIS_AABB : Z_AXIS_AABB;
     }
 
-    public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
-    {
+    public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items) {
         items.add(new ItemStack(this));
         items.add(new ItemStack(this, 1, 1));
         items.add(new ItemStack(this, 1, 2));
     }
 
-    protected void onStartFalling(EntityFallingBlock fallingEntity)
-    {
+    protected void onStartFalling(EntityFallingBlock fallingEntity) {
         fallingEntity.setHurtEntities(true);
     }
 
-    public void onEndFalling(World worldIn, BlockPos pos, IBlockState p_176502_3_, IBlockState p_176502_4_)
-    {
+    public void onEndFalling(World worldIn, BlockPos pos, IBlockState p_176502_3_, IBlockState p_176502_4_) {
         worldIn.playEvent(1031, pos, 0);
     }
 
-    public void onBroken(World worldIn, BlockPos pos)
-    {
+    public void onBroken(World worldIn, BlockPos pos) {
         worldIn.playEvent(1029, pos, 0);
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
-    {
+    public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
         return true;
     }
 
-    public IBlockState getStateFromMeta(int meta)
-    {
+    public IBlockState getStateFromMeta(int meta) {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getHorizontal(meta & 3)).withProperty(DAMAGE, Integer.valueOf((meta & 15) >> 2));
     }
 
-    public int getMetaFromState(IBlockState state)
-    {
+    public int getMetaFromState(IBlockState state) {
         int i = 0;
-        i = i | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
-        i = i | ((Integer)state.getValue(DAMAGE)).intValue() << 2;
+        i = i | ((EnumFacing) state.getValue(FACING)).getHorizontalIndex();
+        i = i | ((Integer) state.getValue(DAMAGE)).intValue() << 2;
         return i;
     }
 
-    public IBlockState withRotation(IBlockState state, Rotation rot)
-    {
-        return state.getBlock() != this ? state : state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
+    public IBlockState withRotation(IBlockState state, Rotation rot) {
+        return state.getBlock() != this ? state : state.withProperty(FACING, rot.rotate((EnumFacing) state.getValue(FACING)));
     }
 
-    protected BlockStateContainer createBlockState()
-    {
-        return new BlockStateContainer(this, new IProperty[] {FACING, DAMAGE});
+    protected BlockStateContainer createBlockState() {
+        return new BlockStateContainer(this, new IProperty[]{FACING, DAMAGE});
     }
 
-    public static class Anvil implements IInteractionObject
-        {
-            private final World world;
-            private final BlockPos position;
+    public static class Anvil implements IInteractionObject {
+        private final World world;
+        private final BlockPos position;
 
-            public Anvil(World worldIn, BlockPos pos)
-            {
-                this.world = worldIn;
-                this.position = pos;
-            }
+        public Anvil(World worldIn, BlockPos pos) {
+            this.world = worldIn;
+            this.position = pos;
+        }
 
-            public String getName()
-            {
-                return "anvil";
-            }
+        public String getName() {
+            return "anvil";
+        }
 
-            public boolean hasCustomName()
-            {
-                return false;
-            }
+        public boolean hasCustomName() {
+            return false;
+        }
 
-            public ITextComponent getDisplayName()
-            {
-                return new TextComponentTranslation(Blocks.ANVIL.getUnlocalizedName() + ".name", new Object[0]);
-            }
+        public ITextComponent getDisplayName() {
+            return new TextComponentTranslation(Blocks.ANVIL.getUnlocalizedName() + ".name", new Object[0]);
+        }
 
-            public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
-            {
-                return new ContainerRepair(playerInventory, this.world, this.position, playerIn);
-            }
+        public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn) {
+            return new ContainerRepair(playerInventory, this.world, this.position, playerIn);
+        }
 
-            public String getGuiID()
-            {
-                return "minecraft:anvil";
-            }
+        public String getGuiID() {
+            return "minecraft:anvil";
         }
+    }
 }
