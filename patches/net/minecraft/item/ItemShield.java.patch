--- ../src-base/minecraft/net/minecraft/item/ItemShield.java
+++ ../src-work/minecraft/net/minecraft/item/ItemShield.java
@@ -1,7 +1,5 @@
 package net.minecraft.item;
 
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.BlockDispenser;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.creativetab.CreativeTabs;
@@ -18,62 +16,52 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemShield extends Item
-{
-    public ItemShield()
-    {
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class ItemShield extends Item {
+    public ItemShield() {
         this.maxStackSize = 1;
         this.setCreativeTab(CreativeTabs.COMBAT);
         this.setMaxDamage(336);
-        this.addPropertyOverride(new ResourceLocation("blocking"), new IItemPropertyGetter()
-        {
+        this.addPropertyOverride(new ResourceLocation("blocking"), new IItemPropertyGetter() {
             @SideOnly(Side.CLIENT)
-            public float apply(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entityIn)
-            {
+            public float apply(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entityIn) {
                 return entityIn != null && entityIn.isHandActive() && entityIn.getActiveItemStack() == stack ? 1.0F : 0.0F;
             }
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(this, ItemArmor.DISPENSER_BEHAVIOR);
     }
 
-    public String getItemStackDisplayName(ItemStack stack)
-    {
-        if (stack.getSubCompound("BlockEntityTag") != null)
-        {
+    public String getItemStackDisplayName(ItemStack stack) {
+        if (stack.getSubCompound("BlockEntityTag") != null) {
             EnumDyeColor enumdyecolor = TileEntityBanner.getColor(stack);
             return I18n.translateToLocal("item.shield." + enumdyecolor.getUnlocalizedName() + ".name");
-        }
-        else
-        {
+        } else {
             return I18n.translateToLocal("item.shield.name");
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn)
-    {
+    public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn) {
         ItemBanner.appendHoverTextFromTileEntityTag(stack, tooltip);
     }
 
-    public EnumAction getItemUseAction(ItemStack stack)
-    {
+    public EnumAction getItemUseAction(ItemStack stack) {
         return EnumAction.BLOCK;
     }
 
-    public int getMaxItemUseDuration(ItemStack stack)
-    {
+    public int getMaxItemUseDuration(ItemStack stack) {
         return 72000;
     }
 
-    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn)
-    {
+    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn) {
         ItemStack itemstack = playerIn.getHeldItem(handIn);
         playerIn.setActiveHand(handIn);
         return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, itemstack);
     }
 
-    public boolean getIsRepairable(ItemStack toRepair, ItemStack repair)
-    {
+    public boolean getIsRepairable(ItemStack toRepair, ItemStack repair) {
         return repair.getItem() == Item.getItemFromBlock(Blocks.PLANKS) ? true : super.getIsRepairable(toRepair, repair);
     }
 }
