--- ../src-base/minecraft/net/minecraft/item/ItemSkull.java
+++ ../src-work/minecraft/net/minecraft/item/ItemSkull.java
@@ -1,7 +1,6 @@
 package net.minecraft.item;
 
 import com.mojang.authlib.GameProfile;
-import java.util.UUID;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockSkull;
@@ -11,6 +10,7 @@
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.nbt.NBTTagList;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntitySkull;
@@ -24,27 +24,22 @@
 import net.minecraft.world.World;
 import org.apache.commons.lang3.StringUtils;
 
-public class ItemSkull extends Item
-{
-    private static final String[] SKULL_TYPES = new String[] {"skeleton", "wither", "zombie", "char", "creeper", "dragon"};
+import java.util.UUID;
 
-    public ItemSkull()
-    {
+public class ItemSkull extends Item {
+    private static final String[] SKULL_TYPES = new String[]{"skeleton", "wither", "zombie", "char", "creeper", "dragon"};
+
+    public ItemSkull() {
         this.setCreativeTab(CreativeTabs.DECORATIONS);
         this.setMaxDamage(0);
         this.setHasSubtypes(true);
     }
 
-    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (facing == EnumFacing.DOWN)
-        {
+    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (facing == EnumFacing.DOWN) {
             return EnumActionResult.FAIL;
-        }
-        else
-        {
-            if (worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos))
-            {
+        } else {
+            if (worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos)) {
                 facing = EnumFacing.UP;
                 pos = pos.down();
             }
@@ -52,10 +47,8 @@
             Block block = iblockstate.getBlock();
             boolean flag = block.isReplaceable(worldIn, pos);
 
-            if (!flag)
-            {
-                if (!worldIn.getBlockState(pos).getMaterial().isSolid() && !worldIn.isSideSolid(pos, facing, true))
-                {
+            if (!flag) {
+                if (!worldIn.getBlockState(pos).getMaterial().isSolid() && !worldIn.isSideSolid(pos, facing, true)) {
                     return EnumActionResult.FAIL;
                 }
 
@@ -64,50 +57,37 @@
 
             ItemStack itemstack = player.getHeldItem(hand);
 
-            if (player.canPlayerEdit(pos, facing, itemstack) && Blocks.SKULL.canPlaceBlockAt(worldIn, pos))
-            {
-                if (worldIn.isRemote)
-                {
+            if (player.canPlayerEdit(pos, facing, itemstack) && Blocks.SKULL.canPlaceBlockAt(worldIn, pos)) {
+                if (worldIn.isRemote) {
                     return EnumActionResult.SUCCESS;
-                }
-                else
-                {
+                } else {
                     worldIn.setBlockState(pos, Blocks.SKULL.getDefaultState().withProperty(BlockSkull.FACING, facing), 11);
                     int i = 0;
 
-                    if (facing == EnumFacing.UP)
-                    {
-                        i = MathHelper.floor((double)(player.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
+                    if (facing == EnumFacing.UP) {
+                        i = MathHelper.floor((double) (player.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
                     }
 
                     TileEntity tileentity = worldIn.getTileEntity(pos);
 
-                    if (tileentity instanceof TileEntitySkull)
-                    {
-                        TileEntitySkull tileentityskull = (TileEntitySkull)tileentity;
+                    if (tileentity instanceof TileEntitySkull) {
+                        TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
 
-                        if (itemstack.getMetadata() == 3)
-                        {
+                        if (itemstack.getMetadata() == 3) {
                             GameProfile gameprofile = null;
 
-                            if (itemstack.hasTagCompound())
-                            {
+                            if (itemstack.hasTagCompound()) {
                                 NBTTagCompound nbttagcompound = itemstack.getTagCompound();
 
-                                if (nbttagcompound.hasKey("SkullOwner", 10))
-                                {
+                                if (nbttagcompound.hasKey("SkullOwner", 10)) {
                                     gameprofile = NBTUtil.readGameProfileFromNBT(nbttagcompound.getCompoundTag("SkullOwner"));
+                                } else if (nbttagcompound.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbttagcompound.getString("SkullOwner"))) {
+                                    gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
                                 }
-                                else if (nbttagcompound.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbttagcompound.getString("SkullOwner")))
-                                {
-                                    gameprofile = new GameProfile((UUID)null, nbttagcompound.getString("SkullOwner"));
-                                }
                             }
 
                             tileentityskull.setPlayerProfile(gameprofile);
-                        }
-                        else
-                        {
+                        } else {
                             tileentityskull.setType(itemstack.getMetadata());
                         }
 
@@ -115,65 +95,51 @@
                         Blocks.SKULL.checkWitherSpawn(worldIn, pos, tileentityskull);
                     }
 
-                    if (player instanceof EntityPlayerMP)
-                    {
-                        CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)player, pos, itemstack);
+                    if (player instanceof EntityPlayerMP) {
+                        CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP) player, pos, itemstack);
                     }
 
                     itemstack.shrink(1);
                     return EnumActionResult.SUCCESS;
                 }
-            }
-            else
-            {
+            } else {
                 return EnumActionResult.FAIL;
             }
         }
     }
 
-    public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> items)
-    {
-        if (this.isInCreativeTab(tab))
-        {
-            for (int i = 0; i < SKULL_TYPES.length; ++i)
-            {
+    public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> items) {
+        if (this.isInCreativeTab(tab)) {
+            for (int i = 0; i < SKULL_TYPES.length; ++i) {
                 items.add(new ItemStack(this, 1, i));
             }
         }
     }
 
-    public int getMetadata(int damage)
-    {
+    public int getMetadata(int damage) {
         return damage;
     }
 
-    public String getUnlocalizedName(ItemStack stack)
-    {
+    public String getUnlocalizedName(ItemStack stack) {
         int i = stack.getMetadata();
 
-        if (i < 0 || i >= SKULL_TYPES.length)
-        {
+        if (i < 0 || i >= SKULL_TYPES.length) {
             i = 0;
         }
 
         return super.getUnlocalizedName() + "." + SKULL_TYPES[i];
     }
 
-    public String getItemStackDisplayName(ItemStack stack)
-    {
-        if (stack.getMetadata() == 3 && stack.hasTagCompound())
-        {
-            if (stack.getTagCompound().hasKey("SkullOwner", 8))
-            {
+    public String getItemStackDisplayName(ItemStack stack) {
+        if (stack.getMetadata() == 3 && stack.hasTagCompound()) {
+            if (stack.getTagCompound().hasKey("SkullOwner", 8)) {
                 return I18n.translateToLocalFormatted("item.skull.player.name", stack.getTagCompound().getString("SkullOwner"));
             }
 
-            if (stack.getTagCompound().hasKey("SkullOwner", 10))
-            {
+            if (stack.getTagCompound().hasKey("SkullOwner", 10)) {
                 NBTTagCompound nbttagcompound = stack.getTagCompound().getCompoundTag("SkullOwner");
 
-                if (nbttagcompound.hasKey("Name", 8))
-                {
+                if (nbttagcompound.hasKey("Name", 8)) {
                     return I18n.translateToLocalFormatted("item.skull.player.name", nbttagcompound.getString("Name"));
                 }
             }
@@ -182,19 +148,30 @@
         return super.getItemStackDisplayName(stack);
     }
 
-    public boolean updateItemStackNBT(NBTTagCompound nbt)
-    {
+    public boolean updateItemStackNBT(NBTTagCompound nbt) {
         super.updateItemStackNBT(nbt);
 
-        if (nbt.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbt.getString("SkullOwner")))
-        {
-            GameProfile gameprofile = new GameProfile((UUID)null, nbt.getString("SkullOwner"));
-            gameprofile = TileEntitySkull.updateGameprofile(gameprofile);
-            nbt.setTag("SkullOwner", NBTUtil.writeGameProfile(new NBTTagCompound(), gameprofile));
+        if (nbt.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbt.getString("SkullOwner"))) {
+            GameProfile gameprofile = new GameProfile((UUID) null, nbt.getString("SkullOwner"));
+            // Spigot start
+            TileEntitySkull.updateGameprofile(gameprofile, new com.google.common.base.Predicate<GameProfile>() {
+
+                @Override
+                public boolean apply(GameProfile gameprofile) {
+                    nbt.setTag("SkullOwner", NBTUtil.writeGameProfile(new NBTTagCompound(), gameprofile));
+                    return false;
+                }
+            }, false);
+            // Spigot end
             return true;
-        }
-        else
-        {
+        } else {
+            NBTTagList textures = nbt.getCompoundTag("SkullOwner").getCompoundTag("Properties").getTagList("textures", 10); // Safe due to method contracts
+            for (int i = 0; i < textures.tagCount(); i++) {
+                if (textures.get(i) instanceof NBTTagCompound && !((NBTTagCompound) textures.get(i)).hasKey("Signature", 8) && ((NBTTagCompound) textures.get(i)).getString("Value").trim().isEmpty()) {
+                    nbt.removeTag("SkullOwner");
+                    break;
+                }
+            }
             return false;
         }
     }
