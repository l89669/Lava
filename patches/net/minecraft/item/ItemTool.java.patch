--- ../src-base/minecraft/net/minecraft/item/ItemTool.java
+++ ../src-work/minecraft/net/minecraft/item/ItemTool.java
@@ -1,7 +1,6 @@
 package net.minecraft.item;
 
 import com.google.common.collect.Multimap;
-import java.util.Set;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
@@ -14,16 +13,16 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemTool extends Item
-{
+import java.util.Set;
+
+public class ItemTool extends Item {
     private final Set<Block> effectiveBlocks;
     protected float efficiency;
     protected float attackDamage;
     protected float attackSpeed;
     protected Item.ToolMaterial toolMaterial;
 
-    protected ItemTool(float attackDamageIn, float attackSpeedIn, Item.ToolMaterial materialIn, Set<Block> effectiveBlocksIn)
-    {
+    protected ItemTool(float attackDamageIn, float attackSpeedIn, Item.ToolMaterial materialIn, Set<Block> effectiveBlocksIn) {
         this.efficiency = 4.0F;
         this.toolMaterial = materialIn;
         this.effectiveBlocks = effectiveBlocksIn;
@@ -33,45 +32,34 @@
         this.attackDamage = attackDamageIn + materialIn.getAttackDamage();
         this.attackSpeed = attackSpeedIn;
         this.setCreativeTab(CreativeTabs.TOOLS);
-        if (this instanceof ItemPickaxe)
-        {
+        if (this instanceof ItemPickaxe) {
             toolClass = "pickaxe";
-        }
-        else if (this instanceof ItemAxe)
-        {
+        } else if (this instanceof ItemAxe) {
             toolClass = "axe";
-        }
-        else if (this instanceof ItemSpade)
-        {
+        } else if (this instanceof ItemSpade) {
             toolClass = "shovel";
         }
     }
 
-    protected ItemTool(Item.ToolMaterial materialIn, Set<Block> effectiveBlocksIn)
-    {
+    protected ItemTool(Item.ToolMaterial materialIn, Set<Block> effectiveBlocksIn) {
         this(0.0F, 0.0F, materialIn, effectiveBlocksIn);
     }
 
-    public float getDestroySpeed(ItemStack stack, IBlockState state)
-    {
-        for (String type : getToolClasses(stack))
-        {
+    public float getDestroySpeed(ItemStack stack, IBlockState state) {
+        for (String type : getToolClasses(stack)) {
             if (state.getBlock().isToolEffective(type, state))
                 return efficiency;
         }
         return this.effectiveBlocks.contains(state.getBlock()) ? this.efficiency : 1.0F;
     }
 
-    public boolean hitEntity(ItemStack stack, EntityLivingBase target, EntityLivingBase attacker)
-    {
+    public boolean hitEntity(ItemStack stack, EntityLivingBase target, EntityLivingBase attacker) {
         stack.damageItem(2, attacker);
         return true;
     }
 
-    public boolean onBlockDestroyed(ItemStack stack, World worldIn, IBlockState state, BlockPos pos, EntityLivingBase entityLiving)
-    {
-        if (!worldIn.isRemote && (double)state.getBlockHardness(worldIn, pos) != 0.0D)
-        {
+    public boolean onBlockDestroyed(ItemStack stack, World worldIn, IBlockState state, BlockPos pos, EntityLivingBase entityLiving) {
+        if (!worldIn.isRemote && (double) state.getBlockHardness(worldIn, pos) != 0.0D) {
             stack.damageItem(1, entityLiving);
         }
 
@@ -79,36 +67,30 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean isFull3D()
-    {
+    public boolean isFull3D() {
         return true;
     }
 
-    public int getItemEnchantability()
-    {
+    public int getItemEnchantability() {
         return this.toolMaterial.getEnchantability();
     }
 
-    public String getToolMaterialName()
-    {
+    public String getToolMaterialName() {
         return this.toolMaterial.toString();
     }
 
-    public boolean getIsRepairable(ItemStack toRepair, ItemStack repair)
-    {
+    public boolean getIsRepairable(ItemStack toRepair, ItemStack repair) {
         ItemStack mat = this.toolMaterial.getRepairItemStack();
         if (!mat.isEmpty() && net.minecraftforge.oredict.OreDictionary.itemMatches(mat, repair, false)) return true;
         return super.getIsRepairable(toRepair, repair);
     }
 
-    public Multimap<String, AttributeModifier> getItemAttributeModifiers(EntityEquipmentSlot equipmentSlot)
-    {
+    public Multimap<String, AttributeModifier> getItemAttributeModifiers(EntityEquipmentSlot equipmentSlot) {
         Multimap<String, AttributeModifier> multimap = super.getItemAttributeModifiers(equipmentSlot);
 
-        if (equipmentSlot == EntityEquipmentSlot.MAINHAND)
-        {
-            multimap.put(SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(ATTACK_DAMAGE_MODIFIER, "Tool modifier", (double)this.attackDamage, 0));
-            multimap.put(SharedMonsterAttributes.ATTACK_SPEED.getName(), new AttributeModifier(ATTACK_SPEED_MODIFIER, "Tool modifier", (double)this.attackSpeed, 0));
+        if (equipmentSlot == EntityEquipmentSlot.MAINHAND) {
+            multimap.put(SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(ATTACK_DAMAGE_MODIFIER, "Tool modifier", (double) this.attackDamage, 0));
+            multimap.put(SharedMonsterAttributes.ATTACK_SPEED.getName(), new AttributeModifier(ATTACK_SPEED_MODIFIER, "Tool modifier", (double) this.attackSpeed, 0));
         }
 
         return multimap;
@@ -117,23 +99,19 @@
     /*===================================== FORGE START =================================*/
     @javax.annotation.Nullable
     private String toolClass;
+
     @Override
-    public int getHarvestLevel(ItemStack stack, String toolClass, @javax.annotation.Nullable net.minecraft.entity.player.EntityPlayer player, @javax.annotation.Nullable IBlockState blockState)
-    {
-        int level = super.getHarvestLevel(stack, toolClass,  player, blockState);
-        if (level == -1 && toolClass.equals(this.toolClass))
-        {
+    public int getHarvestLevel(ItemStack stack, String toolClass, @javax.annotation.Nullable net.minecraft.entity.player.EntityPlayer player, @javax.annotation.Nullable IBlockState blockState) {
+        int level = super.getHarvestLevel(stack, toolClass, player, blockState);
+        if (level == -1 && toolClass.equals(this.toolClass)) {
             return this.toolMaterial.getHarvestLevel();
-        }
-        else
-        {
+        } else {
             return level;
         }
     }
 
     @Override
-    public Set<String> getToolClasses(ItemStack stack)
-    {
+    public Set<String> getToolClasses(ItemStack stack) {
         return toolClass != null ? com.google.common.collect.ImmutableSet.of(toolClass) : super.getToolClasses(stack);
     }
     /*===================================== FORGE END =================================*/
