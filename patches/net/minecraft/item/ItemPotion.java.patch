--- ../src-base/minecraft/net/minecraft/item/ItemPotion.java
+++ ../src-work/minecraft/net/minecraft/item/ItemPotion.java
@@ -1,7 +1,5 @@
 package net.minecraft.item;
 
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.creativetab.CreativeTabs;
@@ -23,63 +21,51 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemPotion extends Item
-{
-    public ItemPotion()
-    {
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class ItemPotion extends Item {
+    public ItemPotion() {
         this.setMaxStackSize(1);
         this.setCreativeTab(CreativeTabs.BREWING);
     }
 
     @SideOnly(Side.CLIENT)
-    public ItemStack getDefaultInstance()
-    {
+    public ItemStack getDefaultInstance() {
         return PotionUtils.addPotionToItemStack(super.getDefaultInstance(), PotionTypes.WATER);
     }
 
-    public ItemStack onItemUseFinish(ItemStack stack, World worldIn, EntityLivingBase entityLiving)
-    {
-        EntityPlayer entityplayer = entityLiving instanceof EntityPlayer ? (EntityPlayer)entityLiving : null;
+    public ItemStack onItemUseFinish(ItemStack stack, World worldIn, EntityLivingBase entityLiving) {
+        EntityPlayer entityplayer = entityLiving instanceof EntityPlayer ? (EntityPlayer) entityLiving : null;
 
-        if (entityplayer == null || !entityplayer.capabilities.isCreativeMode)
-        {
+        if (entityplayer == null || !entityplayer.capabilities.isCreativeMode) {
             stack.shrink(1);
         }
 
-        if (entityplayer instanceof EntityPlayerMP)
-        {
-            CriteriaTriggers.CONSUME_ITEM.trigger((EntityPlayerMP)entityplayer, stack);
+        if (entityplayer instanceof EntityPlayerMP) {
+            CriteriaTriggers.CONSUME_ITEM.trigger((EntityPlayerMP) entityplayer, stack);
         }
 
-        if (!worldIn.isRemote)
-        {
-            for (PotionEffect potioneffect : PotionUtils.getEffectsFromStack(stack))
-            {
-                if (potioneffect.getPotion().isInstant())
-                {
+        if (!worldIn.isRemote) {
+            for (PotionEffect potioneffect : PotionUtils.getEffectsFromStack(stack)) {
+                if (potioneffect.getPotion().isInstant()) {
                     potioneffect.getPotion().affectEntity(entityplayer, entityplayer, entityLiving, potioneffect.getAmplifier(), 1.0D);
-                }
-                else
-                {
+                } else {
                     entityLiving.addPotionEffect(new PotionEffect(potioneffect));
                 }
             }
         }
 
-        if (entityplayer != null)
-        {
+        if (entityplayer != null) {
             entityplayer.addStat(StatList.getObjectUseStats(this));
         }
 
-        if (entityplayer == null || !entityplayer.capabilities.isCreativeMode)
-        {
-            if (stack.isEmpty())
-            {
+        if (entityplayer == null || !entityplayer.capabilities.isCreativeMode) {
+            if (stack.isEmpty()) {
                 return new ItemStack(Items.GLASS_BOTTLE);
             }
 
-            if (entityplayer != null)
-            {
+            if (entityplayer != null) {
                 entityplayer.inventory.addItemStackToInventory(new ItemStack(Items.GLASS_BOTTLE));
             }
         }
@@ -87,41 +73,32 @@
         return stack;
     }
 
-    public int getMaxItemUseDuration(ItemStack stack)
-    {
+    public int getMaxItemUseDuration(ItemStack stack) {
         return 32;
     }
 
-    public EnumAction getItemUseAction(ItemStack stack)
-    {
+    public EnumAction getItemUseAction(ItemStack stack) {
         return EnumAction.DRINK;
     }
 
-    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn)
-    {
+    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn) {
         playerIn.setActiveHand(handIn);
         return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, playerIn.getHeldItem(handIn));
     }
 
-    public String getItemStackDisplayName(ItemStack stack)
-    {
+    public String getItemStackDisplayName(ItemStack stack) {
         return I18n.translateToLocal(PotionUtils.getPotionFromItem(stack).getNamePrefixed("potion.effect."));
     }
 
     @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn)
-    {
+    public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn) {
         PotionUtils.addPotionTooltip(stack, tooltip, 1.0F);
     }
 
-    public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> items)
-    {
-        if (this.isInCreativeTab(tab))
-        {
-            for (PotionType potiontype : PotionType.REGISTRY)
-            {
-                if (potiontype != PotionTypes.EMPTY)
-                {
+    public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> items) {
+        if (this.isInCreativeTab(tab)) {
+            for (PotionType potiontype : PotionType.REGISTRY) {
+                if (potiontype != PotionTypes.EMPTY) {
                     items.add(PotionUtils.addPotionToItemStack(new ItemStack(this), potiontype));
                 }
             }
@@ -129,8 +106,7 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean hasEffect(ItemStack stack)
-    {
+    public boolean hasEffect(ItemStack stack) {
         return super.hasEffect(stack) || !PotionUtils.getEffectsFromStack(stack).isEmpty();
     }
 }
