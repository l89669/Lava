--- ../src-base/minecraft/net/minecraft/item/crafting/RecipeFireworks.java
+++ ../src-work/minecraft/net/minecraft/item/crafting/RecipeFireworks.java
@@ -1,7 +1,6 @@
 package net.minecraft.item.crafting;
 
 import com.google.common.collect.Lists;
-import java.util.List;
 import net.minecraft.init.Items;
 import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.ItemDye;
@@ -11,12 +10,18 @@
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
 
-public class RecipeFireworks extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
-{
+import java.util.List;
+
+public class RecipeFireworks extends ShapelessRecipes implements IRecipe {
     private ItemStack resultItem = ItemStack.EMPTY;
 
-    public boolean matches(InventoryCrafting inv, World worldIn)
-    {
+    // CraftBukkit start - Delegate to new parent class with bogus info
+    public RecipeFireworks() {
+        super("", new ItemStack(Items.FIREWORKS, 0, 0), NonNullList.from(Ingredient.EMPTY, Ingredient.fromItem(Items.GUNPOWDER)));
+    }
+    // CraftBukkit end
+
+    public boolean matches(InventoryCrafting inv, World worldIn) {
         this.resultItem = ItemStack.EMPTY;
         int i = 0;
         int j = 0;
@@ -25,52 +30,30 @@
         int i1 = 0;
         int j1 = 0;
 
-        for (int k1 = 0; k1 < inv.getSizeInventory(); ++k1)
-        {
+        for (int k1 = 0; k1 < inv.getSizeInventory(); ++k1) {
             ItemStack itemstack = inv.getStackInSlot(k1);
 
-            if (!itemstack.isEmpty())
-            {
-                if (itemstack.getItem() == Items.GUNPOWDER)
-                {
+            if (!itemstack.isEmpty()) {
+                if (itemstack.getItem() == Items.GUNPOWDER) {
                     ++j;
-                }
-                else if (itemstack.getItem() == Items.FIREWORK_CHARGE)
-                {
+                } else if (itemstack.getItem() == Items.FIREWORK_CHARGE) {
                     ++l;
-                }
-                else if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack))
-                {
+                } else if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack)) {
                     ++k;
-                }
-                else if (itemstack.getItem() == Items.PAPER)
-                {
+                } else if (itemstack.getItem() == Items.PAPER) {
                     ++i;
-                }
-                else if (itemstack.getItem() == Items.GLOWSTONE_DUST)
-                {
+                } else if (itemstack.getItem() == Items.GLOWSTONE_DUST) {
                     ++i1;
-                }
-                else if (itemstack.getItem() == Items.DIAMOND)
-                {
+                } else if (itemstack.getItem() == Items.DIAMOND) {
                     ++i1;
-                }
-                else if (itemstack.getItem() == Items.FIRE_CHARGE)
-                {
+                } else if (itemstack.getItem() == Items.FIRE_CHARGE) {
                     ++j1;
-                }
-                else if (itemstack.getItem() == Items.FEATHER)
-                {
+                } else if (itemstack.getItem() == Items.FEATHER) {
                     ++j1;
-                }
-                else if (itemstack.getItem() == Items.GOLD_NUGGET)
-                {
+                } else if (itemstack.getItem() == Items.GOLD_NUGGET) {
                     ++j1;
-                }
-                else
-                {
-                    if (itemstack.getItem() != Items.SKULL)
-                    {
+                } else {
+                    if (itemstack.getItem() != Items.SKULL) {
                         return false;
                     }
 
@@ -81,23 +64,18 @@
 
         i1 = i1 + k + j1;
 
-        if (j <= 3 && i <= 1)
-        {
-            if (j >= 1 && i == 1 && i1 == 0)
-            {
+        if (j <= 3 && i <= 1) {
+            if (j >= 1 && i == 1 && i1 == 0) {
                 this.resultItem = new ItemStack(Items.FIREWORKS, 3);
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
-                if (l > 0)
-                {
+                if (l > 0) {
                     NBTTagList nbttaglist = new NBTTagList();
 
-                    for (int k2 = 0; k2 < inv.getSizeInventory(); ++k2)
-                    {
+                    for (int k2 = 0; k2 < inv.getSizeInventory(); ++k2) {
                         ItemStack itemstack3 = inv.getStackInSlot(k2);
 
-                        if (itemstack3.getItem() == Items.FIREWORK_CHARGE && itemstack3.hasTagCompound() && itemstack3.getTagCompound().hasKey("Explosion", 10))
-                        {
+                        if (itemstack3.getItem() == Items.FIREWORK_CHARGE && itemstack3.hasTagCompound() && itemstack3.getTagCompound().hasKey("Explosion", 10)) {
                             nbttaglist.appendTag(itemstack3.getTagCompound().getCompoundTag("Explosion"));
                         }
                     }
@@ -105,52 +83,35 @@
                     nbttagcompound1.setTag("Explosions", nbttaglist);
                 }
 
-                nbttagcompound1.setByte("Flight", (byte)j);
+                nbttagcompound1.setByte("Flight", (byte) j);
                 NBTTagCompound nbttagcompound3 = new NBTTagCompound();
                 nbttagcompound3.setTag("Fireworks", nbttagcompound1);
                 this.resultItem.setTagCompound(nbttagcompound3);
                 return true;
-            }
-            else if (j == 1 && i == 0 && l == 0 && k > 0 && j1 <= 1)
-            {
+            } else if (j == 1 && i == 0 && l == 0 && k > 0 && j1 <= 1) {
                 this.resultItem = new ItemStack(Items.FIREWORK_CHARGE);
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
                 byte b0 = 0;
                 List<Integer> list = Lists.<Integer>newArrayList();
 
-                for (int l1 = 0; l1 < inv.getSizeInventory(); ++l1)
-                {
+                for (int l1 = 0; l1 < inv.getSizeInventory(); ++l1) {
                     ItemStack itemstack2 = inv.getStackInSlot(l1);
 
-                    if (!itemstack2.isEmpty())
-                    {
-                        if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack2))
-                        {
+                    if (!itemstack2.isEmpty()) {
+                        if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack2)) {
                             list.add(Integer.valueOf(ItemDye.DYE_COLORS[net.minecraftforge.oredict.DyeUtils.rawDyeDamageFromStack(itemstack2) & 15]));
-                        }
-                        else if (itemstack2.getItem() == Items.GLOWSTONE_DUST)
-                        {
+                        } else if (itemstack2.getItem() == Items.GLOWSTONE_DUST) {
                             nbttagcompound2.setBoolean("Flicker", true);
-                        }
-                        else if (itemstack2.getItem() == Items.DIAMOND)
-                        {
+                        } else if (itemstack2.getItem() == Items.DIAMOND) {
                             nbttagcompound2.setBoolean("Trail", true);
-                        }
-                        else if (itemstack2.getItem() == Items.FIRE_CHARGE)
-                        {
+                        } else if (itemstack2.getItem() == Items.FIRE_CHARGE) {
                             b0 = 1;
-                        }
-                        else if (itemstack2.getItem() == Items.FEATHER)
-                        {
+                        } else if (itemstack2.getItem() == Items.FEATHER) {
                             b0 = 4;
-                        }
-                        else if (itemstack2.getItem() == Items.GOLD_NUGGET)
-                        {
+                        } else if (itemstack2.getItem() == Items.GOLD_NUGGET) {
                             b0 = 2;
-                        }
-                        else if (itemstack2.getItem() == Items.SKULL)
-                        {
+                        } else if (itemstack2.getItem() == Items.SKULL) {
                             b0 = 3;
                         }
                     }
@@ -158,9 +119,8 @@
 
                 int[] aint1 = new int[list.size()];
 
-                for (int l2 = 0; l2 < aint1.length; ++l2)
-                {
-                    aint1[l2] = ((Integer)list.get(l2)).intValue();
+                for (int l2 = 0; l2 < aint1.length; ++l2) {
+                    aint1[l2] = ((Integer) list.get(l2)).intValue();
                 }
 
                 nbttagcompound2.setIntArray("Colors", aint1);
@@ -168,23 +128,16 @@
                 nbttagcompound.setTag("Explosion", nbttagcompound2);
                 this.resultItem.setTagCompound(nbttagcompound);
                 return true;
-            }
-            else if (j == 0 && i == 0 && l == 1 && k > 0 && k == i1)
-            {
+            } else if (j == 0 && i == 0 && l == 1 && k > 0 && k == i1) {
                 List<Integer> list1 = Lists.<Integer>newArrayList();
 
-                for (int i2 = 0; i2 < inv.getSizeInventory(); ++i2)
-                {
+                for (int i2 = 0; i2 < inv.getSizeInventory(); ++i2) {
                     ItemStack itemstack1 = inv.getStackInSlot(i2);
 
-                    if (!itemstack1.isEmpty())
-                    {
-                        if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack1))
-                        {
+                    if (!itemstack1.isEmpty()) {
+                        if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack1)) {
                             list1.add(Integer.valueOf(ItemDye.DYE_COLORS[net.minecraftforge.oredict.DyeUtils.rawDyeDamageFromStack(itemstack1) & 15]));
-                        }
-                        else if (itemstack1.getItem() == Items.FIREWORK_CHARGE)
-                        {
+                        } else if (itemstack1.getItem() == Items.FIREWORK_CHARGE) {
                             this.resultItem = itemstack1.copy();
                             this.resultItem.setCount(1);
                         }
@@ -193,57 +146,42 @@
 
                 int[] aint = new int[list1.size()];
 
-                for (int j2 = 0; j2 < aint.length; ++j2)
-                {
-                    aint[j2] = ((Integer)list1.get(j2)).intValue();
+                for (int j2 = 0; j2 < aint.length; ++j2) {
+                    aint[j2] = ((Integer) list1.get(j2)).intValue();
                 }
 
-                if (!this.resultItem.isEmpty() && this.resultItem.hasTagCompound())
-                {
+                if (!this.resultItem.isEmpty() && this.resultItem.hasTagCompound()) {
                     NBTTagCompound nbttagcompound4 = this.resultItem.getTagCompound().getCompoundTag("Explosion");
 
-                    if (nbttagcompound4 == null)
-                    {
+                    if (nbttagcompound4 == null) {
                         return false;
-                    }
-                    else
-                    {
+                    } else {
                         nbttagcompound4.setIntArray("FadeColors", aint);
                         return true;
                     }
-                }
-                else
-                {
+                } else {
                     return false;
                 }
-            }
-            else
-            {
+            } else {
                 return false;
             }
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
-    public ItemStack getCraftingResult(InventoryCrafting inv)
-    {
+    public ItemStack getCraftingResult(InventoryCrafting inv) {
         return this.resultItem.copy();
     }
 
-    public ItemStack getRecipeOutput()
-    {
+    public ItemStack getRecipeOutput() {
         return this.resultItem;
     }
 
-    public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
-    {
+    public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv) {
         NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-        for (int i = 0; i < nonnulllist.size(); ++i)
-        {
+        for (int i = 0; i < nonnulllist.size(); ++i) {
             ItemStack itemstack = inv.getStackInSlot(i);
 
             nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
@@ -252,13 +190,11 @@
         return nonnulllist;
     }
 
-    public boolean isDynamic()
-    {
+    public boolean isDynamic() {
         return true;
     }
 
-    public boolean canFit(int width, int height)
-    {
+    public boolean canFit(int width, int height) {
         return width * height >= 1;
     }
 }
