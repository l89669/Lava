--- ../src-base/minecraft/net/minecraft/item/ItemFood.java
+++ ../src-work/minecraft/net/minecraft/item/ItemFood.java
@@ -14,8 +14,7 @@
 import net.minecraft.util.SoundCategory;
 import net.minecraft.world.World;
 
-public class ItemFood extends Item
-{
+public class ItemFood extends Item {
     public final int itemUseDuration;
     private final int healAmount;
     private final float saturationModifier;
@@ -24,8 +23,7 @@
     private PotionEffect potionId;
     private float potionEffectProbability;
 
-    public ItemFood(int amount, float saturation, boolean isWolfFood)
-    {
+    public ItemFood(int amount, float saturation, boolean isWolfFood) {
         this.itemUseDuration = 32;
         this.healAmount = amount;
         this.isWolfsFavoriteMeat = isWolfFood;
@@ -33,24 +31,20 @@
         this.setCreativeTab(CreativeTabs.FOOD);
     }
 
-    public ItemFood(int amount, boolean isWolfFood)
-    {
+    public ItemFood(int amount, boolean isWolfFood) {
         this(amount, 0.6F, isWolfFood);
     }
 
-    public ItemStack onItemUseFinish(ItemStack stack, World worldIn, EntityLivingBase entityLiving)
-    {
-        if (entityLiving instanceof EntityPlayer)
-        {
-            EntityPlayer entityplayer = (EntityPlayer)entityLiving;
+    public ItemStack onItemUseFinish(ItemStack stack, World worldIn, EntityLivingBase entityLiving) {
+        if (entityLiving instanceof EntityPlayer) {
+            EntityPlayer entityplayer = (EntityPlayer) entityLiving;
             entityplayer.getFoodStats().addStats(this, stack);
-            worldIn.playSound((EntityPlayer)null, entityplayer.posX, entityplayer.posY, entityplayer.posZ, SoundEvents.ENTITY_PLAYER_BURP, SoundCategory.PLAYERS, 0.5F, worldIn.rand.nextFloat() * 0.1F + 0.9F);
+            worldIn.playSound((EntityPlayer) null, entityplayer.posX, entityplayer.posY, entityplayer.posZ, SoundEvents.ENTITY_PLAYER_BURP, SoundCategory.PLAYERS, 0.5F, worldIn.rand.nextFloat() * 0.1F + 0.9F);
             this.onFoodEaten(stack, worldIn, entityplayer);
             entityplayer.addStat(StatList.getObjectUseStats(this));
 
-            if (entityplayer instanceof EntityPlayerMP)
-            {
-                CriteriaTriggers.CONSUME_ITEM.trigger((EntityPlayerMP)entityplayer, stack);
+            if (entityplayer instanceof EntityPlayerMP) {
+                CriteriaTriggers.CONSUME_ITEM.trigger((EntityPlayerMP) entityplayer, stack);
             }
         }
 
@@ -58,63 +52,50 @@
         return stack;
     }
 
-    protected void onFoodEaten(ItemStack stack, World worldIn, EntityPlayer player)
-    {
-        if (!worldIn.isRemote && this.potionId != null && worldIn.rand.nextFloat() < this.potionEffectProbability)
-        {
+    protected void onFoodEaten(ItemStack stack, World worldIn, EntityPlayer player) {
+        if (!worldIn.isRemote && this.potionId != null && worldIn.rand.nextFloat() < this.potionEffectProbability) {
             player.addPotionEffect(new PotionEffect(this.potionId));
         }
     }
 
-    public int getMaxItemUseDuration(ItemStack stack)
-    {
+    public int getMaxItemUseDuration(ItemStack stack) {
         return 32;
     }
 
-    public EnumAction getItemUseAction(ItemStack stack)
-    {
+    public EnumAction getItemUseAction(ItemStack stack) {
         return EnumAction.EAT;
     }
 
-    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn)
-    {
+    public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn) {
         ItemStack itemstack = playerIn.getHeldItem(handIn);
 
-        if (playerIn.canEat(this.alwaysEdible))
-        {
+        if (playerIn.canEat(this.alwaysEdible)) {
             playerIn.setActiveHand(handIn);
             return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, itemstack);
-        }
-        else
-        {
+        } else {
             return new ActionResult<ItemStack>(EnumActionResult.FAIL, itemstack);
         }
     }
 
-    public int getHealAmount(ItemStack stack)
-    {
+    public int getHealAmount(ItemStack stack) {
         return this.healAmount;
     }
 
-    public float getSaturationModifier(ItemStack stack)
-    {
+    public float getSaturationModifier(ItemStack stack) {
         return this.saturationModifier;
     }
 
-    public boolean isWolfsFavoriteMeat()
-    {
+    public boolean isWolfsFavoriteMeat() {
         return this.isWolfsFavoriteMeat;
     }
 
-    public ItemFood setPotionEffect(PotionEffect effect, float probability)
-    {
+    public ItemFood setPotionEffect(PotionEffect effect, float probability) {
         this.potionId = effect;
         this.potionEffectProbability = probability;
         return this;
     }
 
-    public ItemFood setAlwaysEdible()
-    {
+    public ItemFood setAlwaysEdible() {
         this.alwaysEdible = true;
         return this;
     }
