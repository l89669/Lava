--- ../src-base/minecraft/net/minecraft/item/ItemRecord.java
+++ ../src-work/minecraft/net/minecraft/item/ItemRecord.java
@@ -1,9 +1,6 @@
 package net.minecraft.item;
 
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.block.BlockJukebox;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.util.ITooltipFlag;
@@ -21,14 +18,16 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemRecord extends Item
-{
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+
+public class ItemRecord extends Item {
     private static final Map<SoundEvent, ItemRecord> RECORDS = Maps.<SoundEvent, ItemRecord>newHashMap();
     private final SoundEvent sound;
     private final String displayName;
 
-    protected ItemRecord(String p_i46742_1_, SoundEvent soundIn)
-    {
+    protected ItemRecord(String p_i46742_1_, SoundEvent soundIn) {
         this.displayName = "item.record." + p_i46742_1_ + ".desc";
         this.sound = soundIn;
         this.maxStackSize = 1;
@@ -36,56 +35,47 @@
         RECORDS.put(this.sound, this);
     }
 
-    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
+    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
-        if (iblockstate.getBlock() == Blocks.JUKEBOX && !((Boolean)iblockstate.getValue(BlockJukebox.HAS_RECORD)).booleanValue())
-        {
-            if (!worldIn.isRemote)
-            {
+        if (iblockstate.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockstate.getValue(BlockJukebox.HAS_RECORD)).booleanValue()) {
+            if (!worldIn.isRemote) {
+                if (true) return EnumActionResult.SUCCESS; // CraftBukkit - handled in ItemStack
                 ItemStack itemstack = player.getHeldItem(hand);
-                ((BlockJukebox)Blocks.JUKEBOX).insertRecord(worldIn, pos, iblockstate, itemstack);
-                worldIn.playEvent((EntityPlayer)null, 1010, pos, Item.getIdFromItem(this));
+                ((BlockJukebox) Blocks.JUKEBOX).insertRecord(worldIn, pos, iblockstate, itemstack);
+                worldIn.playEvent((EntityPlayer) null, 1010, pos, Item.getIdFromItem(this));
                 itemstack.shrink(1);
                 player.addStat(StatList.RECORD_PLAYED);
             }
 
             return EnumActionResult.SUCCESS;
-        }
-        else
-        {
+        } else {
             return EnumActionResult.PASS;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn)
-    {
+    public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn) {
         tooltip.add(this.getRecordNameLocal());
     }
 
     @SideOnly(Side.CLIENT)
-    public String getRecordNameLocal()
-    {
+    public String getRecordNameLocal() {
         return I18n.translateToLocal(this.displayName);
     }
 
-    public EnumRarity getRarity(ItemStack stack)
-    {
+    public EnumRarity getRarity(ItemStack stack) {
         return EnumRarity.RARE;
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
-    public static ItemRecord getBySound(SoundEvent soundIn)
-    {
+    public static ItemRecord getBySound(SoundEvent soundIn) {
         return RECORDS.get(soundIn);
     }
 
     @SideOnly(Side.CLIENT)
-    public SoundEvent getSound()
-    {
+    public SoundEvent getSound() {
         return this.sound;
     }
 }
