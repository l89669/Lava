--- ../src-base/minecraft/net/minecraft/item/ItemBlockSpecial.java
+++ ../src-work/minecraft/net/minecraft/item/ItemBlockSpecial.java
@@ -5,7 +5,6 @@
 import net.minecraft.block.BlockSnow;
 import net.minecraft.block.SoundType;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -16,51 +15,39 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
-public class ItemBlockSpecial extends Item
-{
+public class ItemBlockSpecial extends Item {
     private final Block block;
 
-    public ItemBlockSpecial(Block block)
-    {
+    public ItemBlockSpecial(Block block) {
         this.block = block;
     }
 
-    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
+    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
         IBlockState iblockstate = worldIn.getBlockState(pos);
         Block block = iblockstate.getBlock();
 
-        if (block == Blocks.SNOW_LAYER && ((Integer)iblockstate.getValue(BlockSnow.LAYERS)).intValue() < 1)
-        {
+        if (block == Blocks.SNOW_LAYER && ((Integer) iblockstate.getValue(BlockSnow.LAYERS)).intValue() < 1) {
             facing = EnumFacing.UP;
-        }
-        else if (!block.isReplaceable(worldIn, pos))
-        {
+        } else if (!block.isReplaceable(worldIn, pos)) {
             pos = pos.offset(facing);
         }
 
         ItemStack itemstack = player.getHeldItem(hand);
 
-        if (!itemstack.isEmpty() && player.canPlayerEdit(pos, facing, itemstack) && worldIn.mayPlace(this.block, pos, false, facing, player))
-        {
+        if (!itemstack.isEmpty() && player.canPlayerEdit(pos, facing, itemstack) && worldIn.mayPlace(this.block, pos, false, facing, player)) {
             IBlockState iblockstate1 = this.block.getStateForPlacement(worldIn, pos, facing, hitX, hitY, hitZ, 0, player, hand);
 
-            if (!worldIn.setBlockState(pos, iblockstate1, 11))
-            {
+            if (!worldIn.setBlockState(pos, iblockstate1, 11)) {
                 return EnumActionResult.FAIL;
-            }
-            else
-            {
+            } else {
                 iblockstate1 = worldIn.getBlockState(pos);
 
-                if (iblockstate1.getBlock() == this.block)
-                {
+                if (iblockstate1.getBlock() == this.block) {
                     ItemBlock.setTileEntityNBT(worldIn, player, pos, itemstack);
                     iblockstate1.getBlock().onBlockPlacedBy(worldIn, pos, iblockstate1, player, itemstack);
 
-                    if (player instanceof EntityPlayerMP)
-                    {
-                        CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)player, pos, itemstack);
+                    if (player instanceof EntityPlayerMP) {
+                        CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP) player, pos, itemstack);
                     }
                 }
 
@@ -69,20 +56,16 @@
                 itemstack.shrink(1);
                 return EnumActionResult.SUCCESS;
             }
-        }
-        else
-        {
+        } else {
             return EnumActionResult.FAIL;
         }
     }
 
-    public Block getBlock()
-    {
+    public Block getBlock() {
         return this.getBlockRaw() == null ? null : this.getBlockRaw().delegate.get();
     }
 
-    private Block getBlockRaw()
-    {
+    private Block getBlockRaw() {
         return this.block;
     }
 }
