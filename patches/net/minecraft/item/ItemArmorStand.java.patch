--- ../src-base/minecraft/net/minecraft/item/ItemArmorStand.java
+++ ../src-work/minecraft/net/minecraft/item/ItemArmorStand.java
@@ -1,7 +1,5 @@
 package net.minecraft.item;
 
-import java.util.List;
-import java.util.Random;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityArmorStand;
@@ -17,63 +15,50 @@
 import net.minecraft.util.math.Rotations;
 import net.minecraft.world.World;
 
-public class ItemArmorStand extends Item
-{
-    public ItemArmorStand()
-    {
+import java.util.List;
+import java.util.Random;
+
+public class ItemArmorStand extends Item {
+    public ItemArmorStand() {
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
-    {
-        if (facing == EnumFacing.DOWN)
-        {
+    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
+        if (facing == EnumFacing.DOWN) {
             return EnumActionResult.FAIL;
-        }
-        else
-        {
+        } else {
             boolean flag = worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos);
             BlockPos blockpos = flag ? pos : pos.offset(facing);
             ItemStack itemstack = player.getHeldItem(hand);
 
-            if (!player.canPlayerEdit(blockpos, facing, itemstack))
-            {
+            if (!player.canPlayerEdit(blockpos, facing, itemstack)) {
                 return EnumActionResult.FAIL;
-            }
-            else
-            {
+            } else {
                 BlockPos blockpos1 = blockpos.up();
                 boolean flag1 = !worldIn.isAirBlock(blockpos) && !worldIn.getBlockState(blockpos).getBlock().isReplaceable(worldIn, blockpos);
                 flag1 = flag1 | (!worldIn.isAirBlock(blockpos1) && !worldIn.getBlockState(blockpos1).getBlock().isReplaceable(worldIn, blockpos1));
 
-                if (flag1)
-                {
+                if (flag1) {
                     return EnumActionResult.FAIL;
-                }
-                else
-                {
-                    double d0 = (double)blockpos.getX();
-                    double d1 = (double)blockpos.getY();
-                    double d2 = (double)blockpos.getZ();
-                    List<Entity> list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity)null, new AxisAlignedBB(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
+                } else {
+                    double d0 = (double) blockpos.getX();
+                    double d1 = (double) blockpos.getY();
+                    double d2 = (double) blockpos.getZ();
+                    List<Entity> list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity) null, new AxisAlignedBB(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
 
-                    if (!list.isEmpty())
-                    {
+                    if (!list.isEmpty()) {
                         return EnumActionResult.FAIL;
-                    }
-                    else
-                    {
-                        if (!worldIn.isRemote)
-                        {
+                    } else {
+                        if (!worldIn.isRemote) {
                             worldIn.setBlockToAir(blockpos);
                             worldIn.setBlockToAir(blockpos1);
                             EntityArmorStand entityarmorstand = new EntityArmorStand(worldIn, d0 + 0.5D, d1, d2 + 0.5D);
-                            float f = (float)MathHelper.floor((MathHelper.wrapDegrees(player.rotationYaw - 180.0F) + 22.5F) / 45.0F) * 45.0F;
+                            float f = (float) MathHelper.floor((MathHelper.wrapDegrees(player.rotationYaw - 180.0F) + 22.5F) / 45.0F) * 45.0F;
                             entityarmorstand.setLocationAndAngles(d0 + 0.5D, d1, d2 + 0.5D, f, 0.0F);
                             this.applyRandomRotations(entityarmorstand, worldIn.rand);
                             ItemMonsterPlacer.applyItemEntityDataToEntity(worldIn, player, itemstack, entityarmorstand);
                             worldIn.spawnEntity(entityarmorstand);
-                            worldIn.playSound((EntityPlayer)null, entityarmorstand.posX, entityarmorstand.posY, entityarmorstand.posZ, SoundEvents.ENTITY_ARMORSTAND_PLACE, SoundCategory.BLOCKS, 0.75F, 0.8F);
+                            worldIn.playSound((EntityPlayer) null, entityarmorstand.posX, entityarmorstand.posY, entityarmorstand.posZ, SoundEvents.ENTITY_ARMORSTAND_PLACE, SoundCategory.BLOCKS, 0.75F, 0.8F);
                         }
 
                         itemstack.shrink(1);
@@ -84,8 +69,7 @@
         }
     }
 
-    private void applyRandomRotations(EntityArmorStand armorStand, Random rand)
-    {
+    private void applyRandomRotations(EntityArmorStand armorStand, Random rand) {
         Rotations rotations = armorStand.getHeadRotation();
         float f = rand.nextFloat() * 5.0F;
         float f1 = rand.nextFloat() * 20.0F - 10.0F;
