--- ../src-base/minecraft/net/minecraft/util/EnumFacing.java
+++ ../src-work/minecraft/net/minecraft/util/EnumFacing.java
@@ -3,18 +3,18 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Maps;
-import java.util.Iterator;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3i;
 
-public enum EnumFacing implements IStringSerializable
-{
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Random;
+
+public enum EnumFacing implements IStringSerializable {
     DOWN(0, 1, -1, "down", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Y, new Vec3i(0, -1, 0)),
     UP(1, 0, -1, "up", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.Y, new Vec3i(0, 1, 0)),
     NORTH(2, 3, 2, "north", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Z, new Vec3i(0, 0, -1)),
@@ -33,8 +33,7 @@
     public static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
     private static final Map<String, EnumFacing> NAME_LOOKUP = Maps.<String, EnumFacing>newHashMap();
 
-    private EnumFacing(int indexIn, int oppositeIn, int horizontalIndexIn, String nameIn, EnumFacing.AxisDirection axisDirectionIn, EnumFacing.Axis axisIn, Vec3i directionVecIn)
-    {
+    private EnumFacing(int indexIn, int oppositeIn, int horizontalIndexIn, String nameIn, EnumFacing.AxisDirection axisDirectionIn, EnumFacing.Axis axisIn, Vec3i directionVecIn) {
         this.index = indexIn;
         this.horizontalIndex = horizontalIndexIn;
         this.opposite = oppositeIn;
@@ -44,50 +43,41 @@
         this.directionVec = directionVecIn;
     }
 
-    public int getIndex()
-    {
+    public int getIndex() {
         return this.index;
     }
 
-    public int getHorizontalIndex()
-    {
+    public int getHorizontalIndex() {
         return this.horizontalIndex;
     }
 
-    public EnumFacing.AxisDirection getAxisDirection()
-    {
+    public EnumFacing.AxisDirection getAxisDirection() {
         return this.axisDirection;
     }
 
-    public EnumFacing getOpposite()
-    {
+    public EnumFacing getOpposite() {
         return getFront(this.opposite);
     }
 
-    public EnumFacing rotateAround(EnumFacing.Axis axis)
-    {
-        switch (axis)
-        {
+    public EnumFacing rotateAround(EnumFacing.Axis axis) {
+        switch (axis) {
             case X:
 
-                if (this != WEST && this != EAST)
-                {
+                if (this != WEST && this != EAST) {
                     return this.rotateX();
                 }
 
                 return this;
             case Y:
 
-                if (this != UP && this != DOWN)
-                {
+                if (this != UP && this != DOWN) {
                     return this.rotateY();
                 }
 
                 return this;
             case Z:
 
-                if (this != NORTH && this != SOUTH)
-                {
+                if (this != NORTH && this != SOUTH) {
                     return this.rotateZ();
                 }
 
@@ -97,10 +87,8 @@
         }
     }
 
-    public EnumFacing rotateY()
-    {
-        switch (this)
-        {
+    public EnumFacing rotateY() {
+        switch (this) {
             case NORTH:
                 return EAST;
             case EAST:
@@ -114,10 +102,8 @@
         }
     }
 
-    private EnumFacing rotateX()
-    {
-        switch (this)
-        {
+    private EnumFacing rotateX() {
+        switch (this) {
             case NORTH:
                 return DOWN;
             case EAST:
@@ -133,10 +119,8 @@
         }
     }
 
-    private EnumFacing rotateZ()
-    {
-        switch (this)
-        {
+    private EnumFacing rotateZ() {
+        switch (this) {
             case EAST:
                 return DOWN;
             case SOUTH:
@@ -151,10 +135,8 @@
         }
     }
 
-    public EnumFacing rotateYCCW()
-    {
-        switch (this)
-        {
+    public EnumFacing rotateYCCW() {
+        switch (this) {
             case NORTH:
                 return WEST;
             case EAST:
@@ -168,73 +150,59 @@
         }
     }
 
-    public int getFrontOffsetX()
-    {
+    public int getFrontOffsetX() {
         return this.axis == EnumFacing.Axis.X ? this.axisDirection.getOffset() : 0;
     }
 
-    public int getFrontOffsetY()
-    {
+    public int getFrontOffsetY() {
         return this.axis == EnumFacing.Axis.Y ? this.axisDirection.getOffset() : 0;
     }
 
-    public int getFrontOffsetZ()
-    {
+    public int getFrontOffsetZ() {
         return this.axis == EnumFacing.Axis.Z ? this.axisDirection.getOffset() : 0;
     }
 
-    public String getName2()
-    {
+    public String getName2() {
         return this.name;
     }
 
-    public EnumFacing.Axis getAxis()
-    {
+    public EnumFacing.Axis getAxis() {
         return this.axis;
     }
 
     @Nullable
-    public static EnumFacing byName(String name)
-    {
-        return name == null ? null : (EnumFacing)NAME_LOOKUP.get(name.toLowerCase(Locale.ROOT));
+    public static EnumFacing byName(String name) {
+        return name == null ? null : (EnumFacing) NAME_LOOKUP.get(name.toLowerCase(Locale.ROOT));
     }
 
-    public static EnumFacing getFront(int index)
-    {
+    public static EnumFacing getFront(int index) {
         return VALUES[MathHelper.abs(index % VALUES.length)];
     }
 
-    public static EnumFacing getHorizontal(int horizontalIndexIn)
-    {
+    public static EnumFacing getHorizontal(int horizontalIndexIn) {
         return HORIZONTALS[MathHelper.abs(horizontalIndexIn % HORIZONTALS.length)];
     }
 
-    public static EnumFacing fromAngle(double angle)
-    {
+    public static EnumFacing fromAngle(double angle) {
         return getHorizontal(MathHelper.floor(angle / 90.0D + 0.5D) & 3);
     }
 
-    public float getHorizontalAngle()
-    {
-        return (float)((this.horizontalIndex & 3) * 90);
+    public float getHorizontalAngle() {
+        return (float) ((this.horizontalIndex & 3) * 90);
     }
 
-    public static EnumFacing random(Random rand)
-    {
+    public static EnumFacing random(Random rand) {
         return values()[rand.nextInt(values().length)];
     }
 
-    public static EnumFacing getFacingFromVector(float x, float y, float z)
-    {
+    public static EnumFacing getFacingFromVector(float x, float y, float z) {
         EnumFacing enumfacing = NORTH;
         float f = Float.MIN_VALUE;
 
-        for (EnumFacing enumfacing1 : values())
-        {
-            float f1 = x * (float)enumfacing1.directionVec.getX() + y * (float)enumfacing1.directionVec.getY() + z * (float)enumfacing1.directionVec.getZ();
+        for (EnumFacing enumfacing1 : values()) {
+            float f1 = x * (float) enumfacing1.directionVec.getX() + y * (float) enumfacing1.directionVec.getY() + z * (float) enumfacing1.directionVec.getZ();
 
-            if (f1 > f)
-            {
+            if (f1 > f) {
                 f = f1;
                 enumfacing = enumfacing1;
             }
@@ -243,22 +211,17 @@
         return enumfacing;
     }
 
-    public String toString()
-    {
+    public String toString() {
         return this.name;
     }
 
-    public String getName()
-    {
+    public String getName() {
         return this.name;
     }
 
-    public static EnumFacing getFacingFromAxis(EnumFacing.AxisDirection axisDirectionIn, EnumFacing.Axis axisIn)
-    {
-        for (EnumFacing enumfacing : values())
-        {
-            if (enumfacing.getAxisDirection() == axisDirectionIn && enumfacing.getAxis() == axisIn)
-            {
+    public static EnumFacing getFacingFromAxis(EnumFacing.AxisDirection axisDirectionIn, EnumFacing.Axis axisIn) {
+        for (EnumFacing enumfacing : values()) {
+            if (enumfacing.getAxisDirection() == axisDirectionIn && enumfacing.getAxis() == axisIn) {
                 return enumfacing;
             }
         }
@@ -266,19 +229,15 @@
         throw new IllegalArgumentException("No such direction: " + axisDirectionIn + " " + axisIn);
     }
 
-    public static EnumFacing getDirectionFromEntityLiving(BlockPos pos, EntityLivingBase placer)
-    {
-        if (Math.abs(placer.posX - (double)((float)pos.getX() + 0.5F)) < 2.0D && Math.abs(placer.posZ - (double)((float)pos.getZ() + 0.5F)) < 2.0D)
-        {
-            double d0 = placer.posY + (double)placer.getEyeHeight();
+    public static EnumFacing getDirectionFromEntityLiving(BlockPos pos, EntityLivingBase placer) {
+        if (Math.abs(placer.posX - (double) ((float) pos.getX() + 0.5F)) < 2.0D && Math.abs(placer.posZ - (double) ((float) pos.getZ() + 0.5F)) < 2.0D) {
+            double d0 = placer.posY + (double) placer.getEyeHeight();
 
-            if (d0 - (double)pos.getY() > 2.0D)
-            {
+            if (d0 - (double) pos.getY() > 2.0D) {
                 return UP;
             }
 
-            if ((double)pos.getY() - d0 > 0.0D)
-            {
+            if ((double) pos.getY() - d0 > 0.0D) {
                 return DOWN;
             }
         }
@@ -286,19 +245,15 @@
         return placer.getHorizontalFacing().getOpposite();
     }
 
-    public Vec3i getDirectionVec()
-    {
+    public Vec3i getDirectionVec() {
         return this.directionVec;
     }
 
-    static
-    {
-        for (EnumFacing enumfacing : values())
-        {
+    static {
+        for (EnumFacing enumfacing : values()) {
             VALUES[enumfacing.index] = enumfacing;
 
-            if (enumfacing.getAxis().isHorizontal())
-            {
+            if (enumfacing.getAxis().isHorizontal()) {
                 HORIZONTALS[enumfacing.horizontalIndex] = enumfacing;
             }
 
@@ -315,57 +270,46 @@
         private final String name;
         private final EnumFacing.Plane plane;
 
-        private Axis(String name, EnumFacing.Plane plane)
-        {
+        private Axis(String name, EnumFacing.Plane plane) {
             this.name = name;
             this.plane = plane;
         }
 
         @Nullable
-        public static EnumFacing.Axis byName(String name)
-        {
-            return name == null ? null : (EnumFacing.Axis)NAME_LOOKUP.get(name.toLowerCase(Locale.ROOT));
+        public static EnumFacing.Axis byName(String name) {
+            return name == null ? null : (EnumFacing.Axis) NAME_LOOKUP.get(name.toLowerCase(Locale.ROOT));
         }
 
-        public String getName2()
-        {
+        public String getName2() {
             return this.name;
         }
 
-        public boolean isVertical()
-        {
+        public boolean isVertical() {
             return this.plane == EnumFacing.Plane.VERTICAL;
         }
 
-        public boolean isHorizontal()
-        {
+        public boolean isHorizontal() {
             return this.plane == EnumFacing.Plane.HORIZONTAL;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.name;
         }
 
-        public boolean apply(@Nullable EnumFacing p_apply_1_)
-        {
+        public boolean apply(@Nullable EnumFacing p_apply_1_) {
             return p_apply_1_ != null && p_apply_1_.getAxis() == this;
         }
 
-        public EnumFacing.Plane getPlane()
-        {
+        public EnumFacing.Plane getPlane() {
             return this.plane;
         }
 
-        public String getName()
-        {
+        public String getName() {
             return this.name;
         }
 
-        static
-        {
-            for (EnumFacing.Axis enumfacing$axis : values())
-            {
+        static {
+            for (EnumFacing.Axis enumfacing$axis : values()) {
                 NAME_LOOKUP.put(enumfacing$axis.getName2().toLowerCase(Locale.ROOT), enumfacing$axis);
             }
         }
@@ -378,19 +322,16 @@
         private final int offset;
         private final String description;
 
-        private AxisDirection(int offset, String description)
-        {
+        private AxisDirection(int offset, String description) {
             this.offset = offset;
             this.description = description;
         }
 
-        public int getOffset()
-        {
+        public int getOffset() {
             return this.offset;
         }
 
-        public String toString()
-        {
+        public String toString() {
             return this.description;
         }
     }
@@ -399,32 +340,27 @@
         HORIZONTAL,
         VERTICAL;
 
-        public EnumFacing[] facings()
-        {
-            switch (this)
-            {
+        public EnumFacing[] facings() {
+            switch (this) {
                 case HORIZONTAL:
-                    return new EnumFacing[] {EnumFacing.NORTH, EnumFacing.EAST, EnumFacing.SOUTH, EnumFacing.WEST};
+                    return new EnumFacing[]{EnumFacing.NORTH, EnumFacing.EAST, EnumFacing.SOUTH, EnumFacing.WEST};
                 case VERTICAL:
-                    return new EnumFacing[] {EnumFacing.UP, EnumFacing.DOWN};
+                    return new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN};
                 default:
                     throw new Error("Someone's been tampering with the universe!");
             }
         }
 
-        public EnumFacing random(Random rand)
-        {
+        public EnumFacing random(Random rand) {
             EnumFacing[] aenumfacing = this.facings();
             return aenumfacing[rand.nextInt(aenumfacing.length)];
         }
 
-        public boolean apply(@Nullable EnumFacing p_apply_1_)
-        {
+        public boolean apply(@Nullable EnumFacing p_apply_1_) {
             return p_apply_1_ != null && p_apply_1_.getAxis().getPlane() == this;
         }
 
-        public Iterator<EnumFacing> iterator()
-        {
+        public Iterator<EnumFacing> iterator() {
             return Iterators.<EnumFacing>forArray(this.facings());
         }
     }
