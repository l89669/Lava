--- ../src-base/minecraft/net/minecraft/util/text/TextComponentTranslation.java
+++ ../src-work/minecraft/net/minecraft/util/text/TextComponentTranslation.java
@@ -3,16 +3,16 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
+import net.minecraft.util.text.translation.I18n;
+
 import java.util.Arrays;
 import java.util.IllegalFormatException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import net.minecraft.util.text.translation.I18n;
 
-public class TextComponentTranslation extends TextComponentBase
-{
+public class TextComponentTranslation extends TextComponentBase {
     private final String key;
     private final Object[] formatArgs;
     private final Object syncLock = new Object();
@@ -21,30 +21,24 @@
     List<ITextComponent> children = Lists.<ITextComponent>newArrayList();
     public static final Pattern STRING_VARIABLE_PATTERN = Pattern.compile("%(?:(\\d+)\\$)?([A-Za-z%]|$)");
 
-    public TextComponentTranslation(String translationKey, Object... args)
-    {
+    public TextComponentTranslation(String translationKey, Object... args) {
         this.key = translationKey;
         this.formatArgs = args;
 
-        for (Object object : args)
-        {
-            if (object instanceof ITextComponent)
-            {
-                ((ITextComponent)object).getStyle().setParentStyle(this.getStyle());
+        for (Object object : args) {
+            if (object instanceof ITextComponent) {
+                ((ITextComponent) object).getStyle().setParentStyle(this.getStyle());
             }
         }
     }
 
     @VisibleForTesting
 
-    synchronized void ensureInitialized()
-    {
-        synchronized (this.syncLock)
-        {
+    synchronized void ensureInitialized() {
+        synchronized (this.syncLock) {
             long i = I18n.getLastTranslationUpdateTimeInMilliseconds();
 
-            if (i == this.lastTranslationUpdateTimeInMilliseconds)
-            {
+            if (i == this.lastTranslationUpdateTimeInMilliseconds) {
                 return;
             }
 
@@ -52,43 +46,33 @@
             this.children.clear();
         }
 
-        try
-        {
+        try {
             this.initializeFromFormat(I18n.translateToLocal(this.key));
-        }
-        catch (TextComponentTranslationFormatException textcomponenttranslationformatexception)
-        {
+        } catch (TextComponentTranslationFormatException textcomponenttranslationformatexception) {
             this.children.clear();
 
-            try
-            {
+            try {
                 this.initializeFromFormat(I18n.translateToFallback(this.key));
-            }
-            catch (TextComponentTranslationFormatException var5)
-            {
+            } catch (TextComponentTranslationFormatException var5) {
                 throw textcomponenttranslationformatexception;
             }
         }
     }
 
-    protected void initializeFromFormat(String format)
-    {
+    protected void initializeFromFormat(String format) {
         boolean flag = false;
         Matcher matcher = STRING_VARIABLE_PATTERN.matcher(format);
         int i = 0;
         int j = 0;
 
-        try
-        {
+        try {
             int l;
 
-            for (; matcher.find(j); j = l)
-            {
+            for (; matcher.find(j); j = l) {
                 int k = matcher.start();
                 l = matcher.end();
 
-                if (k > j)
-                {
+                if (k > j) {
                     TextComponentString textcomponentstring = new TextComponentString(String.format(format.substring(j, k)));
                     textcomponentstring.getStyle().setParentStyle(this.getStyle());
                     this.children.add(textcomponentstring);
@@ -97,59 +81,44 @@
                 String s2 = matcher.group(2);
                 String s = format.substring(k, l);
 
-                if ("%".equals(s2) && "%%".equals(s))
-                {
+                if ("%".equals(s2) && "%%".equals(s)) {
                     TextComponentString textcomponentstring2 = new TextComponentString("%");
                     textcomponentstring2.getStyle().setParentStyle(this.getStyle());
                     this.children.add(textcomponentstring2);
-                }
-                else
-                {
-                    if (!"s".equals(s2))
-                    {
+                } else {
+                    if (!"s".equals(s2)) {
                         throw new TextComponentTranslationFormatException(this, "Unsupported format: '" + s + "'");
                     }
 
                     String s1 = matcher.group(1);
                     int i1 = s1 != null ? Integer.parseInt(s1) - 1 : i++;
 
-                    if (i1 < this.formatArgs.length)
-                    {
+                    if (i1 < this.formatArgs.length) {
                         this.children.add(this.getFormatArgumentAsComponent(i1));
                     }
                 }
             }
 
-            if (j < format.length())
-            {
+            if (j < format.length()) {
                 TextComponentString textcomponentstring1 = new TextComponentString(String.format(format.substring(j)));
                 textcomponentstring1.getStyle().setParentStyle(this.getStyle());
                 this.children.add(textcomponentstring1);
             }
-        }
-        catch (IllegalFormatException illegalformatexception)
-        {
+        } catch (IllegalFormatException illegalformatexception) {
             throw new TextComponentTranslationFormatException(this, illegalformatexception);
         }
     }
 
-    private ITextComponent getFormatArgumentAsComponent(int index)
-    {
-        if (index >= this.formatArgs.length)
-        {
+    private ITextComponent getFormatArgumentAsComponent(int index) {
+        if (index >= this.formatArgs.length) {
             throw new TextComponentTranslationFormatException(this, index);
-        }
-        else
-        {
+        } else {
             Object object = this.formatArgs[index];
             ITextComponent itextcomponent;
 
-            if (object instanceof ITextComponent)
-            {
-                itextcomponent = (ITextComponent)object;
-            }
-            else
-            {
+            if (object instanceof ITextComponent) {
+                itextcomponent = (ITextComponent) object;
+            } else {
                 itextcomponent = new TextComponentString(object == null ? "null" : object.toString());
                 itextcomponent.getStyle().setParentStyle(this.getStyle());
             }
@@ -158,22 +127,17 @@
         }
     }
 
-    public ITextComponent setStyle(Style style)
-    {
+    public ITextComponent setStyle(Style style) {
         super.setStyle(style);
 
-        for (Object object : this.formatArgs)
-        {
-            if (object instanceof ITextComponent)
-            {
-                ((ITextComponent)object).getStyle().setParentStyle(this.getStyle());
+        for (Object object : this.formatArgs) {
+            if (object instanceof ITextComponent) {
+                ((ITextComponent) object).getStyle().setParentStyle(this.getStyle());
             }
         }
 
-        if (this.lastTranslationUpdateTimeInMilliseconds > -1L)
-        {
-            for (ITextComponent itextcomponent : this.children)
-            {
+        if (this.lastTranslationUpdateTimeInMilliseconds > -1L) {
+            for (ITextComponent itextcomponent : this.children) {
                 itextcomponent.getStyle().setParentStyle(style);
             }
         }
@@ -181,37 +145,29 @@
         return this;
     }
 
-    public Iterator<ITextComponent> iterator()
-    {
+    public Iterator<ITextComponent> iterator() {
         this.ensureInitialized();
         return Iterators.<ITextComponent>concat(createDeepCopyIterator(this.children), createDeepCopyIterator(this.siblings));
     }
 
-    public String getUnformattedComponentText()
-    {
+    public String getUnformattedComponentText() {
         this.ensureInitialized();
         StringBuilder stringbuilder = new StringBuilder();
 
-        for (ITextComponent itextcomponent : this.children)
-        {
+        for (ITextComponent itextcomponent : this.children) {
             stringbuilder.append(itextcomponent.getUnformattedComponentText());
         }
 
         return stringbuilder.toString();
     }
 
-    public TextComponentTranslation createCopy()
-    {
+    public TextComponentTranslation createCopy() {
         Object[] aobject = new Object[this.formatArgs.length];
 
-        for (int i = 0; i < this.formatArgs.length; ++i)
-        {
-            if (this.formatArgs[i] instanceof ITextComponent)
-            {
-                aobject[i] = ((ITextComponent)this.formatArgs[i]).createCopy();
-            }
-            else
-            {
+        for (int i = 0; i < this.formatArgs.length; ++i) {
+            if (this.formatArgs[i] instanceof ITextComponent) {
+                aobject[i] = ((ITextComponent) this.formatArgs[i]).createCopy();
+            } else {
                 aobject[i] = this.formatArgs[i];
             }
         }
@@ -219,51 +175,40 @@
         TextComponentTranslation textcomponenttranslation = new TextComponentTranslation(this.key, aobject);
         textcomponenttranslation.setStyle(this.getStyle().createShallowCopy());
 
-        for (ITextComponent itextcomponent : this.getSiblings())
-        {
+        for (ITextComponent itextcomponent : this.getSiblings()) {
             textcomponenttranslation.appendSibling(itextcomponent.createCopy());
         }
 
         return textcomponenttranslation;
     }
 
-    public boolean equals(Object p_equals_1_)
-    {
-        if (this == p_equals_1_)
-        {
+    public boolean equals(Object p_equals_1_) {
+        if (this == p_equals_1_) {
             return true;
-        }
-        else if (!(p_equals_1_ instanceof TextComponentTranslation))
-        {
+        } else if (!(p_equals_1_ instanceof TextComponentTranslation)) {
             return false;
-        }
-        else
-        {
-            TextComponentTranslation textcomponenttranslation = (TextComponentTranslation)p_equals_1_;
+        } else {
+            TextComponentTranslation textcomponenttranslation = (TextComponentTranslation) p_equals_1_;
             return Arrays.equals(this.formatArgs, textcomponenttranslation.formatArgs) && this.key.equals(textcomponenttranslation.key) && super.equals(p_equals_1_);
         }
     }
 
-    public int hashCode()
-    {
+    public int hashCode() {
         int i = super.hashCode();
         i = 31 * i + this.key.hashCode();
         i = 31 * i + Arrays.hashCode(this.formatArgs);
         return i;
     }
 
-    public String toString()
-    {
+    public String toString() {
         return "TranslatableComponent{key='" + this.key + '\'' + ", args=" + Arrays.toString(this.formatArgs) + ", siblings=" + this.siblings + ", style=" + this.getStyle() + '}';
     }
 
-    public String getKey()
-    {
+    public String getKey() {
         return this.key;
     }
 
-    public Object[] getFormatArgs()
-    {
+    public Object[] getFormatArgs() {
         return this.formatArgs;
     }
 }
