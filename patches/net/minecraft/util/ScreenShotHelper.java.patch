--- ../src-base/minecraft/net/minecraft/util/ScreenShotHelper.java
+++ ../src-work/minecraft/net/minecraft/util/ScreenShotHelper.java
@@ -1,13 +1,5 @@
 package net.minecraft.util;
 
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.nio.IntBuffer;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.texture.TextureUtil;
@@ -22,66 +14,64 @@
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.BufferUtils;
 
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.nio.IntBuffer;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
 @SideOnly(Side.CLIENT)
-public class ScreenShotHelper
-{
+public class ScreenShotHelper {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
     private static IntBuffer pixelBuffer;
     private static int[] pixelValues;
 
-    public static ITextComponent saveScreenshot(File gameDirectory, int width, int height, Framebuffer buffer)
-    {
-        return saveScreenshot(gameDirectory, (String)null, width, height, buffer);
+    public static ITextComponent saveScreenshot(File gameDirectory, int width, int height, Framebuffer buffer) {
+        return saveScreenshot(gameDirectory, (String) null, width, height, buffer);
     }
 
-    public static ITextComponent saveScreenshot(File gameDirectory, @Nullable String screenshotName, int width, int height, Framebuffer buffer)
-    {
-        try
-        {
+    public static ITextComponent saveScreenshot(File gameDirectory, @Nullable String screenshotName, int width, int height, Framebuffer buffer) {
+        try {
             File file1 = new File(gameDirectory, "screenshots");
             file1.mkdir();
             BufferedImage bufferedimage = createScreenshot(width, height, buffer);
             File file2;
 
-            if (screenshotName == null)
-            {
+            if (screenshotName == null) {
                 file2 = getTimestampedPNGFileForDirectory(file1);
-            }
-            else
-            {
+            } else {
                 file2 = new File(file1, screenshotName);
             }
 
             file2 = file2.getCanonicalFile(); // FORGE: Fix errors on Windows with paths that include \.\
             net.minecraftforge.client.event.ScreenshotEvent event = net.minecraftforge.client.ForgeHooksClient.onScreenshot(bufferedimage, file2);
-            if (event.isCanceled()) return event.getCancelMessage(); else file2 = event.getScreenshotFile();
+            if (event.isCanceled()) return event.getCancelMessage();
+            else file2 = event.getScreenshotFile();
             ImageIO.write(bufferedimage, "png", file2);
             ITextComponent itextcomponent = new TextComponentString(file2.getName());
             itextcomponent.getStyle().setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file2.getAbsolutePath()));
             itextcomponent.getStyle().setUnderlined(Boolean.valueOf(true));
             if (event.getResultMessage() != null) return event.getResultMessage();
-            return new TextComponentTranslation("screenshot.success", new Object[] {itextcomponent});
+            return new TextComponentTranslation("screenshot.success", new Object[]{itextcomponent});
+        } catch (Exception exception) {
+            LOGGER.warn("Couldn't save screenshot", (Throwable) exception);
+            return new TextComponentTranslation("screenshot.failure", new Object[]{exception.getMessage()});
         }
-        catch (Exception exception)
-        {
-            LOGGER.warn("Couldn't save screenshot", (Throwable)exception);
-            return new TextComponentTranslation("screenshot.failure", new Object[] {exception.getMessage()});
-        }
     }
 
-    public static BufferedImage createScreenshot(int width, int height, Framebuffer framebufferIn)
-    {
-        if (OpenGlHelper.isFramebufferEnabled())
-        {
+    public static BufferedImage createScreenshot(int width, int height, Framebuffer framebufferIn) {
+        if (OpenGlHelper.isFramebufferEnabled()) {
             width = framebufferIn.framebufferTextureWidth;
             height = framebufferIn.framebufferTextureHeight;
         }
 
         int i = width * height;
 
-        if (pixelBuffer == null || pixelBuffer.capacity() < i)
-        {
+        if (pixelBuffer == null || pixelBuffer.capacity() < i) {
             pixelBuffer = BufferUtils.createIntBuffer(i);
             pixelValues = new int[i];
         }
@@ -90,13 +80,10 @@
         GlStateManager.glPixelStorei(3317, 1);
         pixelBuffer.clear();
 
-        if (OpenGlHelper.isFramebufferEnabled())
-        {
+        if (OpenGlHelper.isFramebufferEnabled()) {
             GlStateManager.bindTexture(framebufferIn.framebufferTexture);
             GlStateManager.glGetTexImage(3553, 0, 32993, 33639, pixelBuffer);
-        }
-        else
-        {
+        } else {
             GlStateManager.glReadPixels(0, 0, width, height, 32993, 33639, pixelBuffer);
         }
 
@@ -107,17 +94,14 @@
         return bufferedimage;
     }
 
-    private static File getTimestampedPNGFileForDirectory(File gameDirectory)
-    {
+    private static File getTimestampedPNGFileForDirectory(File gameDirectory) {
         String s = DATE_FORMAT.format(new Date()).toString();
         int i = 1;
 
-        while (true)
-        {
+        while (true) {
             File file1 = new File(gameDirectory, s + (i == 1 ? "" : "_" + i) + ".png");
 
-            if (!file1.exists())
-            {
+            if (!file1.exists()) {
                 return file1;
             }
 
