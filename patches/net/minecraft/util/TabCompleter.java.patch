--- ../src-base/minecraft/net/minecraft/util/TabCompleter.java
+++ ../src-work/minecraft/net/minecraft/util/TabCompleter.java
@@ -1,8 +1,6 @@
 package net.minecraft.util;
 
 import com.google.common.collect.Lists;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiTextField;
 import net.minecraft.network.play.client.CPacketTabComplete;
@@ -10,9 +8,11 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public abstract class TabCompleter
-{
+public abstract class TabCompleter {
     protected final GuiTextField textField;
     protected final boolean hasTargetBlock;
     protected boolean didComplete;
@@ -20,34 +20,27 @@
     protected int completionIdx;
     protected List<String> completions = Lists.<String>newArrayList();
 
-    public TabCompleter(GuiTextField textFieldIn, boolean hasTargetBlockIn)
-    {
+    public TabCompleter(GuiTextField textFieldIn, boolean hasTargetBlockIn) {
         this.textField = textFieldIn;
         this.hasTargetBlock = hasTargetBlockIn;
     }
 
-    public void complete()
-    {
-        if (this.didComplete)
-        {
+    public void complete() {
+        if (this.didComplete) {
             this.textField.deleteFromCursor(0);
             this.textField.deleteFromCursor(this.textField.getNthWordFromPosWS(-1, this.textField.getCursorPosition(), false) - this.textField.getCursorPosition());
 
-            if (this.completionIdx >= this.completions.size())
-            {
+            if (this.completionIdx >= this.completions.size()) {
                 this.completionIdx = 0;
             }
-        }
-        else
-        {
+        } else {
             int i = this.textField.getNthWordFromPosWS(-1, this.textField.getCursorPosition(), false);
             this.completions.clear();
             this.completionIdx = 0;
             String s = this.textField.getText().substring(0, this.textField.getCursorPosition());
             this.requestCompletions(s);
 
-            if (this.completions.isEmpty())
-            {
+            if (this.completions.isEmpty()) {
                 return;
             }
 
@@ -58,10 +51,8 @@
         this.textField.writeText(net.minecraft.util.text.TextFormatting.getTextWithoutFormattingCodes(this.completions.get(this.completionIdx++)));
     }
 
-    private void requestCompletions(String prefix)
-    {
-        if (prefix.length() >= 1)
-        {
+    private void requestCompletions(String prefix) {
+        if (prefix.length() >= 1) {
             net.minecraftforge.client.ClientCommandHandler.instance.autoComplete(prefix);
             Minecraft.getMinecraft().player.connection.sendPacket(new CPacketTabComplete(prefix, this.getTargetBlockPos(), this.hasTargetBlock));
             this.requestedCompletions = true;
@@ -71,23 +62,18 @@
     @Nullable
     public abstract BlockPos getTargetBlockPos();
 
-    public void setCompletions(String... newCompl)
-    {
-        if (this.requestedCompletions)
-        {
+    public void setCompletions(String... newCompl) {
+        if (this.requestedCompletions) {
             this.didComplete = false;
             this.completions.clear();
 
             String[] complete = net.minecraftforge.client.ClientCommandHandler.instance.latestAutoComplete;
-            if (complete != null)
-            {
+            if (complete != null) {
                 newCompl = com.google.common.collect.ObjectArrays.concat(complete, newCompl, String.class);
             }
 
-            for (String s : newCompl)
-            {
-                if (!s.isEmpty())
-                {
+            for (String s : newCompl) {
+                if (!s.isEmpty()) {
                     this.completions.add(s);
                 }
             }
@@ -96,27 +82,22 @@
             String s2 = org.apache.commons.lang3.StringUtils.getCommonPrefix(newCompl);
             s2 = net.minecraft.util.text.TextFormatting.getTextWithoutFormattingCodes(s2);
 
-            if (!s2.isEmpty() && !s1.equalsIgnoreCase(s2))
-            {
+            if (!s2.isEmpty() && !s1.equalsIgnoreCase(s2)) {
                 this.textField.deleteFromCursor(0);
                 this.textField.deleteFromCursor(this.textField.getNthWordFromPosWS(-1, this.textField.getCursorPosition(), false) - this.textField.getCursorPosition());
                 this.textField.writeText(s2);
-            }
-            else if (!this.completions.isEmpty())
-            {
+            } else if (!this.completions.isEmpty()) {
                 this.didComplete = true;
                 this.complete();
             }
         }
     }
 
-    public void resetDidComplete()
-    {
+    public void resetDidComplete() {
         this.didComplete = false;
     }
 
-    public void resetRequested()
-    {
+    public void resetRequested() {
         this.requestedCompletions = false;
     }
 }
