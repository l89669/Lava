--- ../src-base/minecraft/net/minecraft/util/CryptManager.java
+++ ../src-work/minecraft/net/minecraft/util/CryptManager.java
@@ -1,114 +1,77 @@
 package net.minecraft.util;
 
-import java.io.UnsupportedEncodingException;
-import java.security.GeneralSecurityException;
-import java.security.InvalidKeyException;
-import java.security.Key;
-import java.security.KeyFactory;
-import java.security.KeyPair;
-import java.security.KeyPairGenerator;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import java.security.spec.EncodedKeySpec;
-import java.security.spec.InvalidKeySpecException;
-import java.security.spec.X509EncodedKeySpec;
-import javax.crypto.BadPaddingException;
-import javax.crypto.Cipher;
-import javax.crypto.IllegalBlockSizeException;
-import javax.crypto.KeyGenerator;
-import javax.crypto.NoSuchPaddingException;
-import javax.crypto.SecretKey;
-import javax.crypto.spec.IvParameterSpec;
-import javax.crypto.spec.SecretKeySpec;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class CryptManager
-{
+import javax.crypto.*;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.UnsupportedEncodingException;
+import java.security.*;
+import java.security.spec.EncodedKeySpec;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.X509EncodedKeySpec;
+
+public class CryptManager {
     private static final Logger LOGGER = LogManager.getLogger();
 
     @SideOnly(Side.CLIENT)
-    public static SecretKey createNewSharedKey()
-    {
-        try
-        {
+    public static SecretKey createNewSharedKey() {
+        try {
             KeyGenerator keygenerator = KeyGenerator.getInstance("AES");
             keygenerator.init(128);
             return keygenerator.generateKey();
-        }
-        catch (NoSuchAlgorithmException nosuchalgorithmexception)
-        {
+        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
             throw new Error(nosuchalgorithmexception);
         }
     }
 
-    public static KeyPair generateKeyPair()
-    {
-        try
-        {
+    public static KeyPair generateKeyPair() {
+        try {
             KeyPairGenerator keypairgenerator = KeyPairGenerator.getInstance("RSA");
             keypairgenerator.initialize(1024);
             return keypairgenerator.generateKeyPair();
-        }
-        catch (NoSuchAlgorithmException nosuchalgorithmexception)
-        {
+        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
             nosuchalgorithmexception.printStackTrace();
             LOGGER.error("Key pair generation failed!");
             return null;
         }
     }
 
-    public static byte[] getServerIdHash(String serverId, PublicKey publicKey, SecretKey secretKey)
-    {
-        try
-        {
+    public static byte[] getServerIdHash(String serverId, PublicKey publicKey, SecretKey secretKey) {
+        try {
             return digestOperation("SHA-1", serverId.getBytes("ISO_8859_1"), secretKey.getEncoded(), publicKey.getEncoded());
-        }
-        catch (UnsupportedEncodingException unsupportedencodingexception)
-        {
+        } catch (UnsupportedEncodingException unsupportedencodingexception) {
             unsupportedencodingexception.printStackTrace();
             return null;
         }
     }
 
-    private static byte[] digestOperation(String algorithm, byte[]... data)
-    {
-        try
-        {
+    private static byte[] digestOperation(String algorithm, byte[]... data) {
+        try {
             MessageDigest messagedigest = MessageDigest.getInstance(algorithm);
 
-            for (byte[] abyte : data)
-            {
+            for (byte[] abyte : data) {
                 messagedigest.update(abyte);
             }
 
             return messagedigest.digest();
-        }
-        catch (NoSuchAlgorithmException nosuchalgorithmexception)
-        {
+        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
             nosuchalgorithmexception.printStackTrace();
             return null;
         }
     }
 
-    public static PublicKey decodePublicKey(byte[] encodedKey)
-    {
-        try
-        {
+    public static PublicKey decodePublicKey(byte[] encodedKey) {
+        try {
             EncodedKeySpec encodedkeyspec = new X509EncodedKeySpec(encodedKey);
             KeyFactory keyfactory = KeyFactory.getInstance("RSA");
             return keyfactory.generatePublic(encodedkeyspec);
-        }
-        catch (NoSuchAlgorithmException var3)
-        {
+        } catch (NoSuchAlgorithmException var3) {
             ;
-        }
-        catch (InvalidKeySpecException var4)
-        {
+        } catch (InvalidKeySpecException var4) {
             ;
         }
 
@@ -116,34 +79,25 @@
         return null;
     }
 
-    public static SecretKey decryptSharedKey(PrivateKey key, byte[] secretKeyEncrypted)
-    {
+    public static SecretKey decryptSharedKey(PrivateKey key, byte[] secretKeyEncrypted) {
         return new SecretKeySpec(decryptData(key, secretKeyEncrypted), "AES");
     }
 
     @SideOnly(Side.CLIENT)
-    public static byte[] encryptData(Key key, byte[] data)
-    {
+    public static byte[] encryptData(Key key, byte[] data) {
         return cipherOperation(1, key, data);
     }
 
-    public static byte[] decryptData(Key key, byte[] data)
-    {
+    public static byte[] decryptData(Key key, byte[] data) {
         return cipherOperation(2, key, data);
     }
 
-    private static byte[] cipherOperation(int opMode, Key key, byte[] data)
-    {
-        try
-        {
+    private static byte[] cipherOperation(int opMode, Key key, byte[] data) {
+        try {
             return createTheCipherInstance(opMode, key.getAlgorithm(), key).doFinal(data);
-        }
-        catch (IllegalBlockSizeException illegalblocksizeexception)
-        {
+        } catch (IllegalBlockSizeException illegalblocksizeexception) {
             illegalblocksizeexception.printStackTrace();
-        }
-        catch (BadPaddingException badpaddingexception)
-        {
+        } catch (BadPaddingException badpaddingexception) {
             badpaddingexception.printStackTrace();
         }
 
@@ -151,24 +105,16 @@
         return null;
     }
 
-    private static Cipher createTheCipherInstance(int opMode, String transformation, Key key)
-    {
-        try
-        {
+    private static Cipher createTheCipherInstance(int opMode, String transformation, Key key) {
+        try {
             Cipher cipher = Cipher.getInstance(transformation);
             cipher.init(opMode, key);
             return cipher;
-        }
-        catch (InvalidKeyException invalidkeyexception)
-        {
+        } catch (InvalidKeyException invalidkeyexception) {
             invalidkeyexception.printStackTrace();
-        }
-        catch (NoSuchAlgorithmException nosuchalgorithmexception)
-        {
+        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
             nosuchalgorithmexception.printStackTrace();
-        }
-        catch (NoSuchPaddingException nosuchpaddingexception)
-        {
+        } catch (NoSuchPaddingException nosuchpaddingexception) {
             nosuchpaddingexception.printStackTrace();
         }
 
@@ -176,16 +122,12 @@
         return null;
     }
 
-    public static Cipher createNetCipherInstance(int opMode, Key key)
-    {
-        try
-        {
+    public static Cipher createNetCipherInstance(int opMode, Key key) {
+        try {
             Cipher cipher = Cipher.getInstance("AES/CFB8/NoPadding");
             cipher.init(opMode, key, new IvParameterSpec(key.getEncoded()));
             return cipher;
-        }
-        catch (GeneralSecurityException generalsecurityexception)
-        {
+        } catch (GeneralSecurityException generalsecurityexception) {
             throw new RuntimeException(generalsecurityexception);
         }
     }
