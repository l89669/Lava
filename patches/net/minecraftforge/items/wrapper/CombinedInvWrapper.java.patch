--- ../src-base/minecraft/net/minecraftforge/items/wrapper/CombinedInvWrapper.java
+++ ../src-work/minecraft/net/minecraftforge/items/wrapper/CombinedInvWrapper.java
@@ -25,20 +25,17 @@
 import javax.annotation.Nonnull;
 
 // combines multiple IItemHandlerModifiable into one interface
-public class CombinedInvWrapper implements IItemHandlerModifiable
-{
+public class CombinedInvWrapper implements IItemHandlerModifiable {
 
     protected final IItemHandlerModifiable[] itemHandler; // the handlers
     protected final int[] baseIndex; // index-offsets of the different handlers
     protected final int slotCount; // number of total slots
 
-    public CombinedInvWrapper(IItemHandlerModifiable... itemHandler)
-    {
+    public CombinedInvWrapper(IItemHandlerModifiable... itemHandler) {
         this.itemHandler = itemHandler;
         this.baseIndex = new int[itemHandler.length];
         int index = 0;
-        for (int i = 0; i < itemHandler.length; i++)
-        {
+        for (int i = 0; i < itemHandler.length; i++) {
             index += itemHandler[i].getSlots();
             baseIndex[i] = index;
         }
@@ -46,42 +43,34 @@
     }
 
     // returns the handler index for the slot
-    protected int getIndexForSlot(int slot)
-    {
+    protected int getIndexForSlot(int slot) {
         if (slot < 0)
             return -1;
 
-        for (int i = 0; i < baseIndex.length; i++)
-        {
-            if (slot - baseIndex[i] < 0)
-            {
+        for (int i = 0; i < baseIndex.length; i++) {
+            if (slot - baseIndex[i] < 0) {
                 return i;
             }
         }
         return -1;
     }
 
-    protected IItemHandlerModifiable getHandlerFromIndex(int index)
-    {
-        if (index < 0 || index >= itemHandler.length)
-        {
-            return (IItemHandlerModifiable)EmptyHandler.INSTANCE;
+    protected IItemHandlerModifiable getHandlerFromIndex(int index) {
+        if (index < 0 || index >= itemHandler.length) {
+            return (IItemHandlerModifiable) EmptyHandler.INSTANCE;
         }
         return itemHandler[index];
     }
 
-    protected int getSlotFromIndex(int slot, int index)
-    {
-        if (index <= 0 || index >= baseIndex.length)
-        {
+    protected int getSlotFromIndex(int slot, int index) {
+        if (index <= 0 || index >= baseIndex.length) {
             return slot;
         }
         return slot - baseIndex[index - 1];
     }
 
     @Override
-    public void setStackInSlot(int slot, @Nonnull ItemStack stack)
-    {
+    public void setStackInSlot(int slot, @Nonnull ItemStack stack) {
         int index = getIndexForSlot(slot);
         IItemHandlerModifiable handler = getHandlerFromIndex(index);
         slot = getSlotFromIndex(slot, index);
@@ -89,15 +78,13 @@
     }
 
     @Override
-    public int getSlots()
-    {
+    public int getSlots() {
         return slotCount;
     }
 
     @Override
     @Nonnull
-    public ItemStack getStackInSlot(int slot)
-    {
+    public ItemStack getStackInSlot(int slot) {
         int index = getIndexForSlot(slot);
         IItemHandlerModifiable handler = getHandlerFromIndex(index);
         slot = getSlotFromIndex(slot, index);
@@ -106,8 +93,7 @@
 
     @Override
     @Nonnull
-    public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate)
-    {
+    public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate) {
         int index = getIndexForSlot(slot);
         IItemHandlerModifiable handler = getHandlerFromIndex(index);
         slot = getSlotFromIndex(slot, index);
@@ -116,8 +102,7 @@
 
     @Override
     @Nonnull
-    public ItemStack extractItem(int slot, int amount, boolean simulate)
-    {
+    public ItemStack extractItem(int slot, int amount, boolean simulate) {
         int index = getIndexForSlot(slot);
         IItemHandlerModifiable handler = getHandlerFromIndex(index);
         slot = getSlotFromIndex(slot, index);
@@ -125,8 +110,7 @@
     }
 
     @Override
-    public int getSlotLimit(int slot)
-    {
+    public int getSlotLimit(int slot) {
         int index = getIndexForSlot(slot);
         IItemHandlerModifiable handler = getHandlerFromIndex(index);
         int localSlot = getSlotFromIndex(slot, index);
@@ -134,8 +118,7 @@
     }
 
     @Override
-    public boolean isItemValid(int slot, @Nonnull ItemStack stack)
-    {
+    public boolean isItemValid(int slot, @Nonnull ItemStack stack) {
         int index = getIndexForSlot(slot);
         IItemHandlerModifiable handler = getHandlerFromIndex(index);
         int localSlot = getSlotFromIndex(slot, index);
