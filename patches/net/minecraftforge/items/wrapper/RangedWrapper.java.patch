--- ../src-base/minecraft/net/minecraftforge/items/wrapper/RangedWrapper.java
+++ ../src-work/minecraft/net/minecraftforge/items/wrapper/RangedWrapper.java
@@ -35,8 +35,7 @@
     private final int minSlot;
     private final int maxSlot;
 
-    public RangedWrapper(IItemHandlerModifiable compose, int minSlot, int maxSlotExclusive)
-    {
+    public RangedWrapper(IItemHandlerModifiable compose, int minSlot, int maxSlotExclusive) {
         Preconditions.checkArgument(maxSlotExclusive > minSlot, "Max slot must be greater than min slot");
         this.compose = compose;
         this.minSlot = minSlot;
@@ -44,17 +43,14 @@
     }
 
     @Override
-    public int getSlots()
-    {
+    public int getSlots() {
         return maxSlot - minSlot;
     }
 
     @Override
     @Nonnull
-    public ItemStack getStackInSlot(int slot)
-    {
-        if (checkSlot(slot))
-        {
+    public ItemStack getStackInSlot(int slot) {
+        if (checkSlot(slot)) {
             return compose.getStackInSlot(slot + minSlot);
         }
 
@@ -63,10 +59,8 @@
 
     @Override
     @Nonnull
-    public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate)
-    {
-        if (checkSlot(slot))
-        {
+    public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate) {
+        if (checkSlot(slot)) {
             return compose.insertItem(slot + minSlot, stack, simulate);
         }
 
@@ -75,10 +69,8 @@
 
     @Override
     @Nonnull
-    public ItemStack extractItem(int slot, int amount, boolean simulate)
-    {
-        if (checkSlot(slot))
-        {
+    public ItemStack extractItem(int slot, int amount, boolean simulate) {
+        if (checkSlot(slot)) {
             return compose.extractItem(slot + minSlot, amount, simulate);
         }
 
@@ -86,19 +78,15 @@
     }
 
     @Override
-    public void setStackInSlot(int slot, @Nonnull ItemStack stack)
-    {
-        if (checkSlot(slot))
-        {
+    public void setStackInSlot(int slot, @Nonnull ItemStack stack) {
+        if (checkSlot(slot)) {
             compose.setStackInSlot(slot + minSlot, stack);
         }
     }
 
     @Override
-    public int getSlotLimit(int slot)
-    {
-        if (checkSlot(slot))
-        {
+    public int getSlotLimit(int slot) {
+        if (checkSlot(slot)) {
             return compose.getSlotLimit(slot + minSlot);
         }
 
@@ -106,18 +94,15 @@
     }
 
     @Override
-    public boolean isItemValid(int slot, @Nonnull ItemStack stack)
-    {
-        if (checkSlot(slot))
-        {
+    public boolean isItemValid(int slot, @Nonnull ItemStack stack) {
+        if (checkSlot(slot)) {
             return compose.isItemValid(slot + minSlot, stack);
         }
 
         return false;
     }
 
-    private boolean checkSlot(int localSlot)
-    {
+    private boolean checkSlot(int localSlot) {
         return localSlot + minSlot < maxSlot;
     }
 
