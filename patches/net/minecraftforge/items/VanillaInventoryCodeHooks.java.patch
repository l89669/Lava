--- ../src-base/minecraft/net/minecraftforge/items/VanillaInventoryCodeHooks.java
+++ ../src-work/minecraft/net/minecraftforge/items/VanillaInventoryCodeHooks.java
@@ -37,36 +37,30 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-public class VanillaInventoryCodeHooks
-{
+public class VanillaInventoryCodeHooks {
     /**
      * Copied from TileEntityHopper#captureDroppedItems and added capability support
+     *
      * @return Null if we did nothing {no IItemHandler}, True if we moved an item, False if we moved no items
      */
     @Nullable
-    public static Boolean extractHook(IHopper dest)
-    {
+    public static Boolean extractHook(IHopper dest) {
         Pair<IItemHandler, Object> itemHandlerResult = getItemHandler(dest, EnumFacing.UP);
         if (itemHandlerResult == null)
             return null;
 
         IItemHandler handler = itemHandlerResult.getKey();
 
-        for (int i = 0; i < handler.getSlots(); i++)
-        {
+        for (int i = 0; i < handler.getSlots(); i++) {
             ItemStack extractItem = handler.extractItem(i, 1, true);
-            if (!extractItem.isEmpty())
-            {
-                for (int j = 0; j < dest.getSizeInventory(); j++)
-                {
+            if (!extractItem.isEmpty()) {
+                for (int j = 0; j < dest.getSizeInventory(); j++) {
                     ItemStack destStack = dest.getStackInSlot(j);
-                    if (dest.isItemValidForSlot(j, extractItem) && (destStack.isEmpty() || destStack.getCount() < destStack.getMaxStackSize() && destStack.getCount() < dest.getInventoryStackLimit() && ItemHandlerHelper.canItemStacksStack(extractItem, destStack)))
-                    {
+                    if (dest.isItemValidForSlot(j, extractItem) && (destStack.isEmpty() || destStack.getCount() < destStack.getMaxStackSize() && destStack.getCount() < dest.getInventoryStackLimit() && ItemHandlerHelper.canItemStacksStack(extractItem, destStack))) {
                         extractItem = handler.extractItem(i, 1, false);
                         if (destStack.isEmpty())
                             dest.setInventorySlotContents(j, extractItem);
-                        else
-                        {
+                        else {
                             destStack.grow(1);
                             dest.setInventorySlotContents(j, destStack);
                         }
@@ -83,29 +77,22 @@
     /**
      * Copied from BlockDropper#dispense and added capability support
      */
-    public static boolean dropperInsertHook(World world, BlockPos pos, TileEntityDispenser dropper, int slot, @Nonnull ItemStack stack)
-    {
+    public static boolean dropperInsertHook(World world, BlockPos pos, TileEntityDispenser dropper, int slot, @Nonnull ItemStack stack) {
         EnumFacing enumfacing = world.getBlockState(pos).getValue(BlockDropper.FACING);
         BlockPos blockpos = pos.offset(enumfacing);
         Pair<IItemHandler, Object> destinationResult = getItemHandler(world, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), enumfacing.getOpposite());
-        if (destinationResult == null)
-        {
+        if (destinationResult == null) {
             return true;
-        }
-        else
-        {
+        } else {
             IItemHandler itemHandler = destinationResult.getKey();
             Object destination = destinationResult.getValue();
             ItemStack dispensedStack = stack.copy().splitStack(1);
             ItemStack remainder = putStackInInventoryAllSlots(dropper, destination, itemHandler, dispensedStack);
 
-            if (remainder.isEmpty())
-            {
+            if (remainder.isEmpty()) {
                 remainder = stack.copy();
                 remainder.shrink(1);
-            }
-            else
-            {
+            } else {
                 remainder = stack.copy();
             }
 
@@ -117,34 +104,24 @@
     /**
      * Copied from TileEntityHopper#transferItemsOut and added capability support
      */
-    public static boolean insertHook(TileEntityHopper hopper)
-    {
+    public static boolean insertHook(TileEntityHopper hopper) {
         EnumFacing hopperFacing = BlockHopper.getFacing(hopper.getBlockMetadata());
         Pair<IItemHandler, Object> destinationResult = getItemHandler(hopper, hopperFacing);
-        if (destinationResult == null)
-        {
+        if (destinationResult == null) {
             return false;
-        }
-        else
-        {
+        } else {
             IItemHandler itemHandler = destinationResult.getKey();
             Object destination = destinationResult.getValue();
-            if (isFull(itemHandler))
-            {
+            if (isFull(itemHandler)) {
                 return false;
-            }
-            else
-            {
-                for (int i = 0; i < hopper.getSizeInventory(); ++i)
-                {
-                    if (!hopper.getStackInSlot(i).isEmpty())
-                    {
+            } else {
+                for (int i = 0; i < hopper.getSizeInventory(); ++i) {
+                    if (!hopper.getStackInSlot(i).isEmpty()) {
                         ItemStack originalSlotContents = hopper.getStackInSlot(i).copy();
                         ItemStack insertStack = hopper.decrStackSize(i, 1);
                         ItemStack remainder = putStackInInventoryAllSlots(hopper, destination, itemHandler, insertStack);
 
-                        if (remainder.isEmpty())
-                        {
+                        if (remainder.isEmpty()) {
                             return true;
                         }
 
@@ -157,10 +134,8 @@
         }
     }
 
-    private static ItemStack putStackInInventoryAllSlots(TileEntity source, Object destination, IItemHandler destInventory, ItemStack stack)
-    {
-        for (int slot = 0; slot < destInventory.getSlots() && !stack.isEmpty(); slot++)
-        {
+    private static ItemStack putStackInInventoryAllSlots(TileEntity source, Object destination, IItemHandler destInventory, ItemStack stack) {
+        for (int slot = 0; slot < destInventory.getSlots() && !stack.isEmpty(); slot++) {
             stack = insertStack(source, destination, destInventory, stack, slot);
         }
         return stack;
@@ -169,42 +144,32 @@
     /**
      * Copied from TileEntityHopper#insertStack and added capability support
      */
-    private static ItemStack insertStack(TileEntity source, Object destination, IItemHandler destInventory, ItemStack stack, int slot)
-    {
+    private static ItemStack insertStack(TileEntity source, Object destination, IItemHandler destInventory, ItemStack stack, int slot) {
         ItemStack itemstack = destInventory.getStackInSlot(slot);
 
-        if (destInventory.insertItem(slot, stack, true).isEmpty())
-        {
+        if (destInventory.insertItem(slot, stack, true).isEmpty()) {
             boolean insertedItem = false;
             boolean inventoryWasEmpty = isEmpty(destInventory);
 
-            if (itemstack.isEmpty())
-            {
+            if (itemstack.isEmpty()) {
                 destInventory.insertItem(slot, stack, false);
                 stack = ItemStack.EMPTY;
                 insertedItem = true;
-            }
-            else if (ItemHandlerHelper.canItemStacksStack(itemstack, stack))
-            {
+            } else if (ItemHandlerHelper.canItemStacksStack(itemstack, stack)) {
                 int originalSize = stack.getCount();
                 stack = destInventory.insertItem(slot, stack, false);
                 insertedItem = originalSize < stack.getCount();
             }
 
-            if (insertedItem)
-            {
-                if (inventoryWasEmpty && destination instanceof TileEntityHopper)
-                {
-                    TileEntityHopper destinationHopper = (TileEntityHopper)destination;
+            if (insertedItem) {
+                if (inventoryWasEmpty && destination instanceof TileEntityHopper) {
+                    TileEntityHopper destinationHopper = (TileEntityHopper) destination;
 
-                    if (!destinationHopper.mayTransfer())
-                    {
+                    if (!destinationHopper.mayTransfer()) {
                         int k = 0;
 
-                        if (source instanceof TileEntityHopper)
-                        {
-                            if (destinationHopper.getLastUpdateTime() >= ((TileEntityHopper) source).getLastUpdateTime())
-                            {
+                        if (source instanceof TileEntityHopper) {
+                            if (destinationHopper.getLastUpdateTime() >= ((TileEntityHopper) source).getLastUpdateTime()) {
                                 k = 1;
                             }
                         }
@@ -219,34 +184,27 @@
     }
 
     @Nullable
-    private static Pair<IItemHandler, Object> getItemHandler(IHopper hopper, EnumFacing hopperFacing)
-    {
+    private static Pair<IItemHandler, Object> getItemHandler(IHopper hopper, EnumFacing hopperFacing) {
         double x = hopper.getXPos() + (double) hopperFacing.getFrontOffsetX();
         double y = hopper.getYPos() + (double) hopperFacing.getFrontOffsetY();
         double z = hopper.getZPos() + (double) hopperFacing.getFrontOffsetZ();
         return getItemHandler(hopper.getWorld(), x, y, z, hopperFacing.getOpposite());
     }
 
-    private static boolean isFull(IItemHandler itemHandler)
-    {
-        for (int slot = 0; slot < itemHandler.getSlots(); slot++)
-        {
+    private static boolean isFull(IItemHandler itemHandler) {
+        for (int slot = 0; slot < itemHandler.getSlots(); slot++) {
             ItemStack stackInSlot = itemHandler.getStackInSlot(slot);
-            if (stackInSlot.isEmpty() || stackInSlot.getCount() != stackInSlot.getMaxStackSize())
-            {
+            if (stackInSlot.isEmpty() || stackInSlot.getCount() != stackInSlot.getMaxStackSize()) {
                 return false;
             }
         }
         return true;
     }
 
-    private static boolean isEmpty(IItemHandler itemHandler)
-    {
-        for (int slot = 0; slot < itemHandler.getSlots(); slot++)
-        {
+    private static boolean isEmpty(IItemHandler itemHandler) {
+        for (int slot = 0; slot < itemHandler.getSlots(); slot++) {
             ItemStack stackInSlot = itemHandler.getStackInSlot(slot);
-            if (stackInSlot.getCount() > 0)
-            {
+            if (stackInSlot.getCount() > 0) {
                 return false;
             }
         }
@@ -254,8 +212,7 @@
     }
 
     @Nullable
-    public static Pair<IItemHandler, Object> getItemHandler(World worldIn, double x, double y, double z, final EnumFacing side)
-    {
+    public static Pair<IItemHandler, Object> getItemHandler(World worldIn, double x, double y, double z, final EnumFacing side) {
         Pair<IItemHandler, Object> destination = null;
         int i = MathHelper.floor(x);
         int j = MathHelper.floor(y);
@@ -264,13 +221,10 @@
         net.minecraft.block.state.IBlockState state = worldIn.getBlockState(blockpos);
         Block block = state.getBlock();
 
-        if (block.hasTileEntity(state))
-        {
+        if (block.hasTileEntity(state)) {
             TileEntity tileentity = worldIn.getTileEntity(blockpos);
-            if (tileentity != null)
-            {
-                if (tileentity.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, side))
-                {
+            if (tileentity != null) {
+                if (tileentity.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, side)) {
                     IItemHandler capability = tileentity.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, side);
                     destination = ImmutablePair.<IItemHandler, Object>of(capability, tileentity);
                 }
