--- ../src-base/minecraft/net/minecraftforge/common/DimensionManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/DimensionManager.java
@@ -47,27 +47,29 @@
 
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.world.DimensionType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.World;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.WorldProvider;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerMulti;
-import net.minecraft.world.storage.ISaveHandler;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.world.*;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
+import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.util.EnumHelper;
 import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.event.world.WorldEvent.Load;
+import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraftforge.fml.common.FMLLog;
 
 import javax.annotation.Nullable;
 
-public class DimensionManager
-{
-    private static class Dimension
-    {
+import org.bukkit.World.Environment;
+import org.bukkit.WorldCreator;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.generator.ChunkGenerator;
+
+public class DimensionManager {
+    private static class Dimension {
         private final DimensionType type;
         private int ticksWaited;
-        private Dimension(DimensionType type)
-        {
+
+        private Dimension(DimensionType type) {
             this.type = type;
             this.ticksWaited = 0;
         }
@@ -83,18 +85,16 @@
     private static final IntSet usedIds = new IntOpenHashSet();
     private static final ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().makeMap();
     private static final Multiset<Integer> leakedWorlds = HashMultiset.create();
+    private static ArrayList<Integer> bukkitDimensions = new ArrayList<Integer>(); // used to keep track of Bukkit dimensions
 
     /**
      * Returns a list of dimensions associated with this DimensionType.
      */
-    public static int[] getDimensions(DimensionType type)
-    {
+    public static int[] getDimensions(DimensionType type) {
         int[] ret = new int[dimensions.size()];
         int x = 0;
-        for (Int2ObjectMap.Entry<Dimension> ent : dimensions.int2ObjectEntrySet())
-        {
-            if (ent.getValue().type == type)
-            {
+        for (Int2ObjectMap.Entry<Dimension> ent : dimensions.int2ObjectEntrySet()) {
+            if (ent.getValue().type == type) {
                 ret[x++] = ent.getIntKey();
             }
         }
@@ -102,95 +102,79 @@
         return Arrays.copyOf(ret, x);
     }
 
-    public static Map<DimensionType, IntSortedSet> getRegisteredDimensions()
-    {
+    public static Map<DimensionType, IntSortedSet> getRegisteredDimensions() {
         Map<DimensionType, IntSortedSet> map = new IdentityHashMap<>();
-        for (Int2ObjectMap.Entry<Dimension> entry : dimensions.int2ObjectEntrySet())
-        {
+        for (Int2ObjectMap.Entry<Dimension> entry : dimensions.int2ObjectEntrySet()) {
             map.computeIfAbsent(entry.getValue().type, k -> new IntRBTreeSet()).add(entry.getIntKey());
         }
         return map;
     }
 
-    public static void init()
-    {
-        if (hasInit)
-        {
+    public static void init() {
+        if (hasInit) {
             return;
         }
 
         hasInit = true;
 
-        registerDimension( 0, DimensionType.OVERWORLD);
+        registerDimension(0, DimensionType.OVERWORLD);
         registerDimension(-1, DimensionType.NETHER);
-        registerDimension( 1, DimensionType.THE_END);
+        registerDimension(1, DimensionType.THE_END);
     }
 
-    public static void registerDimension(int id, DimensionType type)
-    {
+    public static void registerDimension(int id, DimensionType type) {
         DimensionType.getById(type.getId()); //Check if type is invalid {will throw an error} No clue how it would be invalid tho...
-        if (dimensions.containsKey(id))
-        {
+        if (dimensions.containsKey(id)) {
             throw new IllegalArgumentException(String.format("Failed to register dimension for id %d, One is already registered", id));
         }
         dimensions.put(id, new Dimension(type));
-        if (id >= 0)
-        {
+        if (id >= 0) {
             usedIds.add(id);
         }
+
+        // Lava - register Environment to Bukkit
+        if (id != -1 && id != 0 && id != 1) { // ignore vanilla
+            registerBukkitDimension(id, type.getName());
+        }
     }
 
     /**
      * For unregistering a dimension when the save is changed (disconnected from a server or loaded a new save
      */
-    public static void unregisterDimension(int id)
-    {
-        if (!dimensions.containsKey(id))
-        {
+    public static void unregisterDimension(int id) {
+        if (!dimensions.containsKey(id)) {
             throw new IllegalArgumentException(String.format("Failed to unregister dimension for id %d; No provider registered", id));
         }
         dimensions.remove(id);
     }
 
-    public static boolean isDimensionRegistered(int dim)
-    {
+    public static boolean isDimensionRegistered(int dim) {
         return dimensions.containsKey(dim);
     }
 
-    public static DimensionType getProviderType(int dim)
-    {
-        if (!dimensions.containsKey(dim))
-        {
+    public static DimensionType getProviderType(int dim) {
+        if (!dimensions.containsKey(dim)) {
             throw new IllegalArgumentException(String.format("Could not get provider type for dimension %d, does not exist", dim));
         }
         return dimensions.get(dim).type;
     }
 
-    public static WorldProvider getProvider(int dim)
-    {
+    public static WorldProvider getProvider(int dim) {
         return getWorld(dim).provider;
     }
 
-    public static Integer[] getIDs(boolean check)
-    {
-        if (check)
-        {
+    public static Integer[] getIDs(boolean check) {
+        if (check) {
             List<World> allWorlds = Lists.newArrayList(weakWorldMap.keySet());
             allWorlds.removeAll(worlds.values());
-            for (ListIterator<World> li = allWorlds.listIterator(); li.hasNext(); )
-            {
-                World w = li.next();
+            for (World w : allWorlds) {
                 leakedWorlds.add(System.identityHashCode(w));
             }
-            for (World w : allWorlds)
-            {
+            for (World w : allWorlds) {
                 int leakCount = leakedWorlds.count(System.identityHashCode(w));
-                if (leakCount == 5)
-                {
+                if (leakCount == 5) {
                     FMLLog.log.debug("The world {} ({}) may have leaked: first encounter (5 occurrences).\n", Integer.toHexString(System.identityHashCode(w)), w.getWorldInfo().getWorldName());
-                }
-                else if (leakCount % 5 == 0)
-                {
+                } else if (leakCount % 5 == 0) {
                     FMLLog.log.debug("The world {} ({}) may have leaked: seen {} times.\n", Integer.toHexString(System.identityHashCode(w)), w.getWorldInfo().getWorldName(), leakCount);
                 }
             }
@@ -198,40 +182,38 @@
         return getIDs();
     }
 
-    public static Integer[] getIDs()
-    {
+    public static Integer[] getIDs() {
         return worlds.keySet().toArray(new Integer[0]); // Only loaded dims, since usually used to cycle through loaded worlds
     }
 
-    public static void setWorld(int id, @Nullable WorldServer world, MinecraftServer server)
-    {
-        if (world != null)
-        {
+    public static void setWorld(int id, @Nullable WorldServer world, MinecraftServer server) {
+        if (world != null) {
             worlds.put(id, world);
             weakWorldMap.put(world, world);
+            // handle all worlds for bukkit
+            if (!FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.contains(world)) {
+                FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.add(world);
+            }
             server.worldTickTimes.put(id, new long[100]);
             FMLLog.log.info("Loading dimension {} ({}) ({})", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
-        }
-        else
-        {
+        } else {
+            FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.remove(getWorld(id)); // Lava - remove world from our new world ArrayList
             worlds.remove(id);
             server.worldTickTimes.remove(id);
             FMLLog.log.info("Unloading dimension {}", id);
         }
 
-        ArrayList<WorldServer> tmp = new ArrayList<WorldServer>();
-        if (worlds.get( 0) != null)
-            tmp.add(worlds.get( 0));
+        ArrayList<WorldServer> tmp = new ArrayList<>();
+        if (worlds.get(0) != null)
+            tmp.add(worlds.get(0));
         if (worlds.get(-1) != null)
             tmp.add(worlds.get(-1));
-        if (worlds.get( 1) != null)
-            tmp.add(worlds.get( 1));
+        if (worlds.get(1) != null)
+            tmp.add(worlds.get(1));
 
-        for (Int2ObjectMap.Entry<WorldServer> entry : worlds.int2ObjectEntrySet())
-        {
+        for (Int2ObjectMap.Entry<WorldServer> entry : worlds.int2ObjectEntrySet()) {
             int dim = entry.getIntKey();
-            if (dim >= -1 && dim <= 1)
-            {
+            if (dim >= -1 && dim <= 1) {
                 continue;
             }
             tmp.add(entry.getValue());
@@ -240,58 +222,75 @@
         server.worlds = tmp.toArray(new WorldServer[0]);
     }
 
-    public static void initDimension(int dim)
-    {
+    public static void initDimension(int dim) {
         WorldServer overworld = getWorld(0);
-        if (overworld == null)
-        {
+        if (overworld == null) {
             throw new RuntimeException("Cannot Hotload Dim: Overworld is not Loaded!");
         }
-        try
-        {
+        try {
             DimensionManager.getProviderType(dim);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             FMLLog.log.error("Cannot Hotload Dim: {}", dim, e);
             return; // If a provider hasn't been registered then we can't hotload the dim
         }
         MinecraftServer mcServer = overworld.getMinecraftServer();
-        ISaveHandler savehandler = overworld.getSaveHandler();
-        //WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
 
-        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+        String worldType;
+        String name;
+        Environment environment = Environment.getEnvironment(dim);
+        if (dim >= -1 && dim <= 1) {
+            if ((dim == -1 && !mcServer.getAllowNether()) || (dim == 1 && mcServer.server.getAllowEnd())) {
+                return;
+            }
+            worldType = environment.toString().toLowerCase();
+            name = "DIM" + dim;
+        } else {
+            WorldProvider provider = WorldProvider.getProviderForDimension(dim);
+            worldType = provider.getClass().getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            worldType = worldType.replace("provider", "");
+            if (org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).getId()) == null) {
+                environment = DimensionManager.registerBukkitDimension(DimensionManager.getProviderType(dim).getId(), worldType);
+            }
+
+            name = provider.getSaveFolder();
+        }
+
+        ChunkGenerator generator = mcServer.server.getGenerator(name);
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        WorldInfo worldInfo = new WorldInfo(worldSettings, name);
+        WorldServer world = (dim == 0 ? overworld : (WorldServer) (new WorldServerMulti(mcServer, new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer()), dim, overworld, mcServer.profiler, worldInfo, environment, generator).init()));
+
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
         world.addEventListener(new ServerWorldEventHandler(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
-        if (!mcServer.isSinglePlayer())
-        {
+        mcServer.server.getPluginManager().callEvent(new WorldLoadEvent(world.getWorld()));
+        if (!mcServer.isSinglePlayer()) {
             world.getWorldInfo().setGameType(mcServer.getGameType());
         }
 
         mcServer.setDifficultyForAllWorlds(mcServer.getDifficulty());
     }
 
-    public static WorldServer getWorld(int id)
-    {
+    public static WorldServer getWorld(int id) {
         return getWorld(id, false);
     }
 
-    public static WorldServer getWorld(int id, boolean resetUnloadDelay)
-    {
-        if (resetUnloadDelay && unloadQueue.contains(id))
-        {
+    public static WorldServer getWorld(int id, boolean resetUnloadDelay) {
+        if (resetUnloadDelay && unloadQueue.contains(id)) {
             dimensions.get(id).ticksWaited = 0;
         }
         return worlds.get(id);
     }
 
-    public static WorldServer[] getWorlds()
-    {
+    public static WorldServer[] getWorlds() {
         return worlds.values().toArray(new WorldServer[0]);
     }
 
-    static
-    {
+    static {
         init();
     }
 
@@ -299,28 +298,20 @@
      * Not public API: used internally to get dimensions that should load at
      * server startup
      */
-    public static Integer[] getStaticDimensionIDs()
-    {
+    public static Integer[] getStaticDimensionIDs() {
         return dimensions.keySet().toArray(new Integer[0]);
     }
 
-    public static WorldProvider createProviderFor(int dim)
-    {
-        try
-        {
-            if (dimensions.containsKey(dim))
-            {
+    public static WorldProvider createProviderFor(int dim) {
+        try {
+            if (dimensions.containsKey(dim)) {
                 WorldProvider ret = getProviderType(dim).createDimension();
                 ret.setDimension(dim);
                 return ret;
-            }
-            else
-            {
+            } else {
                 throw new RuntimeException(String.format("No WorldProvider bound for dimension %d", dim)); //It's going to crash anyway at this point.  Might as well be informative
             }
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             FMLLog.log.error("An error occurred trying to create an instance of WorldProvider {} ({})",
                     dim, getProviderType(dim), e);
             throw new RuntimeException(e);
@@ -329,17 +320,16 @@
 
     /**
      * Sets if a dimension should stay loaded.
+     *
      * @param dim  the dimension ID
      * @param keep whether or not the dimension should be kept loaded
      * @return true iff the dimension's status changed
      */
-    public static boolean keepDimensionLoaded(int dim, boolean keep)
-    {
+    public static boolean keepDimensionLoaded(int dim, boolean keep) {
         return keep ? keepLoaded.add(dim) : keepLoaded.remove(dim);
     }
 
-    private static boolean canUnloadWorld(WorldServer world)
-    {
+    private static boolean canUnloadWorld(WorldServer world) {
         return ForgeChunkManager.getPersistentChunksFor(world).isEmpty()
                 && world.playerEntities.isEmpty()
                 && !world.provider.getDimensionType().shouldLoadSpawn()
@@ -348,36 +338,31 @@
 
     /**
      * Queues a dimension to unload, if it can be unloaded.
+     *
      * @param id The id of the dimension
      */
-    public static void unloadWorld(int id)
-    {
+    public static void unloadWorld(int id) {
         WorldServer world = worlds.get(id);
         if (world == null || !canUnloadWorld(world)) return;
 
-        if (unloadQueue.add(id))
-        {
+        if (unloadQueue.add(id)) {
             FMLLog.log.debug("Queueing dimension {} to unload", id);
         }
     }
 
-    public static boolean isWorldQueuedToUnload(int id)
-    {
+    public static boolean isWorldQueuedToUnload(int id) {
         return unloadQueue.contains(id);
     }
 
     /*
      * To be called by the server at the appropriate time, do not call from mod code.
      */
-    public static void unloadWorlds(Hashtable<Integer, long[]> worldTickTimes)
-    {
+    public static void unloadWorlds(Hashtable<Integer, long[]> worldTickTimes) {
         IntIterator queueIterator = unloadQueue.iterator();
-        while (queueIterator.hasNext())
-        {
+        while (queueIterator.hasNext()) {
             int id = queueIterator.nextInt();
             Dimension dimension = dimensions.get(id);
-            if (dimension.ticksWaited < ForgeModContainer.dimensionUnloadQueueDelay)
-            {
+            if (dimension.ticksWaited < ForgeModContainer.dimensionUnloadQueueDelay) {
                 dimension.ticksWaited++;
                 continue;
             }
@@ -385,92 +370,65 @@
             queueIterator.remove();
             dimension.ticksWaited = 0;
             // Don't unload the world if the status changed
-            if (w == null || !canUnloadWorld(w))
-            {
+            if (w == null || !canUnloadWorld(w)) {
                 FMLLog.log.debug("Aborting unload for dimension {} as status changed", id);
                 continue;
             }
-            try
-            {
-                w.saveAllChunks(true, null);
-            }
-            catch (MinecraftException e)
-            {
-                FMLLog.log.error("Caught an exception while saving all chunks:", e);
-            }
-            finally
-            {
-                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
-                w.flush();
-                setWorld(id, null, w.getMinecraftServer());
-            }
+            FMLCommonHandler.instance().getMinecraftServerInstance().server.unloadWorld(w.getWorld(), true); // Lava
         }
     }
 
     /**
      * Return the next free dimension ID. Note: you are not guaranteed a contiguous
      * block of free ids. Always call for each individual ID you wish to get.
+     *
      * @return the next free dimension ID
      */
-    public static int getNextFreeDimId()
-    {
+    public static int getNextFreeDimId() {
         int next = lastUsedId;
-        while (usedIds.contains(next) || !checkAvailable(next))
-        {
+        while (usedIds.contains(next) || !checkAvailable(next)) {
             next++;
         }
         return lastUsedId = next;
     }
 
-    private static boolean checkAvailable(int id)
-    {
-        if (dimensions.containsKey(id))
-        {
+    private static boolean checkAvailable(int id) {
+        if (dimensions.containsKey(id)) {
             usedIds.add(id);
             return false;
         }
         return true;
     }
 
-    public static NBTTagCompound saveDimensionDataMap()
-    {
+    public static NBTTagCompound saveDimensionDataMap() {
         NBTTagCompound dimMap = new NBTTagCompound();
         dimMap.setIntArray("UsedIDs", usedIds.toIntArray());
         return dimMap;
     }
 
-    public static void loadDimensionDataMap(@Nullable NBTTagCompound compoundTag)
-    {
+    public static void loadDimensionDataMap(@Nullable NBTTagCompound compoundTag) {
         usedIds.clear();
         lastUsedId = 0;
 
-        if (compoundTag == null)
-        {
+        if (compoundTag == null) {
             IntIterator iterator = dimensions.keySet().iterator();
-            while (iterator.hasNext())
-            {
+            while (iterator.hasNext()) {
                 int id = iterator.nextInt();
-                if (id >= 0)
-                {
+                if (id >= 0) {
                     usedIds.add(id);
                 }
             }
-        }
-        else
-        {
-            for (int id : compoundTag.getIntArray("UsedIDs"))
-            {
+        } else {
+            for (int id : compoundTag.getIntArray("UsedIDs")) {
                 usedIds.add(id);
             }
 
             // legacy data (load but don't save)
             int[] intArray = compoundTag.getIntArray("DimensionArray");
-            for (int i = 0; i < intArray.length; i++)
-            {
+            for (int i = 0; i < intArray.length; i++) {
                 int data = intArray[i];
                 if (data == 0) continue;
-                for (int j = 0; j < Integer.SIZE; j++)
-                {
+                for (int j = 0; j < Integer.SIZE; j++) {
                     if ((data & (1 << j)) != 0) usedIds.add(i * Integer.SIZE + j);
                 }
             }
@@ -479,24 +437,107 @@
 
     /**
      * Return the current root directory for the world save. Accesses getSaveHandler from the overworld
+     *
      * @return the root directory of the save
      */
     @Nullable
-    public static File getCurrentSaveRootDirectory()
-    {
-        if (DimensionManager.getWorld(0) != null)
-        {
+    public static File getCurrentSaveRootDirectory() {
+        if (DimensionManager.getWorld(0) != null) {
             return DimensionManager.getWorld(0).getSaveHandler().getWorldDirectory();
-        }/*
-        else if (MinecraftServer.getServer() != null)
-        {
-            MinecraftServer srv = MinecraftServer.getServer();
-            SaveHandler saveHandler = (SaveHandler) srv.getActiveAnvilConverter().getSaveLoader(srv.getFolderName(), false);
-            return saveHandler.getWorldDirectory();
-        }*/
-        else
-        {
+        } else {
             return null;
         }
     }
+
+    public static WorldServer initDimension(WorldCreator creator, WorldSettings worldSettings) {
+        WorldServer overworld = getWorld(0);
+        if (overworld == null) {
+            throw new RuntimeException("Cannot Hotload Dim: Overworld is not Loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.getMinecraftServer();
+        String name;
+
+        DimensionType type = DimensionType.OVERWORLD;
+        try {
+            if (creator.environment() != null) {
+                type = DimensionType.getById(creator.environment().getId());
+            }
+        } catch (IllegalArgumentException e) {
+
+        }
+
+        Environment environment = creator.environment();
+        name = creator.name();
+        int dim = 0;
+
+        AnvilSaveHandler saveHandler = new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.dataFixer);
+
+        if (saveHandler.loadWorldInfo() != null) {
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if (savedDim != 0 && savedDim != -1 && savedDim != 1) {
+                dim = savedDim;
+            }
+        }
+        if (dim == 0) {
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) // handle reloads properly
+        {
+            registerDimension(dim, type);
+            addBukkitDimension(dim);
+        }
+
+        ChunkGenerator generator = creator.generator();
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        WorldInfo worldInfo = saveHandler.loadWorldInfo();
+        if (worldInfo == null) {
+            worldInfo = new WorldInfo(worldSettings, name);
+        }
+
+        WorldServer world = (WorldServer) new WorldServerMulti(mcServer, saveHandler, dim, overworld, mcServer.profiler, worldInfo, environment, generator).init();
+        world.initialize(worldSettings);
+        world.provider.setDimension(dim);
+
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
+
+        world.addEventListener(new ServerWorldEventHandler(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new Load(world));
+        if (!mcServer.isSinglePlayer()) {
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+        return world;
+    }
+
+    public static org.bukkit.World.Environment registerBukkitDimension(int dim, String worldType) {
+        Environment env = Environment.getEnvironment(dim);
+        if (env == null) {
+            worldType = worldType.replace("WorldProvider", "");
+            env = EnumHelper.addBukkitEnvironment(dim, worldType.toUpperCase());
+            Environment.registerEnvironment(env);
+        }
+        return env;
+    }
+
+    public static void addBukkitDimension(int dim) {
+        if (!bukkitDimensions.contains(dim))
+            bukkitDimensions.add(dim);
+    }
+
+    public static void removeBukkitDimension(int dim) {
+        if (bukkitDimensions.contains(dim))
+            bukkitDimensions.remove(bukkitDimensions.indexOf(dim));
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs() {
+        return bukkitDimensions;
+    }
+
+    public static boolean isBukkitDimension(int dim) {
+        return bukkitDimensions.contains(dim);
+    }
 }
