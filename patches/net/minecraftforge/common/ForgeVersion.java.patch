--- ../src-base/minecraft/net/minecraftforge/common/ForgeVersion.java
+++ ../src-work/minecraft/net/minecraftforge/common/ForgeVersion.java
@@ -19,47 +19,38 @@
 
 package net.minecraftforge.common;
 
-import static net.minecraftforge.common.ForgeVersion.Status.*;
+import com.google.common.io.ByteStreams;
+import com.google.gson.Gson;
+import net.minecraftforge.fml.common.InjectedModContainer;
+import net.minecraftforge.fml.common.Loader;
+import net.minecraftforge.fml.common.ModContainer;
+import net.minecraftforge.fml.common.versioning.ComparableVersion;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import static net.minecraftforge.common.ForgeVersion.Status.*;
 
-import com.google.common.io.ByteStreams;
-import com.google.gson.Gson;
-
-import net.minecraftforge.fml.common.InjectedModContainer;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
-import net.minecraftforge.fml.common.versioning.ComparableVersion;
-
-import javax.annotation.Nullable;
-
-public class ForgeVersion
-{
+public class ForgeVersion {
     // This is Forge's Mod Id, used for the ForgeModContainer and resource locations
     public static final String MOD_ID = "forge";
     //This number is incremented every time we remove deprecated code/major API changes, never reset
-    public static final int majorVersion    = 14;
+    public static final int majorVersion = 14;
     //This number is incremented every minecraft release, never reset
-    public static final int minorVersion    = 23;
+    public static final int minorVersion = 23;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
     public static final int revisionVersion = 5;
-    //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
-    public static final int buildVersion    = 0;
+    //This number will get manually updated since we don't have access to Forge's Jenkins build numbers.
+    public static final int buildVersion = 2838;
     // This is the minecraft version we're building for - used in various places in Forge/FML code
     public static final String mcVersion = "1.12.2";
     // This is the MCP data version we're using
@@ -73,45 +64,37 @@
 
     private static final int MAX_HTTP_REDIRECTS = Integer.getInteger("http.maxRedirects", 20);
 
-    public static int getMajorVersion()
-    {
+    public static int getMajorVersion() {
         return majorVersion;
     }
 
-    public static int getMinorVersion()
-    {
+    public static int getMinorVersion() {
         return minorVersion;
     }
 
-    public static int getRevisionVersion()
-    {
+    public static int getRevisionVersion() {
         return revisionVersion;
     }
 
-    public static int getBuildVersion()
-    {
+    public static int getBuildVersion() {
         return buildVersion;
     }
 
-    public static Status getStatus()
-    {
+    public static Status getStatus() {
         return getResult(ForgeModContainer.getInstance()).status;
     }
 
     @Nullable
-    public static String getTarget()
-    {
+    public static String getTarget() {
         CheckResult res = getResult(ForgeModContainer.getInstance());
         return res.target != null ? res.target.toString() : null;
     }
 
-    public static String getVersion()
-    {
+    public static String getVersion() {
         return String.format("%d.%d.%d.%d", majorVersion, minorVersion, revisionVersion, buildVersion);
     }
 
-    public static enum Status
-    {
+    public static enum Status {
         PENDING(),
         FAILED(),
         UP_TO_DATE(),
@@ -123,47 +106,39 @@
         final int sheetOffset;
         final boolean draw, animated;
 
-        Status()
-        {
+        Status() {
             this(0, false, false);
         }
 
-        Status(int sheetOffset)
-        {
+        Status(int sheetOffset) {
             this(sheetOffset, true, false);
         }
 
-        Status(int sheetOffset, boolean animated)
-        {
+        Status(int sheetOffset, boolean animated) {
             this(sheetOffset, true, animated);
         }
 
-        Status(int sheetOffset, boolean draw, boolean animated)
-        {
+        Status(int sheetOffset, boolean draw, boolean animated) {
             this.sheetOffset = sheetOffset;
             this.draw = draw;
             this.animated = animated;
         }
 
-        public int getSheetOffset()
-        {
+        public int getSheetOffset() {
             return sheetOffset;
         }
 
-        public boolean shouldDraw()
-        {
+        public boolean shouldDraw() {
             return draw;
         }
 
-        public boolean isAnimated()
-        {
+        public boolean isAnimated() {
             return animated;
         }
 
     }
 
-    public static class CheckResult
-    {
+    public static class CheckResult {
         public final Status status;
         @Nullable
         public final ComparableVersion target;
@@ -171,8 +146,7 @@
         @Nullable
         public final String url;
 
-        private CheckResult(Status status, @Nullable ComparableVersion target, @Nullable Map<ComparableVersion, String> changes, @Nullable String url)
-        {
+        private CheckResult(Status status, @Nullable ComparableVersion target, @Nullable Map<ComparableVersion, String> changes, @Nullable String url) {
             this.status = status;
             this.target = target;
             this.changes = changes == null ? Collections.<ComparableVersion, String>emptyMap() : Collections.unmodifiableMap(changes);
@@ -180,28 +154,20 @@
         }
     }
 
-    public static void startVersionCheck()
-    {
-        new Thread("Forge Version Check")
-        {
+    public static void startVersionCheck() {
+        new Thread("Forge Version Check") {
             @Override
-            public void run()
-            {
-                if (!ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, "Global", true).getBoolean())
-                {
+            public void run() {
+                if (!ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, "Global", true).getBoolean()) {
                     log.info("Global Forge version check system disabled, no further processing.");
                     return;
                 }
 
-                for (Entry<ModContainer, URL> entry : gatherMods().entrySet())
-                {
+                for (Entry<ModContainer, URL> entry : gatherMods().entrySet()) {
                     ModContainer mod = entry.getKey();
-                    if (ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, mod.getModId(), true).getBoolean())
-                    {
+                    if (ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, mod.getModId(), true).getBoolean()) {
                         process(mod, entry.getValue());
-                    }
-                    else
-                    {
+                    } else {
                         log.info("[{}] Skipped version check", mod.getModId());
                     }
                 }
@@ -210,27 +176,20 @@
             /**
              * Opens stream for given URL while following redirects
              */
-            private InputStream openUrlStream(URL url) throws IOException
-            {
+            private InputStream openUrlStream(URL url) throws IOException {
                 URL currentUrl = url;
-                for (int redirects = 0; redirects < MAX_HTTP_REDIRECTS; redirects++)
-                {
+                for (int redirects = 0; redirects < MAX_HTTP_REDIRECTS; redirects++) {
                     URLConnection c = currentUrl.openConnection();
-                    if (c instanceof HttpURLConnection)
-                    {
+                    if (c instanceof HttpURLConnection) {
                         HttpURLConnection huc = (HttpURLConnection) c;
                         huc.setInstanceFollowRedirects(false);
                         int responseCode = huc.getResponseCode();
-                        if (responseCode >= 300 && responseCode <= 399)
-                        {
-                            try
-                            {
+                        if (responseCode >= 300 && responseCode <= 399) {
+                            try {
                                 String loc = huc.getHeaderField("Location");
                                 currentUrl = new URL(currentUrl, loc);
                                 continue;
-                            }
-                            finally
-                            {
+                            } finally {
                                 huc.disconnect();
                             }
                         }
@@ -241,10 +200,8 @@
                 throw new IOException("Too many redirects while trying to fetch " + url);
             }
 
-            private void process(ModContainer mod, URL url)
-            {
-                try
-                {
+            private void process(ModContainer mod, URL url) {
+                try {
                     log.info("[{}] Starting version check at {}", mod.getModId(), url.toString());
                     Status status = PENDING;
                     ComparableVersion target = null;
@@ -259,82 +216,65 @@
                     @SuppressWarnings("unchecked")
                     Map<String, Object> json = new Gson().fromJson(data, Map.class);
                     @SuppressWarnings("unchecked")
-                    Map<String, String> promos = (Map<String, String>)json.get("promos");
-                    String display_url = (String)json.get("homepage");
+                    Map<String, String> promos = (Map<String, String>) json.get("promos");
+                    String display_url = (String) json.get("homepage");
 
                     String rec = promos.get(MinecraftForge.MC_VERSION + "-recommended");
                     String lat = promos.get(MinecraftForge.MC_VERSION + "-latest");
                     ComparableVersion current = new ComparableVersion(mod.getVersion());
 
-                    if (rec != null)
-                    {
+                    if (rec != null) {
                         ComparableVersion recommended = new ComparableVersion(rec);
                         int diff = recommended.compareTo(current);
 
                         if (diff == 0)
                             status = UP_TO_DATE;
-                        else if (diff < 0)
-                        {
+                        else if (diff < 0) {
                             status = AHEAD;
-                            if (lat != null)
-                            {
+                            if (lat != null) {
                                 ComparableVersion latest = new ComparableVersion(lat);
-                                if (current.compareTo(latest) < 0)
-                                {
+                                if (current.compareTo(latest) < 0) {
                                     status = OUTDATED;
                                     target = latest;
                                 }
                             }
-                        }
-                        else
-                        {
+                        } else {
                             status = OUTDATED;
                             target = recommended;
                         }
-                    }
-                    else if (lat != null)
-                    {
+                    } else if (lat != null) {
                         ComparableVersion latest = new ComparableVersion(lat);
-                        if (current.compareTo(latest) < 0)
-                        {
+                        if (current.compareTo(latest) < 0) {
                             status = BETA_OUTDATED;
                             target = latest;
-                        }
-                        else
+                        } else
                             status = BETA;
-                    }
-                    else
+                    } else
                         status = BETA;
 
                     log.info("[{}] Found status: {} Target: {}", mod.getModId(), status, target);
 
                     Map<ComparableVersion, String> changes = new LinkedHashMap<ComparableVersion, String>();
                     @SuppressWarnings("unchecked")
-                    Map<String, String> tmp = (Map<String, String>)json.get(MinecraftForge.MC_VERSION);
-                    if (tmp != null)
-                    {
+                    Map<String, String> tmp = (Map<String, String>) json.get(MinecraftForge.MC_VERSION);
+                    if (tmp != null) {
                         List<ComparableVersion> ordered = new ArrayList<ComparableVersion>();
-                        for (String key : tmp.keySet())
-                        {
+                        for (String key : tmp.keySet()) {
                             ComparableVersion ver = new ComparableVersion(key);
-                            if (ver.compareTo(current) > 0 && (target == null || ver.compareTo(target) < 1))
-                            {
+                            if (ver.compareTo(current) > 0 && (target == null || ver.compareTo(target) < 1)) {
                                 ordered.add(ver);
                             }
                         }
                         Collections.sort(ordered);
 
-                        for (ComparableVersion ver : ordered)
-                        {
+                        for (ComparableVersion ver : ordered) {
                             changes.put(ver, tmp.get(ver.toString()));
                         }
                     }
                     if (mod instanceof InjectedModContainer)
-                        mod = ((InjectedModContainer)mod).wrappedContainer;
+                        mod = ((InjectedModContainer) mod).wrappedContainer;
                     results.put(mod, new CheckResult(status, target, changes, display_url));
-                }
-                catch (Exception e)
-                {
+                } catch (Exception e) {
                     log.debug("Failed to process update information", e);
                     status = FAILED;
                 }
@@ -343,11 +283,9 @@
     }
 
     // Gather a list of mods that have opted in to this update system by providing a URL.
-    public static Map<ModContainer, URL> gatherMods()
-    {
+    public static Map<ModContainer, URL> gatherMods() {
         Map<ModContainer, URL> ret = new HashMap<ModContainer, URL>();
-        for (ModContainer mod : Loader.instance().getActiveModList())
-        {
+        for (ModContainer mod : Loader.instance().getActiveModList()) {
             URL url = mod.getUpdateUrl();
             if (url != null)
                 ret.put(mod, url);
@@ -367,4 +305,3 @@
         return ret == null ? PENDING_CHECK : ret;
     }
 }
-
