--- ../src-base/minecraft/net/minecraftforge/common/chunkio/ChunkIOProvider.java
+++ ../src-work/minecraft/net/minecraftforge/common/chunkio/ChunkIOProvider.java
@@ -19,19 +19,18 @@
 
 package net.minecraftforge.common.chunkio;
 
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.util.math.ChunkPos;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.storage.AnvilChunkLoader;
 import net.minecraft.world.gen.ChunkProviderServer;
-import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.util.math.ChunkPos;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.ChunkDataEvent;
 
 import java.io.IOException;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
-class ChunkIOProvider implements Runnable
-{
+class ChunkIOProvider implements Runnable {
     private final QueuedChunk chunkInfo;
     private final AnvilChunkLoader loader;
     private final ChunkProviderServer provider;
@@ -41,47 +40,37 @@
     private final ConcurrentLinkedQueue<Runnable> callbacks = new ConcurrentLinkedQueue<Runnable>();
     private boolean ran = false;
 
-    ChunkIOProvider(QueuedChunk chunk, AnvilChunkLoader loader, ChunkProviderServer provider)
-    {
+    ChunkIOProvider(QueuedChunk chunk, AnvilChunkLoader loader, ChunkProviderServer provider) {
         this.chunkInfo = chunk;
         this.loader = loader;
         this.provider = provider;
     }
 
-    public void addCallback(Runnable callback)
-    {
+    public void addCallback(Runnable callback) {
         this.callbacks.add(callback);
     }
-    public void removeCallback(Runnable callback)
-    {
+
+    public void removeCallback(Runnable callback) {
         this.callbacks.remove(callback);
     }
 
     @Override
     public void run() // async stuff
     {
-        synchronized(this)
-        {
-            try
-            {
+        synchronized (this) {
+            try {
                 Object[] data = null;
-                try
-                {
+                try {
                     data = this.loader.loadChunk__Async(chunkInfo.world, chunkInfo.x, chunkInfo.z);
-                }
-                catch (IOException e)
-                {
+                } catch (IOException e) {
                     throw new RuntimeException(e); // Allow exception to bubble up to afterExecute
                 }
-    
-                if (data != null)
-                {
-                    this.nbt   = (NBTTagCompound)data[1];
-                    this.chunk = (Chunk)data[0];
+
+                if (data != null) {
+                    this.nbt = (NBTTagCompound) data[1];
+                    this.chunk = (Chunk) data[0];
                 }
-            }
-            finally 
-            {
+            } finally {
                 this.ran = true;
                 this.notifyAll();
             }
@@ -89,10 +78,8 @@
     }
 
     // sync stuff
-    public void syncCallback()
-    {
-        if (chunk == null)
-        {
+    public void syncCallback() {
+        if (chunk == null) {
             this.runCallbacks();
             return;
         }
@@ -112,33 +99,27 @@
         this.runCallbacks();
     }
 
-    public Chunk getChunk()
-    {
+    public Chunk getChunk() {
         return this.chunk;
     }
 
-    public boolean runFinished()
-    {
+    public boolean runFinished() {
         return this.ran;
     }
 
-    public boolean hasCallback()
-    {
+    public boolean hasCallback() {
         return this.callbacks.size() > 0;
     }
 
-    public void runCallbacks()
-    {
-        for (Runnable r : this.callbacks)
-        {
+    public void runCallbacks() {
+        for (Runnable r : this.callbacks) {
             r.run();
         }
 
         this.callbacks.clear();
     }
 
-    public QueuedChunk getChunkInfo() 
-    {
-    	return chunkInfo;
+    public QueuedChunk getChunkInfo() {
+        return chunkInfo;
     }
 }
