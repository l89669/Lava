--- ../src-base/minecraft/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
@@ -25,65 +25,54 @@
 
 import javax.annotation.Nonnull;
 
-public class LivingEntityUseItemEvent extends LivingEvent
-{
+public class LivingEntityUseItemEvent extends LivingEvent {
     private final ItemStack item;
     private int duration;
 
-    private LivingEntityUseItemEvent(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-    {
+    private LivingEntityUseItemEvent(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
         super(entity);
         this.item = item;
         this.setDuration(duration);
     }
 
     @Nonnull
-    public ItemStack getItem()
-    {
+    public ItemStack getItem() {
         return item;
     }
 
-    public int getDuration()
-    {
+    public int getDuration() {
         return duration;
     }
 
-    public void setDuration(int duration)
-    {
+    public void setDuration(int duration) {
         this.duration = duration;
     }
 
     /**
      * Fired when a player starts 'using' an item, typically when they hold right mouse.
      * Examples:
-     *   Drawing a bow
-     *   Eating Food
-     *   Drinking Potions/Milk
-     *   Guarding with a sword
-     *
+     * Drawing a bow
+     * Eating Food
+     * Drinking Potions/Milk
+     * Guarding with a sword
+     * <p>
      * Cancel the event, or set the duration or <= 0 to prevent it from processing.
-     *
      */
     @Cancelable
-    public static class Start extends LivingEntityUseItemEvent
-    {
-        public Start(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-        {
+    public static class Start extends LivingEntityUseItemEvent {
+        public Start(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
             super(entity, item, duration);
         }
     }
 
     /**
      * Fired every tick that a player is 'using' an item, see {@link Start} for info.
-     *
+     * <p>
      * Cancel the event, or set the duration or <= 0 to cause the player to stop using the item.
-     *
      */
     @Cancelable
-    public static class Tick extends LivingEntityUseItemEvent
-    {
-        public Tick(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-        {
+    public static class Tick extends LivingEntityUseItemEvent {
+        public Tick(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
             super(entity, item, duration);
         }
     }
@@ -91,20 +80,18 @@
     /**
      * Fired when a player stops using an item without the use duration timing out.
      * Example:
-     *   Stop eating 1/2 way through
-     *   Stop defending with sword
-     *   Stop drawing bow. This case would fire the arrow
-     *
+     * Stop eating 1/2 way through
+     * Stop defending with sword
+     * Stop drawing bow. This case would fire the arrow
+     * <p>
      * Duration on this event is how long the item had left in it's count down before 'finishing'
-     *
+     * <p>
      * Canceling this event will prevent the Item from being notified that it has stopped being used,
      * The only vanilla item this would effect are bows, and it would cause them NOT to fire there arrow.
      */
     @Cancelable
-    public static class Stop extends LivingEntityUseItemEvent
-    {
-        public Stop(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-        {
+    public static class Stop extends LivingEntityUseItemEvent {
+        public Stop(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
             super(entity, item, duration);
         }
     }
@@ -113,31 +100,27 @@
      * Fired after an item has fully finished being used.
      * The item has been notified that it was used, and the item/result stacks reflect after that state.
      * This means that when this is fired for a Potion, the potion effect has already been applied.
-     * 
+     * <p>
      * {@link LivingEntityUseItemEvent#item} is a copy of the item BEFORE it was used.
-     *
+     * <p>
      * If you wish to cancel those effects, you should cancel one of the above events.
-     *
+     * <p>
      * The result item stack is the stack that is placed in the player's inventory in replacement of the stack that is currently being used.
-     *
      */
-    public static class Finish extends LivingEntityUseItemEvent
-    {
+    public static class Finish extends LivingEntityUseItemEvent {
         private ItemStack result;
-        public Finish(EntityLivingBase entity, @Nonnull ItemStack item, int duration, @Nonnull ItemStack result)
-        {
+
+        public Finish(EntityLivingBase entity, @Nonnull ItemStack item, int duration, @Nonnull ItemStack result) {
             super(entity, item, duration);
             this.setResultStack(result);
         }
 
         @Nonnull
-        public ItemStack getResultStack()
-        {
+        public ItemStack getResultStack() {
             return result;
         }
 
-        public void setResultStack(@Nonnull ItemStack result)
-        {
+        public void setResultStack(@Nonnull ItemStack result) {
             this.result = result;
         }
     }
