--- ../src-base/minecraft/net/minecraftforge/event/entity/player/BonemealEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/entity/player/BonemealEvent.java
@@ -19,14 +19,14 @@
 
 package net.minecraftforge.event.entity.player;
 
-import net.minecraftforge.fml.common.eventhandler.Cancelable;
-import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
+import net.minecraftforge.fml.common.eventhandler.Event;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -34,16 +34,15 @@
 /**
  * This event is called when a player attempts to use Bonemeal on a block.
  * It can be canceled to completely prevent any further processing.
- *
+ * <p>
  * You can also set the result to ALLOW to mark the event as processed
  * and use up a bonemeal from the stack but do no further processing.
- *
+ * <p>
  * setResult(ALLOW) is the same as the old setHandled()
  */
 @Cancelable
 @Event.HasResult
-public class BonemealEvent extends PlayerEvent
-{
+public class BonemealEvent extends PlayerEvent {
 
     private final World world;
     private final BlockPos pos;
@@ -52,8 +51,7 @@
     private final ItemStack stack;
 
     public BonemealEvent(@Nonnull EntityPlayer player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull IBlockState block, @Nullable EnumHand hand,
-            @Nonnull ItemStack stack)
-    {
+                         @Nonnull ItemStack stack) {
         super(player);
         this.world = world;
         this.pos = pos;
@@ -62,30 +60,25 @@
         this.stack = stack;
     }
 
-    public World getWorld()
-    {
+    public World getWorld() {
         return world;
     }
 
-    public BlockPos getPos()
-    {
+    public BlockPos getPos() {
         return pos;
     }
 
-    public IBlockState getBlock()
-    {
+    public IBlockState getBlock() {
         return block;
     }
 
     @Nullable
-    public EnumHand getHand()
-    {
+    public EnumHand getHand() {
         return hand;
     }
 
     @Nonnull
-    public ItemStack getStack()
-    {
+    public ItemStack getStack() {
         return stack;
     }
 }
