--- ../src-base/minecraft/net/minecraftforge/event/entity/player/FillBucketEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/entity/player/FillBucketEvent.java
@@ -19,12 +19,12 @@
 
 package net.minecraftforge.event.entity.player;
 
-import net.minecraftforge.fml.common.eventhandler.Cancelable;
-import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.world.World;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
+import net.minecraftforge.fml.common.eventhandler.Event;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -32,7 +32,7 @@
 /**
  * This event is fired when a player attempts to use a Empty bucket, it
  * can be canceled to completely prevent any further processing.
- *
+ * <p>
  * If you set the result to 'ALLOW', it means that you have processed
  * the event and wants the basic functionality of adding the new
  * ItemStack to your inventory and reducing the stack size to process.
@@ -40,8 +40,7 @@
  */
 @Cancelable
 @Event.HasResult
-public class FillBucketEvent extends PlayerEvent
-{
+public class FillBucketEvent extends PlayerEvent {
 
     private final ItemStack current;
     private final World world;
@@ -50,8 +49,7 @@
 
     private ItemStack result;
 
-    public FillBucketEvent(EntityPlayer player, @Nonnull ItemStack current, World world, @Nullable RayTraceResult target)
-    {
+    public FillBucketEvent(EntityPlayer player, @Nonnull ItemStack current, World world, @Nullable RayTraceResult target) {
         super(player);
         this.current = current;
         this.world = world;
@@ -59,11 +57,25 @@
     }
 
     @Nonnull
-    public ItemStack getEmptyBucket() { return this.current; }
-    public World getWorld(){ return this.world; }
+    public ItemStack getEmptyBucket() {
+        return this.current;
+    }
+
+    public World getWorld() {
+        return this.world;
+    }
+
     @Nullable
-    public RayTraceResult getTarget() { return this.target; }
+    public RayTraceResult getTarget() {
+        return this.target;
+    }
+
     @Nonnull
-    public ItemStack getFilledBucket() { return this.result; }
-    public void setFilledBucket(@Nonnull ItemStack bucket) { this.result = bucket; }
+    public ItemStack getFilledBucket() {
+        return this.result;
+    }
+
+    public void setFilledBucket(@Nonnull ItemStack bucket) {
+        this.result = bucket;
+    }
 }
