--- ../src-base/minecraft/net/minecraftforge/event/entity/player/PlayerEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/entity/player/PlayerEvent.java
@@ -19,19 +19,18 @@
 
 package net.minecraftforge.event.entity.player;
 
-import java.io.File;
-
-import net.minecraftforge.common.MinecraftForge;
-import net.minecraftforge.event.ForgeEventFactory;
-import net.minecraftforge.fml.common.eventhandler.Cancelable;
-import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.math.BlockPos;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.event.entity.living.LivingEvent;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 
+import java.io.File;
+
 /**
  * PlayerEvent is fired whenever an event involving Living entities occurs. <br>
  * If a method utilizes this {@link Event} as its parameter, the method will
@@ -39,17 +38,15 @@
  * <br>
  * All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.
  **/
-public class PlayerEvent extends LivingEvent
-{
+public class PlayerEvent extends LivingEvent {
     private final EntityPlayer entityPlayer;
-    public PlayerEvent(EntityPlayer player)
-    {
+
+    public PlayerEvent(EntityPlayer player) {
         super(player);
         entityPlayer = player;
     }
 
-    public EntityPlayer getEntityPlayer()
-    {
+    public EntityPlayer getEntityPlayer() {
         return entityPlayer;
     }
 
@@ -69,21 +66,27 @@
      * <br>
      * This event is fired on the {@link MinecraftForge#EVENT_BUS}.
      **/
-    public static class HarvestCheck extends PlayerEvent
-    {
+    public static class HarvestCheck extends PlayerEvent {
         private final IBlockState state;
         private boolean success;
 
-        public HarvestCheck(EntityPlayer player, IBlockState state, boolean success)
-        {
+        public HarvestCheck(EntityPlayer player, IBlockState state, boolean success) {
             super(player);
             this.state = state;
             this.success = success;
         }
 
-        public IBlockState getTargetBlock() { return this.state; }
-        public boolean canHarvest() { return this.success; }
-        public void setCanHarvest(boolean success){ this.success = success; }
+        public IBlockState getTargetBlock() {
+            return this.state;
+        }
+
+        public boolean canHarvest() {
+            return this.success;
+        }
+
+        public void setCanHarvest(boolean success) {
+            this.success = success;
+        }
     }
 
     /**
@@ -106,15 +109,13 @@
      * This event is fired on the {@link MinecraftForge#EVENT_BUS}.
      **/
     @Cancelable
-    public static class BreakSpeed extends PlayerEvent
-    {
+    public static class BreakSpeed extends PlayerEvent {
         private final IBlockState state;
         private final float originalSpeed;
         private float newSpeed = 0.0f;
         private final BlockPos pos; // Y position of -1 notes unknown location
 
-        public BreakSpeed(EntityPlayer player, IBlockState state, float original, BlockPos pos)
-        {
+        public BreakSpeed(EntityPlayer player, IBlockState state, float original, BlockPos pos) {
             super(player);
             this.state = state;
             this.originalSpeed = original;
@@ -122,11 +123,25 @@
             this.pos = pos;
         }
 
-        public IBlockState getState() { return state; }
-        public float getOriginalSpeed() { return originalSpeed; }
-        public float getNewSpeed() { return newSpeed; }
-        public void setNewSpeed(float newSpeed) { this.newSpeed = newSpeed; }
-        public BlockPos getPos() { return pos; }
+        public IBlockState getState() {
+            return state;
+        }
+
+        public float getOriginalSpeed() {
+            return originalSpeed;
+        }
+
+        public float getNewSpeed() {
+            return newSpeed;
+        }
+
+        public void setNewSpeed(float newSpeed) {
+            this.newSpeed = newSpeed;
+        }
+
+        public BlockPos getPos() {
+            return pos;
+        }
     }
 
     /**
@@ -145,8 +160,7 @@
      * <br>
      * This event is fired on the {@link MinecraftForge#EVENT_BUS}.
      **/
-    public static class NameFormat extends PlayerEvent
-    {
+    public static class NameFormat extends PlayerEvent {
         private final String username;
         private String displayname;
 
@@ -156,18 +170,15 @@
             this.setDisplayname(username);
         }
 
-        public String getUsername()
-        {
+        public String getUsername() {
             return username;
         }
 
-        public String getDisplayname()
-        {
+        public String getDisplayname() {
             return displayname;
         }
 
-        public void setDisplayname(String displayname)
-        {
+        public void setDisplayname(String displayname) {
             this.displayname = displayname;
         }
     }
@@ -176,13 +187,11 @@
      * Fired when the EntityPlayer is cloned, typically caused by the network sending a RESPAWN_PLAYER event.
      * Either caused by death, or by traveling from the End to the overworld.
      */
-    public static class Clone extends PlayerEvent
-    {
+    public static class Clone extends PlayerEvent {
         private final EntityPlayer original;
         private final boolean wasDeath;
 
-        public Clone(EntityPlayer _new, EntityPlayer oldPlayer, boolean wasDeath)
-        {
+        public Clone(EntityPlayer _new, EntityPlayer oldPlayer, boolean wasDeath) {
             super(_new);
             this.original = oldPlayer;
             this.wasDeath = wasDeath;
@@ -191,8 +200,7 @@
         /**
          * The old EntityPlayer that this new entity is a clone of.
          */
-        public EntityPlayer getOriginal()
-        {
+        public EntityPlayer getOriginal() {
             return original;
         }
 
@@ -200,22 +208,19 @@
          * True if this event was fired because the player died.
          * False if it was fired because the entity switched dimensions.
          */
-        public boolean isWasDeath()
-        {
+        public boolean isWasDeath() {
             return wasDeath;
         }
     }
 
     /**
      * Fired when an Entity is started to be "tracked" by this player (the player receives updates about this entity, e.g. motion).
-     *
      */
     public static class StartTracking extends PlayerEvent {
 
         private final Entity target;
 
-        public StartTracking(EntityPlayer player, Entity target)
-        {
+        public StartTracking(EntityPlayer player, Entity target) {
             super(player);
             this.target = target;
         }
@@ -223,22 +228,19 @@
         /**
          * The Entity now being tracked.
          */
-        public Entity getTarget()
-        {
+        public Entity getTarget() {
             return target;
         }
     }
 
     /**
      * Fired when an Entity is stopped to be "tracked" by this player (the player no longer receives updates about this entity, e.g. motion).
-     *
      */
     public static class StopTracking extends PlayerEvent {
 
         private final Entity target;
 
-        public StopTracking(EntityPlayer player, Entity target)
-        {
+        public StopTracking(EntityPlayer player, Entity target) {
             super(player);
             this.target = target;
         }
@@ -246,8 +248,7 @@
         /**
          * The Entity no longer being tracked.
          */
-        public Entity getTarget()
-        {
+        public Entity getTarget() {
             return target;
         }
     }
@@ -262,8 +263,7 @@
         private final File playerDirectory;
         private final String playerUUID;
 
-        public LoadFromFile(EntityPlayer player, File originDirectory, String playerUUID)
-        {
+        public LoadFromFile(EntityPlayer player, File originDirectory, String playerUUID) {
             super(player);
             this.playerDirectory = originDirectory;
             this.playerUUID = playerUUID;
@@ -271,21 +271,20 @@
 
         /**
          * Construct and return a recommended file for the supplied suffix
+         *
          * @param suffix The suffix to use.
          * @return
          */
-        public File getPlayerFile(String suffix)
-        {
+        public File getPlayerFile(String suffix) {
             if ("dat".equals(suffix)) throw new IllegalArgumentException("The suffix 'dat' is reserved");
-            return new File(this.getPlayerDirectory(), this.getPlayerUUID() +"."+suffix);
+            return new File(this.getPlayerDirectory(), this.getPlayerUUID() + "." + suffix);
         }
 
         /**
          * The directory where player data is being stored. Use this
          * to locate your mod additional file.
          */
-        public File getPlayerDirectory()
-        {
+        public File getPlayerDirectory() {
             return playerDirectory;
         }
 
@@ -293,11 +292,11 @@
          * The UUID is the standard for player related file storage.
          * It is broken out here for convenience for quick file generation.
          */
-        public String getPlayerUUID()
-        {
+        public String getPlayerUUID() {
             return playerUUID;
         }
     }
+
     /**
      * The player is being saved to the world store. Note that the
      * player may be in the process of logging out or otherwise departing
@@ -315,8 +314,7 @@
         private final File playerDirectory;
         private final String playerUUID;
 
-        public SaveToFile(EntityPlayer player, File originDirectory, String playerUUID)
-        {
+        public SaveToFile(EntityPlayer player, File originDirectory, String playerUUID) {
             super(player);
             this.playerDirectory = originDirectory;
             this.playerUUID = playerUUID;
@@ -324,21 +322,20 @@
 
         /**
          * Construct and return a recommended file for the supplied suffix
+         *
          * @param suffix The suffix to use.
          * @return
          */
-        public File getPlayerFile(String suffix)
-        {
+        public File getPlayerFile(String suffix) {
             if ("dat".equals(suffix)) throw new IllegalArgumentException("The suffix 'dat' is reserved");
-            return new File(this.getPlayerDirectory(), this.getPlayerUUID() +"."+suffix);
+            return new File(this.getPlayerDirectory(), this.getPlayerUUID() + "." + suffix);
         }
 
         /**
          * The directory where player data is being stored. Use this
          * to locate your mod additional file.
          */
-        public File getPlayerDirectory()
-        {
+        public File getPlayerDirectory() {
             return playerDirectory;
         }
 
@@ -346,8 +343,7 @@
          * The UUID is the standard for player related file storage.
          * It is broken out here for convenience for quick file generation.
          */
-        public String getPlayerUUID()
-        {
+        public String getPlayerUUID() {
             return playerUUID;
         }
     }
@@ -357,29 +353,25 @@
      * The resulting visibility modifier is multiplied by the one calculated by Minecraft (based on sneaking and more) and used to calculate the radius a player has to be in (targetDistance*modifier).
      * This can also be used to increase the visibility of a player, if it was decreased by Minecraft or other mods. But the resulting value cannot be higher than the standard target distance.
      */
-    public static class Visibility extends PlayerEvent
-    {
+    public static class Visibility extends PlayerEvent {
 
         private double visibilityModifier = 1D;
 
-        public Visibility(EntityPlayer player)
-        {
+        public Visibility(EntityPlayer player) {
             super(player);
         }
 
         /**
          * @param mod Is multiplied with the current modifier
          */
-        public void modifyVisibility(double mod)
-        {
+        public void modifyVisibility(double mod) {
             visibilityModifier *= mod;
         }
 
         /**
          * @return The current modifier
          */
-        public double getVisibilityModifier()
-        {
+        public double getVisibilityModifier() {
             return visibilityModifier;
         }
     }
