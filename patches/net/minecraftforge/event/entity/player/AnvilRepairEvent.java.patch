--- ../src-base/minecraft/net/minecraftforge/event/entity/player/AnvilRepairEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/entity/player/AnvilRepairEvent.java
@@ -26,13 +26,12 @@
 
 /**
  * Fired when the player removes a "repaired" item from the Anvil's Output slot.
- *
+ * <p>
  * breakChance specifies as a percentage the chance that the anvil will be "damaged" when used.
- *
+ * <p>
  * ItemStacks are the inputs/output from the anvil. They cannot be edited.
  */
-public class AnvilRepairEvent extends PlayerEvent
-{
+public class AnvilRepairEvent extends PlayerEvent {
     @Nonnull
     private final ItemStack left; // The left side of the input
     @Nonnull
@@ -41,8 +40,7 @@
     private final ItemStack output; // Set this to set the output stack
     private float breakChance; // Anvil's chance to break (reduced by 1 durability) when this is complete. Default is 12% (0.12f)
 
-    public AnvilRepairEvent(EntityPlayer player, @Nonnull ItemStack left, @Nonnull ItemStack right, @Nonnull ItemStack output)
-    {
+    public AnvilRepairEvent(EntityPlayer player, @Nonnull ItemStack left, @Nonnull ItemStack right, @Nonnull ItemStack output) {
         super(player);
         this.output = output;
         this.left = left;
@@ -52,47 +50,72 @@
 
     /**
      * Deprecated in favour of {@link #getItemInput()} - this is actually the output slot of the anvil
+     *
      * @return the output slot
      */
     @Deprecated
     @Nonnull
-    public ItemStack getLeft() { return output; }
+    public ItemStack getLeft() {
+        return output;
+    }
+
     /**
      * Deprecated in favour of {@link #getIngredientInput()}} - this is actually the first input slot of the anvil
+     *
      * @return the first input slot
      */
     @Deprecated
     @Nonnull
-    public ItemStack getRight() { return left; }
+    public ItemStack getRight() {
+        return left;
+    }
+
     /**
      * Deprecated in favour of {@link #getItemResult()} - this is actually the second input slot of the anvil
+     *
      * @return the second input slot
      */
     @Deprecated
     @Nonnull
-    public ItemStack getOutput() { return right; }
+    public ItemStack getOutput() {
+        return right;
+    }
 
     /**
      * Get the output result from the anvil
+     *
      * @return the output
      */
     @Nonnull
-    public ItemStack getItemResult() { return output; }
+    public ItemStack getItemResult() {
+        return output;
+    }
 
     /**
      * Get the first item input into the anvil
+     *
      * @return the first input slot
      */
     @Nonnull
-    public ItemStack getItemInput() { return left; }
+    public ItemStack getItemInput() {
+        return left;
+    }
 
     /**
      * Get the second item input into the anvil
+     *
      * @return the second input slot
      */
     @Nonnull
-    public ItemStack getIngredientInput() { return right; }
+    public ItemStack getIngredientInput() {
+        return right;
+    }
 
-    public float getBreakChance() { return breakChance; }
-    public void setBreakChance(float breakChance) { this.breakChance = breakChance; }
+    public float getBreakChance() {
+        return breakChance;
+    }
+
+    public void setBreakChance(float breakChance) {
+        this.breakChance = breakChance;
+    }
 }
