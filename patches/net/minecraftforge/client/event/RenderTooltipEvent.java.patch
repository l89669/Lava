--- ../src-base/minecraft/net/minecraftforge/client/event/RenderTooltipEvent.java
+++ ../src-work/minecraft/net/minecraftforge/client/event/RenderTooltipEvent.java
@@ -19,17 +19,16 @@
 
 package net.minecraftforge.client.event;
 
-import java.util.Collections;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.item.ItemStack;
 import net.minecraftforge.event.entity.player.ItemTooltipEvent;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 
+import javax.annotation.Nonnull;
+import java.util.Collections;
+import java.util.List;
+
 /**
  * A set of events which are fired at various points during tooltip rendering.
  * <p>
@@ -42,8 +41,7 @@
  * <li>{@link RenderTooltipEvent.PostText}</li>
  * </ul>
  */
-public abstract class RenderTooltipEvent extends Event
-{
+public abstract class RenderTooltipEvent extends Event {
     @Nonnull
     protected final ItemStack stack;
     protected final List<String> lines;
@@ -51,8 +49,7 @@
     protected int y;
     protected FontRenderer fr;
 
-    public RenderTooltipEvent(@Nonnull ItemStack stack, @Nonnull List<String> lines, int x, int y, @Nonnull FontRenderer fr)
-    {
+    public RenderTooltipEvent(@Nonnull ItemStack stack, @Nonnull List<String> lines, int x, int y, @Nonnull FontRenderer fr) {
         this.stack = stack;
         this.lines = Collections.unmodifiableList(lines); // Leave editing to ItemTooltipEvent
         this.x = x;
@@ -64,44 +61,39 @@
      * @return The stack which the tooltip is being rendered for. As tooltips can be drawn without itemstacks, this stack may be empty.
      */
     @Nonnull
-    public ItemStack getStack()
-    {
+    public ItemStack getStack() {
         return stack;
     }
-    
+
     /**
      * The lines to be drawn. May change between {@link RenderTooltipEvent.Pre} and {@link RenderTooltipEvent.Post}.
-     * 
+     *
      * @return An <i>unmodifiable</i> list of strings. Use {@link ItemTooltipEvent} to modify tooltip text.
      */
     @Nonnull
-    public List<String> getLines()
-    {
+    public List<String> getLines() {
         return lines;
     }
 
     /**
      * @return The X position of the tooltip box. By default, the mouse X position.
      */
-    public int getX()
-    {
+    public int getX() {
         return x;
     }
 
     /**
      * @return The Y position of the tooltip box. By default, the mouse Y position.
      */
-    public int getY()
-    {
+    public int getY() {
         return y;
     }
-    
+
     /**
      * @return The {@link FontRenderer} instance the current render is using.
      */
     @Nonnull
-    public FontRenderer getFontRenderer()
-    {
+    public FontRenderer getFontRenderer() {
         return fr;
     }
 
@@ -111,77 +103,66 @@
      * This event is {@link Cancelable}.
      */
     @Cancelable
-    public static class Pre extends RenderTooltipEvent
-    {
+    public static class Pre extends RenderTooltipEvent {
         private int screenWidth;
         private int screenHeight;
         private int maxWidth;
 
-        public Pre(@Nonnull ItemStack stack, @Nonnull List<String> lines, int x, int y, int screenWidth, int screenHeight, int maxWidth, @Nonnull FontRenderer fr)
-        {
+        public Pre(@Nonnull ItemStack stack, @Nonnull List<String> lines, int x, int y, int screenWidth, int screenHeight, int maxWidth, @Nonnull FontRenderer fr) {
             super(stack, lines, x, y, fr);
             this.screenWidth = screenWidth;
             this.screenHeight = screenHeight;
             this.maxWidth = maxWidth;
         }
 
-        public int getScreenWidth()
-        {
+        public int getScreenWidth() {
             return screenWidth;
         }
 
-        public void setScreenWidth(int screenWidth)
-        {
+        public void setScreenWidth(int screenWidth) {
             this.screenWidth = screenWidth;
         }
 
-        public int getScreenHeight()
-        {
+        public int getScreenHeight() {
             return screenHeight;
         }
 
-        public void setScreenHeight(int screenHeight)
-        {
+        public void setScreenHeight(int screenHeight) {
             this.screenHeight = screenHeight;
         }
 
         /**
          * @return The max width the tooltip can be. Defaults to -1 (unlimited).
          */
-        public int getMaxWidth()
-        {
+        public int getMaxWidth() {
             return maxWidth;
         }
 
         /**
          * Sets the max width of the tooltip. Use -1 for unlimited.
          */
-        public void setMaxWidth(int maxWidth)
-        {
+        public void setMaxWidth(int maxWidth) {
             this.maxWidth = maxWidth;
         }
-        
+
         /**
          * Sets the {@link FontRenderer} to be used to render text.
          */
-        public void setFontRenderer(@Nonnull FontRenderer fr)
-        {
+        public void setFontRenderer(@Nonnull FontRenderer fr) {
             this.fr = fr;
         }
 
         /**
          * Set the X origin of the tooltip.
          */
-        public void setX(int x)
-        {
+        public void setX(int x) {
             this.x = x;
         }
 
         /**
          * Set the Y origin of the tooltip.
          */
-        public void setY(int y)
-        {
+        public void setY(int y) {
             this.y = y;
         }
     }
@@ -195,13 +176,11 @@
      * <li>{@link RenderTooltipEvent.PostText}</li>
      * </ul>
      */
-    protected static abstract class Post extends RenderTooltipEvent
-    {
+    protected static abstract class Post extends RenderTooltipEvent {
         private final int width;
         private final int height;
-        
-        public Post(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int width, int height)
-        {
+
+        public Post(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int width, int height) {
             super(stack, textLines, x, y, fr);
             this.width = width;
             this.height = height;
@@ -210,43 +189,40 @@
         /**
          * @return The width of the tooltip box. This is the width of the <i>inner</i> box, not including the border.
          */
-        public int getWidth()
-        {
+        public int getWidth() {
             return width;
         }
 
         /**
          * @return The height of the tooltip box. This is the height of the <i>inner</i> box, not including the border.
          */
-        public int getHeight()
-        {
+        public int getHeight() {
             return height;
         }
     }
-    
+
     /**
      * This event is fired directly after the tooltip background is drawn, but before any text is drawn.
      */
-    public static class PostBackground extends Post 
-    {
-        public PostBackground(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int width, int height)
-            { super(stack, textLines, x, y, fr, width, height); }
+    public static class PostBackground extends Post {
+        public PostBackground(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int width, int height) {
+            super(stack, textLines, x, y, fr, width, height);
+        }
     }
 
     /**
      * This event is fired directly after the tooltip text is drawn, but before the GL state is reset.
      */
-    public static class PostText extends Post
-    {
-        public PostText(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int width, int height)
-            { super(stack, textLines, x, y, fr, width, height); }
+    public static class PostText extends Post {
+        public PostText(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int width, int height) {
+            super(stack, textLines, x, y, fr, width, height);
+        }
     }
-    
+
     /**
-     * This event is fired when the colours for the tooltip background are determined. 
+     * This event is fired when the colours for the tooltip background are determined.
      */
-    public static class Color extends RenderTooltipEvent
-    {
+    public static class Color extends RenderTooltipEvent {
         private final int originalBackground;
         private final int originalBorderStart;
         private final int originalBorderEnd;
@@ -255,8 +231,7 @@
         private int borderEnd;
 
         public Color(@Nonnull ItemStack stack, @Nonnull List<String> textLines, int x, int y, @Nonnull FontRenderer fr, int background, int borderStart,
-                int borderEnd)
-        {
+                     int borderEnd) {
             super(stack, textLines, x, y, fr);
             this.originalBackground = background;
             this.originalBorderStart = borderStart;
@@ -266,48 +241,39 @@
             this.borderEnd = borderEnd;
         }
 
-        public int getBackground()
-        {
+        public int getBackground() {
             return background;
         }
 
-        public void setBackground(int background)
-        {
+        public void setBackground(int background) {
             this.background = background;
         }
 
-        public int getBorderStart()
-        {
+        public int getBorderStart() {
             return borderStart;
         }
 
-        public void setBorderStart(int borderStart)
-        {
+        public void setBorderStart(int borderStart) {
             this.borderStart = borderStart;
         }
 
-        public int getBorderEnd()
-        {
+        public int getBorderEnd() {
             return borderEnd;
         }
 
-        public void setBorderEnd(int borderEnd)
-        {
+        public void setBorderEnd(int borderEnd) {
             this.borderEnd = borderEnd;
         }
 
-        public int getOriginalBackground()
-        {
+        public int getOriginalBackground() {
             return originalBackground;
         }
 
-        public int getOriginalBorderStart()
-        {
+        public int getOriginalBorderStart() {
             return originalBorderStart;
         }
 
-        public int getOriginalBorderEnd()
-        {
+        public int getOriginalBorderEnd() {
             return originalBorderEnd;
         }
     }
