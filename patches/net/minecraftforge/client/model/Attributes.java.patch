--- ../src-base/minecraft/net/minecraftforge/client/model/Attributes.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/Attributes.java
@@ -24,65 +24,55 @@
 import net.minecraft.client.renderer.vertex.VertexFormatElement.EnumType;
 import net.minecraft.client.renderer.vertex.VertexFormatElement.EnumUsage;
 
-public class Attributes
-{
+public class Attributes {
     /*
      * Default format of the data in IBakedModel
      */
     public static final VertexFormat DEFAULT_BAKED_FORMAT;
 
-    static
-    {
+    static {
         DEFAULT_BAKED_FORMAT = new VertexFormat();
         DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.FLOAT, EnumUsage.POSITION, 3));
-        DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.UBYTE, EnumUsage.COLOR,    4));
-        DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.FLOAT, EnumUsage.UV,       2));
-        DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.BYTE,  EnumUsage.PADDING,  4));
+        DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.UBYTE, EnumUsage.COLOR, 4));
+        DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.FLOAT, EnumUsage.UV, 2));
+        DEFAULT_BAKED_FORMAT.addElement(new VertexFormatElement(0, EnumType.BYTE, EnumUsage.PADDING, 4));
     }
 
     /*
      * Can first format be used where second is expected
      */
-    public static boolean moreSpecific(VertexFormat first, VertexFormat second)
-    {
+    public static boolean moreSpecific(VertexFormat first, VertexFormat second) {
         int size = first.getNextOffset();
-        if(size != second.getNextOffset()) return false;
+        if (size != second.getNextOffset()) return false;
 
         int padding = 0;
         int j = 0;
-        for(VertexFormatElement firstAttr : first.getElements())
-        {
-            while(j < second.getElementCount() && second.getElement(j).getUsage() == EnumUsage.PADDING)
-            {
+        for (VertexFormatElement firstAttr : first.getElements()) {
+            while (j < second.getElementCount() && second.getElement(j).getUsage() == EnumUsage.PADDING) {
                 padding += second.getElement(j++).getSize();
             }
-            if(j >= second.getElementCount() && padding == 0)
-            {
+            if (j >= second.getElementCount() && padding == 0) {
                 // if no padding is left, but there are still elements in first (we're processing one) - it doesn't fit
                 return false;
             }
-            if(padding == 0)
-            {
+            if (padding == 0) {
                 // no padding - attributes have to match
                 VertexFormatElement secondAttr = second.getElement(j++);
-                if(
-                    firstAttr.getIndex() != secondAttr.getIndex() ||
-                    firstAttr.getElementCount() != secondAttr.getElementCount() ||
-                    firstAttr.getType() != secondAttr.getType() ||
-                    firstAttr.getUsage() != secondAttr.getUsage())
-                {
+                if (
+                        firstAttr.getIndex() != secondAttr.getIndex() ||
+                                firstAttr.getElementCount() != secondAttr.getElementCount() ||
+                                firstAttr.getType() != secondAttr.getType() ||
+                                firstAttr.getUsage() != secondAttr.getUsage()) {
                     return false;
                 }
-            }
-            else
-            {
+            } else {
                 // padding - attribute should fit in it
                 padding -= firstAttr.getSize();
-                if(padding < 0) return false;
+                if (padding < 0) return false;
             }
         }
 
-        if(padding != 0 || j != second.getElementCount()) return false;
+        if (padding != 0 || j != second.getElementCount()) return false;
         return true;
     }
 }
