--- ../src-base/minecraft/net/minecraftforge/client/model/ModelLoaderRegistry.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/ModelLoaderRegistry.java
@@ -19,10 +19,11 @@
 
 package net.minecraftforge.client.model;
 
-import java.util.Deque;
-import java.util.Map;
-import java.util.Set;
-
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.client.resources.IReloadableResourceManager;
@@ -37,17 +38,14 @@
 import net.minecraftforge.common.model.animation.IAnimationStateMachine;
 import net.minecraftforge.fml.common.FMLLog;
 
-import com.google.common.base.Joiner;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Queues;
-import com.google.common.collect.Sets;
+import java.util.Deque;
+import java.util.Map;
+import java.util.Set;
 
 /*
  * Central hub for custom model loaders.
  */
-public class ModelLoaderRegistry
-{
+public class ModelLoaderRegistry {
     private static final Set<ICustomModelLoader> loaders = Sets.newHashSet();
     private static final Map<ResourceLocation, IModel> cache = Maps.newHashMap();
     private static final Deque<ResourceLocation> loadingModels = Queues.newArrayDeque();
@@ -57,8 +55,7 @@
     private static IResourceManager manager;
 
     // Forge built-in loaders
-    static
-    {
+    static {
         registerLoader(B3DLoader.INSTANCE);
         registerLoader(OBJLoader.INSTANCE);
         registerLoader(ModelFluid.FluidLoader.INSTANCE);
@@ -70,22 +67,19 @@
     /*
      * Makes system aware of your loader.
      */
-    public static void registerLoader(ICustomModelLoader loader)
-    {
+    public static void registerLoader(ICustomModelLoader loader) {
         loaders.add(loader);
         ((IReloadableResourceManager) Minecraft.getMinecraft().getResourceManager()).registerReloadListener(loader);
     }
 
-    public static boolean loaded(ResourceLocation location)
-    {
+    public static boolean loaded(ResourceLocation location) {
         return cache.containsKey(location);
     }
 
 
-    public static ResourceLocation getActualLocation(ResourceLocation location)
-    {
-        if(location instanceof ModelResourceLocation) return location;
-        if(location.getResourcePath().startsWith("builtin/")) return location;
+    public static ResourceLocation getActualLocation(ResourceLocation location) {
+        if (location instanceof ModelResourceLocation) return location;
+        if (location.getResourcePath().startsWith("builtin/")) return location;
         return new ResourceLocation(location.getResourceDomain(), "models/" + location.getResourcePath());
     }
 
@@ -94,93 +88,69 @@
      * ResourceLocation argument will be passed directly to the custom model loaders,
      * ModelResourceLocation argument will be loaded through the blockstate system.
      */
-    public static IModel getModel(ResourceLocation location) throws Exception
-    {
+    public static IModel getModel(ResourceLocation location) throws Exception {
         IModel model;
 
         IModel cached = cache.get(location);
         if (cached != null) return cached;
 
-        for(ResourceLocation loading : loadingModels)
-        {
-            if(location.getClass() == loading.getClass() && location.equals(loading))
-            {
+        for (ResourceLocation loading : loadingModels) {
+            if (location.getClass() == loading.getClass() && location.equals(loading)) {
                 throw new LoaderException("circular model dependencies, stack: [" + Joiner.on(", ").join(loadingModels) + "]");
             }
         }
         loadingModels.addLast(location);
-        try
-        {
+        try {
             ResourceLocation aliased = aliases.get(location);
             if (aliased != null) return getModel(aliased);
 
             ResourceLocation actual = getActualLocation(location);
             ICustomModelLoader accepted = null;
-            for(ICustomModelLoader loader : loaders)
-            {
-                try
-                {
-                    if(loader.accepts(actual))
-                    {
-                        if(accepted != null)
-                        {
+            for (ICustomModelLoader loader : loaders) {
+                try {
+                    if (loader.accepts(actual)) {
+                        if (accepted != null) {
                             throw new LoaderException(String.format("2 loaders (%s and %s) want to load the same model %s", accepted, loader, location));
                         }
                         accepted = loader;
                     }
-                }
-                catch(Exception e)
-                {
+                } catch (Exception e) {
                     throw new LoaderException(String.format("Exception checking if model %s can be loaded with loader %s, skipping", location, loader), e);
                 }
             }
 
             // no custom loaders found, try vanilla ones
-            if(accepted == null)
-            {
-                if(VariantLoader.INSTANCE.accepts(actual))
-                {
-                     accepted = VariantLoader.INSTANCE;
-                }
-                else if(VanillaLoader.INSTANCE.accepts(actual))
-                {
+            if (accepted == null) {
+                if (VariantLoader.INSTANCE.accepts(actual)) {
+                    accepted = VariantLoader.INSTANCE;
+                } else if (VanillaLoader.INSTANCE.accepts(actual)) {
                     accepted = VanillaLoader.INSTANCE;
                 }
             }
 
-            if(accepted == null)
-            {
+            if (accepted == null) {
                 throw new LoaderException("no suitable loader found for the model " + location + ", skipping");
             }
-            try
-            {
+            try {
                 model = accepted.loadModel(actual);
-            }
-            catch(Exception e)
-            {
+            } catch (Exception e) {
                 throw new LoaderException(String.format("Exception loading model %s with loader %s, skipping", location, accepted), e);
             }
-            if(model == getMissingModel())
-            {
+            if (model == getMissingModel()) {
                 throw new LoaderException(String.format("Loader %s returned missing model while loading model %s", accepted, location));
             }
-            if(model == null)
-            {
+            if (model == null) {
                 throw new LoaderException(String.format("Loader %s returned null while loading model %s", accepted, location));
             }
             textures.addAll(model.getTextures());
-        }
-        finally
-        {
+        } finally {
             ResourceLocation popLoc = loadingModels.removeLast();
-            if(popLoc != location)
-            {
+            if (popLoc != location) {
                 throw new IllegalStateException("Corrupted loading model stack: " + popLoc + " != " + location);
             }
         }
         cache.put(location, model);
-        for (ResourceLocation dep : model.getDependencies())
-        {
+        for (ResourceLocation dep : model.getDependencies()) {
             getModelOrMissing(dep);
         }
         return model;
@@ -189,14 +159,10 @@
     /**
      * Use this if you don't care about the exception and want some model anyway.
      */
-    public static IModel getModelOrMissing(ResourceLocation location)
-    {
-        try
-        {
+    public static IModel getModelOrMissing(ResourceLocation location) {
+        try {
             return getModel(location);
-        }
-        catch(Exception e)
-        {
+        } catch (Exception e) {
             return getMissingModel(location, e);
         }
     }
@@ -204,44 +170,35 @@
     /**
      * Use this if you want the model, but need to log the error.
      */
-    public static IModel getModelOrLogError(ResourceLocation location, String error)
-    {
-        try
-        {
+    public static IModel getModelOrLogError(ResourceLocation location, String error) {
+        try {
             return getModel(location);
-        }
-        catch(Exception e)
-        {
+        } catch (Exception e) {
             FMLLog.log.error(error, e);
             return getMissingModel(location, e);
         }
     }
 
-    public static IModel getMissingModel()
-    {
+    public static IModel getMissingModel() {
         final ModelLoader loader = VanillaLoader.INSTANCE.getLoader();
-        if(loader == null)
-        {
+        if (loader == null) {
             throw new IllegalStateException("Using ModelLoaderRegistry too early.");
         }
         return loader.getMissingModel();
     }
 
-    static IModel getMissingModel(ResourceLocation location, Throwable cause)
-    {
+    static IModel getMissingModel(ResourceLocation location, Throwable cause) {
         //IModel model =  new FancyMissingModel(ExceptionUtils.getStackTrace(cause).replaceAll("\\t", "    "));
         IModel model = new FancyMissingModel(getMissingModel(), location.toString());
         textures.addAll(model.getTextures());
         return model;
     }
 
-    static void addAlias(ResourceLocation from, ResourceLocation to)
-    {
+    static void addAlias(ResourceLocation from, ResourceLocation to) {
         aliases.put(from, to);
     }
 
-    public static void clearModelCache(IResourceManager manager)
-    {
+    public static void clearModelCache(IResourceManager manager) {
         ModelLoaderRegistry.manager = manager;
         aliases.clear();
         textures.clear();
@@ -252,28 +209,23 @@
         cache.put(new ResourceLocation("minecraft:item/builtin/generated"), ItemLayerModel.INSTANCE);
     }
 
-    static Iterable<ResourceLocation> getTextures()
-    {
+    static Iterable<ResourceLocation> getTextures() {
         return textures;
     }
 
-    public static class LoaderException extends Exception
-    {
-        public LoaderException(String message)
-        {
+    public static class LoaderException extends Exception {
+        public LoaderException(String message) {
             super(message);
         }
 
-        public LoaderException(String message, Throwable cause)
-        {
+        public LoaderException(String message, Throwable cause) {
             super(message, cause);
         }
 
         private static final long serialVersionUID = 1L;
     }
 
-    public static IAnimationStateMachine loadASM(ResourceLocation location, ImmutableMap<String, ITimeValue> customParameters)
-    {
+    public static IAnimationStateMachine loadASM(ResourceLocation location, ImmutableMap<String, ITimeValue> customParameters) {
         return AnimationStateMachine.load(manager, location, customParameters);
     }
 }
