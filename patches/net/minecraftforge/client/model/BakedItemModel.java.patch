--- ../src-base/minecraft/net/minecraftforge/client/model/BakedItemModel.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/BakedItemModel.java
@@ -19,11 +19,6 @@
 
 package net.minecraftforge.client.model;
 
-import javax.annotation.Nullable;
-import javax.vecmath.Matrix4f;
-
-import java.util.List;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import net.minecraft.block.state.IBlockState;
@@ -36,23 +31,26 @@
 import net.minecraftforge.common.model.TRSRTransformation;
 import org.apache.commons.lang3.tuple.Pair;
 
-public class BakedItemModel implements IBakedModel
-{
+import javax.annotation.Nullable;
+import javax.vecmath.Matrix4f;
+import java.util.List;
+
+public class BakedItemModel implements IBakedModel {
     protected final ImmutableList<BakedQuad> quads;
     protected final TextureAtlasSprite particle;
     protected final ImmutableMap<TransformType, TRSRTransformation> transforms;
     protected final ItemOverrideList overrides;
     protected final IBakedModel guiModel;
 
-    /** @deprecated use {@link #BakedItemModel(ImmutableList, TextureAtlasSprite, ImmutableMap, ItemOverrideList, boolean)} */
+    /**
+     * @deprecated use {@link #BakedItemModel(ImmutableList, TextureAtlasSprite, ImmutableMap, ItemOverrideList, boolean)}
+     */
     @Deprecated // TODO: remove
-    public BakedItemModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, ImmutableMap<TransformType, TRSRTransformation> transforms, ItemOverrideList overrides)
-    {
+    public BakedItemModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, ImmutableMap<TransformType, TRSRTransformation> transforms, ItemOverrideList overrides) {
         this(quads, particle, transforms, overrides, true);
     }
 
-    public BakedItemModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, ImmutableMap<TransformType, TRSRTransformation> transforms, ItemOverrideList overrides, boolean untransformed)
-    {
+    public BakedItemModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, ImmutableMap<TransformType, TRSRTransformation> transforms, ItemOverrideList overrides, boolean untransformed) {
         this.quads = quads;
         this.particle = particle;
         this.transforms = transforms;
@@ -60,50 +58,60 @@
         this.guiModel = untransformed && hasGuiIdentity(transforms) ? new BakedGuiItemModel<>(this) : null;
     }
 
-    private static boolean hasGuiIdentity(ImmutableMap<TransformType, TRSRTransformation> transforms)
-    {
+    private static boolean hasGuiIdentity(ImmutableMap<TransformType, TRSRTransformation> transforms) {
         TRSRTransformation guiTransform = transforms.get(TransformType.GUI);
         return guiTransform == null || guiTransform.isIdentity();
     }
 
-    @Override public boolean isAmbientOcclusion() { return true; }
-    @Override public boolean isGui3d() { return false; }
-    @Override public boolean isBuiltInRenderer() { return false; }
-    @Override public TextureAtlasSprite getParticleTexture() { return particle; }
-    @Override public ItemOverrideList getOverrides() { return overrides; }
+    @Override
+    public boolean isAmbientOcclusion() {
+        return true;
+    }
 
     @Override
-    public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
-    {
-        if (side == null)
-        {
+    public boolean isGui3d() {
+        return false;
+    }
+
+    @Override
+    public boolean isBuiltInRenderer() {
+        return false;
+    }
+
+    @Override
+    public TextureAtlasSprite getParticleTexture() {
+        return particle;
+    }
+
+    @Override
+    public ItemOverrideList getOverrides() {
+        return overrides;
+    }
+
+    @Override
+    public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand) {
+        if (side == null) {
             return quads;
         }
         return ImmutableList.of();
     }
 
     @Override
-    public Pair<? extends IBakedModel, Matrix4f> handlePerspective(TransformType type)
-    {
-        if (type == TransformType.GUI && this.guiModel != null)
-        {
+    public Pair<? extends IBakedModel, Matrix4f> handlePerspective(TransformType type) {
+        if (type == TransformType.GUI && this.guiModel != null) {
             return this.guiModel.handlePerspective(type);
         }
         return PerspectiveMapWrapper.handlePerspective(this, transforms, type);
     }
 
-    public static class BakedGuiItemModel<T extends BakedItemModel> extends BakedModelWrapper<T>
-    {
+    public static class BakedGuiItemModel<T extends BakedItemModel> extends BakedModelWrapper<T> {
         private final ImmutableList<BakedQuad> quads;
 
-        public BakedGuiItemModel(T originalModel)
-        {
+        public BakedGuiItemModel(T originalModel) {
             super(originalModel);
             ImmutableList.Builder<BakedQuad> builder = ImmutableList.builder();
-            for (BakedQuad quad : originalModel.quads)
-            {
-                if (quad.getFace() == EnumFacing.SOUTH)
-                {
+            for (BakedQuad quad : originalModel.quads) {
+                if (quad.getFace() == EnumFacing.SOUTH) {
                     builder.add(quad);
                 }
             }
@@ -111,20 +119,16 @@
         }
 
         @Override
-        public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
-        {
-            if(side == null)
-            {
+        public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand) {
+            if (side == null) {
                 return quads;
             }
             return ImmutableList.of();
         }
 
         @Override
-        public Pair<? extends IBakedModel, Matrix4f> handlePerspective(TransformType type)
-        {
-            if (type == TransformType.GUI)
-            {
+        public Pair<? extends IBakedModel, Matrix4f> handlePerspective(TransformType type) {
+            if (type == TransformType.GUI) {
                 return PerspectiveMapWrapper.handlePerspective(this, originalModel.transforms, type);
             }
             return this.originalModel.handlePerspective(type);
