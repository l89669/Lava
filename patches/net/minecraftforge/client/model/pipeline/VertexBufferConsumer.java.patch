--- ../src-base/minecraft/net/minecraftforge/client/model/pipeline/VertexBufferConsumer.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/pipeline/VertexBufferConsumer.java
@@ -23,48 +23,42 @@
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.renderer.vertex.VertexFormatElement.EnumUsage;
-import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
+import net.minecraft.util.math.BlockPos;
 
 /**
  * Assumes VertexFormatElement is present in the BufferBuilder's vertex format.
  */
-public class VertexBufferConsumer implements IVertexConsumer
-{
-    private static final float[] dummyColor = new float[]{ 1, 1, 1, 1 };
+public class VertexBufferConsumer implements IVertexConsumer {
+    private static final float[] dummyColor = new float[]{1, 1, 1, 1};
 
     private BufferBuilder renderer;
     private int[] quadData;
     private int v = 0;
     private BlockPos offset = BlockPos.ORIGIN;
 
-    public VertexBufferConsumer() {}
+    public VertexBufferConsumer() {
+    }
 
-    public VertexBufferConsumer(BufferBuilder buffer)
-    {
+    public VertexBufferConsumer(BufferBuilder buffer) {
         setBuffer(buffer);
     }
 
     @Override
-    public VertexFormat getVertexFormat()
-    {
+    public VertexFormat getVertexFormat() {
         return renderer.getVertexFormat();
     }
 
     @Override
-    public void put(int e, float... data)
-    {
+    public void put(int e, float... data) {
         VertexFormat format = getVertexFormat();
-        if(renderer.isColorDisabled() && format.getElement(e).getUsage() == EnumUsage.COLOR)
-        {
+        if (renderer.isColorDisabled() && format.getElement(e).getUsage() == EnumUsage.COLOR) {
             data = dummyColor;
         }
         LightUtil.pack(data, quadData, format, v, e);
-        if(e == format.getElementCount() - 1)
-        {
+        if (e == format.getElementCount() - 1) {
             v++;
-            if(v == 4)
-            {
+            if (v == 4) {
                 renderer.addVertexData(quadData);
                 renderer.putPosition(offset.getX(), offset.getY(), offset.getZ());
                 //Arrays.fill(quadData, 0);
@@ -73,31 +67,34 @@
         }
     }
 
-    private void checkVertexFormat()
-    {
-        if (quadData == null || renderer.getVertexFormat().getNextOffset() != quadData.length)
-        {
+    private void checkVertexFormat() {
+        if (quadData == null || renderer.getVertexFormat().getNextOffset() != quadData.length) {
             quadData = new int[renderer.getVertexFormat().getNextOffset()];
         }
     }
 
-    public void setBuffer(BufferBuilder buffer)
-    {
+    public void setBuffer(BufferBuilder buffer) {
         this.renderer = buffer;
         checkVertexFormat();
     }
 
-    public void setOffset(BlockPos offset)
-    {
+    public void setOffset(BlockPos offset) {
         this.offset = new BlockPos(offset);
     }
 
     @Override
-    public void setQuadTint(int tint) {}
+    public void setQuadTint(int tint) {
+    }
+
     @Override
-    public void setQuadOrientation(EnumFacing orientation) {}
+    public void setQuadOrientation(EnumFacing orientation) {
+    }
+
     @Override
-    public void setApplyDiffuseLighting(boolean diffuse) {}
+    public void setApplyDiffuseLighting(boolean diffuse) {
+    }
+
     @Override
-    public void setTexture(TextureAtlasSprite texture ) {}
+    public void setTexture(TextureAtlasSprite texture) {
+    }
 }
