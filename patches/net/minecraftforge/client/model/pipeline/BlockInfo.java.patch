--- ../src-base/minecraft/net/minecraftforge/client/model/pipeline/BlockInfo.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/pipeline/BlockInfo.java
@@ -26,8 +26,7 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.IBlockAccess;
 
-public class BlockInfo
-{
+public class BlockInfo {
     private static final EnumFacing[] SIDES = EnumFacing.values();
 
     private final BlockColors colors;
@@ -51,51 +50,44 @@
     private int cachedTint = -1;
     private int cachedMultiplier = -1;
 
-    public BlockInfo(BlockColors colors)
-    {
+    public BlockInfo(BlockColors colors) {
         this.colors = colors;
     }
 
-    public int getColorMultiplier(int tint)
-    {
-        if(cachedTint == tint) return cachedMultiplier;
+    public int getColorMultiplier(int tint) {
+        if (cachedTint == tint) return cachedMultiplier;
         cachedTint = tint;
         cachedMultiplier = colors.colorMultiplier(state, world, blockPos, tint);
         return cachedMultiplier;
     }
 
-    public void updateShift()
-    {
+    public void updateShift() {
         Vec3d offset = state.getOffset(world, blockPos);
         shx = (float) offset.x;
         shy = (float) offset.y;
         shz = (float) offset.z;
     }
 
-    public void setWorld(IBlockAccess world)
-    {
+    public void setWorld(IBlockAccess world) {
         this.world = world;
         cachedTint = -1;
         cachedMultiplier = -1;
     }
 
-    public void setState(IBlockState state)
-    {
+    public void setState(IBlockState state) {
         this.state = state;
         cachedTint = -1;
         cachedMultiplier = -1;
     }
 
-    public void setBlockPos(BlockPos blockPos)
-    {
+    public void setBlockPos(BlockPos blockPos) {
         this.blockPos = blockPos;
         cachedTint = -1;
         cachedMultiplier = -1;
         shx = shy = shz = 0;
     }
 
-    public void reset()
-    {
+    public void reset() {
         this.world = null;
         this.state = null;
         this.blockPos = null;
@@ -104,23 +96,18 @@
         shx = shy = shz = 0;
     }
 
-    private float combine(int c, int s1, int s2, int s3, boolean t0, boolean t1, boolean t2, boolean t3)
-    {
-        if (c  == 0 && !t0) c  = Math.max(0, Math.max(s1, s2) - 1);
+    private float combine(int c, int s1, int s2, int s3, boolean t0, boolean t1, boolean t2, boolean t3) {
+        if (c == 0 && !t0) c = Math.max(0, Math.max(s1, s2) - 1);
         if (s1 == 0 && !t1) s1 = Math.max(0, c - 1);
         if (s2 == 0 && !t2) s2 = Math.max(0, c - 1);
         if (s3 == 0 && !t3) s3 = Math.max(0, Math.max(s1, s2) - 1);
         return (float) (c + s1 + s2 + s3) * 0x20 / (4 * 0xFFFF);
     }
 
-    public void updateLightMatrix()
-    {
-        for(int x = 0; x <= 2; x++)
-        {
-            for(int y = 0; y <= 2; y++)
-            {
-                for(int z = 0; z <= 2; z++)
-                {
+    public void updateLightMatrix() {
+        for (int x = 0; x <= 2; x++) {
+            for (int y = 0; y <= 2; y++) {
+                for (int z = 0; z <= 2; z++) {
                     BlockPos pos = blockPos.add(x - 1, y - 1, z - 1);
                     IBlockState state = world.getBlockState(pos);
                     t[x][y][z] = state.getLightOpacity(world, pos) < 15;
@@ -131,10 +118,8 @@
                 }
             }
         }
-        for(EnumFacing side : SIDES)
-        {
-            if(!state.doesSideBlockRendering(world, blockPos, side))
-            {
+        for (EnumFacing side : SIDES) {
+            if (!state.doesSideBlockRendering(world, blockPos, side)) {
                 int x = side.getFrontOffsetX() + 1;
                 int y = side.getFrontOffsetY() + 1;
                 int z = side.getFrontOffsetZ() + 1;
@@ -142,126 +127,107 @@
                 b[x][y][z] = Math.max(b[1][1][1] - 1, b[x][y][z]);
             }
         }
-        for(int x = 0; x < 2; x++)
-        {
-            for(int y = 0; y < 2; y++)
-            {
-                for(int z = 0; z < 2; z++)
-                {
+        for (int x = 0; x < 2; x++) {
+            for (int y = 0; y < 2; y++) {
+                for (int z = 0; z < 2; z++) {
                     int x1 = x * 2;
                     int y1 = y * 2;
                     int z1 = z * 2;
 
-                    int     sxyz = s[x1][y1][z1];
-                    int     bxyz = b[x1][y1][z1];
+                    int sxyz = s[x1][y1][z1];
+                    int bxyz = b[x1][y1][z1];
                     boolean txyz = t[x1][y1][z1];
 
-                    int     sxz = s[x1][1][z1], sxy = s[x1][y1][1], syz = s[1][y1][z1];
-                    int     bxz = b[x1][1][z1], bxy = b[x1][y1][1], byz = b[1][y1][z1];
+                    int sxz = s[x1][1][z1], sxy = s[x1][y1][1], syz = s[1][y1][z1];
+                    int bxz = b[x1][1][z1], bxy = b[x1][y1][1], byz = b[1][y1][z1];
                     boolean txz = t[x1][1][z1], txy = t[x1][y1][1], tyz = t[1][y1][z1];
 
-                    int     sx = s[x1][1][1], sy = s[1][y1][1], sz = s[1][1][z1];
-                    int     bx = b[x1][1][1], by = b[1][y1][1], bz = b[1][1][z1];
+                    int sx = s[x1][1][1], sy = s[1][y1][1], sz = s[1][1][z1];
+                    int bx = b[x1][1][1], by = b[1][y1][1], bz = b[1][1][z1];
                     boolean tx = t[x1][1][1], ty = t[1][y1][1], tz = t[1][1][z1];
 
-                    skyLight  [0][x][y][z] = combine(sx, sxz, sxy, txz || txy ? sxyz : sx,
-                                                     tx, txz, txy, txz || txy ? txyz : tx);
+                    skyLight[0][x][y][z] = combine(sx, sxz, sxy, txz || txy ? sxyz : sx,
+                            tx, txz, txy, txz || txy ? txyz : tx);
                     blockLight[0][x][y][z] = combine(bx, bxz, bxy, txz || txy ? bxyz : bx,
-                                                     tx, txz, txy, txz || txy ? txyz : tx);
+                            tx, txz, txy, txz || txy ? txyz : tx);
 
-                    skyLight  [1][x][y][z] = combine(sy, sxy, syz, txy || tyz ? sxyz : sy,
-                                                     ty, txy, tyz, txy || tyz ? txyz : ty);
+                    skyLight[1][x][y][z] = combine(sy, sxy, syz, txy || tyz ? sxyz : sy,
+                            ty, txy, tyz, txy || tyz ? txyz : ty);
                     blockLight[1][x][y][z] = combine(by, bxy, byz, txy || tyz ? bxyz : by,
-                                                     ty, txy, tyz, txy || tyz ? txyz : ty);
+                            ty, txy, tyz, txy || tyz ? txyz : ty);
 
-                    skyLight  [2][x][y][z] = combine(sz, syz, sxz, tyz || txz ? sxyz : sz,
-                                                     tz, tyz, txz, tyz || txz ? txyz : tz);
+                    skyLight[2][x][y][z] = combine(sz, syz, sxz, tyz || txz ? sxyz : sz,
+                            tz, tyz, txz, tyz || txz ? txyz : tz);
                     blockLight[2][x][y][z] = combine(bz, byz, bxz, tyz || txz ? bxyz : bz,
-                                                     tz, tyz, txz, tyz || txz ? txyz : tz);
+                            tz, tyz, txz, tyz || txz ? txyz : tz);
                 }
             }
         }
     }
 
-    public void updateFlatLighting()
-    {
+    public void updateFlatLighting() {
         full = state.isFullCube();
         packed[0] = state.getPackedLightmapCoords(world, blockPos);
 
-        for (EnumFacing side : SIDES)
-        {
+        for (EnumFacing side : SIDES) {
             int i = side.ordinal() + 1;
             packed[i] = state.getPackedLightmapCoords(world, blockPos.offset(side));
         }
     }
 
-    public IBlockAccess getWorld()
-    {
+    public IBlockAccess getWorld() {
         return world;
     }
 
-    public IBlockState getState()
-    {
+    public IBlockState getState() {
         return state;
     }
 
-    public BlockPos getBlockPos()
-    {
+    public BlockPos getBlockPos() {
         return blockPos;
     }
 
-    public boolean[][][] getTranslucent()
-    {
+    public boolean[][][] getTranslucent() {
         return t;
     }
 
-    public float[][][][] getSkyLight()
-    {
+    public float[][][][] getSkyLight() {
         return skyLight;
     }
 
-    public float[][][][] getBlockLight()
-    {
+    public float[][][][] getBlockLight() {
         return blockLight;
     }
 
-    public float[][][] getAo()
-    {
+    public float[][][] getAo() {
         return ao;
     }
 
-    public int[] getPackedLight()
-    {
+    public int[] getPackedLight() {
         return packed;
     }
 
-    public boolean isFullCube()
-    {
+    public boolean isFullCube() {
         return full;
     }
 
-    public float getShx()
-    {
+    public float getShx() {
         return shx;
     }
 
-    public float getShy()
-    {
+    public float getShy() {
         return shy;
     }
 
-    public float getShz()
-    {
+    public float getShz() {
         return shz;
     }
 
-    public int getCachedTint()
-    {
+    public int getCachedTint() {
         return cachedTint;
     }
 
-    public int getCachedMultiplier()
-    {
+    public int getCachedMultiplier() {
         return cachedMultiplier;
     }
 }
