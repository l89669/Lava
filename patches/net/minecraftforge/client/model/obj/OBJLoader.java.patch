--- ../src-base/minecraft/net/minecraftforge/client/model/obj/OBJLoader.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/obj/OBJLoader.java
@@ -19,12 +19,6 @@
 
 package net.minecraftforge.client.model.obj;
 
-import java.io.FileNotFoundException;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-
 import net.minecraft.client.resources.IResource;
 import net.minecraft.client.resources.IResourceManager;
 import net.minecraft.util.ResourceLocation;
@@ -32,10 +26,14 @@
 import net.minecraftforge.client.model.IModel;
 import net.minecraftforge.client.model.ModelLoaderRegistry;
 import net.minecraftforge.fml.common.FMLLog;
-
 import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.Level;
 
+import java.io.FileNotFoundException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
 /*
  * Loader for OBJ models.
  * To enable your mod call instance.addDomain(modid).
@@ -46,59 +44,57 @@
 
     private IResourceManager manager;
     private final Set<String> enabledDomains = new HashSet<>();
+    private final Map<ResourceLocation, OBJModel> cache = new HashMap<>();
+    private final Map<ResourceLocation, Exception> errors = new HashMap<>();
 
-    public void addDomain(String domain)
-    {
+    public void addDomain(String domain) {
         enabledDomains.add(domain.toLowerCase());
         FMLLog.log.info("OBJLoader: Domain {} has been added.", domain.toLowerCase());
     }
 
     @Override
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         this.manager = resourceManager;
+        cache.clear();
+        errors.clear();
     }
 
     @Override
-    public boolean accepts(ResourceLocation modelLocation)
-    {
+    public boolean accepts(ResourceLocation modelLocation) {
         return enabledDomains.contains(modelLocation.getResourceDomain()) && modelLocation.getResourcePath().endsWith(".obj");
     }
 
     @Override
-    public IModel loadModel(ResourceLocation modelLocation) throws Exception
-    {
+    public IModel loadModel(ResourceLocation modelLocation) throws Exception {
         ResourceLocation file = new ResourceLocation(modelLocation.getResourceDomain(), modelLocation.getResourcePath());
-        IResource resource = null;
-        try
-        {
-            try
-            {
-                resource = manager.getResource(file);
+        if (!cache.containsKey(file)) {
+            IResource resource = null;
+            try {
+                try {
+                    resource = manager.getResource(file);
+                } catch (FileNotFoundException e) {
+                    if (modelLocation.getResourcePath().startsWith("models/block/"))
+                        resource = manager.getResource(new ResourceLocation(file.getResourceDomain(), "models/item/" + file.getResourcePath().substring("models/block/".length())));
+                    else if (modelLocation.getResourcePath().startsWith("models/item/"))
+                        resource = manager.getResource(new ResourceLocation(file.getResourceDomain(), "models/block/" + file.getResourcePath().substring("models/item/".length())));
+                    else throw e;
+                }
+                OBJModel.Parser parser = new OBJModel.Parser(resource, manager);
+                OBJModel model = null;
+                try {
+                    model = parser.parse();
+                } catch (Exception e) {
+                    errors.put(modelLocation, e);
+                } finally {
+                    cache.put(modelLocation, model);
+                }
+            } finally {
+                IOUtils.closeQuietly(resource);
             }
-            catch (FileNotFoundException e)
-            {
-                if (modelLocation.getResourcePath().startsWith("models/block/"))
-                    resource = manager.getResource(new ResourceLocation(file.getResourceDomain(), "models/item/" + file.getResourcePath().substring("models/block/".length())));
-                else if (modelLocation.getResourcePath().startsWith("models/item/"))
-                    resource = manager.getResource(new ResourceLocation(file.getResourceDomain(), "models/block/" + file.getResourcePath().substring("models/item/".length())));
-                else throw e;
-            }
-            OBJModel.Parser parser = new OBJModel.Parser(resource, manager);
-            OBJModel model;
-            try
-            {
-                model = parser.parse();
-            }
-            catch (Exception e)
-            {
-                throw new ModelLoaderRegistry.LoaderException("Error loading model previously: " + file, e);
-            }
-            return model;
         }
-        finally
-        {
-            IOUtils.closeQuietly(resource);
-        }
+        OBJModel model = cache.get(file);
+        if (model == null)
+            throw new ModelLoaderRegistry.LoaderException("Error loading model previously: " + file, errors.get(modelLocation));
+        return model;
     }
 }
