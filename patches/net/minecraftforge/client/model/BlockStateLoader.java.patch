--- ../src-base/minecraft/net/minecraftforge/client/model/BlockStateLoader.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/BlockStateLoader.java
@@ -19,17 +19,11 @@
 
 package net.minecraftforge.client.model;
 
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.nio.charset.StandardCharsets;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Optional;
-
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
 import net.minecraft.client.renderer.block.model.ModelBlockDefinition;
 import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.client.renderer.block.model.Variant;
@@ -37,64 +31,61 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.TRSRTransformation;
-
 import net.minecraftforge.fml.common.FMLLog;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.tuple.Pair;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
 import javax.annotation.Nullable;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.StandardCharsets;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Optional;
 
-public class BlockStateLoader
-{
+public class BlockStateLoader {
     private static final Gson GSON = (new GsonBuilder())
-            .registerTypeAdapter(ForgeBlockStateV1.class,         ForgeBlockStateV1.Deserializer.INSTANCE)
+            .registerTypeAdapter(ForgeBlockStateV1.class, ForgeBlockStateV1.Deserializer.INSTANCE)
             .registerTypeAdapter(ForgeBlockStateV1.Variant.class, ForgeBlockStateV1.Variant.Deserializer.INSTANCE)
             .registerTypeAdapter(TRSRTransformation.class, ForgeBlockStateV1.TRSRDeserializer.INSTANCE)
             .create();
+
     /**
      * Loads a BlockStates json file.
      * Will attempt to parse it as a Forge Enhanced version if possible.
      * Will fall back to standard loading if marker is not present.
-     *
+     * <p>
      * Note: This method is NOT thread safe
      *
-     * @param reader json read
-     * @param location blockstate location
+     * @param reader      json read
+     * @param location    blockstate location
      * @param vanillaGSON ModelBlockDefinition's GSON reader.
-     *
      * @return Model definition including variants for all known combinations.
      */
-    public static ModelBlockDefinition load(Reader reader, ResourceLocation location, final Gson vanillaGSON)
-    {
-        try
-        {
+    public static ModelBlockDefinition load(Reader reader, ResourceLocation location, final Gson vanillaGSON) {
+        try {
             byte[] data = IOUtils.toByteArray(reader, StandardCharsets.UTF_8);
             reader = new InputStreamReader(new ByteArrayInputStream(data), StandardCharsets.UTF_8);
 
             Marker marker = GSON.fromJson(new String(data, StandardCharsets.UTF_8), Marker.class);  // Read "forge_marker" to determine what to load.
 
-            switch (marker.forge_marker)
-            {
+            switch (marker.forge_marker) {
                 case 1: // Version 1
                     ForgeBlockStateV1 v1 = GSON.fromJson(reader, ForgeBlockStateV1.class);
                     Map<String, VariantList> variants = Maps.newLinkedHashMap();
 
-                    for (Entry<String, Collection<ForgeBlockStateV1.Variant>> entry : v1.variants.asMap().entrySet())
-                    {   // Convert Version1 variants into vanilla variants for the ModelBlockDefinition.
+                    for (Entry<String, Collection<ForgeBlockStateV1.Variant>> entry : v1.variants.asMap().entrySet()) {   // Convert Version1 variants into vanilla variants for the ModelBlockDefinition.
                         List<Variant> mcVars = Lists.newArrayList();
-                        for (ForgeBlockStateV1.Variant var : entry.getValue())
-                        {
+                        for (ForgeBlockStateV1.Variant var : entry.getValue()) {
                             boolean uvLock = var.getUvLock().orElse(false);
                             int weight = var.getWeight().orElse(1);
 
                             if (var.isVanillaCompatible())
-                                mcVars.add(new Variant(var.getModel(), (ModelRotation)var.getState().orElse(ModelRotation.X0_Y0), uvLock, weight));
+                                mcVars.add(new Variant(var.getModel(), (ModelRotation) var.getState().orElse(ModelRotation.X0_Y0), uvLock, weight));
                             else
                                 mcVars.add(new ForgeVariant(location, var.getModel(), var.getState().orElse(TRSRTransformation.identity()), uvLock, var.getSmooth(), var.getGui3d(), weight, var.getTextures(), var.getOnlyPartsVariant(), var.getCustomData()));
                         }
@@ -106,21 +97,17 @@
                 default: //Unknown version.. try loading it as normal.
                     return vanillaGSON.fromJson(reader, ModelBlockDefinition.class);
             }
-        }
-        catch (IOException e)
-        {
+        } catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
 
-    public static class Marker
-    {
+    public static class Marker {
         public int forge_marker = -1;
     }
 
     //This is here specifically so that we do not have a hard reference to ForgeBlockStateV1.Variant in ForgeVariant
-    public static class SubModel
-    {
+    public static class SubModel {
         private final IModelState state;
         private final boolean uvLock;
         private final boolean smooth;
@@ -130,8 +117,7 @@
         private final ResourceLocation model;
         private final ImmutableMap<String, String> customData;
 
-        public SubModel(IModelState state, boolean uvLock, boolean smooth, boolean gui3d, ImmutableMap<String, String> textures, @Nullable ResourceLocation model, ImmutableMap<String, String> customData)
-        {
+        public SubModel(IModelState state, boolean uvLock, boolean smooth, boolean gui3d, ImmutableMap<String, String> textures, @Nullable ResourceLocation model, ImmutableMap<String, String> customData) {
             this.state = state;
             this.uvLock = uvLock;
             this.smooth = smooth;
@@ -141,16 +127,29 @@
             this.customData = customData;
         }
 
-        public IModelState getState() { return state; }
-        public boolean isUVLock() { return uvLock; }
-        public ImmutableMap<String, String> getTextures() { return textures; }
+        public IModelState getState() {
+            return state;
+        }
+
+        public boolean isUVLock() {
+            return uvLock;
+        }
+
+        public ImmutableMap<String, String> getTextures() {
+            return textures;
+        }
+
         @Nullable
-        public ResourceLocation getModelLocation() { return model; }
-        public ImmutableMap<String, String> getCustomData() { return customData; }
+        public ResourceLocation getModelLocation() {
+            return model;
+        }
+
+        public ImmutableMap<String, String> getCustomData() {
+            return customData;
+        }
     }
 
-    private static class ForgeVariant extends Variant implements ISmartVariant
-    {
+    private static class ForgeVariant extends Variant implements ISmartVariant {
         private final ResourceLocation blockstateLocation;
         private final ImmutableMap<String, String> textures;
         private final ImmutableMap<String, SubModel> parts;
@@ -159,9 +158,8 @@
         private final Optional<Boolean> gui3d;
         private final IModelState state;
 
-        ForgeVariant(ResourceLocation blockstateLocation, @Nullable ResourceLocation model, IModelState state, boolean uvLock, Optional<Boolean> smooth, Optional<Boolean> gui3d, int weight, ImmutableMap<String, String> textures, ImmutableMap<String, SubModel> parts, ImmutableMap<String, String> customData)
-        {
-            super(model == null ? new ResourceLocation("builtin/missing") : model, state instanceof ModelRotation ? (ModelRotation)state : ModelRotation.X0_Y0, uvLock, weight);
+        ForgeVariant(ResourceLocation blockstateLocation, @Nullable ResourceLocation model, IModelState state, boolean uvLock, Optional<Boolean> smooth, Optional<Boolean> gui3d, int weight, ImmutableMap<String, String> textures, ImmutableMap<String, SubModel> parts, ImmutableMap<String, String> customData) {
+            super(model == null ? new ResourceLocation("builtin/missing") : model, state instanceof ModelRotation ? (ModelRotation) state : ModelRotation.X0_Y0, uvLock, weight);
             this.blockstateLocation = blockstateLocation;
             this.textures = textures;
             this.parts = parts;
@@ -171,8 +169,7 @@
             this.gui3d = gui3d;
         }
 
-        private IModel runModelHooks(IModel base, Optional<Boolean> smooth, Optional<Boolean> gui3d, boolean uvlock, ImmutableMap<String, String> textureMap, ImmutableMap<String, String> customData)
-        {
+        private IModel runModelHooks(IModel base, Optional<Boolean> smooth, Optional<Boolean> gui3d, boolean uvlock, ImmutableMap<String, String> textureMap, ImmutableMap<String, String> customData) {
             base = base.process(customData);
             base = base.retexture(textureMap);
             base = smooth.map(base::smoothLighting).orElse(base);
@@ -185,14 +182,12 @@
          * Used to replace the base model with a re-textured model containing sub-models.
          */
         @Override
-        public IModel process(IModel base)
-        {
+        public IModel process(IModel base) {
             int size = parts.size();
             // FIXME: should missing base be handled this way?
             boolean hasBase = base != ModelLoaderRegistry.getMissingModel();
 
-            if (hasBase)
-            {
+            if (hasBase) {
                 base = runModelHooks(base, smooth, gui3d, this.isUvLock(), textures, customData);
 
                 if (size <= 0)
@@ -200,19 +195,15 @@
             }
 
             ImmutableMap.Builder<String, Pair<IModel, IModelState>> models = ImmutableMap.builder();
-            for (Entry<String, SubModel> entry : parts.entrySet())
-            {
+            for (Entry<String, SubModel> entry : parts.entrySet()) {
                 SubModel part = entry.getValue();
 
                 final ResourceLocation modelLocation = part.getModelLocation();
                 final IModel model;
-                if (modelLocation == null)
-                {
+                if (modelLocation == null) {
                     FMLLog.log.error("model not found for variant {} for blockstate {}", entry.getKey(), blockstateLocation);
                     model = ModelLoaderRegistry.getMissingModel(blockstateLocation, new Throwable());
-                }
-                else
-                {
+                } else {
                     model = ModelLoaderRegistry.getModelOrLogError(modelLocation, "Unable to load block sub-model: \'" + modelLocation);
                 }
 
@@ -223,17 +214,15 @@
         }
 
         @Override
-        public IModelState getState()
-        {
+        public IModelState getState() {
             return state;
         }
 
         @Override
-        public String toString()
-        {
+        public String toString() {
             StringBuilder buf = new StringBuilder();
             buf.append("TexturedVariant:");
-            for (Entry<String, String> e: this.textures.entrySet())
+            for (Entry<String, String> e : this.textures.entrySet())
                 buf.append(" ").append(e.getKey()).append(" = ").append(e.getValue());
             return buf.toString();
         }
