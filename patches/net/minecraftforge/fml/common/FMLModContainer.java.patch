--- ../src-base/minecraft/net/minecraftforge/fml/common/FMLModContainer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/FMLModContainer.java
@@ -19,66 +19,46 @@
 
 package net.minecraftforge.fml.common;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.security.cert.Certificate;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-
+import com.google.common.base.Strings;
+import com.google.common.collect.*;
+import com.google.common.eventbus.EventBus;
+import com.google.common.eventbus.Subscribe;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.config.Config;
 import net.minecraftforge.common.config.ConfigManager;
 import net.minecraftforge.fml.common.Mod.Instance;
 import net.minecraftforge.fml.common.Mod.Metadata;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
-import net.minecraftforge.fml.common.discovery.ModCandidate;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
+import net.minecraftforge.fml.common.discovery.ModCandidate;
 import net.minecraftforge.fml.common.event.FMLConstructionEvent;
 import net.minecraftforge.fml.common.event.FMLEvent;
 import net.minecraftforge.fml.common.event.FMLFingerprintViolationEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
-import net.minecraftforge.fml.common.versioning.ArtifactVersion;
-import net.minecraftforge.fml.common.versioning.DefaultArtifactVersion;
-import net.minecraftforge.fml.common.versioning.DependencyParser;
-import net.minecraftforge.fml.common.versioning.VersionParser;
-import net.minecraftforge.fml.common.versioning.VersionRange;
+import net.minecraftforge.fml.common.versioning.*;
 import net.minecraftforge.fml.relauncher.Side;
-
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.message.FormattedMessage;
 
+import javax.annotation.Nullable;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.security.cert.Certificate;
+import java.util.*;
+import java.util.function.Function;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
-import java.util.function.Function;
-import com.google.common.base.Strings;
-import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.ListMultimap;
-import com.google.common.collect.Maps;
-import com.google.common.collect.SetMultimap;
-import com.google.common.eventbus.EventBus;
-import com.google.common.eventbus.Subscribe;
-import org.apache.logging.log4j.message.FormattedMessage;
-
-import javax.annotation.Nullable;
-
-public class FMLModContainer implements ModContainer
-{
+public class FMLModContainer implements ModContainer {
     private Object modInstance;
     private File source;
     private ModMetadata modMetadata;
@@ -105,22 +85,18 @@
     private URL updateJSONUrl;
     private int classVersion;
 
-    public FMLModContainer(String className, ModCandidate container, Map<String, Object> modDescriptor)
-    {
+    public FMLModContainer(String className, ModCandidate container, Map<String, Object> modDescriptor) {
         this.className = className;
         this.source = container.getModContainer();
         this.candidate = container;
         this.descriptor = modDescriptor;
         this.eventMethods = ArrayListMultimap.create();
 
-        this.modLanguage = (String)modDescriptor.get("modLanguage");
-        String languageAdapterType = (String)modDescriptor.get("modLanguageAdapter");
-        if (Strings.isNullOrEmpty(languageAdapterType))
-        {
+        this.modLanguage = (String) modDescriptor.get("modLanguage");
+        String languageAdapterType = (String) modDescriptor.get("modLanguageAdapter");
+        if (Strings.isNullOrEmpty(languageAdapterType)) {
             this.languageAdapter = "scala".equals(modLanguage) ? new ILanguageAdapter.ScalaAdapter() : new ILanguageAdapter.JavaAdapter();
-        }
-        else
-        {
+        } else {
             // Delay loading of the adapter until the mod is on the classpath, in case the mod itself contains it.
             this.languageAdapter = null;
             FMLLog.log.trace("Using custom language adapter {} for {} (modid: {})", languageAdapterType, this.className, getModId());
@@ -128,11 +104,9 @@
         sanityCheckModId();
     }
 
-    private void sanityCheckModId()
-    {
-        String modid = (String)this.descriptor.get("modid");
-        if (Strings.isNullOrEmpty(modid))
-        {
+    private void sanityCheckModId() {
+        String modid = (String) this.descriptor.get("modid");
+        if (Strings.isNullOrEmpty(modid)) {
             // In FML 1.13, the "value" field is used for modid, not the "modid" field.
             // This is a VERY strong indicator that this is a 1.13 mod. Strong enough that we will assume it is, and
             // treat it accordingly
@@ -148,26 +122,19 @@
                 this.descriptor.put("modid", modid);
             }
         }
-        if (modid.length() > 64)
-        {
+        if (modid.length() > 64) {
             throw new IllegalArgumentException(String.format("The modId %s is longer than the maximum of 64 characters.", modid));
         }
-        if (!modid.equals(modid.toLowerCase(Locale.ENGLISH)))
-        {
+        if (!modid.equals(modid.toLowerCase(Locale.ENGLISH))) {
             throw new IllegalArgumentException(String.format("The modId %s must be all lowercase.", modid));
         }
     }
 
-    private ILanguageAdapter getLanguageAdapter()
-    {
-        if (languageAdapter == null)
-        {
-            try
-            {
-                languageAdapter = (ILanguageAdapter)Class.forName((String)descriptor.get("modLanguageAdapter"), true, Loader.instance().getModClassLoader()).newInstance();
-            }
-            catch (Exception ex)
-            {
+    private ILanguageAdapter getLanguageAdapter() {
+        if (languageAdapter == null) {
+            try {
+                languageAdapter = (ILanguageAdapter) Class.forName((String) descriptor.get("modLanguageAdapter"), true, Loader.instance().getModClassLoader()).newInstance();
+            } catch (Exception ex) {
                 FMLLog.log.error("Error constructing custom mod language adapter referenced by {} (modid: {})", this.className, getModId(), ex);
                 throw new RuntimeException(ex);
             }
@@ -176,48 +143,40 @@
     }
 
     @Override
-    public String getModId()
-    {
-        return (String)descriptor.get("modid");
+    public String getModId() {
+        return (String) descriptor.get("modid");
     }
 
     @Override
-    public String getName()
-    {
+    public String getName() {
         return modMetadata.name;
     }
 
     @Override
-    public String getVersion()
-    {
+    public String getVersion() {
         return internalVersion;
     }
 
     @Override
-    public File getSource()
-    {
+    public File getSource() {
         return source;
     }
 
     @Override
-    public ModMetadata getMetadata()
-    {
+    public ModMetadata getMetadata() {
         return modMetadata;
     }
 
     @Override
-    public void bindMetadata(MetadataCollection mc)
-    {
+    public void bindMetadata(MetadataCollection mc) {
         modMetadata = mc.getMetadataForId(getModId(), descriptor);
 
-        if (descriptor.containsKey("useMetadata"))
-        {
-            overridesMetadata = !((Boolean)descriptor.get("useMetadata"));
+        if (descriptor.containsKey("useMetadata")) {
+            overridesMetadata = !((Boolean) descriptor.get("useMetadata"));
         }
 
-        if (overridesMetadata || !modMetadata.useDependencyInformation)
-        {
-            annotationDependencies = (String)descriptor.get("dependencies");
+        if (overridesMetadata || !modMetadata.useDependencyInformation) {
+            annotationDependencies = (String) descriptor.get("dependencies");
             DependencyParser dependencyParser = new DependencyParser(getModId(), FMLCommonHandler.instance().getSide());
             DependencyParser.DependencyInfo info = dependencyParser.parseDependencies(annotationDependencies);
             info.dependants.addAll(Loader.instance().getInjectedBefore(getModId()));
@@ -226,208 +185,156 @@
             modMetadata.dependencies = info.dependencies;
             modMetadata.dependants = info.dependants;
             FMLLog.log.trace("Parsed dependency info for {}: Requirements: {} After:{} Before:{}", getModId(), info.requirements, info.dependencies, info.dependants);
-        }
-        else
-        {
+        } else {
             FMLLog.log.trace("Using mcmod dependency info for {}: {} {} {}", getModId(), modMetadata.requiredMods, modMetadata.dependencies, modMetadata.dependants);
         }
-        if (Strings.isNullOrEmpty(modMetadata.name))
-        {
+        if (Strings.isNullOrEmpty(modMetadata.name)) {
             FMLLog.log.info("Mod {} is missing the required element 'name'. Substituting {}", getModId(), getModId());
             modMetadata.name = getModId();
         }
-        internalVersion = (String)descriptor.get("version");
-        if (Strings.isNullOrEmpty(internalVersion))
-        {
+        internalVersion = (String) descriptor.get("version");
+        if (Strings.isNullOrEmpty(internalVersion)) {
             Properties versionProps = searchForVersionProperties();
-            if (versionProps != null)
-            {
+            if (versionProps != null) {
                 internalVersion = versionProps.getProperty(getModId() + ".version");
                 FMLLog.log.debug("Found version {} for mod {} in version.properties, using", internalVersion, getModId());
             }
 
         }
-        if (Strings.isNullOrEmpty(internalVersion) && !Strings.isNullOrEmpty(modMetadata.version))
-        {
+        if (Strings.isNullOrEmpty(internalVersion) && !Strings.isNullOrEmpty(modMetadata.version)) {
             FMLLog.log.warn("Mod {} is missing the required element 'version' and a version.properties file could not be found. Falling back to metadata version {}", getModId(), modMetadata.version);
             internalVersion = modMetadata.version;
         }
-        if (Strings.isNullOrEmpty(internalVersion))
-        {
+        if (Strings.isNullOrEmpty(internalVersion)) {
             FMLLog.log.warn("Mod {} is missing the required element 'version' and no fallback can be found. Substituting '1.0'.", getModId());
             modMetadata.version = internalVersion = "1.0";
         }
 
-        String mcVersionString = (String)descriptor.get("acceptedMinecraftVersions");
+        String mcVersionString = (String) descriptor.get("acceptedMinecraftVersions");
         if ("[1.12]".equals(mcVersionString))
             mcVersionString = "[1.12,1.12.2]";
         if ("[1.12.1]".equals(mcVersionString) || "[1.12,1.12.1]".equals(mcVersionString))
             mcVersionString = "[1.12,1.12.2]";
 
-        if (!Strings.isNullOrEmpty(mcVersionString))
-        {
+        if (!Strings.isNullOrEmpty(mcVersionString)) {
             minecraftAccepted = VersionParser.parseRange(mcVersionString);
-        }
-        else
-        {
+        } else {
             minecraftAccepted = Loader.instance().getMinecraftModContainer().getStaticVersionRange();
         }
 
-        String jsonURL = (String)descriptor.get("updateJSON");
-        if (!Strings.isNullOrEmpty(jsonURL))
-        {
-            try
-            {
+        String jsonURL = (String) descriptor.get("updateJSON");
+        if (!Strings.isNullOrEmpty(jsonURL)) {
+            try {
                 this.updateJSONUrl = new URL(jsonURL);
-            }
-            catch (MalformedURLException e)
-            {
+            } catch (MalformedURLException e) {
                 FMLLog.log.debug("Specified json URL for mod '{}' is invalid: {}", getModId(), jsonURL);
             }
         }
     }
 
     @Nullable
-    public Properties searchForVersionProperties()
-    {
-        try
-        {
+    public Properties searchForVersionProperties() {
+        try {
             FMLLog.log.debug("Attempting to load the file version.properties from {} to locate a version number for mod {}", getSource().getName(), getModId());
             Properties version = null;
-            if (getSource().isFile())
-            {
+            if (getSource().isFile()) {
                 ZipFile source = new ZipFile(getSource());
                 ZipEntry versionFile = source.getEntry("version.properties");
-                if (versionFile != null)
-                {
+                if (versionFile != null) {
                     version = new Properties();
                     InputStream sourceInputStream = source.getInputStream(versionFile);
-                    try
-                    {
+                    try {
                         version.load(sourceInputStream);
-                    }
-                    finally
-                    {
+                    } finally {
                         IOUtils.closeQuietly(sourceInputStream);
                     }
                 }
                 source.close();
-            }
-            else if (getSource().isDirectory())
-            {
+            } else if (getSource().isDirectory()) {
                 File propsFile = new File(getSource(), "version.properties");
-                if (propsFile.exists() && propsFile.isFile())
-                {
+                if (propsFile.exists() && propsFile.isFile()) {
                     version = new Properties();
-                    try (FileInputStream fis = new FileInputStream(propsFile))
-                    {
+                    try (FileInputStream fis = new FileInputStream(propsFile)) {
                         version.load(fis);
                     }
                 }
             }
             return version;
-        }
-        catch (IOException e)
-        {
+        } catch (IOException e) {
             FMLLog.log.trace("Failed to find a usable version.properties file for mod {}", getModId());
             return null;
         }
     }
 
     @Override
-    public void setEnabledState(boolean enabled)
-    {
+    public void setEnabledState(boolean enabled) {
         this.enabled = enabled;
     }
 
     @Override
-    public Set<ArtifactVersion> getRequirements()
-    {
+    public Set<ArtifactVersion> getRequirements() {
         return modMetadata.requiredMods;
     }
 
     @Override
-    public List<ArtifactVersion> getDependencies()
-    {
+    public List<ArtifactVersion> getDependencies() {
         return modMetadata.dependencies;
     }
 
     @Override
-    public List<ArtifactVersion> getDependants()
-    {
+    public List<ArtifactVersion> getDependants() {
         return modMetadata.dependants;
     }
 
     @Override
-    public String getSortingRules()
-    {
+    public String getSortingRules() {
         return ((overridesMetadata || !modMetadata.useDependencyInformation) ? Strings.nullToEmpty(annotationDependencies) : modMetadata.printableSortingRules());
     }
 
     @Override
-    public boolean matches(Object mod)
-    {
+    public boolean matches(Object mod) {
         return mod == modInstance;
     }
 
     @Override
-    public Object getMod()
-    {
+    public Object getMod() {
         return modInstance;
     }
 
     @Override
-    public boolean registerBus(EventBus bus, LoadController controller)
-    {
-        if (this.enabled)
-        {
+    public boolean registerBus(EventBus bus, LoadController controller) {
+        if (this.enabled) {
             FMLLog.log.debug("Enabling mod {}", getModId());
             this.eventBus = bus;
             this.controller = controller;
             eventBus.register(this);
             return true;
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
 
     @Nullable
-    private Method gatherAnnotations(Class<?> clazz)
-    {
+    private Method gatherAnnotations(Class<?> clazz) {
         Method factoryMethod = null;
-        for (Method m : clazz.getDeclaredMethods())
-        {
-            for (Annotation a : m.getAnnotations())
-            {
-                if (a.annotationType().equals(Mod.EventHandler.class))
-                {
-                    if (m.getParameterTypes().length == 1 && FMLEvent.class.isAssignableFrom(m.getParameterTypes()[0]))
-                    {
+        for (Method m : clazz.getDeclaredMethods()) {
+            for (Annotation a : m.getAnnotations()) {
+                if (a.annotationType().equals(Mod.EventHandler.class)) {
+                    if (m.getParameterTypes().length == 1 && FMLEvent.class.isAssignableFrom(m.getParameterTypes()[0])) {
                         m.setAccessible(true);
                         @SuppressWarnings("unchecked")
                         Class<? extends FMLEvent> parameterType = (Class<? extends FMLEvent>) m.getParameterTypes()[0];
                         eventMethods.put(parameterType, m);
-                    }
-                    else
-                    {
+                    } else {
                         FMLLog.log.error("The mod {} appears to have an invalid event annotation {}. This annotation can only apply to methods with recognized event arguments - it will not be called", getModId(), a.annotationType().getSimpleName());
                     }
-                }
-                else if (a.annotationType().equals(Mod.InstanceFactory.class))
-                {
-                    if (Modifier.isStatic(m.getModifiers()) && m.getParameterTypes().length == 0 && factoryMethod == null)
-                    {
+                } else if (a.annotationType().equals(Mod.InstanceFactory.class)) {
+                    if (Modifier.isStatic(m.getModifiers()) && m.getParameterTypes().length == 0 && factoryMethod == null) {
                         m.setAccessible(true);
                         factoryMethod = m;
-                    }
-                    else if (!(Modifier.isStatic(m.getModifiers()) && m.getParameterTypes().length == 0))
-                    {
+                    } else if (!(Modifier.isStatic(m.getModifiers()) && m.getParameterTypes().length == 0)) {
                         FMLLog.log.error("The InstanceFactory annotation can only apply to a static method, taking zero arguments - it will be ignored on {}({}) for mod {}", m.getName(), Arrays.asList(m.getParameterTypes()), getModId());
-                    }
-                    else if (factoryMethod != null)
-                    {
+                    } else if (factoryMethod != null) {
                         FMLLog.log.error("The InstanceFactory annotation can only be used once, the application to {}({}) will be ignored for mod {}", m.getName(), Arrays.asList(m.getParameterTypes()), getModId());
                     }
                 }
@@ -436,34 +343,28 @@
         return factoryMethod;
     }
 
-    private void processFieldAnnotations(ASMDataTable asmDataTable) throws IllegalAccessException
-    {
+    private void processFieldAnnotations(ASMDataTable asmDataTable) throws IllegalAccessException {
         SetMultimap<String, ASMData> annotations = asmDataTable.getAnnotationsFor(this);
 
         parseSimpleFieldAnnotation(annotations, Instance.class.getName(), ModContainer::getMod);
         parseSimpleFieldAnnotation(annotations, Metadata.class.getName(), ModContainer::getMetadata);
     }
 
-    private void parseSimpleFieldAnnotation(SetMultimap<String, ASMData> annotations, String annotationClassName, Function<ModContainer, Object> retriever) throws IllegalAccessException
-    {
+    private void parseSimpleFieldAnnotation(SetMultimap<String, ASMData> annotations, String annotationClassName, Function<ModContainer, Object> retriever) throws IllegalAccessException {
         Set<ASMDataTable.ASMData> mods = annotations.get(Mod.class.getName());
         String[] annName = annotationClassName.split("\\.");
         String annotationName = annName[annName.length - 1];
-        for (ASMData targets : annotations.get(annotationClassName))
-        {
-            String targetMod = (String)targets.getAnnotationInfo().get("value");
-            String owner = (String)targets.getAnnotationInfo().get("owner");
-            if (Strings.isNullOrEmpty(owner))
-            {
+        for (ASMData targets : annotations.get(annotationClassName)) {
+            String targetMod = (String) targets.getAnnotationInfo().get("value");
+            String owner = (String) targets.getAnnotationInfo().get("owner");
+            if (Strings.isNullOrEmpty(owner)) {
                 owner = ASMDataTable.getOwnerModID(mods, targets);
-                if (Strings.isNullOrEmpty(owner))
-                {
+                if (Strings.isNullOrEmpty(owner)) {
                     FMLLog.bigWarning("Could not determine owning mod for @{} on {} for mod {}", annotationClassName, targets.getClassName(), this.getModId());
                     continue;
                 }
             }
-            if (!this.getModId().equals(owner))
-            {
+            if (!this.getModId().equals(owner)) {
                 FMLLog.log.debug("Skipping @{} injection for {}.{} since it is not for mod {}", annotationClassName, targets.getClassName(), targets.getObjectName(), this.getModId());
                 continue;
             }
@@ -472,40 +373,29 @@
             ModContainer mc = this;
             boolean isStatic = false;
             Class<?> clz = modInstance.getClass();
-            if (!Strings.isNullOrEmpty(targetMod))
-            {
-                if (Loader.isModLoaded(targetMod))
-                {
+            if (!Strings.isNullOrEmpty(targetMod)) {
+                if (Loader.isModLoaded(targetMod)) {
                     mc = Loader.instance().getIndexedModList().get(targetMod);
-                }
-                else
-                {
+                } else {
                     mc = null;
                 }
             }
-            if (mc != null)
-            {
-                try
-                {
+            if (mc != null) {
+                try {
                     clz = Class.forName(targets.getClassName(), true, Loader.instance().getModClassLoader());
                     f = clz.getDeclaredField(targets.getObjectName());
                     f.setAccessible(true);
                     isStatic = Modifier.isStatic(f.getModifiers());
                     injectedMod = retriever.apply(mc);
-                }
-                catch (ReflectiveOperationException e)
-                {
+                } catch (ReflectiveOperationException e) {
                     FMLLog.log.warn("Attempting to load @{} in class {} for {} and failing", annotationName, targets.getClassName(), mc.getModId(), e);
                 }
             }
-            if (f != null)
-            {
+            if (f != null) {
                 Object target = null;
-                if (!isStatic)
-                {
+                if (!isStatic) {
                     target = modInstance;
-                    if (!modInstance.getClass().equals(clz))
-                    {
+                    if (!modInstance.getClass().equals(clz)) {
                         FMLLog.log.warn("Unable to inject @{} in non-static field {}.{} for {} as it is NOT the primary mod instance", annotationName, targets.getClassName(), targets.getObjectName(), mc.getModId());
                         continue;
                     }
@@ -516,15 +406,11 @@
     }
 
     @Subscribe
-    public void constructMod(FMLConstructionEvent event)
-    {
+    public void constructMod(FMLConstructionEvent event) {
         ModClassLoader modClassLoader = event.getModClassLoader();
-        try
-        {
+        try {
             modClassLoader.addFile(source);
-        }
-        catch (MalformedURLException e)
-        {
+        } catch (MalformedURLException e) {
             FormattedMessage message = new FormattedMessage("{} Failed to add file to classloader: {}", getModId(), source);
             throw new LoaderException(message.getFormattedMessage(), e);
         }
@@ -534,12 +420,9 @@
         MinecraftForge.preloadCrashClasses(event.getASMHarvestedData(), getModId(), candidate.getClassList());
 
         Class<?> clazz;
-        try
-        {
+        try {
             clazz = Class.forName(className, true, modClassLoader);
-        }
-        catch (ClassNotFoundException e)
-        {
+        } catch (ClassNotFoundException e) {
             FormattedMessage message = new FormattedMessage("{} Failed load class: {}", getModId(), className);
             throw new LoaderException(message.getFormattedMessage(), e);
         }
@@ -548,163 +431,126 @@
         ImmutableList<String> certList = CertificateHelper.getFingerprints(certificates);
         sourceFingerprints = ImmutableSet.copyOf(certList);
 
-        String expectedFingerprint = (String)descriptor.get("certificateFingerprint");
+        String expectedFingerprint = (String) descriptor.get("certificateFingerprint");
 
         fingerprintNotPresent = true;
 
-        if (expectedFingerprint != null && !expectedFingerprint.isEmpty())
-        {
-            if (!sourceFingerprints.contains(expectedFingerprint))
-            {
+        if (expectedFingerprint != null && !expectedFingerprint.isEmpty()) {
+            if (!sourceFingerprints.contains(expectedFingerprint)) {
                 Level warnLevel = source.isDirectory() ? Level.TRACE : Level.ERROR;
                 FMLLog.log.log(warnLevel, "The mod {} is expecting signature {} for source {}, however there is no signature matching that description", getModId(), expectedFingerprint, source.getName());
-            }
-            else
-            {
+            } else {
                 certificate = certificates[certList.indexOf(expectedFingerprint)];
                 fingerprintNotPresent = false;
             }
         }
 
         @SuppressWarnings("unchecked")
-        List<Map<String, String>> props = (List<Map<String, String>>)descriptor.get("customProperties");
-        if (props != null)
-        {
+        List<Map<String, String>> props = (List<Map<String, String>>) descriptor.get("customProperties");
+        if (props != null) {
             ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
-            for (Map<String, String> p : props)
-            {
+            for (Map<String, String> p : props) {
                 builder.put(p.get("k"), p.get("v"));
             }
             customModProperties = builder.build();
-        }
-        else
-        {
+        } else {
             customModProperties = EMPTY_PROPERTIES;
         }
 
-        Boolean hasDisableableFlag = (Boolean)descriptor.get("canBeDeactivated");
+        Boolean hasDisableableFlag = (Boolean) descriptor.get("canBeDeactivated");
         boolean hasReverseDepends = !event.getReverseDependencies().get(getModId()).isEmpty();
-        if (hasDisableableFlag != null && hasDisableableFlag)
-        {
+        if (hasDisableableFlag != null && hasDisableableFlag) {
             disableability = hasReverseDepends ? Disableable.DEPENDENCIES : Disableable.YES;
-        }
-        else
-        {
+        } else {
             disableability = hasReverseDepends ? Disableable.DEPENDENCIES : Disableable.RESTART;
         }
         Method factoryMethod = gatherAnnotations(clazz);
         ILanguageAdapter languageAdapter = getLanguageAdapter();
-        try
-        {
+        try {
             modInstance = languageAdapter.getNewInstance(this, clazz, modClassLoader, factoryMethod);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             FormattedMessage message = new FormattedMessage("{} Failed to load new mod instance.", getModId());
             throw new LoaderException(message.getFormattedMessage(), e);
         }
-        NetworkRegistry.INSTANCE.register(this, clazz, (String)(descriptor.getOrDefault("acceptableRemoteVersions", null)), event.getASMHarvestedData());
-        if (fingerprintNotPresent)
-        {
+        NetworkRegistry.INSTANCE.register(this, clazz, (String) (descriptor.getOrDefault("acceptableRemoteVersions", null)), event.getASMHarvestedData());
+        if (fingerprintNotPresent) {
             eventBus.post(new FMLFingerprintViolationEvent(source.isDirectory(), source, ImmutableSet.copyOf(this.sourceFingerprints), expectedFingerprint));
         }
         ProxyInjector.inject(this, event.getASMHarvestedData(), FMLCommonHandler.instance().getSide(), languageAdapter);
         AutomaticEventSubscriber.inject(this, event.getASMHarvestedData(), FMLCommonHandler.instance().getSide());
         ConfigManager.sync(this.getModId(), Config.Type.INSTANCE);
 
-        try
-        {
+        try {
             processFieldAnnotations(event.getASMHarvestedData());
-        }
-        catch (IllegalAccessException e)
-        {
+        } catch (IllegalAccessException e) {
             FormattedMessage message = new FormattedMessage("{} Failed to process field annotations.", getModId());
             throw new LoaderException(message.getFormattedMessage(), e);
         }
     }
 
     @Subscribe
-    public void handleModStateEvent(FMLEvent event)
-    {
-        if (!eventMethods.containsKey(event.getClass()))
-        {
+    public void handleModStateEvent(FMLEvent event) {
+        if (!eventMethods.containsKey(event.getClass())) {
             return;
         }
-        try
-        {
-            for (Method m : eventMethods.get(event.getClass()))
-            {
+        try {
+            for (Method m : eventMethods.get(event.getClass())) {
                 m.invoke(modInstance, event);
             }
-        }
-        catch (Throwable t)
-        {
+        } catch (Throwable t) {
             controller.errorOccurred(this, t);
         }
     }
 
     @Override
-    public ArtifactVersion getProcessedVersion()
-    {
-        if (processedVersion == null)
-        {
+    public ArtifactVersion getProcessedVersion() {
+        if (processedVersion == null) {
             processedVersion = new DefaultArtifactVersion(getModId(), getVersion());
         }
         return processedVersion;
     }
 
     @Override
-    public boolean isImmutable()
-    {
+    public boolean isImmutable() {
         return false;
     }
 
     @Override
-    public String getDisplayVersion()
-    {
+    public String getDisplayVersion() {
         return modMetadata.version;
     }
 
     @Override
-    public VersionRange acceptableMinecraftVersionRange()
-    {
+    public VersionRange acceptableMinecraftVersionRange() {
         return minecraftAccepted;
     }
 
     @Override
-    public Certificate getSigningCertificate()
-    {
+    public Certificate getSigningCertificate() {
         return certificate;
     }
 
     @Override
-    public String toString()
-    {
+    public String toString() {
         return "FMLMod:" + getModId() + "{" + getVersion() + "}";
     }
 
     @Override
-    public Map<String, String> getCustomModProperties()
-    {
+    public Map<String, String> getCustomModProperties() {
         return customModProperties;
     }
 
     @Override
-    public Class<?> getCustomResourcePackClass()
-    {
-        try
-        {
+    public Class<?> getCustomResourcePackClass() {
+        try {
             return getSource().isDirectory() ? Class.forName("net.minecraftforge.fml.client.FMLFolderResourcePack", true, getClass().getClassLoader()) : Class.forName("net.minecraftforge.fml.client.FMLFileResourcePack", true, getClass().getClassLoader());
-        }
-        catch (ClassNotFoundException e)
-        {
+        } catch (ClassNotFoundException e) {
             return null;
         }
     }
 
     @Override
-    public Map<String, String> getSharedModDescriptor()
-    {
+    public Map<String, String> getSharedModDescriptor() {
         Map<String, String> descriptor = Maps.newHashMap();
         descriptor.put("modsystem", "FML");
         descriptor.put("id", getModId());
@@ -717,53 +563,44 @@
     }
 
     @Override
-    public Disableable canBeDisabled()
-    {
+    public Disableable canBeDisabled() {
         return disableability;
     }
 
     @Override
-    public String getGuiClassName()
-    {
-        return (String)descriptor.get("guiFactory");
+    public String getGuiClassName() {
+        return (String) descriptor.get("guiFactory");
     }
 
     @Override
-    public List<String> getOwnedPackages()
-    {
+    public List<String> getOwnedPackages() {
         return candidate.getContainedPackages();
     }
 
-    private boolean isTrue(Boolean value)
-    {
-        if (value == null)
-        {
+    private boolean isTrue(Boolean value) {
+        if (value == null) {
             return false;
         }
         return value;
     }
 
     @Override
-    public boolean shouldLoadInEnvironment()
-    {
-        boolean clientSideOnly = isTrue((Boolean)descriptor.get("clientSideOnly"));
-        boolean serverSideOnly = isTrue((Boolean)descriptor.get("serverSideOnly"));
+    public boolean shouldLoadInEnvironment() {
+        boolean clientSideOnly = isTrue((Boolean) descriptor.get("clientSideOnly"));
+        boolean serverSideOnly = isTrue((Boolean) descriptor.get("serverSideOnly"));
 
-        if (clientSideOnly && serverSideOnly)
-        {
+        if (clientSideOnly && serverSideOnly) {
             throw new RuntimeException("Mod annotation claims to be both client and server side only!");
         }
 
         Side side = FMLCommonHandler.instance().getSide();
 
-        if (clientSideOnly && side != Side.CLIENT)
-        {
+        if (clientSideOnly && side != Side.CLIENT) {
             FMLLog.log.info("Disabling mod {} it is client side only.", getModId());
             return false;
         }
 
-        if (serverSideOnly && side != Side.SERVER)
-        {
+        if (serverSideOnly && side != Side.SERVER) {
             FMLLog.log.info("Disabling mod {} it is server side only.", getModId());
             return false;
         }
@@ -772,20 +609,17 @@
     }
 
     @Override
-    public URL getUpdateUrl()
-    {
+    public URL getUpdateUrl() {
         return updateJSONUrl;
     }
 
     @Override
-    public void setClassVersion(int classVersion)
-    {
+    public void setClassVersion(int classVersion) {
         this.classVersion = classVersion;
     }
 
     @Override
-    public int getClassVersion()
-    {
+    public int getClassVersion() {
         return this.classVersion;
     }
 }
