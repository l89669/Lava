--- ../src-base/minecraft/net/minecraftforge/fml/common/ModContainerFactory.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/ModContainerFactory.java
@@ -19,23 +19,18 @@
 
 package net.minecraftforge.fml.common;
 
-import java.io.File;
-import java.lang.reflect.Constructor;
-import java.util.Map;
-import java.util.regex.Pattern;
-
+import com.google.common.collect.Maps;
 import net.minecraftforge.fml.common.discovery.ModCandidate;
 import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
 import net.minecraftforge.fml.common.discovery.asm.ModAnnotation;
-
 import org.objectweb.asm.Type;
 
-import com.google.common.collect.Maps;
-
 import javax.annotation.Nullable;
+import java.io.File;
+import java.lang.reflect.Constructor;
+import java.util.Map;
 
-public class ModContainerFactory
-{
+public class ModContainerFactory {
     public static Map<Type, Constructor<? extends ModContainer>> modTypes = Maps.newHashMap();
     private static ModContainerFactory INSTANCE = new ModContainerFactory();
 
@@ -43,36 +38,29 @@
         // We always know about Mod type
         registerContainerType(Type.getType(Mod.class), FMLModContainer.class);
     }
+
     public static ModContainerFactory instance() {
         return INSTANCE;
     }
 
-    public void registerContainerType(Type type, Class<? extends ModContainer> container)
-    {
-        try
-        {
-            Constructor<? extends ModContainer> constructor = container.getConstructor(new Class<?>[] { String.class, ModCandidate.class, Map.class });
+    public void registerContainerType(Type type, Class<? extends ModContainer> container) {
+        try {
+            Constructor<? extends ModContainer> constructor = container.getConstructor(new Class<?>[]{String.class, ModCandidate.class, Map.class});
             modTypes.put(type, constructor);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new RuntimeException("Critical error : cannot register mod container type " + container.getName() + ", it has an invalid constructor", e);
         }
     }
 
     @Nullable
-    public ModContainer build(ASMModParser modParser, File modSource, ModCandidate container)
-    {
+    public ModContainer build(ASMModParser modParser, File modSource, ModCandidate container) {
         String className = modParser.getASMType().getClassName();
-        for (ModAnnotation ann : modParser.getAnnotations())
-        {
-            if (modTypes.containsKey(ann.getASMType()))
-            {
+        for (ModAnnotation ann : modParser.getAnnotations()) {
+            if (modTypes.containsKey(ann.getASMType())) {
                 FMLLog.log.debug("Identified a mod of type {} ({}) - loading", ann.getASMType(), className);
                 try {
                     ModContainer ret = modTypes.get(ann.getASMType()).newInstance(className, container, ann.getValues());
-                    if (!ret.shouldLoadInEnvironment())
-                    {
+                    if (!ret.shouldLoadInEnvironment()) {
                         FMLLog.log.debug("Skipping mod {}, container opted to not load.", className);
                         return null;
                     }
