--- ../src-base/minecraft/net/minecraftforge/fml/common/registry/EntityRegistry.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/registry/EntityRegistry.java
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.fml.common.registry;
 
+import com.google.common.collect.*;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList.EntityEggInfo;
 import net.minecraft.entity.EntityLiving;
@@ -30,24 +31,18 @@
 import net.minecraft.world.biome.Biome.SpawnListEntry;
 import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.common.network.internal.FMLMessage.EntitySpawnMessage;
 import net.minecraftforge.registries.GameData;
 
+import javax.annotation.Nullable;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
-import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.BiMap;
-import com.google.common.collect.HashBiMap;
-import com.google.common.collect.ListMultimap;
 
-import javax.annotation.Nullable;
-
-public class EntityRegistry
-{
-    public class EntityRegistration
-    {
+public class EntityRegistry {
+    public class EntityRegistration {
         @Deprecated
         private Class<? extends Entity> entityClass;
         private Function<World, ? extends Entity> factory;
@@ -62,13 +57,11 @@
         private boolean usesVanillaSpawning;
 
         @Deprecated //1.13
-        public EntityRegistration(ModContainer mc, ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates)
-        {
+        public EntityRegistration(ModContainer mc, ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates) {
             this(mc, registryName, entityClass, entityName, id, trackingRange, updateFrequency, sendsVelocityUpdates, null);
         }
 
-        public EntityRegistration(ModContainer mc, ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates, Function<World, ? extends Entity> factory)
-        {
+        public EntityRegistration(ModContainer mc, ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates, Function<World, ? extends Entity> factory) {
             this.container = mc;
             this.regName = registryName;
             this.entityClass = entityClass;
@@ -78,65 +71,64 @@
             this.updateFrequency = updateFrequency;
             this.sendsVelocityUpdates = sendsVelocityUpdates;
             this.factory = factory != null ? factory :
-                new EntityEntryBuilder.ConstructorFactory<Entity>(entityClass) {
-                    @Override
-                    protected String describeEntity() {
-                        return String.valueOf(EntityRegistration.this.getRegistryName());
-                    }
-                };
+                    new EntityEntryBuilder.ConstructorFactory<Entity>(entityClass) {
+                        @Override
+                        protected String describeEntity() {
+                            return String.valueOf(EntityRegistration.this.getRegistryName());
+                        }
+                    };
         }
-        public ResourceLocation getRegistryName()
-        {
+
+        public ResourceLocation getRegistryName() {
             return regName;
         }
+
         @Deprecated //Used only for creating a new instance in EntitySpawnHandler, use newInstance(world) instead.
-        public Class<? extends Entity> getEntityClass()
-        {
+        public Class<? extends Entity> getEntityClass() {
             return entityClass;
         }
-        public Entity newInstance(World world)
-        {
+
+        public Entity newInstance(World world) {
             return this.factory.apply(world);
         }
-        public ModContainer getContainer()
-        {
+
+        public ModContainer getContainer() {
             return container;
         }
-        public String getEntityName()
-        {
+
+        public String getEntityName() {
             return entityName;
         }
-        public int getModEntityId()
-        {
+
+        public int getModEntityId() {
             return modId;
         }
-        public int getTrackingRange()
-        {
+
+        public int getTrackingRange() {
             return trackingRange;
         }
-        public int getUpdateFrequency()
-        {
+
+        public int getUpdateFrequency() {
             return updateFrequency;
         }
-        public boolean sendsVelocityUpdates()
-        {
+
+        public boolean sendsVelocityUpdates() {
             return sendsVelocityUpdates;
         }
 
-        public boolean usesVanillaSpawning()
-        {
+        public boolean usesVanillaSpawning() {
             return usesVanillaSpawning;
         }
-        public boolean hasCustomSpawning()
-        {
+
+        public boolean hasCustomSpawning() {
             return customSpawnCallback != null;
         }
-        public Entity doCustomSpawning(EntitySpawnMessage spawnMsg) throws Exception
-        {
+
+        public Entity doCustomSpawning(EntitySpawnMessage spawnMsg) throws Exception {
             return customSpawnCallback.apply(spawnMsg);
         }
-        public void setCustomSpawning(Function<EntitySpawnMessage, Entity> callable, boolean usesVanillaSpawning)
-        {
+
+        public void setCustomSpawning(Function<EntitySpawnMessage, Entity> callable, boolean usesVanillaSpawning) {
             this.customSpawnCallback = callable;
             this.usesVanillaSpawning = usesVanillaSpawning;
         }
@@ -148,71 +140,65 @@
     private final BiMap<Class<? extends Entity>, EntityRegistration> entityClassRegistrations = HashBiMap.create();
     private final Map<Class<? extends Entity>, EntityEntry> entityClassEntries = GameData.getEntityClassMap();
 
-    public static EntityRegistry instance()
-    {
+    public static Map<Class<? extends Entity>, String> entityTypeMap = Maps.newHashMap(); // used by CraftCustomEntity
+    public static Map<String, Class<? extends Entity>> entityClassMap = Maps.newHashMap(); // user by CraftWorld
+
+    public static EntityRegistry instance() {
         return INSTANCE;
     }
 
-    private EntityRegistry()
-    {
+    private EntityRegistry() {
     }
 
     /**
      * Register the mod entity type with FML
-
-     * @param entityClass The entity class
-     * @param entityName A unique name for the entity
-     * @param id A mod specific ID for the entity
-     * @param mod The mod
-     * @param trackingRange The range at which MC will send tracking updates
-     * @param updateFrequency The frequency of tracking updates
+     *
+     * @param entityClass          The entity class
+     * @param entityName           A unique name for the entity
+     * @param id                   A mod specific ID for the entity
+     * @param mod                  The mod
+     * @param trackingRange        The range at which MC will send tracking updates
+     * @param updateFrequency      The frequency of tracking updates
      * @param sendsVelocityUpdates Whether to send velocity information packets as well
      */
-    public static void registerModEntity(ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates)
-    {
+    public static void registerModEntity(ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates) {
         instance().doModEntityRegistration(registryName, entityClass, entityName, id, mod, trackingRange, updateFrequency, sendsVelocityUpdates);
+        registerBukkitType(entityClass, entityName);
     }
 
     /**
      * Register the mod entity type with FML
      * This will also register a spawn egg.
-
-     * @param entityClass The entity class
-     * @param entityName A unique name for the entity
-     * @param id A mod specific ID for the entity
-     * @param mod The mod
-     * @param trackingRange The range at which MC will send tracking updates
-     * @param updateFrequency The frequency of tracking updates
+     *
+     * @param entityClass          The entity class
+     * @param entityName           A unique name for the entity
+     * @param id                   A mod specific ID for the entity
+     * @param mod                  The mod
+     * @param trackingRange        The range at which MC will send tracking updates
+     * @param updateFrequency      The frequency of tracking updates
      * @param sendsVelocityUpdates Whether to send velocity information packets as well
-     * @param eggPrimary Primary egg color
-     * @param eggSecondary Secondary egg color
+     * @param eggPrimary           Primary egg color
+     * @param eggSecondary         Secondary egg color
      */
-    public static void registerModEntity(ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates, int eggPrimary, int eggSecondary)
-    {
+    public static void registerModEntity(ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates, int eggPrimary, int eggSecondary) {
         instance().doModEntityRegistration(registryName, entityClass, entityName, id, mod, trackingRange, updateFrequency, sendsVelocityUpdates);
         EntityRegistry.registerEgg(registryName, eggPrimary, eggSecondary);
+        registerBukkitType(entityClass, entityName);
     }
 
-    private void doModEntityRegistration(ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates)
-    {
+    private void doModEntityRegistration(ResourceLocation registryName, Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates) {
         ModContainer mc = FMLCommonHandler.instance().findContainerFor(mod);
         EntityRegistration er = new EntityRegistration(mc, registryName, entityClass, entityName, id, trackingRange, updateFrequency, sendsVelocityUpdates);
-        try
-        {
+        try {
             entityClassRegistrations.put(entityClass, er);
-            if (!ForgeRegistries.ENTITIES.containsKey(registryName))
-            {
+            if (!ForgeRegistries.ENTITIES.containsKey(registryName)) {
                 EntityEntry entry = new EntityEntry(entityClass, entityName).setRegistryName(registryName);
                 ForgeRegistries.ENTITIES.register(entry);
                 FMLLog.log.trace("Automatically registered mod {} entity {} as {}", mc.getModId(), entityName, entry.getRegistryName());
-            }
-            else
-            {
+            } else {
                 FMLLog.log.debug("Skipping automatic mod {} entity registration for already registered entry {} class {}", mc.getModId(), registryName, entityClass.getName());
             }
-        }
-        catch (IllegalArgumentException e)
-        {
+        } catch (IllegalArgumentException e) {
             FMLLog.log.warn("The mod {} tried to register the entity (registry,name,class) ({},{},{}) one or both of which are already registered", mc.getModId(), registryName, entityName, entityClass.getName(), e);
             return;
         }
@@ -226,16 +212,13 @@
      * Once registered mob eggs can be created by using minecraft:spawn_egg with NBT entry 'entity_name' with
      * value of the name this class is registered in the classToStringMapping with.
      *
-     * @param name The entity ResourceLocation
-     * @param primary Primary egg color
+     * @param name      The entity ResourceLocation
+     * @param primary   Primary egg color
      * @param secondary Secondary egg color
-     *
      */
-    public static void registerEgg(ResourceLocation name, int primary, int secondary)
-    {
+    public static void registerEgg(ResourceLocation name, int primary, int secondary) {
         EntityEntry entry = ForgeRegistries.ENTITIES.getValue(name);
-        if (entry == null)
-        {
+        if (entry == null) {
             FMLLog.bigWarning("Attempted to registry a entity egg for entity ({}) that is not in the Entity Registry", name);
             return;
         }
@@ -244,25 +227,22 @@
 
     /**
      * Add a spawn entry for the supplied entity in the supplied {@link Biome} list
-     * @param entityClass Entity class added
-     * @param weightedProb Probability
-     * @param min Min spawn count
-     * @param max Max spawn count
+     *
+     * @param entityClass    Entity class added
+     * @param weightedProb   Probability
+     * @param min            Min spawn count
+     * @param max            Max spawn count
      * @param typeOfCreature Type of spawn
-     * @param biomes List of biomes
+     * @param biomes         List of biomes
      */
-    public static void addSpawn(Class <? extends EntityLiving > entityClass, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, Biome... biomes)
-    {
-        for (Biome biome : biomes)
-        {
+    public static void addSpawn(Class<? extends EntityLiving> entityClass, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, Biome... biomes) {
+        for (Biome biome : biomes) {
             List<SpawnListEntry> spawns = biome.getSpawnableList(typeOfCreature);
 
             boolean found = false;
-            for (SpawnListEntry entry : spawns)
-            {
+            for (SpawnListEntry entry : spawns) {
                 //Adjusting an existing spawn entry
-                if (entry.entityClass == entityClass)
-                {
+                if (entry.entityClass == entityClass) {
                     entry.itemWeight = weightedProb;
                     entry.minGroupCount = min;
                     entry.maxGroupCount = max;
@@ -278,65 +258,59 @@
 
     /**
      * Add a spawn entry for the supplied entity in the supplied {@link Biome} list
-     * @param entityName The entity name
-     * @param weightedProb Probability
-     * @param min Min spawn count
-     * @param max Max spawn count
+     *
+     * @param entityName     The entity name
+     * @param weightedProb   Probability
+     * @param min            Min spawn count
+     * @param max            Max spawn count
      * @param typeOfCreature type of spawn
-     * @param biomes List of biomes
+     * @param biomes         List of biomes
      */
     @SuppressWarnings("unchecked")
-    public static void addSpawn(String entityName, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, Biome... biomes)
-    {
-        Class <? extends Entity > entityClazz = null;
+    public static void addSpawn(String entityName, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, Biome... biomes) {
+        Class<? extends Entity> entityClazz = null;
 
-        if (EntityLiving.class.isAssignableFrom(entityClazz))
-        {
-            addSpawn((Class <? extends EntityLiving >) entityClazz, weightedProb, min, max, typeOfCreature, biomes);
+        if (EntityLiving.class.isAssignableFrom(entityClazz)) {
+            addSpawn((Class<? extends EntityLiving>) entityClazz, weightedProb, min, max, typeOfCreature, biomes);
         }
     }
 
     /**
      * Remove the spawn entry for the supplied entity
-     * @param entityClass The entity class
+     *
+     * @param entityClass    The entity class
      * @param typeOfCreature type of spawn
-     * @param biomes Biomes to remove from
+     * @param biomes         Biomes to remove from
      */
-    public static void removeSpawn(Class <? extends EntityLiving > entityClass, EnumCreatureType typeOfCreature, Biome... biomes)
-    {
-        for (Biome biome : biomes)
-        {
+    public static void removeSpawn(Class<? extends EntityLiving> entityClass, EnumCreatureType typeOfCreature, Biome... biomes) {
+        for (Biome biome : biomes) {
             biome.getSpawnableList(typeOfCreature).removeIf(entry -> entry.entityClass == entityClass);
         }
     }
 
     /**
      * Remove the spawn entry for the supplied entity
-     * @param entityName Name of entity being removed
+     *
+     * @param entityName     Name of entity being removed
      * @param typeOfCreature type of spawn
-     * @param biomes Biomes to remove from
+     * @param biomes         Biomes to remove from
      */
     @SuppressWarnings("unchecked")
-    public static void removeSpawn(String entityName, EnumCreatureType typeOfCreature, Biome... biomes)
-    {
-        Class <? extends Entity > entityClazz = null;
+    public static void removeSpawn(String entityName, EnumCreatureType typeOfCreature, Biome... biomes) {
+        Class<? extends Entity> entityClazz = null;
 
-        if (EntityLiving.class.isAssignableFrom(entityClazz))
-        {
-            removeSpawn((Class <? extends EntityLiving>) entityClazz, typeOfCreature, biomes);
+        if (EntityLiving.class.isAssignableFrom(entityClazz)) {
+            removeSpawn((Class<? extends EntityLiving>) entityClazz, typeOfCreature, biomes);
         }
     }
 
     @Nullable
-    public EntityRegistration lookupModSpawn(Class<? extends Entity> clazz, boolean keepLooking)
-    {
+    public EntityRegistration lookupModSpawn(Class<? extends Entity> clazz, boolean keepLooking) {
         Class<?> localClazz = clazz;
 
-        do
-        {
+        do {
             EntityRegistration er = entityClassRegistrations.get(localClazz);
-            if (er != null)
-            {
+            if (er != null) {
                 return er;
             }
             localClazz = localClazz.getSuperclass();
@@ -348,24 +322,19 @@
     }
 
     @Nullable
-    public EntityRegistration lookupModSpawn(ModContainer mc, int modEntityId)
-    {
-        for (EntityRegistration er : entityRegistrations.get(mc))
-        {
-            if (er.getModEntityId() == modEntityId)
-            {
+    public EntityRegistration lookupModSpawn(ModContainer mc, int modEntityId) {
+        for (EntityRegistration er : entityRegistrations.get(mc)) {
+            if (er.getModEntityId() == modEntityId) {
                 return er;
             }
         }
         return null;
     }
 
-    public boolean tryTrackingEntity(EntityTracker entityTracker, Entity entity)
-    {
+    public boolean tryTrackingEntity(EntityTracker entityTracker, Entity entity) {
 
         EntityRegistration er = lookupModSpawn(entity.getClass(), true);
-        if (er != null)
-        {
+        if (er != null) {
             entityTracker.track(entity, er.getTrackingRange(), er.getUpdateFrequency(), er.sendsVelocityUpdates());
             return true;
         }
@@ -374,15 +343,32 @@
 
     //Helper function
     @Nullable
-    public static EntityEntry getEntry(Class<? extends Entity> entityClass)
-    {
+    public static EntityEntry getEntry(Class<? extends Entity> entityClass) {
         return instance().entityClassEntries.get(entityClass);
     }
 
     // This is an internal method - do not touch.
-    final void insert(final Class<? extends Entity> entity, final EntityRegistration registration)
-    {
+    final void insert(final Class<? extends Entity> entity, final EntityRegistration registration) {
         this.entityClassRegistrations.put(entity, registration);
         this.entityRegistrations.put(registration.container, registration);
     }
+
+    private static void registerBukkitType(Class<? extends Entity> entityClass, String entityName) {
+        ModContainer activeModContainer = Loader.instance().activeModContainer();
+        String modId = "unknown";
+        // fixup bad entity names from mods
+        if (entityName.contains(".")) {
+            if ((entityName.indexOf(".") + 1) < entityName.length())
+                entityName = entityName.substring(entityName.indexOf(".") + 1, entityName.length());
+        }
+        entityName = entityName.replace("entity", "");
+        if (entityName.startsWith("ent"))
+            entityName = entityName.replace("ent", "");
+        entityName = entityName.replaceAll("[^A-Za-z0-9]", ""); // remove all non-digits/alphanumeric
+        if (activeModContainer != null)
+            modId = activeModContainer.getModId();
+        entityName = modId + "-" + entityName;
+        entityTypeMap.put(entityClass, entityName);
+        entityClassMap.put(entityName, entityClass);
+    }
 }
