--- ../src-base/minecraft/net/minecraftforge/fml/common/registry/ItemStackHolderInjector.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/registry/ItemStackHolderInjector.java
@@ -19,27 +19,25 @@
 
 package net.minecraftforge.fml.common.registry;
 
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.discovery.ASMDataTable;
+import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
+
 import java.lang.reflect.Field;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.discovery.ASMDataTable;
-import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
-
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-
-public enum ItemStackHolderInjector
-{
+public enum ItemStackHolderInjector {
     INSTANCE;
 
     private List<ItemStackHolderRef> itemStackHolders = Lists.newArrayList();
 
     public void inject() {
         FMLLog.log.info("Injecting itemstacks");
-        for (ItemStackHolderRef ishr: itemStackHolders) {
+        for (ItemStackHolderRef ishr : itemStackHolders) {
             ishr.apply();
         }
         FMLLog.log.info("Itemstack injection complete");
@@ -49,8 +47,7 @@
         FMLLog.log.info("Identifying ItemStackHolder annotations");
         Set<ASMData> allItemStackHolders = table.getAll(GameRegistry.ItemStackHolder.class.getName());
         Map<String, Class<?>> classCache = Maps.newHashMap();
-        for (ASMData data : allItemStackHolders)
-        {
+        for (ASMData data : allItemStackHolders) {
             String className = data.getClassName();
             String annotationTarget = data.getObjectName();
             String value = (String) data.getAnnotationInfo().get("value");
@@ -62,33 +59,23 @@
 
     }
 
-    private void addHolder(Map<String, Class<?>> classCache, String className, String annotationTarget, String value, Integer meta, String nbt)
-    {
+    private void addHolder(Map<String, Class<?>> classCache, String className, String annotationTarget, String value, Integer meta, String nbt) {
         Class<?> clazz;
-        if (classCache.containsKey(className))
-        {
+        if (classCache.containsKey(className)) {
             clazz = classCache.get(className);
-        }
-        else
-        {
-            try
-            {
+        } else {
+            try {
                 clazz = Class.forName(className, true, getClass().getClassLoader());
                 classCache.put(className, clazz);
-            }
-            catch (ClassNotFoundException ex)
-            {
+            } catch (ClassNotFoundException ex) {
                 // unpossible?
                 throw new RuntimeException(ex);
             }
         }
-        try
-        {
+        try {
             Field f = clazz.getField(annotationTarget);
             itemStackHolders.add(new ItemStackHolderRef(f, value, meta, nbt));
-        }
-        catch (NoSuchFieldException ex)
-        {
+        } catch (NoSuchFieldException ex) {
             // unpossible?
             throw new RuntimeException(ex);
         }
