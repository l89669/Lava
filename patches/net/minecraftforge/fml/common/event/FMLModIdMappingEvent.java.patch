--- ../src-base/minecraft/net/minecraftforge/fml/common/event/FMLModIdMappingEvent.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/event/FMLModIdMappingEvent.java
@@ -19,40 +19,37 @@
 
 package net.minecraftforge.fml.common.event;
 
-import java.util.Comparator;
-import java.util.List;
-import java.util.Map;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-
 import net.minecraft.util.ResourceLocation;
 
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+
 /**
  * Called whenever the ID mapping might have changed. If you register for this event, you
  * will be called back whenever the client or server loads an ID set. This includes both
  * when the ID maps are loaded from disk, as well as when the ID maps revert to the initial
  * state.
- *
+ * <p>
  * Note: you cannot change the IDs that have been allocated, but you might want to use
  * this event to update caches or other in-mod artifacts that might be impacted by an ID
  * change.
  *
- * @see net.minecraftforge.fml.common.Mod.EventHandler for how to subscribe to this event
  * @author cpw
+ * @see net.minecraftforge.fml.common.Mod.EventHandler for how to subscribe to this event
  */
-public class FMLModIdMappingEvent extends FMLEvent
-{
-    public class ModRemapping
-    {
+public class FMLModIdMappingEvent extends FMLEvent {
+    public class ModRemapping {
         public final ResourceLocation registry;
         public final ResourceLocation key;
         public final int oldId;
         public final int newId;
 
-        private ModRemapping(ResourceLocation registry, ResourceLocation key, int oldId, int newId)
-        {
+        private ModRemapping(ResourceLocation registry, ResourceLocation key, int oldId, int newId) {
             this.registry = registry;
             this.key = key;
             this.oldId = oldId;
@@ -64,8 +61,8 @@
     private final ImmutableSet<ResourceLocation> keys;
 
     public final boolean isFrozen;
-    public FMLModIdMappingEvent(Map<ResourceLocation, Map<ResourceLocation, Integer[]>> remaps, boolean isFrozen)
-    {
+
+    public FMLModIdMappingEvent(Map<ResourceLocation, Map<ResourceLocation, Integer[]>> remaps, boolean isFrozen) {
         this.isFrozen = isFrozen;
         this.remaps = Maps.newHashMap();
         remaps.forEach((name, rm) ->
@@ -78,13 +75,11 @@
         this.keys = ImmutableSet.copyOf(this.remaps.keySet());
     }
 
-    public ImmutableSet<ResourceLocation> getRegistries()
-    {
+    public ImmutableSet<ResourceLocation> getRegistries() {
         return this.keys;
     }
 
-    public ImmutableList<ModRemapping> getRemaps(ResourceLocation registry)
-    {
+    public ImmutableList<ModRemapping> getRemaps(ResourceLocation registry) {
         return this.remaps.get(registry);
     }
 }
