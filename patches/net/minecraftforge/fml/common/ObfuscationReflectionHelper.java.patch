--- ../src-base/minecraft/net/minecraftforge/fml/common/ObfuscationReflectionHelper.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/ObfuscationReflectionHelper.java
@@ -19,11 +19,6 @@
 
 package net.minecraftforge.fml.common;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-
 import net.minecraftforge.fml.common.asm.transformers.deobf.FMLDeobfuscatingRemapper;
 import net.minecraftforge.fml.relauncher.ReflectionHelper;
 import net.minecraftforge.fml.relauncher.ReflectionHelper.UnableToAccessFieldException;
@@ -31,117 +26,97 @@
 import org.objectweb.asm.Type;
 
 import javax.annotation.Nullable;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Arrays;
 
 /**
  * Some reflection helper code.
  *
  * @author cpw
- *
  */
-public class ObfuscationReflectionHelper
-{
+public class ObfuscationReflectionHelper {
     @Deprecated // TODO: remove
-    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, E instance, int fieldIndex)
-    {
-        try
-        {
+    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, E instance, int fieldIndex) {
+        try {
             return ReflectionHelper.getPrivateValue(classToAccess, instance, fieldIndex);
-        }
-        catch (UnableToAccessFieldException e)
-        {
+        } catch (UnableToAccessFieldException e) {
             FMLLog.log.error("There was a problem getting field index {} from {}", fieldIndex, classToAccess.getName(), e);
             throw e;
         }
     }
 
     @Deprecated // TODO: remove
-    public static String[] remapFieldNames(String className, String... fieldNames)
-    {
+    public static String[] remapFieldNames(String className, String... fieldNames) {
         String internalClassName = FMLDeobfuscatingRemapper.INSTANCE.unmap(className.replace('.', '/'));
         String[] mappedNames = new String[fieldNames.length];
         int i = 0;
-        for (String fName : fieldNames)
-        {
+        for (String fName : fieldNames) {
             mappedNames[i++] = FMLDeobfuscatingRemapper.INSTANCE.mapFieldName(internalClassName, fName, null);
         }
         return mappedNames;
     }
 
-    private static String remapFieldName(Class<?> clazz, String fieldName)
-    {
+    private static String remapFieldName(Class<?> clazz, String fieldName) {
         String internalClassName = FMLDeobfuscatingRemapper.INSTANCE.unmap(Type.getInternalName(clazz));
         return FMLDeobfuscatingRemapper.INSTANCE.mapFieldName(internalClassName, fieldName, null);
     }
 
-    private static String remapMethodName(Class<?> clazz, String methodName, Class<?> returnType, Class<?>... parameterTypes)
-    {
+    private static String remapMethodName(Class<?> clazz, String methodName, Class<?> returnType, Class<?>... parameterTypes) {
         String internalClassName = FMLDeobfuscatingRemapper.INSTANCE.unmap(Type.getInternalName(clazz));
         Type[] params = Arrays.stream(parameterTypes).map(Type::getType).toArray(Type[]::new);
         String desc = Type.getMethodDescriptor(Type.getType(returnType), params);
         return FMLDeobfuscatingRemapper.INSTANCE.mapMethodName(internalClassName, methodName, desc);
     }
 
-    /** @deprecated use {@link #getPrivateValue(Class, Object, String)} */
+    /**
+     * @deprecated use {@link #getPrivateValue(Class, Object, String)}
+     */
     @Deprecated // TODO: remove
-    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, E instance, String... fieldNames)
-    {
-        try
-        {
-            return ReflectionHelper.getPrivateValue(classToAccess, instance, remapFieldNames(classToAccess.getName(),fieldNames));
-        }
-        catch (UnableToFindFieldException e)
-        {
+    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, E instance, String... fieldNames) {
+        try {
+            return ReflectionHelper.getPrivateValue(classToAccess, instance, remapFieldNames(classToAccess.getName(), fieldNames));
+        } catch (UnableToFindFieldException e) {
             FMLLog.log.error("Unable to locate any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
-        }
-        catch (UnableToAccessFieldException e)
-        {
+        } catch (UnableToAccessFieldException e) {
             FMLLog.log.error("Unable to access any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
         }
     }
 
-    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, @Nullable E instance, String srgName)
-    {
+    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, @Nullable E instance, String srgName) {
         return ReflectionHelper.getPrivateValue(classToAccess, instance, remapFieldName(classToAccess, srgName), null);
     }
 
     @Deprecated // TODO: remove
-    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T instance, E value, int fieldIndex)
-    {
-        try
-        {
+    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T instance, E value, int fieldIndex) {
+        try {
             ReflectionHelper.setPrivateValue(classToAccess, instance, value, fieldIndex);
-        }
-        catch (UnableToAccessFieldException e)
-        {
+        } catch (UnableToAccessFieldException e) {
             FMLLog.log.error("There was a problem setting field index {} on type {}", fieldIndex, classToAccess.getName(), e);
             throw e;
         }
     }
 
-    /** @deprecated use {@link #setPrivateValue(Class, Object, Object, String)} */
+    /**
+     * @deprecated use {@link #setPrivateValue(Class, Object, Object, String)}
+     */
     @Deprecated // TODO: remove
-    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T instance, E value, String... fieldNames)
-    {
-        try
-        {
+    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T instance, E value, String... fieldNames) {
+        try {
             ReflectionHelper.setPrivateValue(classToAccess, instance, value, remapFieldNames(classToAccess.getName(), fieldNames));
-        }
-        catch (UnableToFindFieldException e)
-        {
+        } catch (UnableToFindFieldException e) {
             FMLLog.log.error("Unable to locate any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
-        }
-        catch (UnableToAccessFieldException e)
-        {
+        } catch (UnableToAccessFieldException e) {
             FMLLog.log.error("Unable to set any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
         }
     }
 
-    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, @Nullable T instance, @Nullable E value, String srgName)
-    {
+    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, @Nullable T instance, @Nullable E value, String srgName) {
         ReflectionHelper.setPrivateValue(classToAccess, instance, value, remapFieldName(classToAccess, srgName), null);
     }
 
@@ -153,11 +128,9 @@
      *
      * @param clazz   The class to find the field on.
      * @param srgName The obfuscated name of the field to find.
-     *
      * @return The field with the specified name in the given class.
      */
-    public static Field findField(Class<?> clazz, String srgName)
-    {
+    public static Field findField(Class<?> clazz, String srgName) {
         return ReflectionHelper.findField(clazz, remapFieldName(clazz, srgName), null);
     }
 
@@ -171,11 +144,9 @@
      * @param srgName        The obfuscated name of the method to find.
      * @param returnType     The return type of the method to find.
      * @param parameterTypes The parameter types of the method to find.
-     *
      * @return The method with the specified name and type signature in the given class.
      */
-    public static Method findMethod(Class<?> clazz, String srgName, Class<?> returnType, Class<?>... parameterTypes)
-    {
+    public static Method findMethod(Class<?> clazz, String srgName, Class<?> returnType, Class<?>... parameterTypes) {
         String mappedName = remapMethodName(clazz, srgName, returnType, parameterTypes);
         return ReflectionHelper.findMethod(clazz, mappedName, null, parameterTypes);
     }
@@ -183,14 +154,12 @@
     /**
      * Finds a constructor in the specified class that has matching parameter types.
      *
-     * @param klass The class to find the constructor in
+     * @param klass          The class to find the constructor in
      * @param parameterTypes The parameter types of the constructor.
-     * @param <T> The type
-     *
+     * @param <T>            The type
      * @return The constructor
      */
-    public static <T> Constructor<T> findConstructor(Class<T> klass, Class<?>... parameterTypes)
-    {
+    public static <T> Constructor<T> findConstructor(Class<T> klass, Class<?>... parameterTypes) {
         return ReflectionHelper.findConstructor(klass, parameterTypes);
     }
 }
