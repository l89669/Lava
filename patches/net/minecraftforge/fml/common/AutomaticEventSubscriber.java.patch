--- ../src-base/minecraft/net/minecraftforge/fml/common/AutomaticEventSubscriber.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/AutomaticEventSubscriber.java
@@ -21,13 +21,11 @@
 
 import com.google.common.base.Strings;
 import com.google.common.collect.SetMultimap;
-
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.discovery.asm.ModAnnotation;
 import net.minecraftforge.fml.relauncher.Side;
-import org.apache.logging.log4j.Level;
 
 import java.util.EnumSet;
 import java.util.List;
@@ -37,34 +35,31 @@
  * Automatic eventbus subscriber - reads {@link net.minecraftforge.fml.common.Mod.EventBusSubscriber}
  * annotations and passes the class instances to the {@link net.minecraftforge.common.MinecraftForge.EVENT_BUS}
  */
-public class AutomaticEventSubscriber
-{
+public class AutomaticEventSubscriber {
     private static final EnumSet<Side> DEFAULT = EnumSet.allOf(Side.class);
-    public static void inject(ModContainer mod, ASMDataTable data, Side side)
-    {
+
+    public static void inject(ModContainer mod, ASMDataTable data, Side side) {
         FMLLog.log.debug("Attempting to inject @EventBusSubscriber classes into the eventbus for {}", mod.getModId());
         SetMultimap<String, ASMData> modData = data.getAnnotationsFor(mod);
         Set<ASMDataTable.ASMData> mods = modData.get(Mod.class.getName());
         Set<ASMDataTable.ASMData> targets = modData.get(Mod.EventBusSubscriber.class.getName());
         ClassLoader mcl = Loader.instance().getModClassLoader();
 
-        for (ASMDataTable.ASMData targ : targets)
-        {
-            try
-            {
+        for (ASMDataTable.ASMData targ : targets) {
+            try {
                 //noinspection unchecked
                 @SuppressWarnings("unchecked")
-                List<ModAnnotation.EnumHolder> sidesEnum = (List<ModAnnotation.EnumHolder>)targ.getAnnotationInfo().get("value");
+                List<ModAnnotation.EnumHolder> sidesEnum = (List<ModAnnotation.EnumHolder>) targ.getAnnotationInfo().get("value");
                 EnumSet<Side> sides = DEFAULT;
                 if (sidesEnum != null) {
                     sides = EnumSet.noneOf(Side.class);
-                    for (ModAnnotation.EnumHolder h: sidesEnum) {
+                    for (ModAnnotation.EnumHolder h : sidesEnum) {
                         sides.add(Side.valueOf(h.getValue()));
                     }
                 }
                 if (sides == DEFAULT || sides.contains(side)) {
                     //FMLLog.log.debug("Found @EventBusSubscriber class {}", targ.getClassName());
-                    String amodid = (String)targ.getAnnotationInfo().get("modid");
+                    String amodid = (String) targ.getAnnotationInfo().get("modid");
                     if (Strings.isNullOrEmpty(amodid)) {
                         amodid = ASMDataTable.getOwnerModID(mods, targ);
                         if (Strings.isNullOrEmpty(amodid)) {
@@ -72,8 +67,7 @@
                             continue;
                         }
                     }
-                    if (!mod.getModId().equals(amodid))
-                    {
+                    if (!mod.getModId().equals(amodid)) {
                         FMLLog.log.debug("Skipping @EventBusSubscriber injection for {} since it is not for mod {}", targ.getClassName(), mod.getModId());
                         continue; //We're not injecting this guy
                     }
@@ -82,9 +76,7 @@
                     MinecraftForge.EVENT_BUS.register(subscriptionTarget);
                     FMLLog.log.debug("Injected @EventBusSubscriber class {}", targ.getClassName());
                 }
-            }
-            catch (Throwable e)
-            {
+            } catch (Throwable e) {
                 FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}", targ.getClassName(), mod.getModId(), e);
                 throw new LoaderException(e);
             }
