--- ../src-base/minecraft/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java
@@ -19,34 +19,27 @@
 
 package net.minecraftforge.fml.common.network.internal;
 
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.embedded.EmbeddedChannel;
-
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
-
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.inventory.Container;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.Packet;
 import net.minecraft.server.management.PlayerList;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraftforge.common.util.FakePlayer;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLContainer;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.network.FMLEmbeddedChannel;
 import net.minecraftforge.fml.common.network.FMLOutboundHandler;
-import net.minecraftforge.fml.common.network.NetworkRegistry;
 import net.minecraftforge.fml.common.network.FMLOutboundHandler.OutboundTarget;
+import net.minecraftforge.fml.common.network.NetworkRegistry;
 import net.minecraftforge.fml.common.network.handshake.FMLHandshakeMessage;
 import net.minecraftforge.fml.common.network.handshake.NetworkDispatcher;
 import net.minecraftforge.fml.common.network.internal.FMLMessage.CompleteHandshake;
@@ -54,40 +47,52 @@
 import net.minecraftforge.fml.common.registry.EntityRegistry.EntityRegistration;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
-
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
 import org.apache.commons.lang3.tuple.Pair;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.event.inventory.InventoryType;
 
 import javax.annotation.Nullable;
+import java.util.*;
+import java.util.stream.Collectors;
 
-public class FMLNetworkHandler
-{
-    public static final int READ_TIMEOUT = Integer.parseInt(System.getProperty("fml.readTimeout","30"));
-    public static final int LOGIN_TIMEOUT = Integer.parseInt(System.getProperty("fml.loginTimeout","600"));
+public class FMLNetworkHandler {
+    public static final int READ_TIMEOUT = Integer.parseInt(System.getProperty("fml.readTimeout", "30"));
+    public static final int LOGIN_TIMEOUT = Integer.parseInt(System.getProperty("fml.loginTimeout", "600"));
     private static EnumMap<Side, FMLEmbeddedChannel> channelPair;
 
-    public static void fmlServerHandshake(PlayerList scm, NetworkManager manager, EntityPlayerMP player)
-    {
+    public static void fmlServerHandshake(PlayerList scm, NetworkManager manager, EntityPlayerMP player) {
         NetworkDispatcher dispatcher = NetworkDispatcher.allocAndSet(manager, scm);
         dispatcher.serverToClientHandshake(player);
     }
 
-    public static void fmlClientHandshake(NetworkManager networkManager)
-    {
+    public static void fmlClientHandshake(NetworkManager networkManager) {
         NetworkDispatcher dispatcher = NetworkDispatcher.allocAndSet(networkManager);
         dispatcher.clientToServerHandshake();
     }
 
-    public static void openGui(EntityPlayer entityPlayer, Object mod, int modGuiId, World world, int x, int y, int z)
-    {
+    public static void openGui(EntityPlayer entityPlayer, Object mod, int modGuiId, World world, int x, int y, int z) {
         ModContainer mc = FMLCommonHandler.instance().findContainerFor(mod);
-        if (entityPlayer instanceof EntityPlayerMP && !(entityPlayer instanceof FakePlayer))
-        {
+        if (entityPlayer instanceof EntityPlayerMP && !(entityPlayer instanceof FakePlayer)) {
             EntityPlayerMP entityPlayerMP = (EntityPlayerMP) entityPlayer;
             Container remoteGuiContainer = NetworkRegistry.INSTANCE.getRemoteGuiContainer(mc, entityPlayerMP, modGuiId, world, x, y, z);
-            if (remoteGuiContainer != null)
-            {
+            if (remoteGuiContainer != null) {
+                // Lava start
+                if (remoteGuiContainer.getBukkitView() == null) {
+                    TileEntity te = entityPlayer.world.getTileEntity(new BlockPos(x, y, z));
+                    if (te instanceof IInventory) {
+                        remoteGuiContainer.setBukkitView(new CraftInventoryView(entityPlayer.getBukkitEntity(), new CraftInventory((IInventory) te), remoteGuiContainer));
+                    } else {
+                        remoteGuiContainer.setBukkitView(new CraftInventoryView(entityPlayer.getBukkitEntity(), Bukkit.createInventory(entityPlayer.getBukkitEntity(), InventoryType.CHEST), remoteGuiContainer));
+                    }
+                    remoteGuiContainer = CraftEventFactory.callInventoryOpenEvent((EntityPlayerMP) entityPlayer, remoteGuiContainer, false);
+                    if (remoteGuiContainer == null) {
+                        return;
+                    }
+                }
+                // Lava end
                 entityPlayerMP.getNextWindowId();
                 entityPlayerMP.closeContainer();
                 int windowId = entityPlayerMP.currentWindowId;
@@ -101,33 +106,24 @@
                 entityPlayerMP.openContainer.addListener(entityPlayerMP);
                 net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open(entityPlayer, entityPlayer.openContainer));
             }
-        }
-        else if (entityPlayer instanceof FakePlayer)
-        {
+        } else if (entityPlayer instanceof FakePlayer) {
             // NO OP - I won't even log a message!
-        }
-        else if (FMLCommonHandler.instance().getSide().equals(Side.CLIENT))
-        {
+        } else if (FMLCommonHandler.instance().getSide().equals(Side.CLIENT)) {
             Object guiContainer = NetworkRegistry.INSTANCE.getLocalGuiContainer(mc, entityPlayer, modGuiId, world, x, y, z);
             FMLCommonHandler.instance().showGuiScreen(guiContainer);
-        }
-        else
-        {
+        } else {
             FMLLog.log.debug("Invalid attempt to open a local GUI on a dedicated server. This is likely a bug. GUI ID: {},{}", mc.getModId(), modGuiId);
         }
 
     }
 
     @Nullable
-    public static Packet<?> getEntitySpawningPacket(Entity entity)
-    {
+    public static Packet<?> getEntitySpawningPacket(Entity entity) {
         EntityRegistration er = EntityRegistry.instance().lookupModSpawn(entity.getClass(), false);
-        if (er == null)
-        {
+        if (er == null) {
             return null;
         }
-        if (er.usesVanillaSpawning())
-        {
+        if (er.usesVanillaSpawning()) {
             return null;
         }
 
@@ -135,34 +131,28 @@
     }
 
     @Nullable
-    public static String checkModList(FMLHandshakeMessage.ModList modListPacket, Side side)
-    {
-        Map<String,String> modList = modListPacket.modList();
+    public static String checkModList(FMLHandshakeMessage.ModList modListPacket, Side side) {
+        Map<String, String> modList = modListPacket.modList();
         return checkModList(modList, side);
     }
 
     /**
      * @param listData map of modId string to version string, represents the mods available on the given side
-     * @param side the side that listData is coming from, either client or server
+     * @param side     the side that listData is coming from, either client or server
      * @return null if everything is fine, returns a string error message if there are mod rejections
      */
     @Nullable
-    public static String checkModList(Map<String,String> listData, Side side)
-    {
+    public static String checkModList(Map<String, String> listData, Side side) {
         List<Pair<ModContainer, String>> rejects = NetworkRegistry.INSTANCE.registry().entrySet().stream()
                 .map(entry -> Pair.of(entry.getKey(), entry.getValue().checkCompatible(listData, side)))
                 .filter(pair -> pair.getValue() != null)
                 .sorted(Comparator.comparing(o -> o.getKey().getName()))
                 .collect(Collectors.toList());
-        if (rejects.isEmpty())
-        {
+        if (rejects.isEmpty()) {
             return null;
-        }
-        else
-        {
+        } else {
             List<String> rejectStrings = new ArrayList<>();
-            for (Pair<ModContainer, String> reject : rejects)
-            {
+            for (Pair<ModContainer, String> reject : rejects) {
                 ModContainer modContainer = reject.getKey();
                 rejectStrings.add(modContainer.getName() + ": " + reject.getValue());
             }
@@ -173,47 +163,41 @@
     }
 
     @SideOnly(Side.CLIENT)
-    private static void addClientHandlers()
-    {
+    private static void addClientHandlers() {
         ChannelPipeline pipeline = channelPair.get(Side.CLIENT).pipeline();
         String targetName = channelPair.get(Side.CLIENT).findChannelHandlerNameForType(FMLRuntimeCodec.class);
         pipeline.addAfter(targetName, "GuiHandler", new OpenGuiHandler());
         pipeline.addAfter(targetName, "EntitySpawnHandler", new EntitySpawnHandler());
     }
-    public static void registerChannel(FMLContainer container, Side side)
-    {
+
+    public static void registerChannel(FMLContainer container, Side side) {
         channelPair = NetworkRegistry.INSTANCE.newChannel(container, "FML", new FMLRuntimeCodec(), new HandshakeCompletionHandler());
         EmbeddedChannel embeddedChannel = channelPair.get(Side.SERVER);
         embeddedChannel.attr(FMLOutboundHandler.FML_MESSAGETARGET).set(OutboundTarget.NOWHERE);
 
-        if (side == Side.CLIENT)
-        {
+        if (side == Side.CLIENT) {
             addClientHandlers();
         }
     }
 
-    public static List<FMLProxyPacket> forwardHandshake(CompleteHandshake push, NetworkDispatcher target, Side side)
-    {
+    public static List<FMLProxyPacket> forwardHandshake(CompleteHandshake push, NetworkDispatcher target, Side side) {
         channelPair.get(side).attr(NetworkDispatcher.FML_DISPATCHER).set(target);
         channelPair.get(side).writeOutbound(push);
 
-        ArrayList<FMLProxyPacket> list = new ArrayList<FMLProxyPacket>();
-        for (Object o: channelPair.get(side).outboundMessages())
-        {
-            list.add((FMLProxyPacket)o);
+        ArrayList<FMLProxyPacket> list = new ArrayList<>();
+        for (Object o : channelPair.get(side).outboundMessages()) {
+            list.add((FMLProxyPacket) o);
         }
         channelPair.get(side).outboundMessages().clear();
         return list;
     }
 
 
-    public static void enhanceStatusQuery(JsonObject jsonobject)
-    {
+    public static void enhanceStatusQuery(JsonObject jsonobject) {
         JsonObject fmlData = new JsonObject();
-        fmlData.addProperty("type", "FML");
+        fmlData.addProperty("type", "BUKKIT"); // Show the Bukkit icon in server list.
         JsonArray modList = new JsonArray();
-        for (ModContainer mc : Loader.instance().getActiveModList())
-        {
+        for (ModContainer mc : Loader.instance().getActiveModList()) {
             JsonObject modData = new JsonObject();
             modData.addProperty("modid", mc.getModId());
             modData.addProperty("version", mc.getVersion());
