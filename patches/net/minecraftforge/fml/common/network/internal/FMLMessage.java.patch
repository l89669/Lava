--- ../src-base/minecraft/net/minecraftforge/fml/common/network/internal/FMLMessage.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/internal/FMLMessage.java
@@ -21,11 +21,6 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
-
-import java.io.IOException;
-import java.util.List;
-import java.util.UUID;
-
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.network.PacketBuffer;
@@ -38,26 +33,32 @@
 import net.minecraftforge.fml.common.registry.IThrowableEntity;
 import net.minecraftforge.fml.relauncher.Side;
 
+import java.io.IOException;
+import java.util.List;
+import java.util.UUID;
+
 public abstract class FMLMessage {
     public static class CompleteHandshake extends FMLMessage {
         Side target;
+
         public CompleteHandshake() {
         }
-        public CompleteHandshake(Side target)
-        {
+
+        public CompleteHandshake(Side target) {
             this.target = target;
         }
+
         @Override
-        void fromBytes(ByteBuf buf)
-        {
+        void fromBytes(ByteBuf buf) {
             target = Side.values()[buf.readByte()];
         }
+
         @Override
-        void toBytes(ByteBuf buf)
-        {
+        void toBytes(ByteBuf buf) {
             buf.writeByte(target.ordinal());
         }
     }
+
     public static class OpenGui extends FMLMessage {
         int windowId;
         String modId;
@@ -66,9 +67,10 @@
         int y;
         int z;
 
-        public OpenGui() {}
-        OpenGui(int windowId, String modId, int modGuiId, int x, int y, int z)
-        {
+        public OpenGui() {
+        }
+
+        OpenGui(int windowId, String modId, int modGuiId, int x, int y, int z) {
             this.windowId = windowId;
             this.modId = modId;
             this.modGuiId = modGuiId;
@@ -78,8 +80,7 @@
         }
 
         @Override
-        void toBytes(ByteBuf buf)
-        {
+        void toBytes(ByteBuf buf) {
             buf.writeInt(windowId);
             ByteBufUtils.writeUTF8String(buf, modId);
             buf.writeInt(modGuiId);
@@ -89,8 +90,7 @@
         }
 
         @Override
-        void fromBytes(ByteBuf buf)
-        {
+        void fromBytes(ByteBuf buf) {
             windowId = buf.readInt();
             modId = ByteBufUtils.readUTF8String(buf);
             modGuiId = buf.readInt();
@@ -103,23 +103,22 @@
     public abstract static class EntityMessage extends FMLMessage {
         Entity entity;
         int entityId;
-        public EntityMessage()
-        {
 
+        public EntityMessage() {
+
         }
-        EntityMessage(Entity entity)
-        {
+
+        EntityMessage(Entity entity) {
             this.entity = entity;
         }
+
         @Override
-        void toBytes(ByteBuf buf)
-        {
+        void toBytes(ByteBuf buf) {
             buf.writeInt(entity.getEntityId());
         }
 
         @Override
-        void fromBytes(ByteBuf buf)
-        {
+        void fromBytes(ByteBuf buf) {
             entityId = buf.readInt();
         }
     }
@@ -141,16 +140,17 @@
         List<EntityDataManager.DataEntry<?>> dataWatcherList;
         ByteBuf dataStream;
 
-        public EntitySpawnMessage() {}
-        public EntitySpawnMessage(EntityRegistration er, Entity entity, ModContainer modContainer)
-        {
+        public EntitySpawnMessage() {
+        }
+
+        public EntitySpawnMessage(EntityRegistration er, Entity entity, ModContainer modContainer) {
             super(entity);
             modId = modContainer.getModId();
             modEntityTypeId = er.getModEntityId();
         }
+
         @Override
-        void toBytes(ByteBuf buf)
-        {
+        void toBytes(ByteBuf buf) {
             super.toBytes(buf);
             ByteBufUtils.writeUTF8String(buf, modId);
             buf.writeInt(modEntityTypeId);
@@ -161,33 +161,26 @@
             buf.writeDouble(entity.posY);
             buf.writeDouble(entity.posZ);
             // yaw, pitch
-            buf.writeByte((byte)(entity.rotationYaw * 256.0F / 360.0F));
+            buf.writeByte((byte) (entity.rotationYaw * 256.0F / 360.0F));
             buf.writeByte((byte) (entity.rotationPitch * 256.0F / 360.0F));
             // head yaw
-            if (entity instanceof EntityLivingBase)
-            {
-                buf.writeByte((byte) (((EntityLivingBase)entity).rotationYawHead * 256.0F / 360.0F));
-            }
-            else
-            {
+            if (entity instanceof EntityLivingBase) {
+                buf.writeByte((byte) (((EntityLivingBase) entity).rotationYawHead * 256.0F / 360.0F));
+            } else {
                 buf.writeByte(0);
             }
             ByteBuf tmpBuf = Unpooled.buffer();
             PacketBuffer pb = new PacketBuffer(tmpBuf);
-            try
-            {
+            try {
                 entity.getDataManager().writeEntries(pb);
-            }
-            catch (IOException e)
-            {
+            } catch (IOException e) {
                 FMLLog.log.fatal("Encountered fatal exception trying to send entity spawn data watchers", e);
                 throw new RuntimeException(e);
             }
             buf.writeBytes(tmpBuf);
 
-            if (entity instanceof IThrowableEntity)
-            {
-                Entity owner = ((IThrowableEntity)entity).getThrower();
+            if (entity instanceof IThrowableEntity) {
+                Entity owner = ((IThrowableEntity) entity).getThrower();
                 buf.writeInt(owner == null ? entity.getEntityId() : owner.getEntityId());
                 double maxVel = 3.9D;
                 double mX = entity.motionX;
@@ -196,27 +189,24 @@
                 if (mX < -maxVel) mX = -maxVel;
                 if (mY < -maxVel) mY = -maxVel;
                 if (mZ < -maxVel) mZ = -maxVel;
-                if (mX >  maxVel) mX =  maxVel;
-                if (mY >  maxVel) mY =  maxVel;
-                if (mZ >  maxVel) mZ =  maxVel;
-                buf.writeInt((int)(mX * 8000D));
-                buf.writeInt((int)(mY * 8000D));
-                buf.writeInt((int)(mZ * 8000D));
-            }
-            else
-            {
+                if (mX > maxVel) mX = maxVel;
+                if (mY > maxVel) mY = maxVel;
+                if (mZ > maxVel) mZ = maxVel;
+                buf.writeInt((int) (mX * 8000D));
+                buf.writeInt((int) (mY * 8000D));
+                buf.writeInt((int) (mZ * 8000D));
+            } else {
                 buf.writeInt(0);
             }
-            if (entity instanceof IEntityAdditionalSpawnData)
-            {
+            if (entity instanceof IEntityAdditionalSpawnData) {
                 tmpBuf = Unpooled.buffer();
-                ((IEntityAdditionalSpawnData)entity).writeSpawnData(tmpBuf);
+                ((IEntityAdditionalSpawnData) entity).writeSpawnData(tmpBuf);
                 buf.writeBytes(tmpBuf);
             }
         }
+
         @Override
-        void fromBytes(ByteBuf dat)
-        {
+        void fromBytes(ByteBuf dat) {
             super.fromBytes(dat);
             modId = ByteBufUtils.readUTF8String(dat);
             modEntityTypeId = dat.readInt();
@@ -227,19 +217,15 @@
             scaledYaw = dat.readByte() * 360F / 256F;
             scaledPitch = dat.readByte() * 360F / 256F;
             scaledHeadYaw = dat.readByte() * 360F / 256F;
-            try
-            {
+            try {
                 dataWatcherList = EntityDataManager.readEntries(new PacketBuffer(dat));
-            }
-            catch (IOException e)
-            {
+            } catch (IOException e) {
                 FMLLog.log.fatal("There was a critical error decoding the datawatcher stream for a mod entity.", e);
                 throw new RuntimeException(e);
             }
 
             throwerId = dat.readInt();
-            if (throwerId != 0)
-            {
+            if (throwerId != 0) {
                 speedScaledX = dat.readInt() / 8000D;
                 speedScaledY = dat.readInt() / 8000D;
                 speedScaledZ = dat.readInt() / 8000D;
@@ -247,6 +233,8 @@
             this.dataStream = dat.retain();
         }
     }
+
     abstract void toBytes(ByteBuf buf);
+
     abstract void fromBytes(ByteBuf buf);
 }
