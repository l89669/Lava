--- ../src-base/minecraft/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
@@ -19,13 +19,14 @@
 
 package net.minecraftforge.fml.common.network.internal;
 
+import com.google.common.collect.ConcurrentHashMultiset;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Multiset;
+import com.google.common.collect.Multiset.Entry;
+import com.google.common.collect.Multisets;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.embedded.EmbeddedChannel;
-
-import java.io.IOException;
-import java.util.List;
-
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.Packet;
@@ -40,13 +41,9 @@
 import net.minecraftforge.fml.common.network.handshake.NetworkDispatcher;
 import net.minecraftforge.fml.relauncher.Side;
 
-import com.google.common.collect.ConcurrentHashMultiset;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Multiset;
-import com.google.common.collect.Multiset.Entry;
-import com.google.common.collect.Multisets;
-
 import javax.annotation.Nullable;
+import java.io.IOException;
+import java.util.List;
 
 public class FMLProxyPacket implements Packet<INetHandler> {
     final String channel;
@@ -57,108 +54,89 @@
     private static Multiset<String> badPackets = ConcurrentHashMultiset.create();
     private static int packetCountWarning = Integer.parseInt(System.getProperty("fml.badPacketCounter", "100"));
 
-    public FMLProxyPacket(SPacketCustomPayload original)
-    {
+    public FMLProxyPacket(SPacketCustomPayload original) {
         this(original.getBufferData(), original.getChannelName());
         this.target = Side.CLIENT;
     }
 
-    public FMLProxyPacket(CPacketCustomPayload original)
-    {
+    public FMLProxyPacket(CPacketCustomPayload original) {
         this(original.getBufferData(), original.getChannelName());
         this.target = Side.SERVER;
     }
 
-    public FMLProxyPacket(PacketBuffer payload, String channel)
-    {
+    public FMLProxyPacket(PacketBuffer payload, String channel) {
         this.channel = channel;
         this.payload = payload;
     }
+
     @Override
-    public void readPacketData(PacketBuffer packetbuffer) throws IOException
-    {
+    public void readPacketData(PacketBuffer packetbuffer) throws IOException {
         // NOOP - we are not built this way
     }
 
     @Override
-    public void writePacketData(PacketBuffer packetbuffer) throws IOException
-    {
+    public void writePacketData(PacketBuffer packetbuffer) throws IOException {
         // NOOP - we are not built this way
     }
 
     @Override
-    public void processPacket(INetHandler inethandler)
-    {
+    public void processPacket(INetHandler inethandler) {
         this.netHandler = inethandler;
         EmbeddedChannel internalChannel = NetworkRegistry.INSTANCE.getChannel(this.channel, this.target);
-        if (internalChannel != null)
-        {
+        if (internalChannel != null) {
             internalChannel.attr(NetworkRegistry.NET_HANDLER).set(this.netHandler);
-            try
-            {
-                if (internalChannel.writeInbound(this))
-                {
+            try {
+                if (internalChannel.writeInbound(this)) {
                     badPackets.add(this.channel);
-                    if (badPackets.size() % packetCountWarning == 0)
-                    {
+                    if (badPackets.size() % packetCountWarning == 0) {
                         FMLLog.log.fatal("Detected ongoing potential memory leak. {} packets have leaked. Top offenders", badPackets.size());
                         int i = 0;
-                        for (Entry<String> s  : Multisets.copyHighestCountFirst(badPackets).entrySet())
-                        {
+                        for (Entry<String> s : Multisets.copyHighestCountFirst(badPackets).entrySet()) {
                             if (i++ > 10) break;
                             FMLLog.log.fatal("\t {} : {}", s.getElement(), s.getCount());
                         }
                     }
                 }
                 internalChannel.inboundMessages().clear();
-            }
-            catch (FMLNetworkException ne)
-            {
+            } catch (FMLNetworkException ne) {
                 FMLLog.log.error("There was a network exception handling a packet on channel {}", channel, ne);
                 dispatcher.rejectHandshake(ne.getMessage());
-            }
-            catch (Throwable t)
-            {
+            } catch (Throwable t) {
                 FMLLog.log.error("There was a critical exception handling a packet on channel {}", channel, t);
                 dispatcher.rejectHandshake("A fatal error has occurred, this connection is terminated");
             }
         }
     }
 
-    public String channel()
-    {
+    public String channel() {
         return channel;
     }
-    public ByteBuf payload()
-    {
+
+    public ByteBuf payload() {
         return payload;
     }
-    public INetHandler handler()
-    {
+
+    public INetHandler handler() {
         return netHandler;
     }
-    public Packet<INetHandlerPlayServer> toC17Packet()
-    {
+
+    public Packet<INetHandlerPlayServer> toC17Packet() {
         return new CPacketCustomPayload(channel, payload);
     }
 
     static final int PART_SIZE = 0x100000 - 0x50; // Make it a constant so that it gets inlined below.
     // FIXME int overflow
     public static final int MAX_LENGTH = PART_SIZE * 255;
-    public List<Packet<INetHandlerPlayClient>> toS3FPackets() throws IOException
-    {
+
+    public List<Packet<INetHandlerPlayClient>> toS3FPackets() throws IOException {
         List<Packet<INetHandlerPlayClient>> ret = Lists.newArrayList();
         byte[] data = payload.array();
 
-        if (data.length < PART_SIZE)
-        {
+        if (data.length < PART_SIZE) {
             ret.add(new SPacketCustomPayload(channel, new PacketBuffer(payload.duplicate())));
-        }
-        else
-        {
-            int parts = (int)Math.ceil(data.length / (double)(PART_SIZE - 1)); //We add a byte header so -1
-            if (parts > 255)
-            {
+        } else {
+            int parts = (int) Math.ceil(data.length / (double) (PART_SIZE - 1)); //We add a byte header so -1
+            if (parts > 255) {
                 throw new IllegalArgumentException("Payload may not be larger than " + MAX_LENGTH + " bytes");
             }
             PacketBuffer preamble = new PacketBuffer(Unpooled.buffer());
@@ -168,11 +146,10 @@
             ret.add(new SPacketCustomPayload("FML|MP", preamble));
 
             int offset = 0;
-            for (int x = 0; x < parts; x++)
-            {
+            for (int x = 0; x < parts; x++) {
                 int length = Math.min(PART_SIZE, data.length - offset + 1);
                 byte[] tmp = new byte[length];
-                tmp[0] = (byte)(x & 0xFF);
+                tmp[0] = (byte) (x & 0xFF);
                 System.arraycopy(data, offset, tmp, 1, tmp.length - 1);
                 offset += tmp.length - 1;
                 ret.add(new SPacketCustomPayload("FML|MP", new PacketBuffer(Unpooled.wrappedBuffer(tmp))));
@@ -181,34 +158,28 @@
         return ret;
     }
 
-    public void setTarget(Side target)
-    {
+    public void setTarget(Side target) {
         this.target = target;
     }
 
-    public void setDispatcher(NetworkDispatcher networkDispatcher)
-    {
+    public void setDispatcher(NetworkDispatcher networkDispatcher) {
         this.dispatcher = networkDispatcher;
     }
 
     @Nullable
-    public NetworkManager getOrigin()
-    {
+    public NetworkManager getOrigin() {
         return this.dispatcher != null ? this.dispatcher.manager : null;
     }
 
-    public NetworkDispatcher getDispatcher()
-    {
+    public NetworkDispatcher getDispatcher() {
         return this.dispatcher;
     }
 
-    public Side getTarget()
-    {
+    public Side getTarget() {
         return target;
     }
 
-    public FMLProxyPacket copy()
-    {
+    public FMLProxyPacket copy() {
         FMLProxyPacket pkt = new FMLProxyPacket(new PacketBuffer(payload.duplicate()), channel);
         pkt.dispatcher = dispatcher;
         pkt.netHandler = netHandler;
