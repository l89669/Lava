--- ../src-base/minecraft/net/minecraftforge/fml/common/network/handshake/HandshakeMessageHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/handshake/HandshakeMessageHandler.java
@@ -19,11 +19,10 @@
 
 package net.minecraftforge.fml.common.network.handshake;
 
-import net.minecraftforge.fml.common.FMLLog;
-
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.util.AttributeKey;
+import net.minecraftforge.fml.common.FMLLog;
 
 public class HandshakeMessageHandler<S extends Enum<S> & IHandshakeState<S>> extends SimpleChannelInboundHandler<FMLHandshakeMessage> {
     private static final AttributeKey<IHandshakeState<?>> STATE = AttributeKey.valueOf("fml:handshake-state");
@@ -33,18 +32,17 @@
     private final Class<S> stateType;
 
     @SuppressWarnings("unchecked")
-    public HandshakeMessageHandler(Class<S> stateType)
-    {
-        fmlHandshakeState = (AttributeKey<S>) ((Object)STATE);
+    public HandshakeMessageHandler(Class<S> stateType) {
+        fmlHandshakeState = (AttributeKey<S>) ((Object) STATE);
         initialState = Enum.valueOf(stateType, "START");
         errorState = Enum.valueOf(stateType, "ERROR");
         this.stateType = stateType;
     }
+
     @Override
-    protected void channelRead0(ChannelHandlerContext ctx, FMLHandshakeMessage msg) throws Exception
-    {
+    protected void channelRead0(ChannelHandlerContext ctx, FMLHandshakeMessage msg) throws Exception {
         S state = ctx.channel().attr(fmlHandshakeState).get();
-        FMLLog.log.debug("{}: {}->{}:{}", stateType.getSimpleName(), msg.toString(stateType), state.getClass().getName().substring(state.getClass().getName().lastIndexOf('.')+1), state);
+        FMLLog.log.debug("{}: {}->{}:{}", stateType.getSimpleName(), msg.toString(stateType), state.getClass().getName().substring(state.getClass().getName().lastIndexOf('.') + 1), state);
         state.accept(ctx, msg, s ->
         {
             FMLLog.log.debug("  Next: {}", s.name());
@@ -53,15 +51,14 @@
     }
 
     @Override
-    public void channelActive(ChannelHandlerContext ctx) throws Exception
-    {
+    public void channelActive(ChannelHandlerContext ctx) throws Exception {
         ctx.channel().attr(fmlHandshakeState).set(initialState);
     }
+
     @Override
-    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception
-    {
+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
         S state = ctx.channel().attr(fmlHandshakeState).get();
-        FMLLog.log.debug("{}: null->{}:{}", stateType.getSimpleName(), state.getClass().getName().substring(state.getClass().getName().lastIndexOf('.')+1), state);
+        FMLLog.log.debug("{}: null->{}:{}", stateType.getSimpleName(), state.getClass().getName().substring(state.getClass().getName().lastIndexOf('.') + 1), state);
         state.accept(ctx, null, s ->
         {
             FMLLog.log.debug("  Next: {}", s.name());
@@ -70,8 +67,7 @@
     }
 
     @Override
-    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
-    {
+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
         FMLLog.log.error("HandshakeMessageHandler exception", cause);
         ctx.channel().attr(fmlHandshakeState).set(errorState);
         super.exceptionCaught(ctx, cause);
