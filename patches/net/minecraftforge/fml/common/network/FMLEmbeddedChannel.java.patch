--- ../src-base/minecraft/net/minecraftforge/fml/common/network/FMLEmbeddedChannel.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/FMLEmbeddedChannel.java
@@ -21,9 +21,6 @@
 
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.embedded.EmbeddedChannel;
-
-import java.util.Map.Entry;
-
 import net.minecraft.network.Packet;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.ModContainer;
@@ -33,26 +30,25 @@
 import net.minecraftforge.fml.relauncher.Side;
 
 import javax.annotation.Nullable;
+import java.util.Map.Entry;
 
 /**
  * Utility wrapper around {@link EmbeddedChannel}. Provides some convenience methods
  * associated with the specific needs of FML network handling.
  *
  * @author cpw
- *
  */
 public class FMLEmbeddedChannel extends EmbeddedChannel {
-    public FMLEmbeddedChannel(String channelName, Side source, ChannelHandler... handlers)
-    {
+    public FMLEmbeddedChannel(String channelName, Side source, ChannelHandler... handlers) {
         this(Loader.instance().activeModContainer(), channelName, source, handlers);
     }
-    public FMLEmbeddedChannel(ModContainer container, String channelName, Side source, ChannelHandler... handlers)
-    {
+
+    public FMLEmbeddedChannel(ModContainer container, String channelName, Side source, ChannelHandler... handlers) {
         super(handlers);
         this.attr(NetworkRegistry.FML_CHANNEL).set(channelName);
         this.attr(NetworkRegistry.CHANNEL_SOURCE).set(source);
         this.attr(NetworkRegistry.MOD_CONTAINER).setIfAbsent(container);
-        this.pipeline().addFirst("fml:outbound",new FMLOutboundHandler());
+        this.pipeline().addFirst("fml:outbound", new FMLOutboundHandler());
     }
 
 
@@ -60,14 +56,13 @@
      * Utility method to generate a regular packet from a custom packet. Basically, it writes the packet through the
      * outbound side which should have a message to message codec present (such as {@link FMLIndexedMessageToMessageCodec},
      * transforming from mod packets to standard {@link FMLProxyPacket}s.
-     *
+     * <p>
      * This is mostly useful in cases where vanilla expects a packet, such as the TileEntity getDescriptionPacket.
      *
      * @param object The inbound packet
      * @return A Packet suitable for passing to vanilla network code.
      */
-    public Packet<?> generatePacketFrom(Object object)
-    {
+    public Packet<?> generatePacketFrom(Object object) {
         OutboundTarget outboundTarget = attr(FMLOutboundHandler.FML_MESSAGETARGET).getAndSet(OutboundTarget.NOWHERE);
         writeOutbound(object);
         Packet<?> pkt = (Packet<?>) outboundMessages().poll();
@@ -76,13 +71,10 @@
     }
 
     @Nullable
-    public String findChannelHandlerNameForType(Class<? extends ChannelHandler> type)
-    {
+    public String findChannelHandlerNameForType(Class<? extends ChannelHandler> type) {
         String targetName = null;
-        for (Entry<String, ChannelHandler> entry : pipeline())
-        {
-            if (type.isInstance(entry.getValue()))
-            {
+        for (Entry<String, ChannelHandler> entry : pipeline()) {
+            if (type.isInstance(entry.getValue())) {
                 targetName = entry.getKey();
                 break;
             }
@@ -90,8 +82,7 @@
         return targetName;
     }
 
-    public void cleanAttributes()
-    {
+    public void cleanAttributes() {
         this.attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(null);
         this.attr(NetworkRegistry.NET_HANDLER).set(null);
         this.attr(NetworkDispatcher.FML_DISPATCHER).set(null);
