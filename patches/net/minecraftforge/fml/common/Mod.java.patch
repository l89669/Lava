--- ../src-base/minecraft/net/minecraftforge/fml/common/Mod.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/Mod.java
@@ -19,29 +19,19 @@
 
 package net.minecraftforge.fml.common;
 
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
 import net.minecraftforge.fml.client.IModGuiFactory;
-import net.minecraftforge.fml.common.event.FMLEvent;
-import net.minecraftforge.fml.common.event.FMLFingerprintViolationEvent;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLInterModComms;
-import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLServerAboutToStartEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartedEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
-import net.minecraftforge.fml.common.event.FMLServerStoppedEvent;
-import net.minecraftforge.fml.common.event.FMLServerStoppingEvent;
+import net.minecraftforge.fml.common.event.*;
 import net.minecraftforge.fml.common.event.FMLInterModComms.IMCEvent;
 import net.minecraftforge.fml.common.network.NetworkCheckHandler;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.common.versioning.VersionRange;
 import net.minecraftforge.fml.relauncher.Side;
 
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
 /**
  * This defines a Mod to FML.
  * Any class found with this annotation applied will be loaded as a Mod. The instance that is loaded will
@@ -70,16 +60,14 @@
  * </pre>
  *
  * @author cpw
- *
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
-public @interface Mod
-{
+public @interface Mod {
     /**
      * The unique mod identifier for this mod.
      * <b>Required to be lowercased in the english locale for compatibility. Will be truncated to 64 characters long.</b>
-     *
+     * <p>
      * This will be used to identify your mod for third parties (other mods), it will be used to identify your mod for registries such as block and item registries.
      * By default, you will have a resource domain that matches the modid. All these uses require that constraints are imposed on the format of the modid.
      */
@@ -92,53 +80,53 @@
 
     /**
      * A version string for this mod.
-     *
+     * <p>
      * The version string here should be just numbers separated by dots,
      * to make specifying {@link #dependencies()} simple for other mods.
-     *
+     * <p>
      * See also: <a href="https://cwiki.apache.org/confluence/display/MAVENOLD/Versioning">"Versioning" on Maven Wiki</a>
      */
     String version() default "";
 
     /**
      * A dependency string for this mod, which specifies which mod(s) it depends on in order to run.
-     *
+     * <p>
      * A dependency string must start with a combination of these prefixes, separated by "-":
-     *     [before, after], [required], [client, server]
-     *     At least one "before", "after", or "required" must be specified.
+     * [before, after], [required], [client, server]
+     * At least one "before", "after", or "required" must be specified.
      * Then ":" and the mod id.
      * Then a version range should be specified for the mod by adding "@" and the version range.
-     *     The version range format is described in the javadoc here:
-     *     {@link VersionRange#createFromVersionSpec(java.lang.String)}
+     * The version range format is described in the javadoc here:
+     * {@link VersionRange#createFromVersionSpec(java.lang.String)}
      * Then a ";".
-     *
+     * <p>
      * If a "required" mod is missing, or a mod exists with a version outside the specified range,
      * the game will not start and an error screen will tell the player which versions are required.
-     *
+     * <p>
      * Example:
-     *     Our example mod:
-     *      * depends on Forge and uses new features that were introduced in Forge version 14.21.1.2395
-     *         "required:forge@[14.21.1.2395,);"
-     *
-     *          1.12.2 Note: for compatibility with Forge older than 14.23.0.2501 the syntax must follow this older format:
-     *          "required-after:forge@[14.21.1.2395,);"
-     *          For more explanation see https://github.com/MinecraftForge/MinecraftForge/issues/4918
-     *
-     *      * is a dedicated addon to mod1 and has to have its event handlers run after mod1's are run,
-     *         "required-after:mod1;"
-     *      * has optional integration with mod2 which depends on features introduced in mod2 version 4.7.0,
-     *         "after:mod2@[4.7.0,);"
-     *      * depends on a client-side-only rendering library called rendermod
-     *         "required-client:rendermod;"
-     *
-     *     The full dependencies string is all of those combined:
-     *         "required:forge@[14.21.1.2395,);required-after:mod1;after:mod2@[4.7.0,);required-client:rendermod;"
-     *
-     *     This will stop the game and display an error message if any of these is true:
-     *         The installed forge is too old,
-     *         mod1 is missing,
-     *         an old version of mod2 is present,
-     *         rendermod is missing on the client.
+     * Our example mod:
+     * * depends on Forge and uses new features that were introduced in Forge version 14.21.1.2395
+     * "required:forge@[14.21.1.2395,);"
+     * <p>
+     * 1.12.2 Note: for compatibility with Forge older than 14.23.0.2501 the syntax must follow this older format:
+     * "required-after:forge@[14.21.1.2395,);"
+     * For more explanation see https://github.com/MinecraftForge/MinecraftForge/issues/4918
+     * <p>
+     * * is a dedicated addon to mod1 and has to have its event handlers run after mod1's are run,
+     * "required-after:mod1;"
+     * * has optional integration with mod2 which depends on features introduced in mod2 version 4.7.0,
+     * "after:mod2@[4.7.0,);"
+     * * depends on a client-side-only rendering library called rendermod
+     * "required-client:rendermod;"
+     * <p>
+     * The full dependencies string is all of those combined:
+     * "required:forge@[14.21.1.2395,);required-after:mod1;after:mod2@[4.7.0,);required-client:rendermod;"
+     * <p>
+     * This will stop the game and display an error message if any of these is true:
+     * The installed forge is too old,
+     * mod1 is missing,
+     * an old version of mod2 is present,
+     * rendermod is missing on the client.
      */
     String dependencies() default "";
 
@@ -165,14 +153,16 @@
      * The default ("empty string") indicates that the currently RUNNING minecraft version is acceptable.
      * This means ANY version that the end user adds the mod to. Modders PLEASE set this.
      * FML will refuse to run with an error if the minecraft version is not in this range across all mods.
+     *
      * @return A version range as specified by the maven version range specification or the empty string
      */
     String acceptedMinecraftVersions() default "";
+
     /**
      * A replacement for the no-longer-existing "versionRange" of NetworkMod. Specify a remote version range
      * that this mod will accept as valid. Defaults to nothing, which is interpreted as "only this version".
      * Another special value is '*' which means accept all versions.
-     *
+     * <p>
      * This is ignored if there is a {@link NetworkCheckHandler} annotation on a method in this class.
      *
      * @return A version range as specified by the maven version range specification or the empty string
@@ -182,16 +172,18 @@
     /**
      * A version range specifying compatible save version information. If your mod follows good version numbering
      * practice <a href="http://semver.org/">Like this (http://semver.org/)</a> then this should be sufficient.
-     *
+     * <p>
      * Advanced users can specify a {@link SaveInspectionHandler} instead.
+     *
      * @return A version range as specified by the maven version range specification or the empty string
      */
     String acceptableSaveVersions() default "";
+
     /**
      * Specifying this field allows for a mod to expect a signed jar with a fingerprint matching this value.
      * The fingerprint should be SHA-1 encoded, lowercase with ':' removed. An empty value indicates that
      * the mod is not expecting to be signed.
-     *
+     * <p>
      * Any incorrectness of the fingerprint, be it missing or wrong, will result in the {@link FMLFingerprintViolationEvent}
      * event firing <i>prior to any other event on the mod</i>.
      *
@@ -210,7 +202,7 @@
     /**
      * The language adapter to be used to load this mod. This overrides the value of modLanguage. The class must have a
      * public zero variable constructor and implement {@link ILanguageAdapter} just like the Java and Scala adapters.
-     *
+     * <p>
      * A class with an invalid constructor or that doesn't implement {@link ILanguageAdapter} will throw an exception and
      * halt loading.
      *
@@ -242,6 +234,7 @@
      * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated
      * version of this mod and notify the end user. For more information see ForgeVersion.
      * Format is defined here: https://gist.github.com/LexManos/7aacb9aa991330523884
+     *
      * @return URL to update metadata json
      */
     String updateJSON() default "";
@@ -249,39 +242,43 @@
     /**
      * A list of custom properties for this mod. Completely up to the mod author if/when they
      * want to put anything in here.
+     *
      * @return an optional list of custom properties
      */
     CustomProperty[] customProperties() default {};
 
     /**
      * A custom key => value property pair for use with {@link Mod#customProperties()}
-     * @author cpw
      *
+     * @author cpw
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target({})
-    @interface CustomProperty
-    {
+    @interface CustomProperty {
         /**
          * A key. Should be unique.
+         *
          * @return A key
          */
         String k();
+
         /**
          * A value. Can be anything.
+         *
          * @return A value
          */
         String v();
     }
+
     /**
      * Marks the associated method as handling an FML lifecycle event.
      * The method must have a single parameter, one of the following types. This annotation
      * replaces the multiple different annotations that previously were used.
-     *
+     * <p>
      * Current event classes. This first section is standard lifecycle events. They are dispatched
      * at various phases as the game starts. Each event should have information useful to that
      * phase of the lifecycle. They are fired in this order.
-     *
+     * <p>
      * These suggestions are mostly just suggestions on what to do in each event.
      * <ul>
      * <li> {@link FMLPreInitializationEvent} : Run before anything else. Read your config, create blocks,
@@ -310,17 +307,17 @@
      * </ul>
      *
      * @author cpw
-     *
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.METHOD)
-    @interface EventHandler{}
+    @interface EventHandler {
+    }
 
     /**
      * Populate the annotated field with the mod instance based on the specified ModId. This can be used
      * to retrieve instances of other mods.
-     * @author cpw
      *
+     * @author cpw
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.FIELD)
@@ -336,10 +333,11 @@
          */
         String owner() default "";
     }
+
     /**
      * Populate the annotated field with the mod's metadata.
-     * @author cpw
      *
+     * @author cpw
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.FIELD)
@@ -358,8 +356,8 @@
 
     /**
      * Mod instance factory method. Should return an instance of the mod. Applies only to static methods on the same class as {@link Mod}.
-     * @author cpw
      *
+     * @author cpw
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.METHOD)
@@ -372,11 +370,12 @@
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.TYPE)
     @interface EventBusSubscriber {
-        Side[] value() default { Side.CLIENT, Side.SERVER };
+        Side[] value() default {Side.CLIENT, Side.SERVER};
 
         /**
          * Optional value, only nessasary if tis annotation is not on the same class that has a @Mod annotation.
          * Needed to prevent early classloading of classes not owned by your mod.
+         *
          * @return
          */
         String modid() default "";
