--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/ASMTransformerWrapper.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/ASMTransformerWrapper.java
@@ -19,6 +19,17 @@
 
 package net.minecraftforge.fml.common.asm;
 
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.collect.Maps;
+import net.minecraft.launchwrapper.IClassTransformer;
+import net.minecraft.launchwrapper.LaunchClassLoader;
+import org.objectweb.asm.*;
+import org.objectweb.asm.commons.GeneratorAdapter;
+import org.objectweb.asm.commons.Method;
+
+import javax.annotation.Nullable;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -29,118 +40,80 @@
 import java.security.Permission;
 import java.util.Map;
 
-import net.minecraft.launchwrapper.IClassTransformer;
-import net.minecraft.launchwrapper.LaunchClassLoader;
-
-import org.objectweb.asm.ClassVisitor;
-import org.objectweb.asm.ClassWriter;
-import org.objectweb.asm.FieldVisitor;
-import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.Type;
-import org.objectweb.asm.commons.GeneratorAdapter;
-import org.objectweb.asm.commons.Method;
-
-import com.google.common.cache.CacheBuilder;
-import com.google.common.cache.CacheLoader;
-import com.google.common.cache.LoadingCache;
-import com.google.common.collect.Maps;
-
-import javax.annotation.Nullable;
-
-public class ASMTransformerWrapper
-{
+public class ASMTransformerWrapper {
     private static final Map<String, String> wrapperModMap = Maps.newHashMap();
     private static final Map<String, String> wrapperParentMap = Maps.newHashMap();
 
     private static final LoadingCache<String, byte[]> wrapperCache = CacheBuilder.newBuilder()
-        .maximumSize(30)
-        .weakValues()
-        .build(new CacheLoader<String, byte[]>()
-        {
-            @Override
-            public byte[] load(String file) throws Exception
-            {
-                return makeWrapper(file);
-            }
-        });
+            .maximumSize(30)
+            .weakValues()
+            .build(new CacheLoader<String, byte[]>() {
+                @Override
+                public byte[] load(String file) throws Exception {
+                    return makeWrapper(file);
+                }
+            });
 
     private static final URL asmGenRoot;
     private static boolean injected = false;
 
-    static
-    {
-        try
-        {
+    static {
+        try {
             asmGenRoot = new URL("asmgen", null, -1, "/", new ASMGenHandler());
-        }
-        catch(MalformedURLException e)
-        {
+        } catch (MalformedURLException e) {
             throw new RuntimeException(e);
         }
     }
 
-    private static class ASMGenHandler extends URLStreamHandler
-    {
+    private static class ASMGenHandler extends URLStreamHandler {
         @Override
         @Nullable
-        protected URLConnection openConnection(URL url) throws IOException
-        {
+        protected URLConnection openConnection(URL url) throws IOException {
             String file = url.getFile();
-            if(file.equals("/"))
-            {
-                return new URLConnection(url)
-                {
+            if (file.equals("/")) {
+                return new URLConnection(url) {
                     @Override
-                    public void connect() throws IOException
-                    {
+                    public void connect() throws IOException {
                         throw new UnsupportedOperationException();
                     }
                 };
             }
-            if(!file.startsWith("/")) throw new RuntimeException("Malformed URL: " + url);
+            if (!file.startsWith("/")) throw new RuntimeException("Malformed URL: " + url);
             file = file.substring(1);
-            if(wrapperModMap.containsKey(file))
-            {
+            if (wrapperModMap.containsKey(file)) {
                 return new ASMGenConnection(url, file);
             }
             return null;
         }
     }
 
-    private static class ASMGenConnection extends URLConnection
-    {
+    private static class ASMGenConnection extends URLConnection {
         private final String file;
 
-        protected ASMGenConnection(URL url, String file)
-        {
+        protected ASMGenConnection(URL url, String file) {
             super(url);
             this.file = file;
         }
 
         @Override
-        public void connect() throws IOException
-        {
+        public void connect() throws IOException {
             throw new UnsupportedOperationException();
         }
 
         @Override
-        public InputStream getInputStream()
-        {
+        public InputStream getInputStream() {
             return new ByteArrayInputStream(wrapperCache.getUnchecked(file));
         }
 
         @Override
         @Nullable
-        public Permission getPermission()
-        {
+        public Permission getPermission() {
             return null;
         }
     }
 
-    public static String getTransformerWrapper(LaunchClassLoader launchLoader, String parentClass, String coreMod)
-    {
-        if(!injected)
-        {
+    public static String getTransformerWrapper(LaunchClassLoader launchLoader, String parentClass, String coreMod) {
+        if (!injected) {
             injected = true;
             launchLoader.addURL(asmGenRoot);
         }
@@ -152,16 +125,13 @@
         return name;
     }
 
-    private static byte[] makeWrapper(String fileName)
-    {
-        if(!wrapperModMap.containsKey(fileName) || !wrapperParentMap.containsKey(fileName) || !fileName.endsWith(".class"))
-        {
+    private static byte[] makeWrapper(String fileName) {
+        if (!wrapperModMap.containsKey(fileName) || !wrapperParentMap.containsKey(fileName) || !fileName.endsWith(".class")) {
             throw new IllegalArgumentException("makeWrapper called with strange argument: " + fileName);
         }
         String name = fileName.substring(0, fileName.length() - ".class".length());
 
-        try
-        {
+        try {
             Type wrapper = Type.getType(TransformerWrapper.class);
 
             ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
@@ -190,80 +160,62 @@
             writer.visitEnd();
 
             return writer.toByteArray();
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new RuntimeException(e);
         }
     }
 
-    private static String getWrapperName(String parentClass)
-    {
+    private static String getWrapperName(String parentClass) {
         return "$wrapper." + parentClass;
     }
 
     @SuppressWarnings("unused")
-	private static class WrapperVisitor extends ClassVisitor
-    {
+    private static class WrapperVisitor extends ClassVisitor {
         private final String name;
         private final String parentClass;
 
-        public WrapperVisitor(ClassVisitor cv, String name, String parentClass)
-        {
+        public WrapperVisitor(ClassVisitor cv, String name, String parentClass) {
             super(Opcodes.ASM5, cv);
             this.name = name.replace('.', '/');
             this.parentClass = parentClass;
         }
 
         @Override
-        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces)
-        {
+        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
             super.visit(version, access, this.name, signature, superName, interfaces);
         }
 
         @Override
-        public FieldVisitor visitField(int access, String name, String desc, String signature, Object value)
-        {
-            if(name.equals("parentClass"))
-            {
+        public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
+            if (name.equals("parentClass")) {
                 return super.visitField(access, name, desc, signature, parentClass);
             }
             return super.visitField(access, name, desc, signature, value);
         }
     }
 
-    public static abstract class TransformerWrapper implements IClassTransformer
-    {
+    public static abstract class TransformerWrapper implements IClassTransformer {
         private final IClassTransformer parent;
 
-        public TransformerWrapper()
-        {
-            try
-            {
-                this.parent = (IClassTransformer)this.getClass().getClassLoader().loadClass(getParentClass()).newInstance();
-            }
-            catch(Exception e)
-            {
+        public TransformerWrapper() {
+            try {
+                this.parent = (IClassTransformer) this.getClass().getClassLoader().loadClass(getParentClass()).newInstance();
+            } catch (Exception e) {
                 throw new RuntimeException(e);
             }
         }
 
         @Override
-        public byte[] transform(String name, String transformedName, byte[] basicClass)
-        {
-            try
-            {
+        public byte[] transform(String name, String transformedName, byte[] basicClass) {
+            try {
                 return parent.transform(name, transformedName, basicClass);
-            }
-            catch(Throwable e)
-            {
+            } catch (Throwable e) {
                 throw new TransformerException("Exception in class transformer " + parent + " from coremod " + getCoreMod(), e);
             }
         }
 
         @Override
-        public String toString()
-        {
+        public String toString() {
             return "TransformerWrapper(" + getParentClass() + ", " + getCoreMod() + ")";
         }
 
@@ -272,12 +224,10 @@
         protected abstract String getCoreMod();
     }
 
-    static class TransformerException extends RuntimeException
-    {
+    static class TransformerException extends RuntimeException {
         private static final long serialVersionUID = -6616232415696157218L;
 
-        public TransformerException(String message, Throwable cause)
-        {
+        public TransformerException(String message, Throwable cause) {
             super(message, cause);
         }
     }
