--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/transformers/TerminalTransformer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/transformers/TerminalTransformer.java
@@ -19,17 +19,14 @@
 
 package net.minecraftforge.fml.common.asm.transformers;
 
-import org.objectweb.asm.*;
-
 import net.minecraft.launchwrapper.IClassTransformer;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.relauncher.FMLSecurityManager.ExitTrappedException;
+import org.objectweb.asm.*;
 
-public class TerminalTransformer implements IClassTransformer
-{
+public class TerminalTransformer implements IClassTransformer {
     @Override
-    public byte[] transform(String name, String transformedName, byte[] basicClass)
-    {
+    public byte[] transform(String name, String transformedName, byte[] basicClass) {
         if (basicClass == null) return null;
         ClassReader reader = new ClassReader(basicClass);
         ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS);
@@ -42,47 +39,39 @@
         return writer.toByteArray();
     }
 
-    public static class ExitVisitor extends ClassVisitor
-    {
+    public static class ExitVisitor extends ClassVisitor {
         private String clsName = null;
         private boolean dirty;
         private static final String callbackOwner = org.objectweb.asm.Type.getInternalName(ExitVisitor.class);
 
-        private ExitVisitor(ClassVisitor cv)
-        {
+        private ExitVisitor(ClassVisitor cv) {
             super(Opcodes.ASM5, cv);
         }
 
         @Override
-        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces)
-        {
+        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
             super.visit(version, access, name, signature, superName, interfaces);
             this.clsName = name;
         }
 
         @Override
-        public MethodVisitor visitMethod(int mAccess, final String mName, final String mDesc, String mSignature, String[] mExceptions)
-        {
+        public MethodVisitor visitMethod(int mAccess, final String mName, final String mDesc, String mSignature, String[] mExceptions) {
             final boolean warn = !(clsName.equals("net/minecraft/client/Minecraft") ||
-                                   clsName.equals("net/minecraft/server/dedicated/DedicatedServer") ||
-                                   clsName.equals("net/minecraft/server/dedicated/ServerHangWatchdog") ||
-                                   clsName.equals("net/minecraft/server/dedicated/ServerHangWatchdog$1") ||
-                                   clsName.equals("net/minecraftforge/fml/common/FMLCommonHandler") ||
-                                   clsName.startsWith("com/jcraft/jogg/") ||
-                                   clsName.startsWith("scala/sys/") ||
-                                   clsName.startsWith("net/minecraft/server/gui/MinecraftServerGui") ||
-                                   clsName.startsWith("com/sun/jna/")
-                                   );
+                    clsName.equals("net/minecraft/server/dedicated/DedicatedServer") ||
+                    clsName.equals("net/minecraft/server/dedicated/ServerHangWatchdog") ||
+                    clsName.equals("net/minecraft/server/dedicated/ServerHangWatchdog$1") ||
+                    clsName.equals("net/minecraftforge/fml/common/FMLCommonHandler") ||
+                    clsName.startsWith("com/jcraft/jogg/") ||
+                    clsName.startsWith("scala/sys/") ||
+                    clsName.startsWith("net/minecraft/server/gui/MinecraftServerGui") ||
+                    clsName.startsWith("com/sun/jna/")
+            );
 
-            return new MethodVisitor(Opcodes.ASM5, super.visitMethod(mAccess, mName, mDesc, mSignature, mExceptions))
-            {
+            return new MethodVisitor(Opcodes.ASM5, super.visitMethod(mAccess, mName, mDesc, mSignature, mExceptions)) {
                 @Override
-                public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean isIntf)
-                {
-                    if (opcode == Opcodes.INVOKESTATIC && owner.equals("java/lang/System") && name.equals("exit") && desc.equals("(I)V"))
-                    {
-                        if (warn)
-                        {
+                public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean isIntf) {
+                    if (opcode == Opcodes.INVOKESTATIC && owner.equals("java/lang/System") && name.equals("exit") && desc.equals("(I)V")) {
+                        if (warn) {
                             FMLLog.log.warn("=============================================================");
                             FMLLog.log.warn("MOD HAS DIRECT REFERENCE System.exit() THIS IS NOT ALLOWED REROUTING TO FML!");
                             FMLLog.log.warn("Offender: {}.{}{}", ExitVisitor.this.clsName, mName, mDesc);
@@ -92,11 +81,8 @@
                         owner = ExitVisitor.callbackOwner;
                         name = "systemExitCalled";
                         dirty = true;
-                    }
-                    else if (opcode == Opcodes.INVOKEVIRTUAL && owner.equals("java/lang/Runtime") && name.equals("exit") && desc.equals("(I)V"))
-                    {
-                        if (warn)
-                        {
+                    } else if (opcode == Opcodes.INVOKEVIRTUAL && owner.equals("java/lang/Runtime") && name.equals("exit") && desc.equals("(I)V")) {
+                        if (warn) {
                             FMLLog.log.warn("=============================================================");
                             FMLLog.log.warn("MOD HAS DIRECT REFERENCE Runtime.exit() THIS IS NOT ALLOWED REROUTING TO FML!");
                             FMLLog.log.warn("Offender: {}.{}{}", ExitVisitor.this.clsName, mName, mDesc);
@@ -108,11 +94,8 @@
                         name = "runtimeExitCalled";
                         desc = "(Ljava/lang/Runtime;I)V";
                         dirty = true;
-                    }
-                    else if (opcode == Opcodes.INVOKEVIRTUAL && owner.equals("java/lang/Runtime") && name.equals("halt") && desc.equals("(I)V"))
-                    {
-                        if (warn)
-                        {
+                    } else if (opcode == Opcodes.INVOKEVIRTUAL && owner.equals("java/lang/Runtime") && name.equals("halt") && desc.equals("(I)V")) {
+                        if (warn) {
                             FMLLog.log.warn("=============================================================");
                             FMLLog.log.warn("MOD HAS DIRECT REFERENCE Runtime.halt() THIS IS NOT ALLOWED REROUTING TO FML!");
                             FMLLog.log.warn("Offendor: {}.{}{}", ExitVisitor.this.clsName, mName, mDesc);
@@ -132,27 +115,24 @@
         }
 
         // Intercept System.exit, and check if the caller is allowed to use it, if not wrap it in a ExitTrappedException
-        public static void systemExitCalled(int status)
-        {
+        public static void systemExitCalled(int status) {
             ExitVisitor.checkAccess();
             System.exit(status);
         }
+
         // Intercept Runtime.getRuntime().exit, and check if the caller is allowed to use it, if not wrap it in a ExitTrappedException
-        public static void runtimeExitCalled(Runtime runtime, int status)
-        {
+        public static void runtimeExitCalled(Runtime runtime, int status) {
             ExitVisitor.checkAccess();
             runtime.exit(status);
         }
 
         // Intercept Runtime.getRuntime().halt, and check if the caller is allowed to use it, if not wrap it in a ExitTrappedException
-        public static void runtimeHaltCalled(Runtime runtime, int status)
-        {
+        public static void runtimeHaltCalled(Runtime runtime, int status) {
             ExitVisitor.checkAccess();
             runtime.halt(status);
         }
 
-        private static void checkAccess()
-        {
+        private static void checkAccess() {
             StackTraceElement[] cause = Thread.currentThread().getStackTrace();
 
             String callingClass = cause.length > 2 ? cause[3].getClassName() : "none";
@@ -160,14 +140,13 @@
             // FML is allowed to call system exit and the Minecraft applet (from the quit button), and the dedicated server (from itself)
             boolean allowed = false;
             allowed |= callingClass.startsWith("net.minecraftforge.fml.");
-            allowed |= callingClass.equals("net.minecraft.client.Minecraft")                 && callingParent.equals("net.minecraft.client.Minecraft");
-            allowed |= callingClass.equals("net.minecraft.server.gui.MinecraftServerGui$1")  && callingParent.equals("java.awt.AWTEventMulticaster");
+            allowed |= callingClass.equals("net.minecraft.client.Minecraft") && callingParent.equals("net.minecraft.client.Minecraft");
+            allowed |= callingClass.equals("net.minecraft.server.gui.MinecraftServerGui$1") && callingParent.equals("java.awt.AWTEventMulticaster");
             allowed |= callingClass.equals("net.minecraft.server.dedicated.DedicatedServer") && callingParent.equals("net.minecraft.server.MinecraftServer");
             allowed |= callingClass.equals("net.minecraft.server.dedicated.ServerHangWatchdog");
             allowed |= callingClass.equals("net.minecraft.server.dedicated.ServerHangWatchdog$1");
 
-            if (!allowed)
-            {
+            if (!allowed) {
                 throw new ExitTrappedException();
             }
         }
