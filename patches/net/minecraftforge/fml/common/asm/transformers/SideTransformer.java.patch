--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/transformers/SideTransformer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/transformers/SideTransformer.java
@@ -19,57 +19,43 @@
 
 package net.minecraftforge.fml.common.asm.transformers;
 
+import net.minecraft.launchwrapper.IClassTransformer;
+import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
+import net.minecraftforge.fml.relauncher.SideOnly;
+import org.objectweb.asm.*;
+import org.objectweb.asm.tree.*;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 
-import net.minecraft.launchwrapper.IClassTransformer;
-import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
-import net.minecraftforge.fml.relauncher.SideOnly;
-
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.ClassWriter;
-import org.objectweb.asm.Handle;
-import org.objectweb.asm.MethodVisitor;
-import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.Type;
-import org.objectweb.asm.tree.AbstractInsnNode;
-import org.objectweb.asm.tree.AnnotationNode;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.FieldNode;
-import org.objectweb.asm.tree.MethodNode;
-
-public class SideTransformer implements IClassTransformer
-{
+public class SideTransformer implements IClassTransformer {
     private static String SIDE = FMLLaunchHandler.side().name();
     private static final boolean DEBUG = false;
+
     @Override
-    public byte[] transform(String name, String transformedName, byte[] bytes)
-    {
-        if (bytes == null) { return null; }
+    public byte[] transform(String name, String transformedName, byte[] bytes) {
+        if (bytes == null) {
+            return null;
+        }
 
         ClassNode classNode = new ClassNode();
         ClassReader classReader = new ClassReader(bytes);
         classReader.accept(classNode, 0);
 
-        if (remove(classNode.visibleAnnotations, SIDE))
-        {
-            if (DEBUG)
-            {
+        if (remove(classNode.visibleAnnotations, SIDE)) {
+            if (DEBUG) {
                 System.out.println(String.format("Attempted to load class %s for invalid side %s", classNode.name, SIDE));
             }
             throw new RuntimeException(String.format("Attempted to load class %s for invalid side %s", classNode.name, SIDE));
         }
 
         Iterator<FieldNode> fields = classNode.fields.iterator();
-        while(fields.hasNext())
-        {
+        while (fields.hasNext()) {
             FieldNode field = fields.next();
-            if (remove(field.visibleAnnotations, SIDE))
-            {
-                if (DEBUG)
-                {
+            if (remove(field.visibleAnnotations, SIDE)) {
+                if (DEBUG) {
                     System.out.println(String.format("Removing Field: %s.%s", classNode.name, field.name));
                 }
                 fields.remove();
@@ -78,13 +64,10 @@
 
         LambdaGatherer lambdaGatherer = new LambdaGatherer();
         Iterator<MethodNode> methods = classNode.methods.iterator();
-        while(methods.hasNext())
-        {
+        while (methods.hasNext()) {
             MethodNode method = methods.next();
-            if (remove(method.visibleAnnotations, SIDE))
-            {
-                if (DEBUG)
-                {
+            if (remove(method.visibleAnnotations, SIDE)) {
+                if (DEBUG) {
                     System.out.println(String.format("Removing Method: %s.%s%s", classNode.name, method.name, method.desc));
                 }
                 methods.remove();
@@ -94,20 +77,15 @@
 
         // remove dynamic synthetic lambda methods that are inside of removed methods
         for (List<Handle> dynamicLambdaHandles = lambdaGatherer.getDynamicLambdaHandles();
-             !dynamicLambdaHandles.isEmpty(); dynamicLambdaHandles = lambdaGatherer.getDynamicLambdaHandles())
-        {
+             !dynamicLambdaHandles.isEmpty(); dynamicLambdaHandles = lambdaGatherer.getDynamicLambdaHandles()) {
             lambdaGatherer = new LambdaGatherer();
             methods = classNode.methods.iterator();
-            while (methods.hasNext())
-            {
+            while (methods.hasNext()) {
                 MethodNode method = methods.next();
                 if ((method.access & Opcodes.ACC_SYNTHETIC) == 0) continue;
-                for (Handle dynamicLambdaHandle : dynamicLambdaHandles)
-                {
-                    if (method.name.equals(dynamicLambdaHandle.getName()) && method.desc.equals(dynamicLambdaHandle.getDesc()))
-                    {
-                        if (DEBUG)
-                        {
+                for (Handle dynamicLambdaHandle : dynamicLambdaHandles) {
+                    if (method.name.equals(dynamicLambdaHandle.getName()) && method.desc.equals(dynamicLambdaHandle.getDesc())) {
+                        if (DEBUG) {
                             System.out.println(String.format("Removing Method: %s.%s%s", classNode.name, method.name, method.desc));
                         }
                         methods.remove();
@@ -122,28 +100,19 @@
         return writer.toByteArray();
     }
 
-    private boolean remove(List<AnnotationNode> anns, String side)
-    {
-        if (anns == null)
-        {
+    private boolean remove(List<AnnotationNode> anns, String side) {
+        if (anns == null) {
             return false;
         }
-        for (AnnotationNode ann : anns)
-        {
-            if (ann.desc.equals(Type.getDescriptor(SideOnly.class)))
-            {
-                if (ann.values != null)
-                {
-                    for (int x = 0; x < ann.values.size() - 1; x += 2)
-                    {
+        for (AnnotationNode ann : anns) {
+            if (ann.desc.equals(Type.getDescriptor(SideOnly.class))) {
+                if (ann.values != null) {
+                    for (int x = 0; x < ann.values.size() - 1; x += 2) {
                         Object key = ann.values.get(x);
-                        Object value = ann.values.get(x+1);
-                        if (key instanceof String && key.equals("value"))
-                        {
-                            if (value instanceof String[] )
-                            {
-                                if (!((String[])value)[1].equals(side))
-                                {
+                        Object value = ann.values.get(x + 1);
+                        if (key instanceof String && key.equals("value")) {
+                            if (value instanceof String[]) {
+                                if (!((String[]) value)[1].equals(side)) {
                                     return true;
                                 }
                             }
@@ -167,28 +136,23 @@
 
         public void accept(MethodNode method) {
             ListIterator<AbstractInsnNode> insnNodeIterator = method.instructions.iterator();
-            while (insnNodeIterator.hasNext())
-            {
+            while (insnNodeIterator.hasNext()) {
                 AbstractInsnNode insnNode = insnNodeIterator.next();
-                if (insnNode.getType() == AbstractInsnNode.INVOKE_DYNAMIC_INSN)
-                {
+                if (insnNode.getType() == AbstractInsnNode.INVOKE_DYNAMIC_INSN) {
                     insnNode.accept(this);
                 }
             }
         }
 
         @Override
-        public void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs)
-        {
-            if (META_FACTORY.equals(bsm))
-            {
+        public void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs) {
+            if (META_FACTORY.equals(bsm)) {
                 Handle dynamicLambdaHandle = (Handle) bsmArgs[1];
                 dynamicLambdaHandles.add(dynamicLambdaHandle);
             }
         }
 
-        public List<Handle> getDynamicLambdaHandles()
-        {
+        public List<Handle> getDynamicLambdaHandles() {
             return dynamicLambdaHandles;
         }
     }
