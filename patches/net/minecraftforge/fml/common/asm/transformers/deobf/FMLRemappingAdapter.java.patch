--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/transformers/deobf/FMLRemappingAdapter.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/transformers/deobf/FMLRemappingAdapter.java
@@ -19,12 +19,7 @@
 
 package net.minecraftforge.fml.common.asm.transformers.deobf;
 
-import org.objectweb.asm.ClassVisitor;
-import org.objectweb.asm.FieldVisitor;
-import org.objectweb.asm.Handle;
-import org.objectweb.asm.MethodVisitor;
-import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.Type;
+import org.objectweb.asm.*;
 import org.objectweb.asm.commons.Remapper;
 import org.objectweb.asm.commons.RemappingClassAdapter;
 import org.objectweb.asm.commons.RemappingMethodAdapter;
@@ -33,8 +28,7 @@
 import java.util.List;
 
 public class FMLRemappingAdapter extends RemappingClassAdapter {
-    public FMLRemappingAdapter(ClassVisitor cv)
-    {
+    public FMLRemappingAdapter(ClassVisitor cv) {
         super(cv, FMLDeobfuscatingRemapper.INSTANCE);
     }
 
@@ -48,10 +42,8 @@
     );
 
     @Override
-    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces)
-    {
-        if (interfaces == null)
-        {
+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
+        if (interfaces == null) {
             interfaces = new String[0];
         }
         FMLDeobfuscatingRemapper.INSTANCE.mergeSuperMaps(name, superName, interfaces);
@@ -62,39 +54,33 @@
     public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
         FMLDeobfuscatingRemapper remapper = FMLDeobfuscatingRemapper.INSTANCE;
         FieldVisitor fv = cv.visitField(access,
-            remapper.mapMemberFieldName(className, name, desc),
-            remapper.mapDesc(desc), remapper.mapSignature(signature, true),
-            remapper.mapValue(value));
+                remapper.mapMemberFieldName(className, name, desc),
+                remapper.mapDesc(desc), remapper.mapSignature(signature, true),
+                remapper.mapValue(value));
         return createRemappingFieldAdapter(fv);
     }
 
     @Override
-    protected MethodVisitor createRemappingMethodAdapter(int access, String newDesc, MethodVisitor mv)
-    {
+    protected MethodVisitor createRemappingMethodAdapter(int access, String newDesc, MethodVisitor mv) {
         return new StaticFixingMethodVisitor(access, newDesc, mv, remapper);
     }
 
-    private static class StaticFixingMethodVisitor extends RemappingMethodAdapter
-    {
+    private static class StaticFixingMethodVisitor extends RemappingMethodAdapter {
 
-        public StaticFixingMethodVisitor(int access, String desc, MethodVisitor mv, Remapper remapper)
-        {
+        public StaticFixingMethodVisitor(int access, String desc, MethodVisitor mv, Remapper remapper) {
             super(access, desc, mv, remapper);
         }
 
         @Override
-        public void visitFieldInsn(int opcode, String originalType, String originalName, String desc)
-        {
+        public void visitFieldInsn(int opcode, String originalType, String originalName, String desc) {
             // This method solves the problem of a static field reference changing type. In all probability it is a
             // compatible change, however we need to fix up the desc to point at the new type
             String type = remapper.mapType(originalType);
             String fieldName = remapper.mapFieldName(originalType, originalName, desc);
             String newDesc = remapper.mapDesc(desc);
-            if (opcode == Opcodes.GETSTATIC && type.startsWith("net/minecraft/") && newDesc.startsWith("Lnet/minecraft/"))
-            {
+            if (opcode == Opcodes.GETSTATIC && type.startsWith("net/minecraft/") && newDesc.startsWith("Lnet/minecraft/")) {
                 String replDesc = FMLDeobfuscatingRemapper.INSTANCE.getStaticFieldType(originalType, originalName, type, fieldName);
-                if (replDesc != null)
-                {
+                if (replDesc != null) {
                     newDesc = remapper.mapDesc(replDesc);
                 }
             }
@@ -105,11 +91,9 @@
         }
 
         @Override
-        public void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs)
-        {
+        public void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs) {
             // Special case lambda metaFactory to get new name
-            if (META_FACTORIES.contains(bsm))
-            {
+            if (META_FACTORIES.contains(bsm)) {
                 String owner = Type.getReturnType(desc).getInternalName();
                 String odesc = ((Type) bsmArgs[0]).getDescriptor(); // First constant argument is "samMethodType - Signature and return type of method to be implemented by the function object."
                 name = remapper.mapMethodName(owner, name, odesc);
