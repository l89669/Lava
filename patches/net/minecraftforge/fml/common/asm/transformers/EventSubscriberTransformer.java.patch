--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/transformers/EventSubscriberTransformer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/transformers/EventSubscriberTransformer.java
@@ -19,11 +19,9 @@
 
 package net.minecraftforge.fml.common.asm.transformers;
 
-import java.lang.reflect.Modifier;
-import java.util.List;
-
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
 import net.minecraft.launchwrapper.IClassTransformer;
-
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.Opcodes;
@@ -31,14 +29,12 @@
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
 
-import com.google.common.base.Predicate;
-import com.google.common.collect.Iterables;
+import java.lang.reflect.Modifier;
+import java.util.List;
 
-public class EventSubscriberTransformer implements IClassTransformer
-{
+public class EventSubscriberTransformer implements IClassTransformer {
     @Override
-    public byte[] transform(String name, String transformedName, byte[] basicClass)
-    {
+    public byte[] transform(String name, String transformedName, byte[] basicClass) {
         if (basicClass == null) return null;
 
         ClassNode classNode = new ClassNode();
@@ -46,14 +42,11 @@
 
         boolean isSubscriber = false;
 
-        for (MethodNode methodNode : classNode.methods)
-        {
+        for (MethodNode methodNode : classNode.methods) {
             List<AnnotationNode> anns = methodNode.visibleAnnotations;
 
-            if (anns != null && Iterables.any(anns, SubscribeEventPredicate.INSTANCE))
-            {
-                if (Modifier.isPrivate(methodNode.access))
-                {
+            if (anns != null && Iterables.any(anns, SubscribeEventPredicate.INSTANCE)) {
+                if (Modifier.isPrivate(methodNode.access)) {
                     String msg = "Cannot apply @SubscribeEvent to private method %s/%s%s";
                     throw new RuntimeException(String.format(msg, classNode.name, methodNode.name, methodNode.desc));
                 }
@@ -63,8 +56,7 @@
             }
         }
 
-        if (isSubscriber)
-        {
+        if (isSubscriber) {
             classNode.access = toPublic(classNode.access);
 
             ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS);
@@ -75,18 +67,15 @@
         return basicClass;
     }
 
-    private static int toPublic(int access)
-    {
+    private static int toPublic(int access) {
         return access & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED) | Opcodes.ACC_PUBLIC;
     }
 
-    private static class SubscribeEventPredicate implements Predicate<AnnotationNode>
-    {
+    private static class SubscribeEventPredicate implements Predicate<AnnotationNode> {
         static final SubscribeEventPredicate INSTANCE = new SubscribeEventPredicate();
 
         @Override
-        public boolean apply(AnnotationNode input)
-        {
+        public boolean apply(AnnotationNode input) {
             return input.desc.equals("Lnet/minecraftforge/fml/common/eventhandler/SubscribeEvent;");
         }
     }
