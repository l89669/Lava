--- ../src-base/minecraft/net/minecraftforge/fml/common/versioning/Restriction.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/versioning/Restriction.java
@@ -22,7 +22,8 @@
  * under the License.
  */
 
-import net.minecraft.util.text.translation.I18n; //Forge: Added imports
+import net.minecraft.util.text.translation.I18n;
+
 import javax.annotation.Nullable;
 
 /**
@@ -30,8 +31,7 @@
  *
  * @author <a href="mailto:brett@apache.org">Brett Porter</a>
  */
-public class Restriction
-{
+public class Restriction {
     private final ArtifactVersion lowerBound;
 
     private final boolean lowerBoundInclusive;
@@ -40,11 +40,10 @@
 
     private final boolean upperBoundInclusive;
 
-    public static final Restriction EVERYTHING = new Restriction( null, false, null, false );
+    public static final Restriction EVERYTHING = new Restriction(null, false, null, false);
 
-    public Restriction( @Nullable ArtifactVersion lowerBound, boolean lowerBoundInclusive, @Nullable ArtifactVersion upperBound, //Forge: Added @Nullable
-                       boolean upperBoundInclusive )
-    {
+    public Restriction(@Nullable ArtifactVersion lowerBound, boolean lowerBoundInclusive, @Nullable ArtifactVersion upperBound, //Forge: Added @Nullable
+                       boolean upperBoundInclusive) {
         this.lowerBound = lowerBound;
         this.lowerBoundInclusive = lowerBoundInclusive;
         this.upperBound = upperBound;
@@ -52,52 +51,41 @@
     }
 
     @Nullable //Forge: Added @Nullable
-    public ArtifactVersion getLowerBound()
-    {
+    public ArtifactVersion getLowerBound() {
         return lowerBound;
     }
 
-    public boolean isLowerBoundInclusive()
-    {
+    public boolean isLowerBoundInclusive() {
         return lowerBoundInclusive;
     }
 
     @Nullable //Forge: Added @Nullable
-    public ArtifactVersion getUpperBound()
-    {
+    public ArtifactVersion getUpperBound() {
         return upperBound;
     }
 
-    public boolean isUpperBoundInclusive()
-    {
+    public boolean isUpperBoundInclusive() {
         return upperBoundInclusive;
     }
 
-    public boolean containsVersion( ArtifactVersion version )
-    {
-        if ( lowerBound != null )
-        {
-            int comparison = lowerBound.compareTo( version );
+    public boolean containsVersion(ArtifactVersion version) {
+        if (lowerBound != null) {
+            int comparison = lowerBound.compareTo(version);
 
-            if ( ( comparison == 0 ) && !lowerBoundInclusive )
-            {
+            if ((comparison == 0) && !lowerBoundInclusive) {
                 return false;
             }
-            if ( comparison > 0 )
-            {
+            if (comparison > 0) {
                 return false;
             }
         }
-        if ( upperBound != null )
-        {
-            int comparison = upperBound.compareTo( version );
+        if (upperBound != null) {
+            int comparison = upperBound.compareTo(version);
 
-            if ( ( comparison == 0 ) && !upperBoundInclusive )
-            {
+            if ((comparison == 0) && !upperBoundInclusive) {
                 return false;
             }
-            if ( comparison < 0 )
-            {
+            if (comparison < 0) {
                 return false;
             }
         }
@@ -106,27 +94,20 @@
     }
 
     @Override
-    public int hashCode()
-    {
+    public int hashCode() {
         int result = 13;
 
-        if ( lowerBound == null )
-        {
+        if (lowerBound == null) {
             result += 1;
-        }
-        else
-        {
+        } else {
             result += lowerBound.hashCode();
         }
 
         result *= lowerBoundInclusive ? 1 : 2;
 
-        if ( upperBound == null )
-        {
+        if (upperBound == null) {
             result -= 3;
-        }
-        else
-        {
+        } else {
             result -= upperBound.hashCode();
         }
 
@@ -136,50 +117,37 @@
     }
 
     @Override
-    public boolean equals( Object other )
-    {
-        if ( this == other )
-        {
+    public boolean equals(Object other) {
+        if (this == other) {
             return true;
         }
 
-        if ( !( other instanceof Restriction ) )
-        {
+        if (!(other instanceof Restriction)) {
             return false;
         }
 
         Restriction restriction = (Restriction) other;
-        if ( lowerBound != null )
-        {
-            if ( !lowerBound.equals( restriction.lowerBound ) )
-            {
+        if (lowerBound != null) {
+            if (!lowerBound.equals(restriction.lowerBound)) {
                 return false;
             }
-        }
-        else if ( restriction.lowerBound != null )
-        {
+        } else if (restriction.lowerBound != null) {
             return false;
         }
 
-        if ( lowerBoundInclusive != restriction.lowerBoundInclusive )
-        {
+        if (lowerBoundInclusive != restriction.lowerBoundInclusive) {
             return false;
         }
 
-        if ( upperBound != null )
-        {
-            if ( !upperBound.equals( restriction.upperBound ) )
-            {
+        if (upperBound != null) {
+            if (!upperBound.equals(restriction.upperBound)) {
                 return false;
             }
-        }
-        else if ( restriction.upperBound != null )
-        {
+        } else if (restriction.upperBound != null) {
             return false;
         }
 
-        if ( upperBoundInclusive != restriction.upperBoundInclusive )
-        {
+        if (upperBoundInclusive != restriction.upperBoundInclusive) {
             return false;
         }
 
@@ -187,77 +155,50 @@
     }
 
     @Override //Forge: Added @Override
-    public String toString()
-    {
+    public String toString() {
         StringBuilder buf = new StringBuilder();
 
-        buf.append( isLowerBoundInclusive() ? "[" : "(" );
-        if ( getLowerBound() != null )
-        {
-            buf.append( getLowerBound().toString() );
+        buf.append(isLowerBoundInclusive() ? "[" : "(");
+        if (getLowerBound() != null) {
+            buf.append(getLowerBound().toString());
         }
-        buf.append( "," );
-        if ( getUpperBound() != null )
-        {
-            buf.append( getUpperBound().toString() );
+        buf.append(",");
+        if (getUpperBound() != null) {
+            buf.append(getUpperBound().toString());
         }
-        buf.append( isUpperBoundInclusive() ? "]" : ")" );
+        buf.append(isUpperBoundInclusive() ? "]" : ")");
 
         return buf.toString();
     }
 
     //Forge: Added toStringFriendly, uses Minecraft's localization engine to create user friendly localized message.
-    public String toStringFriendly()
-    {
-        if ( getLowerBound() == null && getUpperBound() == null )
-        {
+    public String toStringFriendly() {
+        if (getLowerBound() == null && getUpperBound() == null) {
             return I18n.translateToLocal("fml.messages.version.restriction.any");
-        }
-        else if ( getLowerBound() != null && getUpperBound() != null )
-        {
-            if ( getLowerBound().getVersionString().equals(getUpperBound().getVersionString()) )
-            {
+        } else if (getLowerBound() != null && getUpperBound() != null) {
+            if (getLowerBound().getVersionString().equals(getUpperBound().getVersionString())) {
                 return getLowerBound().getVersionString();
-            }
-            else
-            {
-                if (isLowerBoundInclusive() && isUpperBoundInclusive())
-                {
+            } else {
+                if (isLowerBoundInclusive() && isUpperBoundInclusive()) {
                     return I18n.translateToLocalFormatted("fml.messages.version.restriction.bounded.inclusive", getLowerBound(), getUpperBound());
-                }
-                else if (isLowerBoundInclusive())
-                {
+                } else if (isLowerBoundInclusive()) {
                     return I18n.translateToLocalFormatted("fml.messages.version.restriction.bounded.upperexclusive", getLowerBound(), getUpperBound());
-                }
-                else if (isUpperBoundInclusive())
-                {
+                } else if (isUpperBoundInclusive()) {
                     return I18n.translateToLocalFormatted("fml.messages.version.restriction.bounded.lowerexclusive", getLowerBound(), getUpperBound());
-                }
-                else
-                {
+                } else {
                     return I18n.translateToLocalFormatted("fml.messages.version.restriction.bounded.exclusive", getLowerBound(), getUpperBound());
                 }
             }
-        }
-        else if ( getLowerBound() != null )
-        {
-            if ( isLowerBoundInclusive() )
-            {
+        } else if (getLowerBound() != null) {
+            if (isLowerBoundInclusive()) {
                 return I18n.translateToLocalFormatted("fml.messages.version.restriction.lower.inclusive", getLowerBound());
-            }
-            else
-            {
+            } else {
                 return I18n.translateToLocalFormatted("fml.messages.version.restriction.lower.exclusive", getLowerBound());
             }
-        }
-        else
-        {
-            if ( isUpperBoundInclusive() )
-            {
+        } else {
+            if (isUpperBoundInclusive()) {
                 return I18n.translateToLocalFormatted("fml.messages.version.restriction.upper.inclusive", getUpperBound());
-            }
-            else
-            {
+            } else {
                 return I18n.translateToLocalFormatted("fml.messages.version.restriction.upper.exclusive", getUpperBound());
             }
         }
