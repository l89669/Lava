--- ../src-base/minecraft/net/minecraftforge/fml/common/versioning/VersionParser.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/versioning/VersionParser.java
@@ -19,60 +19,49 @@
 
 package net.minecraftforge.fml.common.versioning;
 
-import java.util.List;
-
-import net.minecraftforge.fml.common.LoaderException;
-
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
+import net.minecraftforge.fml.common.LoaderException;
 
+import java.util.List;
+
 /**
  * Parses version strings according to the specification here:
  * http://docs.codehaus.org/display/MAVEN/Versioning
  * and allows for comparison of versions based on that document.
  * Bounded version specifications are defined as
  * https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html
- *
+ * <p>
  * Borrows heavily from maven version range management code
  *
  * @author cpw
- *
  */
-public class VersionParser
-{
+public class VersionParser {
     private static final Splitter SEPARATOR = Splitter.on('@').omitEmptyStrings().trimResults();
-    public static ArtifactVersion parseVersionReference(String labelledRef)
-    {
-        if (Strings.isNullOrEmpty(labelledRef))
-        {
+
+    public static ArtifactVersion parseVersionReference(String labelledRef) {
+        if (Strings.isNullOrEmpty(labelledRef)) {
             throw new RuntimeException(String.format("Empty reference %s", labelledRef));
         }
         List<String> parts = Lists.newArrayList(SEPARATOR.split(labelledRef));
-        if (parts.size()>2)
-        {
+        if (parts.size() > 2) {
             throw new RuntimeException(String.format("Invalid versioned reference %s", labelledRef));
         }
-        if (parts.size()==1)
-        {
+        if (parts.size() == 1) {
             return new DefaultArtifactVersion(parts.get(0), true);
         }
-        return new DefaultArtifactVersion(parts.get(0),parseRange(parts.get(1)));
+        return new DefaultArtifactVersion(parts.get(0), parseRange(parts.get(1)));
     }
 
-    public static boolean satisfies(ArtifactVersion target, ArtifactVersion source)
-    {
+    public static boolean satisfies(ArtifactVersion target, ArtifactVersion source) {
         return target.containsVersion(source);
     }
 
-    public static VersionRange parseRange(String range)
-    {
-        try
-        {
+    public static VersionRange parseRange(String range) {
+        try {
             return VersionRange.createFromVersionSpec(range);
-        }
-        catch (InvalidVersionSpecificationException e)
-        {
+        } catch (InvalidVersionSpecificationException e) {
             throw new LoaderException("Unable to parse a version range specification successfully " + range, e);
         }
     }
