--- ../src-base/minecraft/net/minecraftforge/fml/common/MetadataCollection.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/MetadataCollection.java
@@ -19,85 +19,63 @@
 
 package net.minecraftforge.fml.common;
 
+import com.google.common.collect.Maps;
+import com.google.gson.*;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+import net.minecraftforge.fml.common.versioning.ArtifactVersion;
+import net.minecraftforge.fml.common.versioning.VersionParser;
+
+import javax.annotation.Nullable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
-import net.minecraftforge.fml.common.versioning.ArtifactVersion;
-import net.minecraftforge.fml.common.versioning.VersionParser;
-
-import com.google.common.collect.Maps;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-import javax.annotation.Nullable;
-
-public class MetadataCollection
-{
+public class MetadataCollection {
     private String modListVersion;
     private ModMetadata[] modList;
     private Map<String, ModMetadata> metadatas = Maps.newHashMap();
 
-    public static MetadataCollection from(@Nullable InputStream inputStream, String sourceName)
-    {
-        if (inputStream == null)
-        {
+    public static MetadataCollection from(@Nullable InputStream inputStream, String sourceName) {
+        if (inputStream == null) {
             return new MetadataCollection();
         }
 
         InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
-        try
-        {
+        try {
             MetadataCollection collection;
             Gson gson = new GsonBuilder().registerTypeAdapter(ArtifactVersion.class, new ArtifactVersionAdapter()).create();
             JsonParser parser = new JsonParser();
             JsonElement rootElement = parser.parse(reader);
-            if (rootElement.isJsonArray())
-            {
+            if (rootElement.isJsonArray()) {
                 collection = new MetadataCollection();
                 JsonArray jsonList = rootElement.getAsJsonArray();
                 collection.modList = new ModMetadata[jsonList.size()];
                 int i = 0;
-                for (JsonElement mod : jsonList)
-                {
-                    collection.modList[i++]=gson.fromJson(mod, ModMetadata.class);
+                for (JsonElement mod : jsonList) {
+                    collection.modList[i++] = gson.fromJson(mod, ModMetadata.class);
                 }
-            }
-            else
-            {
+            } else {
                 collection = gson.fromJson(rootElement, MetadataCollection.class);
             }
             collection.parseModMetadataList();
             return collection;
-        }
-        catch (JsonParseException e)
-        {
+        } catch (JsonParseException e) {
             FMLLog.log.error("The mcmod.info file in {} cannot be parsed as valid JSON. It will be ignored", sourceName, e);
             return new MetadataCollection();
         }
     }
 
-    private void parseModMetadataList()
-    {
-        for (ModMetadata modMetadata : modList)
-        {
+    private void parseModMetadataList() {
+        for (ModMetadata modMetadata : modList) {
             metadatas.put(modMetadata.modId, modMetadata);
         }
     }
 
-    public ModMetadata getMetadataForId(String modId, Map<String, Object> extraData)
-    {
-        if (!metadatas.containsKey(modId))
-        {
+    public ModMetadata getMetadataForId(String modId, Map<String, Object> extraData) {
+        if (!metadatas.containsKey(modId)) {
             ModMetadata dummy = new ModMetadata();
             dummy.modId = modId;
             dummy.name = (String) extraData.get("name");
@@ -108,18 +86,15 @@
         return metadatas.get(modId);
     }
 
-    public static class ArtifactVersionAdapter extends TypeAdapter<ArtifactVersion>
-    {
+    public static class ArtifactVersionAdapter extends TypeAdapter<ArtifactVersion> {
 
         @Override
-        public void write(JsonWriter out, ArtifactVersion value) throws IOException
-        {
+        public void write(JsonWriter out, ArtifactVersion value) throws IOException {
             // no op - we never write these out
         }
 
         @Override
-        public ArtifactVersion read(JsonReader in) throws IOException
-        {
+        public ArtifactVersion read(JsonReader in) throws IOException {
             return VersionParser.parseVersionReference(in.nextString());
         }
 
