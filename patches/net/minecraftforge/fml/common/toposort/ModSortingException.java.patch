--- ../src-base/minecraft/net/minecraftforge/fml/common/toposort/ModSortingException.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/toposort/ModSortingException.java
@@ -19,8 +19,6 @@
 
 package net.minecraftforge.fml.common.toposort;
 
-import java.util.Set;
-
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraftforge.fml.client.GuiSortingProblem;
 import net.minecraftforge.fml.client.IDisplayableError;
@@ -29,14 +27,13 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ModSortingException extends EnhancedRuntimeException implements IDisplayableError
-{
+import java.util.Set;
+
+public class ModSortingException extends EnhancedRuntimeException implements IDisplayableError {
     private static final long serialVersionUID = 1L;
 
-    public class SortingExceptionData<T>
-    {
-        public SortingExceptionData(T node, Set<T> visitedNodes)
-        {
+    public class SortingExceptionData<T> {
+        public SortingExceptionData(T node, Set<T> visitedNodes) {
             this.firstBadNode = node;
             this.visitedNodes = visitedNodes;
         }
@@ -44,39 +41,34 @@
         private T firstBadNode;
         private Set<T> visitedNodes;
 
-        public T getFirstBadNode()
-        {
+        public T getFirstBadNode() {
             return firstBadNode;
         }
-        public Set<T> getVisitedNodes()
-        {
+
+        public Set<T> getVisitedNodes() {
             return visitedNodes;
         }
     }
 
     private SortingExceptionData<?> sortingExceptionData;
 
-    public <T> ModSortingException(String string, T node, Set<T> visitedNodes)
-    {
+    public <T> ModSortingException(String string, T node, Set<T> visitedNodes) {
         super(string);
         this.sortingExceptionData = new SortingExceptionData<T>(node, visitedNodes);
     }
 
     @SuppressWarnings("unchecked")
-    public <T> SortingExceptionData<T> getExceptionData()
-    {
+    public <T> SortingExceptionData<T> getExceptionData() {
         return (SortingExceptionData<T>) sortingExceptionData;
     }
 
     @Override
-    protected void printStackTrace(WrappedPrintStream stream)
-    {
+    protected void printStackTrace(WrappedPrintStream stream) {
         SortingExceptionData<ModContainer> exceptionData = getExceptionData();
         stream.println("A dependency cycle was detected in the input mod set so an ordering cannot be determined");
         stream.println("The first mod in the cycle is " + exceptionData.getFirstBadNode());
         stream.println("The mod cycle involves:");
-        for (ModContainer mc : exceptionData.getVisitedNodes())
-        {
+        for (ModContainer mc : exceptionData.getVisitedNodes()) {
             stream.println(String.format("\t%s : before: %s, after: %s", mc.toString(), mc.getDependants(), mc.getDependencies()));
         }
     }
@@ -84,8 +76,7 @@
 
     @Override
     @SideOnly(Side.CLIENT)
-    public GuiScreen createGui()
-    {
+    public GuiScreen createGui() {
         return new GuiSortingProblem(this);
     }
 }
