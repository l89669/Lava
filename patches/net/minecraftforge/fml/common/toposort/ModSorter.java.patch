--- ../src-base/minecraft/net/minecraftforge/fml/common/toposort/ModSorter.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/toposort/ModSorter.java
@@ -19,11 +19,7 @@
 
 package net.minecraftforge.fml.common.toposort;
 
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import net.minecraftforge.fml.common.DummyModContainer;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.ModAPIManager;
@@ -31,14 +27,15 @@
 import net.minecraftforge.fml.common.toposort.TopologicalSort.DirectedGraph;
 import net.minecraftforge.fml.common.versioning.ArtifactVersion;
 
-import com.google.common.collect.Maps;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * @author cpw
- *
  */
-public class ModSorter
-{
+public class ModSorter {
     private DirectedGraph<ModContainer> modGraph;
 
     private ModContainer beforeAll = new DummyModContainer("BeforeAll");
@@ -46,15 +43,13 @@
     private ModContainer before = new DummyModContainer("Before");
     private ModContainer after = new DummyModContainer("After");
 
-    public ModSorter(List<ModContainer> modList, Map<String, ModContainer> nameLookup)
-    {
+    public ModSorter(List<ModContainer> modList, Map<String, ModContainer> nameLookup) {
         HashMap<String, ModContainer> sortingNameLookup = Maps.newHashMap(nameLookup);
         ModAPIManager.INSTANCE.injectAPIModContainers(modList, sortingNameLookup);
         buildGraph(modList, sortingNameLookup);
     }
 
-    private void buildGraph(List<ModContainer> modList, Map<String, ModContainer> nameLookup)
-    {
+    private void buildGraph(List<ModContainer> modList, Map<String, ModContainer> nameLookup) {
         modGraph = new DirectedGraph<ModContainer>();
         modGraph.addNode(beforeAll);
         modGraph.addNode(before);
@@ -64,15 +59,12 @@
         modGraph.addEdge(beforeAll, before);
         modGraph.addEdge(after, afterAll);
 
-        for (ModContainer mod : modList)
-        {
+        for (ModContainer mod : modList) {
             modGraph.addNode(mod);
         }
 
-        for (ModContainer mod : modList)
-        {
-            if (mod.isImmutable())
-            {
+        for (ModContainer mod : modList) {
+            if (mod.isImmutable()) {
                 // Immutable mods are always before everything
                 modGraph.addEdge(beforeAll, mod);
                 modGraph.addEdge(mod, before);
@@ -81,20 +73,16 @@
             boolean preDepAdded = false;
             boolean postDepAdded = false;
 
-            for (ArtifactVersion dep : mod.getDependencies())
-            {
+            for (ArtifactVersion dep : mod.getDependencies()) {
                 preDepAdded = true;
 
                 String modid = dep.getLabel();
-                if (modid.equals("*"))
-                {
+                if (modid.equals("*")) {
                     // We are "after" everything
                     modGraph.addEdge(mod, afterAll);
                     modGraph.addEdge(after, mod);
                     postDepAdded = true;
-                }
-                else
-                {
+                } else {
                     modGraph.addEdge(before, mod);
                     if (nameLookup.containsKey(modid) || Loader.isModLoaded(modid)) {
                         modGraph.addEdge(nameLookup.get(modid), mod);
@@ -102,20 +90,16 @@
                 }
             }
 
-            for (ArtifactVersion dep : mod.getDependants())
-            {
+            for (ArtifactVersion dep : mod.getDependants()) {
                 postDepAdded = true;
 
                 String modid = dep.getLabel();
-                if (modid.equals("*"))
-                {
+                if (modid.equals("*")) {
                     // We are "before" everything
                     modGraph.addEdge(beforeAll, mod);
                     modGraph.addEdge(mod, before);
                     preDepAdded = true;
-                }
-                else
-                {
+                } else {
                     modGraph.addEdge(mod, after);
                     if (Loader.isModLoaded(modid)) {
                         modGraph.addEdge(mod, nameLookup.get(modid));
@@ -123,22 +107,19 @@
                 }
             }
 
-            if (!preDepAdded)
-            {
+            if (!preDepAdded) {
                 modGraph.addEdge(before, mod);
             }
 
-            if (!postDepAdded)
-            {
+            if (!postDepAdded) {
                 modGraph.addEdge(mod, after);
             }
         }
     }
 
-    public List<ModContainer> sort()
-    {
+    public List<ModContainer> sort() {
         List<ModContainer> sortedList = TopologicalSort.topologicalSort(modGraph);
-        sortedList.removeAll(Arrays.asList(new ModContainer[] {beforeAll, before, after, afterAll}));
+        sortedList.removeAll(Arrays.asList(new ModContainer[]{beforeAll, before, after, afterAll}));
         return sortedList;
     }
 }
