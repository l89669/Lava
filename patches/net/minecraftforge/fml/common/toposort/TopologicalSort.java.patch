--- ../src-base/minecraft/net/minecraftforge/fml/common/toposort/TopologicalSort.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/toposort/TopologicalSort.java
@@ -19,43 +19,27 @@
 
 package net.minecraftforge.fml.common.toposort;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Set;
-import java.util.SortedSet;
-import java.util.TreeSet;
-
-import net.minecraftforge.fml.common.FMLLog;
-
 import com.google.common.collect.Sets;
 import com.google.common.collect.Sets.SetView;
+import net.minecraftforge.fml.common.FMLLog;
 
+import java.util.*;
+
 /**
  * Topological sort for mod loading
- *
+ * <p>
  * Based on a variety of sources, including http://keithschwarz.com/interesting/code/?dir=topological-sort
- * @author cpw
  *
+ * @author cpw
  */
-public class TopologicalSort
-{
-    public static class DirectedGraph<T> implements Iterable<T>
-    {
+public class TopologicalSort {
+    public static class DirectedGraph<T> implements Iterable<T> {
         private final Map<T, SortedSet<T>> graph = new HashMap<T, SortedSet<T>>();
         private List<T> orderedNodes = new ArrayList<T>();
 
-        public boolean addNode(T node)
-        {
+        public boolean addNode(T node) {
             // Ignore nodes already added
-            if (graph.containsKey(node))
-            {
+            if (graph.containsKey(node)) {
                 return false;
             }
 
@@ -64,104 +48,88 @@
             return true;
         }
 
-        public void addEdge(T from, T to)
-        {
-            if (!(graph.containsKey(from) && graph.containsKey(to)))
-            {
+        public void addEdge(T from, T to) {
+            if (!(graph.containsKey(from) && graph.containsKey(to))) {
                 throw new NoSuchElementException("Missing nodes from graph");
             }
 
             graph.get(from).add(to);
         }
 
-        public void removeEdge(T from, T to)
-        {
-            if (!(graph.containsKey(from) && graph.containsKey(to)))
-            {
+        public void removeEdge(T from, T to) {
+            if (!(graph.containsKey(from) && graph.containsKey(to))) {
                 throw new NoSuchElementException("Missing nodes from graph");
             }
 
             graph.get(from).remove(to);
         }
 
-        public boolean edgeExists(T from, T to)
-        {
-            if (!(graph.containsKey(from) && graph.containsKey(to)))
-            {
+        public boolean edgeExists(T from, T to) {
+            if (!(graph.containsKey(from) && graph.containsKey(to))) {
                 throw new NoSuchElementException("Missing nodes from graph");
             }
 
             return graph.get(from).contains(to);
         }
 
-        public Set<T> edgesFrom(T from)
-        {
-            if (!graph.containsKey(from))
-            {
+        public Set<T> edgesFrom(T from) {
+            if (!graph.containsKey(from)) {
                 throw new NoSuchElementException("Missing node from graph");
             }
 
             return Collections.unmodifiableSortedSet(graph.get(from));
         }
+
         @Override
-        public Iterator<T> iterator()
-        {
+        public Iterator<T> iterator() {
             return orderedNodes.iterator();
         }
 
-        public int size()
-        {
+        public int size() {
             return graph.size();
         }
 
-        public boolean isEmpty()
-        {
+        public boolean isEmpty() {
             return graph.isEmpty();
         }
 
         @Override
-        public String toString()
-        {
+        public String toString() {
             return graph.toString();
         }
     }
 
     /**
      * Sort the input graph into a topologically sorted list
-     *
+     * <p>
      * Uses the reverse depth first search as outlined in ...
+     *
      * @param graph
      * @return The sorted mods list.
      */
-    public static <T> List<T> topologicalSort(DirectedGraph<T> graph)
-    {
+    public static <T> List<T> topologicalSort(DirectedGraph<T> graph) {
         DirectedGraph<T> rGraph = reverse(graph);
         List<T> sortedResult = new ArrayList<T>();
         Set<T> visitedNodes = new HashSet<T>();
         // A list of "fully explored" nodes. Leftovers in here indicate cycles in the graph
         Set<T> expandedNodes = new HashSet<T>();
 
-        for (T node : rGraph)
-        {
+        for (T node : rGraph) {
             explore(node, rGraph, sortedResult, visitedNodes, expandedNodes);
         }
 
         return sortedResult;
     }
 
-    public static <T> DirectedGraph<T> reverse(DirectedGraph<T> graph)
-    {
+    public static <T> DirectedGraph<T> reverse(DirectedGraph<T> graph) {
         DirectedGraph<T> result = new DirectedGraph<T>();
 
-        for (T node : graph)
-        {
+        for (T node : graph) {
             result.addNode(node);
         }
 
-        for (T from : graph)
-        {
-            for (T to : graph.edgesFrom(from))
-            {
+        for (T from : graph) {
+            for (T to : graph.edgesFrom(from)) {
                 result.addEdge(to, from);
             }
         }
@@ -169,14 +137,11 @@
         return result;
     }
 
-    public static <T> void explore(T node, DirectedGraph<T> graph, List<T> sortedResult, Set<T> visitedNodes, Set<T> expandedNodes)
-    {
+    public static <T> void explore(T node, DirectedGraph<T> graph, List<T> sortedResult, Set<T> visitedNodes, Set<T> expandedNodes) {
         // Have we been here before?
-        if (visitedNodes.contains(node))
-        {
+        if (visitedNodes.contains(node)) {
             // And have completed this node before
-            if (expandedNodes.contains(node))
-            {
+            if (expandedNodes.contains(node)) {
                 // Then we're fine
                 return;
             }
@@ -195,8 +160,7 @@
         visitedNodes.add(node);
 
         // Recursively explore inbound edges
-        for (T inbound : graph.edgesFrom(node))
-        {
+        for (T inbound : graph.edgesFrom(node)) {
             explore(inbound, graph, sortedResult, visitedNodes, expandedNodes);
         }
 
