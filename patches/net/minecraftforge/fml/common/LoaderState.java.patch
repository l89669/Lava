--- ../src-base/minecraft/net/minecraftforge/fml/common/LoaderState.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/LoaderState.java
@@ -19,28 +19,17 @@
 
 package net.minecraftforge.fml.common;
 
-import net.minecraftforge.fml.common.event.FMLConstructionEvent;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
-import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLServerAboutToStartEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartedEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
-import net.minecraftforge.fml.common.event.FMLServerStoppedEvent;
-import net.minecraftforge.fml.common.event.FMLServerStoppingEvent;
-import net.minecraftforge.fml.common.event.FMLStateEvent;
+import net.minecraftforge.fml.common.event.*;
 
 /**
  * The state enum used to help track state progression for the loader
- * @author cpw
  *
+ * @author cpw
  */
-public enum LoaderState
-{
-    NOINIT("Uninitialized",null),
-    LOADING("Loading",null),
-    CONSTRUCTING("Constructing mods",FMLConstructionEvent.class),
+public enum LoaderState {
+    NOINIT("Uninitialized", null),
+    LOADING("Loading", null),
+    CONSTRUCTING("Constructing mods", FMLConstructionEvent.class),
     PREINITIALIZATION("Pre-initializing mods", FMLPreInitializationEvent.class),
     INITIALIZATION("Initializing mods", FMLInitializationEvent.class),
     POSTINITIALIZATION("Post-initializing mods", FMLPostInitializationEvent.class),
@@ -50,88 +39,74 @@
     SERVER_STARTED("Server started", FMLServerStartedEvent.class),
     SERVER_STOPPING("Server stopping", FMLServerStoppingEvent.class),
     SERVER_STOPPED("Server stopped", FMLServerStoppedEvent.class),
-    ERRORED("Mod Loading errored",null);
+    ERRORED("Mod Loading errored", null);
 
 
     private Class<? extends FMLStateEvent> eventClass;
     private String name;
 
-    private LoaderState(String name, Class<? extends FMLStateEvent> event)
-    {
+    private LoaderState(String name, Class<? extends FMLStateEvent> event) {
         this.name = name;
         this.eventClass = event;
     }
 
-    public LoaderState transition(boolean errored)
-    {
-        if (errored)
-        {
+    public LoaderState transition(boolean errored) {
+        if (errored) {
             return ERRORED;
         }
         // stopping -> available
-        if (this == SERVER_STOPPED)
-        {
+        if (this == SERVER_STOPPED) {
             return AVAILABLE;
         }
-        return values()[ordinal() < values().length ? ordinal()+1 : ordinal()];
+        return values()[ordinal() < values().length ? ordinal() + 1 : ordinal()];
     }
 
-    public boolean hasEvent()
-    {
+    public boolean hasEvent() {
         return eventClass != null;
     }
 
-    public FMLStateEvent getEvent(Object... eventData)
-    {
-        try
-        {
-            return eventClass.getConstructor(Object[].class).newInstance((Object)eventData);
-        }
-        catch (ReflectiveOperationException e)
-        {
+    public FMLStateEvent getEvent(Object... eventData) {
+        try {
+            return eventClass.getConstructor(Object[].class).newInstance((Object) eventData);
+        } catch (ReflectiveOperationException e) {
             throw new RuntimeException(e);
         }
     }
-    public LoaderState requiredState()
-    {
+
+    public LoaderState requiredState() {
         if (this == NOINIT) return NOINIT;
-        return LoaderState.values()[this.ordinal()-1];
+        return LoaderState.values()[this.ordinal() - 1];
     }
-    
-    public String getPrettyName()
-    {
+
+    public String getPrettyName() {
         return name;
     }
-    
-    public enum ModState
-    {
-        UNLOADED       ("Unloaded",         "U"),
-        LOADED         ("Loaded",           "L"),
-        CONSTRUCTED    ("Constructed",      "C"),
-        PREINITIALIZED ("Pre-initialized",  "H"),
-        INITIALIZED    ("Initialized",      "I"),
+
+    public enum ModState {
+        UNLOADED("Unloaded", "U"),
+        LOADED("Loaded", "L"),
+        CONSTRUCTED("Constructed", "C"),
+        PREINITIALIZED("Pre-initialized", "H"),
+        INITIALIZED("Initialized", "I"),
         POSTINITIALIZED("Post-initialized", "J"),
-        AVAILABLE      ("Available",        "A"),
-        DISABLED       ("Disabled",         "D"),
-        ERRORED        ("Errored",          "E");
+        AVAILABLE("Available", "A"),
+        DISABLED("Disabled", "D"),
+        ERRORED("Errored", "E");
 
         private String label;
         private String marker;
 
-        private ModState(String label, String marker)
-        {
+        private ModState(String label, String marker) {
             this.label = label;
             this.marker = marker;
         }
 
         @Override
-        public String toString()
-        {
+        public String toString() {
             return this.label;
         }
 
-        public String getMarker()
-        {
+        public String getMarker() {
             return this.marker;
         }
     }
