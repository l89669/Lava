--- ../src-base/minecraft/net/minecraftforge/fml/common/eventhandler/ASMEventHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/eventhandler/ASMEventHandler.java
@@ -19,24 +19,21 @@
 
 package net.minecraftforge.fml.common.eventhandler;
 
-import static org.objectweb.asm.Opcodes.*;
-
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.lang.reflect.ParameterizedType;
-import java.util.HashMap;
-
+import com.google.common.collect.Maps;
 import net.minecraftforge.fml.common.ModContainer;
-
 import org.apache.logging.log4j.ThreadContext;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Type;
 
-import com.google.common.collect.Maps;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.ParameterizedType;
+import java.util.HashMap;
 
-public class ASMEventHandler implements IEventListener
-{
+import static org.objectweb.asm.Opcodes.*;
+
+public class ASMEventHandler implements IEventListener {
     private static int IDs = 0;
     private static final String HANDLER_DESC = Type.getInternalName(IEventListener.class);
     private static final String HANDLER_FUNC_DESC = Type.getMethodDescriptor(IEventListener.class.getDeclaredMethods()[0]);
@@ -51,42 +48,34 @@
     private java.lang.reflect.Type filter = null;
 
     @Deprecated
-    public ASMEventHandler(Object target, Method method, ModContainer owner) throws Exception
-    {
+    public ASMEventHandler(Object target, Method method, ModContainer owner) throws Exception {
         this(target, method, owner, false);
     }
 
-    public ASMEventHandler(Object target, Method method, ModContainer owner, boolean isGeneric) throws Exception
-    {
+    public ASMEventHandler(Object target, Method method, ModContainer owner, boolean isGeneric) throws Exception {
         this.owner = owner;
         if (Modifier.isStatic(method.getModifiers()))
-            handler = (IEventListener)createWrapper(method).newInstance();
+            handler = (IEventListener) createWrapper(method).newInstance();
         else
-            handler = (IEventListener)createWrapper(method).getConstructor(Object.class).newInstance(target);
+            handler = (IEventListener) createWrapper(method).getConstructor(Object.class).newInstance(target);
         subInfo = method.getAnnotation(SubscribeEvent.class);
         readable = "ASM: " + target + " " + method.getName() + Type.getMethodDescriptor(method);
-        if (isGeneric)
-        {
+        if (isGeneric) {
             java.lang.reflect.Type type = method.getGenericParameterTypes()[0];
-            if (type instanceof ParameterizedType)
-            {
-                filter = ((ParameterizedType)type).getActualTypeArguments()[0];
+            if (type instanceof ParameterizedType) {
+                filter = ((ParameterizedType) type).getActualTypeArguments()[0];
             }
         }
     }
 
     @SuppressWarnings("rawtypes")
     @Override
-    public void invoke(Event event)
-    {
+    public void invoke(Event event) {
         if (GETCONTEXT)
             ThreadContext.put("mod", owner == null ? "" : owner.getName());
-        if (handler != null)
-        {
-            if (!event.isCancelable() || !event.isCanceled() || subInfo.receiveCanceled())
-            {
-                if (filter == null || filter == ((IGenericEvent)event).getGenericType())
-                {
+        if (handler != null) {
+            if (!event.isCancelable() || !event.isCanceled() || subInfo.receiveCanceled()) {
+                if (filter == null || filter == ((IGenericEvent) event).getGenericType()) {
                     handler.invoke(event);
                 }
             }
@@ -95,15 +84,12 @@
             ThreadContext.remove("mod");
     }
 
-    public EventPriority getPriority()
-    {
+    public EventPriority getPriority() {
         return subInfo.priority();
     }
 
-    public Class<?> createWrapper(Method callback)
-    {
-        if (cache.containsKey(callback))
-        {
+    public Class<?> createWrapper(Method callback) {
+        if (cache.containsKey(callback)) {
             return cache.get(callback);
         }
 
@@ -112,7 +98,7 @@
 
         boolean isStatic = Modifier.isStatic(callback.getModifiers());
         String name = getUniqueName(callback);
-        String desc = name.replace('.',  '/');
+        String desc = name.replace('.', '/');
         String instType = Type.getInternalName(callback.getDeclaringClass());
         String eventType = Type.getInternalName(callback.getParameterTypes()[0]);
 
@@ -124,7 +110,7 @@
         System.out.println("Event:    " + eventType);
         */
 
-        cw.visit(V1_6, ACC_PUBLIC | ACC_SUPER, desc, null, "java/lang/Object", new String[]{ HANDLER_DESC });
+        cw.visit(V1_6, ACC_PUBLIC | ACC_SUPER, desc, null, "java/lang/Object", new String[]{HANDLER_DESC});
 
         cw.visitSource(".dynamic", null);
         {
@@ -136,8 +122,7 @@
             mv.visitCode();
             mv.visitVarInsn(ALOAD, 0);
             mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
-            if (!isStatic)
-            {
+            if (!isStatic) {
                 mv.visitVarInsn(ALOAD, 0);
                 mv.visitVarInsn(ALOAD, 1);
                 mv.visitFieldInsn(PUTFIELD, desc, "instance", "Ljava/lang/Object;");
@@ -150,8 +135,7 @@
             mv = cw.visitMethod(ACC_PUBLIC, "invoke", HANDLER_FUNC_DESC, null, null);
             mv.visitCode();
             mv.visitVarInsn(ALOAD, 0);
-            if (!isStatic)
-            {
+            if (!isStatic) {
                 mv.visitFieldInsn(GETFIELD, desc, "instance", "Ljava/lang/Object;");
                 mv.visitTypeInsn(CHECKCAST, instType);
             }
@@ -168,29 +152,24 @@
         return ret;
     }
 
-    private String getUniqueName(Method callback)
-    {
+    private String getUniqueName(Method callback) {
         return String.format("%s_%d_%s_%s_%s", getClass().getName(), IDs++,
                 callback.getDeclaringClass().getSimpleName(),
                 callback.getName(),
                 callback.getParameterTypes()[0].getSimpleName());
     }
 
-    private static class ASMClassLoader extends ClassLoader
-    {
-        private ASMClassLoader()
-        {
+    private static class ASMClassLoader extends ClassLoader {
+        private ASMClassLoader() {
             super(ASMClassLoader.class.getClassLoader());
         }
 
-        public Class<?> define(String name, byte[] data)
-        {
+        public Class<?> define(String name, byte[] data) {
             return defineClass(name, data, 0, data.length);
         }
     }
 
-    public String toString()
-    {
+    public String toString() {
         return readable;
     }
 }
