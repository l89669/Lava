--- ../src-base/minecraft/net/minecraftforge/fml/common/eventhandler/Event.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/eventhandler/Event.java
@@ -19,29 +19,27 @@
 
 package net.minecraftforge.fml.common.eventhandler;
 
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import com.google.common.base.Preconditions;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import com.google.common.base.Preconditions;
 
-
 /**
  * Base Event class that all other events are derived from
  */
-public class Event
-{
+public class Event {
     @Retention(value = RUNTIME)
     @Target(value = TYPE)
-    public @interface HasResult{}
+    public @interface HasResult {
+    }
 
-    public enum Result
-    {
+    public enum Result {
         DENY,
         DEFAULT,
         ALLOW
@@ -52,29 +50,28 @@
     private static ListenerList listeners = new ListenerList();
     private EventPriority phase = null;
 
-    public Event()
-    {
+    public Event() {
         setup();
     }
 
     /**
      * Determine if this function is cancelable at all.
-     * @return If access to setCanceled should be allowed
      *
+     * @return If access to setCanceled should be allowed
+     * <p>
      * Note:
      * Events with the Cancelable annotation will have this method automatically added to return true.
      */
-    public boolean isCancelable()
-    {
+    public boolean isCancelable() {
         return false;
     }
 
     /**
      * Determine if this event is canceled and should stop executing.
+     *
      * @return The current canceled state
      */
-    public boolean isCanceled()
-    {
+    public boolean isCanceled() {
         return isCanceled;
     }
 
@@ -82,18 +79,16 @@
      * Sets the cancel state of this event. Note, not all events are cancelable, and any attempt to
      * invoke this method on an event that is not cancelable (as determined by {@link #isCancelable}
      * will result in an {@link UnsupportedOperationException}.
-     *
+     * <p>
      * The functionality of setting the canceled state is defined on a per-event bases.
      *
      * @param cancel The new canceled value
      */
-    public void setCanceled(boolean cancel)
-    {
-        if (!isCancelable())
-        {
+    public void setCanceled(boolean cancel) {
+        if (!isCancelable()) {
             throw new UnsupportedOperationException(
-                "Attempted to call Event#setCanceled() on a non-cancelable event of type: "
-                + this.getClass().getCanonicalName()
+                    "Attempted to call Event#setCanceled() on a non-cancelable event of type: "
+                            + this.getClass().getCanonicalName()
             );
         }
         isCanceled = cancel;
@@ -101,33 +96,30 @@
 
     /**
      * Determines if this event expects a significant result value.
-     *
+     * <p>
      * Note:
      * Events with the HasResult annotation will have this method automatically added to return true.
      */
-    public boolean hasResult()
-    {
+    public boolean hasResult() {
         return false;
     }
 
     /**
      * Returns the value set as the result of this event
      */
-    public Result getResult()
-    {
+    public Result getResult() {
         return result;
     }
 
     /**
      * Sets the result value for this event, not all events can have a result set, and any attempt to
      * set a result for a event that isn't expecting it will result in a IllegalArgumentException.
-     *
+     * <p>
      * The functionality of setting the result is defined on a per-event bases.
      *
      * @param value The new result
      */
-    public void setResult(Result value)
-    {
+    public void setResult(Result value) {
         result = value;
     }
 
@@ -135,8 +127,7 @@
      * Called by the base constructor, this is used by ASM generated
      * event classes to setup various functionality such as the listener list.
      */
-    protected void setup()
-    {
+    protected void setup() {
     }
 
     /**
@@ -145,19 +136,16 @@
      *
      * @return Listener List
      */
-    public ListenerList getListenerList()
-    {
+    public ListenerList getListenerList() {
         return listeners;
     }
 
     @Nullable
-    public EventPriority getPhase()
-    {
+    public EventPriority getPhase() {
         return this.phase;
     }
 
-    public void setPhase(@Nonnull EventPriority value)
-    {
+    public void setPhase(@Nonnull EventPriority value) {
         Preconditions.checkNotNull(value, "setPhase argument must not be null");
         int prev = phase == null ? -1 : phase.ordinal();
         Preconditions.checkArgument(prev < value.ordinal(), "Attempted to set event phase to %s when already %s", value, phase);
