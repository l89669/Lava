--- ../src-base/minecraft/net/minecraftforge/fml/common/ProgressManager.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/ProgressManager.java
@@ -19,37 +19,35 @@
 
 package net.minecraftforge.fml.common;
 
+import com.google.common.base.Joiner;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import com.google.common.base.Joiner;
-
 /**
  * Not a fully fleshed out API, may change in future MC versions.
  * However feel free to use and suggest additions.
  */
-public class ProgressManager
-{
+public class ProgressManager {
     private static final List<ProgressBar> bars = new CopyOnWriteArrayList<ProgressBar>();
+
     /**
      * Not a fully fleshed out API, may change in future MC versions.
      * However feel free to use and suggest additions.
      */
-    public static ProgressBar push(String title, int steps)
-    {
+    public static ProgressBar push(String title, int steps) {
         return push(title, steps, false);
     }
+
     /**
      * Not a fully fleshed out API, may change in future MC versions.
      * However feel free to use and suggest additions.
      */
-    public static ProgressBar push(String title, int steps, boolean timeEachStep)
-    {
+    public static ProgressBar push(String title, int steps, boolean timeEachStep) {
         ProgressBar bar = new ProgressBar(title, steps);
         bars.add(bar);
-        if (timeEachStep)
-        {
+        if (timeEachStep) {
             bar.timeEachStep();
         }
         FMLCommonHandler.instance().processWindowMessages();
@@ -59,19 +57,18 @@
     public static boolean isDisplayVSyncForced() {
         return FMLCommonHandler.instance().isDisplayVSyncForced();
     }
+
     /**
      * Not a fully fleshed out API, may change in future MC versions.
      * However feel free to use and suggest additions.
      */
-    public static void pop(ProgressBar bar)
-    {
-        if(bar.getSteps() != bar.getStep()) throw new IllegalStateException("can't pop unfinished ProgressBar " + bar.getTitle());
+    public static void pop(ProgressBar bar) {
+        if (bar.getSteps() != bar.getStep())
+            throw new IllegalStateException("can't pop unfinished ProgressBar " + bar.getTitle());
         bars.remove(bar);
-        if (bar.getSteps() != 0)
-        {
+        if (bar.getSteps() != 0) {
             long newTime = System.nanoTime();
-            if (bar.timeEachStep)
-            {
+            if (bar.timeEachStep) {
                 String timeString = String.format("%.3f", ((float) (newTime - bar.lastTime) / 1000000 / 1000));
                 FMLLog.log.debug("Bar Step: {} - {} took {}s", bar.getTitle(), bar.getMessage(), timeString);
             }
@@ -87,8 +84,7 @@
     /*
      * Internal use only.
      */
-    public static Iterator<ProgressBar> barIterator()
-    {
+    public static Iterator<ProgressBar> barIterator() {
         return bars.iterator();
     }
 
@@ -97,8 +93,7 @@
      * Not a fully fleshed out API, may change in future MC versions.
      * However feel free to use and suggest additions.
      */
-    public static class ProgressBar
-    {
+    public static class ProgressBar {
         private final String title;
         private final int steps;
         private volatile int step = 0;
@@ -107,24 +102,20 @@
         private long startTime = System.nanoTime();
         private long lastTime = startTime;
 
-        private ProgressBar(String title, int steps)
-        {
+        private ProgressBar(String title, int steps) {
             this.title = title;
             this.steps = steps;
         }
 
-        public void step(Class<?> classToName, String... extra)
-        {
-            step(ClassNameUtils.shortName(classToName)+Joiner.on(' ').join(extra));
+        public void step(Class<?> classToName, String... extra) {
+            step(ClassNameUtils.shortName(classToName) + Joiner.on(' ').join(extra));
         }
 
-        public void step(String message)
-        {
-            if(step >= steps) throw new IllegalStateException("too much steps for ProgressBar " + title);
-            if (timeEachStep && step != 0)
-            {
+        public void step(String message) {
+            if (step >= steps) throw new IllegalStateException("too much steps for ProgressBar " + title);
+            if (timeEachStep && step != 0) {
                 long newTime = System.nanoTime();
-                FMLLog.log.debug(String.format("Bar Step: %s - %s took %.3fs", getTitle(), getMessage(), ((float)(newTime - lastTime) / 1000000 / 1000)));
+                FMLLog.log.debug(String.format("Bar Step: %s - %s took %.3fs", getTitle(), getMessage(), ((float) (newTime - lastTime) / 1000000 / 1000)));
                 lastTime = newTime;
             }
             step++;
@@ -132,28 +123,23 @@
             FMLCommonHandler.instance().processWindowMessages();
         }
 
-        public String getTitle()
-        {
+        public String getTitle() {
             return title;
         }
 
-        public int getSteps()
-        {
+        public int getSteps() {
             return steps;
         }
 
-        public int getStep()
-        {
+        public int getStep() {
             return step;
         }
 
-        public String getMessage()
-        {
+        public String getMessage() {
             return message;
         }
 
-        public void timeEachStep()
-        {
+        public void timeEachStep() {
             this.timeEachStep = true;
         }
     }
