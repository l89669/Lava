--- ../src-base/minecraft/net/minecraftforge/fml/common/ModAPIManager.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/ModAPIManager.java
@@ -19,33 +19,32 @@
 
 package net.minecraftforge.fml.common;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import net.minecraftforge.fml.common.asm.transformers.ModAPITransformer;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
+import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.discovery.ModCandidate;
 import net.minecraftforge.fml.common.discovery.ModDiscoverer;
-import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.versioning.ArtifactVersion;
 import net.minecraftforge.fml.common.versioning.DefaultArtifactVersion;
 import net.minecraftforge.fml.common.versioning.VersionParser;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
 
 public class ModAPIManager {
     public static final ModAPIManager INSTANCE = new ModAPIManager();
     @SuppressWarnings("unused")
     private ModAPITransformer transformer;
     private ASMDataTable dataTable;
-    private Map<String,APIContainer> apiContainers;
+    private Map<String, APIContainer> apiContainers;
 
     private static class APIContainer extends DummyModContainer {
         private List<ArtifactVersion> referredMods;
@@ -58,8 +57,7 @@
         private Set<String> packages;
         private boolean selfReferenced;
 
-        public APIContainer(String providedAPI, String apiVersion, File source, ArtifactVersion ownerMod)
-        {
+        public APIContainer(String providedAPI, String apiVersion, File source, ArtifactVersion ownerMod) {
             this.providedAPI = providedAPI;
             this.version = apiVersion;
             this.ownerMod = ownerMod;
@@ -71,45 +69,41 @@
         }
 
         @Override
-        public File getSource()
-        {
+        public File getSource() {
             return source;
         }
+
         @Override
-        public String getVersion()
-        {
+        public String getVersion() {
             return version;
         }
+
         @Override
-        public String getName()
-        {
-            return "API: "+providedAPI;
+        public String getName() {
+            return "API: " + providedAPI;
         }
+
         @Override
-        public String getModId()
-        {
+        public String getModId() {
             return providedAPI;
         }
+
         @Override
-        public List<ArtifactVersion> getDependants()
-        {
+        public List<ArtifactVersion> getDependants() {
             return referredMods;
         }
 
         @Override
-        public List<ArtifactVersion> getDependencies()
-        {
+        public List<ArtifactVersion> getDependencies() {
             return selfReferenced ? ImmutableList.<ArtifactVersion>of() : ImmutableList.of(ownerMod);
         }
 
         @Override
-        public ArtifactVersion getProcessedVersion()
-        {
+        public ArtifactVersion getProcessedVersion() {
             return ourVersion;
         }
 
-        public void validate(String providedAPI, String apiOwner, String apiVersion)
-        {
+        public void validate(String providedAPI, String apiOwner, String apiVersion) {
             if (Loader.instance().getModClassLoader().containsSource(this.getSource())) {
                 FMLLog.bigWarning("The API {} from source {} is loaded from an incompatible classloader. THIS WILL NOT WORK!", providedAPI, this.getSource().getAbsolutePath());
             }
@@ -117,101 +111,80 @@
         }
 
         @Override
-        public String toString()
-        {
-            return "APIContainer{"+providedAPI+":"+version+"}";
+        public String toString() {
+            return "APIContainer{" + providedAPI + ":" + version + "}";
         }
 
-        public void addAPIReference(String embedded)
-        {
-            if (currentReferents.add(embedded))
-            {
+        public void addAPIReference(String embedded) {
+            if (currentReferents.add(embedded)) {
                 referredMods.add(VersionParser.parseVersionReference(embedded));
             }
         }
 
-        public void addOwnedPackage(String apiPackage)
-        {
+        public void addOwnedPackage(String apiPackage) {
             packages.add(apiPackage);
         }
 
-        public void addAPIReferences(List<String> candidateIds)
-        {
-            for (String modId : candidateIds)
-            {
+        public void addAPIReferences(List<String> candidateIds) {
+            for (String modId : candidateIds) {
                 addAPIReference(modId);
             }
         }
 
-        void markSelfReferenced()
-        {
+        void markSelfReferenced() {
             selfReferenced = true;
         }
     }
-    public void registerDataTableAndParseAPI(ASMDataTable dataTable)
-    {
+
+    public void registerDataTableAndParseAPI(ASMDataTable dataTable) {
         this.dataTable = dataTable;
 
         Set<ASMData> apiList = dataTable.getAll("net.minecraftforge.fml.common.API");
 
         apiContainers = Maps.newHashMap();
 
-        for (ASMData data : apiList)
-        {
+        for (ASMData data : apiList) {
             Map<String, Object> annotationInfo = data.getAnnotationInfo();
-            String apiPackage = data.getClassName().substring(0,data.getClassName().indexOf(".package-info"));
+            String apiPackage = data.getClassName().substring(0, data.getClassName().indexOf(".package-info"));
             String providedAPI = (String) annotationInfo.get("provides");
             String apiOwner = (String) annotationInfo.get("owner");
             String apiVersion = (String) annotationInfo.get("apiVersion");
             APIContainer container = apiContainers.get(providedAPI);
-            if (container == null)
-            {
+            if (container == null) {
                 container = new APIContainer(providedAPI, apiVersion, data.getCandidate().getModContainer(), VersionParser.parseVersionReference(apiOwner));
                 apiContainers.put(providedAPI, container);
-            }
-            else
-            {
+            } else {
                 container.validate(providedAPI, apiOwner, apiVersion);
             }
             container.addOwnedPackage(apiPackage);
-            for (ModContainer mc : data.getCandidate().getContainedMods())
-            {
+            for (ModContainer mc : data.getCandidate().getContainedMods()) {
                 String embeddedIn = mc.getModId();
-                if (container.currentReferents.contains(embeddedIn))
-                {
+                if (container.currentReferents.contains(embeddedIn)) {
                     continue;
                 }
-                FMLLog.log.debug("Found API {} (owned by {} providing {}) embedded in {}",apiPackage, apiOwner, providedAPI, embeddedIn);
-                if (!embeddedIn.equals(apiOwner))
-                {
+                FMLLog.log.debug("Found API {} (owned by {} providing {}) embedded in {}", apiPackage, apiOwner, providedAPI, embeddedIn);
+                if (!embeddedIn.equals(apiOwner)) {
                     container.addAPIReference(embeddedIn);
                 }
             }
         }
 
-        for (APIContainer container : apiContainers.values())
-        {
-            for (String pkg : container.packages)
-            {
+        for (APIContainer container : apiContainers.values()) {
+            for (String pkg : container.packages) {
                 Set<ModCandidate> candidates = dataTable.getCandidatesFor(pkg);
-                for (ModCandidate candidate : candidates)
-                {
+                for (ModCandidate candidate : candidates) {
                     List<String> candidateIds = candidate.getContainedMods().stream().map(ModContainer::getModId).collect(Collectors.toCollection(ArrayList::new));
-                    if (!candidateIds.contains(container.ownerMod.getLabel()) && !container.currentReferents.containsAll(candidateIds))
-                    {
-                        FMLLog.log.info("Found mod(s) {} containing declared API package {} (owned by {}) without associated API reference",candidateIds, pkg, container.ownerMod);
+                    if (!candidateIds.contains(container.ownerMod.getLabel()) && !container.currentReferents.containsAll(candidateIds)) {
+                        FMLLog.log.info("Found mod(s) {} containing declared API package {} (owned by {}) without associated API reference", candidateIds, pkg, container.ownerMod);
                         container.addAPIReferences(candidateIds);
                     }
                 }
             }
-            if (apiContainers.containsKey(container.ownerMod.getLabel()))
-            {
+            if (apiContainers.containsKey(container.ownerMod.getLabel())) {
                 ArtifactVersion owner = container.ownerMod;
-                do
-                {
+                do {
                     APIContainer parent = apiContainers.get(owner.getLabel());
-                    if (parent == container)
-                    {
+                    if (parent == container) {
                         FMLLog.log.trace("APIContainer {} is it's own parent. skipping", owner);
                         container.markSelfReferenced();
                         break;
@@ -227,30 +200,25 @@
         }
     }
 
-    public void manageAPI(ModClassLoader modClassLoader, ModDiscoverer discoverer)
-    {
+    public void manageAPI(ModClassLoader modClassLoader, ModDiscoverer discoverer) {
         registerDataTableAndParseAPI(discoverer.getASMTable());
         transformer = modClassLoader.addModAPITransformer(dataTable);
     }
 
-    public void injectAPIModContainers(List<ModContainer> mods, Map<String, ModContainer> nameLookup)
-    {
+    public void injectAPIModContainers(List<ModContainer> mods, Map<String, ModContainer> nameLookup) {
         mods.addAll(apiContainers.values());
         nameLookup.putAll(apiContainers);
     }
 
-    public void cleanupAPIContainers(List<ModContainer> mods)
-    {
+    public void cleanupAPIContainers(List<ModContainer> mods) {
         mods.removeAll(apiContainers.values());
     }
 
-    public boolean hasAPI(String modId)
-    {
+    public boolean hasAPI(String modId) {
         return apiContainers.containsKey(modId);
     }
 
-    public Iterable<? extends ModContainer> getAPIList()
-    {
+    public Iterable<? extends ModContainer> getAPIList() {
         return apiContainers.values();
     }
 }
