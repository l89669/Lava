--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/asm/ModClassVisitor.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/asm/ModClassVisitor.java
@@ -19,46 +19,36 @@
 
 package net.minecraftforge.fml.common.discovery.asm;
 
-import org.objectweb.asm.AnnotationVisitor;
-import org.objectweb.asm.ClassVisitor;
-import org.objectweb.asm.FieldVisitor;
-import org.objectweb.asm.MethodVisitor;
-import org.objectweb.asm.Opcodes;
+import org.objectweb.asm.*;
 
-public class ModClassVisitor extends ClassVisitor
-{
+public class ModClassVisitor extends ClassVisitor {
     private ASMModParser discoverer;
 
-    public ModClassVisitor(ASMModParser discoverer)
-    {
+    public ModClassVisitor(ASMModParser discoverer) {
         super(Opcodes.ASM5);
         this.discoverer = discoverer;
     }
 
 
     @Override
-    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces)
-    {
+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
         discoverer.beginNewTypeName(name, version, superName, interfaces);
     }
 
     @Override
-    public AnnotationVisitor visitAnnotation(String annotationName, boolean runtimeVisible)
-    {
+    public AnnotationVisitor visitAnnotation(String annotationName, boolean runtimeVisible) {
         discoverer.startClassAnnotation(annotationName);
         return new ModAnnotationVisitor(discoverer);
     }
 
 
     @Override
-    public FieldVisitor visitField(int access, String name, String desc, String signature, Object value)
-    {
+    public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
         return new ModFieldVisitor(name, discoverer);
     }
 
     @Override
-    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)
-    {
+    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
         return new ModMethodVisitor(name, desc, discoverer);
     }
 }
