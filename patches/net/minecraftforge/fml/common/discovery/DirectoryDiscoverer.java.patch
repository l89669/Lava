--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
@@ -19,6 +19,12 @@
 
 package net.minecraftforge.fml.common.discovery;
 
+import com.google.common.collect.Lists;
+import net.minecraftforge.fml.common.*;
+import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
+import org.apache.commons.io.IOUtils;
+
+import javax.annotation.Nullable;
 import java.io.File;
 import java.io.FileFilter;
 import java.io.FileInputStream;
@@ -27,26 +33,10 @@
 import java.util.List;
 import java.util.regex.Matcher;
 
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.LoaderException;
-import net.minecraftforge.fml.common.MetadataCollection;
-import net.minecraftforge.fml.common.ModContainer;
-import net.minecraftforge.fml.common.ModContainerFactory;
-import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
-
-import org.apache.commons.io.IOUtils;
-
-import com.google.common.collect.Lists;
-
-import javax.annotation.Nullable;
-
-public class DirectoryDiscoverer implements ITypeDiscoverer
-{
-    private class ClassFilter implements FileFilter
-    {
+public class DirectoryDiscoverer implements ITypeDiscoverer {
+    private class ClassFilter implements FileFilter {
         @Override
-        public boolean accept(File file)
-        {
+        public boolean accept(File file) {
             return (file.isFile() && classFile.matcher(file.getName()).matches()) || file.isDirectory();
         }
     }
@@ -54,40 +44,30 @@
     private ASMDataTable table;
 
     @Override
-    public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
-    {
+    public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table) {
         this.table = table;
         List<ModContainer> found = Lists.newArrayList();
         FMLLog.log.debug("Examining directory {} for potential mods", candidate.getModContainer().getName());
         exploreFileSystem("", candidate.getModContainer(), found, candidate, null);
-        for (ModContainer mc : found)
-        {
+        for (ModContainer mc : found) {
             table.addContainer(mc);
         }
         return found;
     }
 
-    public void exploreFileSystem(String path, File modDir, List<ModContainer> harvestedMods, ModCandidate candidate, @Nullable MetadataCollection mc)
-    {
-        if (path.length() == 0)
-        {
+    public void exploreFileSystem(String path, File modDir, List<ModContainer> harvestedMods, ModCandidate candidate, @Nullable MetadataCollection mc) {
+        if (path.length() == 0) {
             File metadata = new File(modDir, "mcmod.info");
-            try
-            {
+            try {
                 FileInputStream fis = new FileInputStream(metadata);
-                try
-                {
+                try {
                     mc = MetadataCollection.from(fis, modDir.getName());
-                }
-                finally
-                {
+                } finally {
                     IOUtils.closeQuietly(fis);
                 }
                 FMLLog.log.debug("Found an mcmod.info file in directory {}", modDir.getName());
-            }
-            catch (Exception e)
-            {
-                mc = MetadataCollection.from(null,"");
+            } catch (Exception e) {
+                mc = MetadataCollection.from(null, "");
                 FMLLog.log.debug("No mcmod.info file found in directory {}", modDir.getName());
             }
         }
@@ -96,45 +76,34 @@
 
         // Always sort our content
         Arrays.sort(content);
-        for (File file : content)
-        {
-            if (file.isDirectory())
-            {
+        for (File file : content) {
+            if (file.isDirectory()) {
                 FMLLog.log.trace("Recursing into package {}", path + file.getName());
                 exploreFileSystem(path + file.getName() + "/", file, harvestedMods, candidate, mc);
                 continue;
             }
             Matcher match = classFile.matcher(file.getName());
 
-            if (match.matches())
-            {
+            if (match.matches()) {
                 ASMModParser modParser = null;
                 FileInputStream fis = null;
-                try
-                {
+                try {
                     fis = new FileInputStream(file);
                     modParser = new ASMModParser(fis);
-                    candidate.addClassEntry(path+file.getName());
-                }
-                catch (LoaderException e)
-                {
+                    candidate.addClassEntry(path + file.getName());
+                } catch (LoaderException e) {
                     FMLLog.log.error("There was a problem reading the file {} - probably this is a corrupt file", file.getPath(), e);
                     throw e;
-                }
-                catch (IOException e)
-                {
+                } catch (IOException e) {
                     throw new RuntimeException(e);
-                }
-                finally
-                {
+                } finally {
                     IOUtils.closeQuietly(fis);
                 }
 
                 modParser.validate();
                 modParser.sendToTable(table, candidate);
                 ModContainer container = ModContainerFactory.instance().build(modParser, candidate.getModContainer(), candidate);
-                if (container!=null)
-                {
+                if (container != null) {
                     harvestedMods.add(container);
                     container.bindMetadata(mc);
                 }
