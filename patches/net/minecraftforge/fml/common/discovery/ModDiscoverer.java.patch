--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/ModDiscoverer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/ModDiscoverer.java
@@ -19,27 +19,25 @@
 
 package net.minecraftforge.fml.common.discovery;
 
-import java.io.File;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.LoaderException;
 import net.minecraftforge.fml.common.ModClassLoader;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.relauncher.CoreModManager;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 
-public class ModDiscoverer
-{
+import java.io.File;
+import java.util.List;
+
+public class ModDiscoverer {
     private List<ModCandidate> candidates = Lists.newArrayList();
 
     private ASMDataTable dataTable = new ASMDataTable();
 
     private List<File> nonModLibs = Lists.newArrayList();
 
-    public void findClasspathMods(ModClassLoader modClassLoader)
-    {
+    public void findClasspathMods(ModClassLoader modClassLoader) {
         List<String> knownLibraries = ImmutableList.<String>builder()
                 // skip default libs
                 .addAll(modClassLoader.getDefaultLibraries())
@@ -49,32 +47,22 @@
                 .addAll(CoreModManager.getReparseableCoremods())
                 .build();
         File[] minecraftSources = modClassLoader.getParentSources();
-        if (minecraftSources.length == 1 && minecraftSources[0].isFile())
-        {
+        if (minecraftSources.length == 1 && minecraftSources[0].isFile()) {
             FMLLog.log.debug("Minecraft is a file at {}, loading", minecraftSources[0].getAbsolutePath());
             addCandidate(new ModCandidate(minecraftSources[0], minecraftSources[0], ContainerType.JAR, true, true));
-        }
-        else
-        {
+        } else {
             int i = 0;
-            for (File source : minecraftSources)
-            {
-                if (source.isFile())
-                {
-                    if (knownLibraries.contains(source.getName()) || modClassLoader.isDefaultLibrary(source))
-                    {
+            for (File source : minecraftSources) {
+                if (source.isFile()) {
+                    if (knownLibraries.contains(source.getName()) || modClassLoader.isDefaultLibrary(source)) {
                         FMLLog.log.trace("Skipping known library file {}", source.getAbsolutePath());
-                    }
-                    else
-                    {
+                    } else {
                         FMLLog.log.debug("Found a minecraft related file at {}, examining for mod candidates", source.getAbsolutePath());
-                        addCandidate(new ModCandidate(source, source, ContainerType.JAR, i==0, true));
+                        addCandidate(new ModCandidate(source, source, ContainerType.JAR, i == 0, true));
                     }
-                }
-                else if (minecraftSources[i].isDirectory())
-                {
+                } else if (minecraftSources[i].isDirectory()) {
                     FMLLog.log.debug("Found a minecraft related directory at {}, examining for mod candidates", source.getAbsolutePath());
-                    addCandidate(new ModCandidate(source, source, ContainerType.DIR, i==0, true));
+                    addCandidate(new ModCandidate(source, source, ContainerType.DIR, i == 0, true));
                 }
                 i++;
             }
@@ -82,26 +70,18 @@
 
     }
 
-    public List<ModContainer> identifyMods()
-    {
+    public List<ModContainer> identifyMods() {
         List<ModContainer> modList = Lists.newArrayList();
 
-        for (ModCandidate candidate : candidates)
-        {
-            try
-            {
+        for (ModCandidate candidate : candidates) {
+            try {
                 List<ModContainer> mods = candidate.explore(dataTable);
-                if (mods.isEmpty() && !candidate.isClasspath())
-                {
+                if (mods.isEmpty() && !candidate.isClasspath()) {
                     nonModLibs.add(candidate.getModContainer());
-                }
-                else
-                {
+                } else {
                     modList.addAll(mods);
                 }
-            }
-            catch (LoaderException le)
-            {
+            } catch (LoaderException le) {
                 FMLLog.log.warn("Identified a problem with the mod candidate {}, ignoring this source", candidate.getModContainer(), le);
             }
         }
@@ -109,22 +89,17 @@
         return modList;
     }
 
-    public ASMDataTable getASMTable()
-    {
+    public ASMDataTable getASMTable() {
         return dataTable;
     }
 
-    public List<File> getNonModLibs()
-    {
+    public List<File> getNonModLibs() {
         return nonModLibs;
     }
 
-    public void addCandidate(ModCandidate candidate)
-    {
-        for (ModCandidate c : candidates)
-        {
-            if (c.getModContainer().equals(candidate.getModContainer()))
-            {
+    public void addCandidate(ModCandidate candidate) {
+        for (ModCandidate c : candidates) {
+            if (c.getModContainer().equals(candidate.getModContainer())) {
                 FMLLog.log.trace("  Skipping already in list {}", candidate.getModContainer());
                 return;
             }
