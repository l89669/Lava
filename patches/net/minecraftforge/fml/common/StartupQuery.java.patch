--- ../src-base/minecraft/net/minecraftforge/fml/common/StartupQuery.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/StartupQuery.java
@@ -19,31 +19,27 @@
 
 package net.minecraftforge.fml.common;
 
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicBoolean;
-
 import net.minecraft.server.MinecraftServer;
 
 import javax.annotation.Nullable;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class StartupQuery {
     // internal class/functionality, do not use
 
-    public static boolean confirm(String text)
-    {
+    public static boolean confirm(String text) {
         StartupQuery query = new StartupQuery(text, new AtomicBoolean());
         query.execute();
         return query.getResult();
     }
 
-    public static void notify(String text)
-    {
+    public static void notify(String text) {
         StartupQuery query = new StartupQuery(text, null);
         query.execute();
     }
 
-    public static void abort()
-    {
+    public static void abort() {
         MinecraftServer server = FMLCommonHandler.instance().getMinecraftServerInstance();
         if (server != null) server.initiateShutdown();
 
@@ -52,22 +48,16 @@
     }
 
 
-    public static void reset()
-    {
+    public static void reset() {
         pending = null;
         aborted = false;
     }
 
-    public static boolean check()
-    {
-        if (pending != null)
-        {
-            try
-            {
+    public static boolean check() {
+        if (pending != null) {
+            try {
                 FMLCommonHandler.instance().queryUser(pending);
-            }
-            catch (InterruptedException e)
-            {
+            } catch (InterruptedException e) {
                 FMLLog.log.warn("query interrupted");
                 abort();
             }
@@ -82,53 +72,42 @@
     private static volatile boolean aborted = false;
 
 
-    private StartupQuery(String text, @Nullable AtomicBoolean result)
-    {
+    private StartupQuery(String text, @Nullable AtomicBoolean result) {
         this.text = text;
         this.result = result;
     }
 
     @Nullable
-    public Boolean getResult()
-    {
+    public Boolean getResult() {
         return result == null ? null : result.get();
     }
 
-    public void setResult(boolean result)
-    {
+    public void setResult(boolean result) {
         this.result.set(result);
     }
 
-    public String getText()
-    {
+    public String getText() {
         return text;
     }
 
-    public boolean isSynchronous()
-    {
+    public boolean isSynchronous() {
         return synchronous;
     }
 
-    public void finish()
-    {
+    public void finish() {
         signal.countDown();
     }
 
-    private void execute()
-    {
+    private void execute() {
         String prop = System.getProperty("fml.queryResult");
 
-        if (result != null && prop != null)
-        {
+        if (result != null && prop != null) {
             FMLLog.log.info("Using fml.queryResult {} to answer the following query:\n{}", prop, text);
 
-            if (prop.equalsIgnoreCase("confirm"))
-            {
+            if (prop.equalsIgnoreCase("confirm")) {
                 setResult(true);
                 return;
-            }
-            else if (prop.equalsIgnoreCase("cancel"))
-            {
+            } else if (prop.equalsIgnoreCase("cancel")) {
                 setResult(false);
                 return;
             }
@@ -143,19 +122,15 @@
         // from the client thread: synchronous execution
         // dedicated server: command handling in mc is synchronous, execute the server-side query directly
         if (FMLCommonHandler.instance().getSide().isServer() ||
-                FMLCommonHandler.instance().getEffectiveSide().isClient())
-        {
+                FMLCommonHandler.instance().getEffectiveSide().isClient()) {
             synchronous = true;
             check();
         }
 
-        try
-        {
+        try {
             signal.await();
             reset();
-        }
-        catch (InterruptedException e)
-        {
+        } catch (InterruptedException e) {
             FMLLog.log.warn("query interrupted");
             abort();
         }
@@ -171,12 +146,10 @@
     /**
      * Exception not being caught by the crash report generation logic.
      */
-    public static class AbortedException extends RuntimeException
-    {
+    public static class AbortedException extends RuntimeException {
         private static final long serialVersionUID = -5933665223696833921L;
 
-        private AbortedException()
-        {
+        private AbortedException() {
             super();
         }
     }
