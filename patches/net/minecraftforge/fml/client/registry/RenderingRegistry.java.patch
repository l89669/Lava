--- ../src-base/minecraft/net/minecraftforge/fml/client/registry/RenderingRegistry.java
+++ ../src-work/minecraft/net/minecraftforge/fml/client/registry/RenderingRegistry.java
@@ -19,16 +19,14 @@
 
 package net.minecraftforge.fml.client.registry;
 
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.entity.Entity;
 
-import com.google.common.collect.Maps;
+import java.util.Map;
 
-public class RenderingRegistry
-{
+public class RenderingRegistry {
     private static final RenderingRegistry INSTANCE = new RenderingRegistry();
 
     private Map<Class<? extends Entity>, IRenderFactory<? extends Entity>> entityRenderers = Maps.newHashMap();
@@ -43,13 +41,11 @@
      * TODO Will be removed in 1.11.
      */
     @Deprecated
-    public static void registerEntityRenderingHandler(Class<? extends Entity> entityClass, Render<? extends Entity> renderer)
-    {
+    public static void registerEntityRenderingHandler(Class<? extends Entity> entityClass, Render<? extends Entity> renderer) {
         INSTANCE.entityRenderersOld.put(entityClass, renderer);
     }
 
-    public static void loadEntityRenderers(Map<Class<? extends Entity>, Render<? extends Entity>> entityRenderMap)
-    {
+    public static void loadEntityRenderers(Map<Class<? extends Entity>, Render<? extends Entity>> entityRenderMap) {
         entityRenderMap.putAll(INSTANCE.entityRenderersOld);
     }
 
@@ -58,22 +54,18 @@
      * render map for entities.
      * Call this during Preinitialization phase.
      */
-    public static <T extends Entity> void registerEntityRenderingHandler(Class<T> entityClass, IRenderFactory<? super T> renderFactory)
-    {
+    public static <T extends Entity> void registerEntityRenderingHandler(Class<T> entityClass, IRenderFactory<? super T> renderFactory) {
         INSTANCE.entityRenderers.put(entityClass, renderFactory);
     }
 
-    public static void loadEntityRenderers(RenderManager manager, Map<Class<? extends Entity> , Render<? extends Entity>> renderMap)
-    {
-        for (Map.Entry<Class<? extends Entity>, IRenderFactory<? extends Entity>> entry : INSTANCE.entityRenderers.entrySet())
-        {
+    public static void loadEntityRenderers(RenderManager manager, Map<Class<? extends Entity>, Render<? extends Entity>> renderMap) {
+        for (Map.Entry<Class<? extends Entity>, IRenderFactory<? extends Entity>> entry : INSTANCE.entityRenderers.entrySet()) {
             register(manager, renderMap, entry.getKey(), entry.getValue());
         }
     }
 
     @SuppressWarnings("unchecked")
-    private static <T extends Entity> void register(RenderManager manager, Map<Class<? extends Entity> , Render<? extends Entity>> renderMap, Class<T> entityClass, IRenderFactory<?> renderFactory)
-    {
-        renderMap.put(entityClass, ((IRenderFactory<T>)renderFactory).createRenderFor(manager));
+    private static <T extends Entity> void register(RenderManager manager, Map<Class<? extends Entity>, Render<? extends Entity>> renderMap, Class<T> entityClass, IRenderFactory<?> renderFactory) {
+        renderMap.put(entityClass, ((IRenderFactory<T>) renderFactory).createRenderFor(manager));
     }
 }
