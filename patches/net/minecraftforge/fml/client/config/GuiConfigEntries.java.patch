--- ../src-base/minecraft/net/minecraftforge/fml/client/config/GuiConfigEntries.java
+++ ../src-work/minecraft/net/minecraftforge/fml/client/config/GuiConfigEntries.java
@@ -19,16 +19,6 @@
 
 package net.minecraftforge.fml.client.config;
 
-import static net.minecraftforge.fml.client.config.GuiUtils.RESET_CHAR;
-import static net.minecraftforge.fml.client.config.GuiUtils.UNDO_CHAR;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiListExtended;
 import net.minecraft.client.gui.GuiScreen;
@@ -38,24 +28,27 @@
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.ModContainer;
-
 import org.lwjgl.input.Keyboard;
 
+import java.util.*;
+
+import static net.minecraftforge.fml.client.config.GuiUtils.RESET_CHAR;
+import static net.minecraftforge.fml.client.config.GuiUtils.UNDO_CHAR;
+
 /**
  * This class implements the scrolling list functionality of the config GUI screens. It also provides all the default control handlers
  * for the various property types.
  *
  * @author bspkrs
  */
-public class GuiConfigEntries extends GuiListExtended
-{
+public class GuiConfigEntries extends GuiListExtended {
     public final GuiConfig owningScreen;
     public final Minecraft mc;
     public List<IConfigEntry> listEntries;
     /**
      * The max width of the label of all IConfigEntry objects.
      */
-    public int maxLabelTextWidth  = 0;
+    public int maxLabelTextWidth = 0;
     /**
      * The max x boundary of all IConfigEntry objects.
      */
@@ -81,18 +74,15 @@
      */
     public int scrollBarX;
 
-    public GuiConfigEntries(GuiConfig parent, Minecraft mc)
-    {
+    public GuiConfigEntries(GuiConfig parent, Minecraft mc) {
         super(mc, parent.width, parent.height, parent.titleLine2 != null ? 33 : 23, parent.height - 32, 20);
         this.owningScreen = parent;
         this.setShowSelectionBox(false);
         this.mc = mc;
         this.listEntries = new ArrayList<IConfigEntry>();
 
-        for (IConfigElement configElement : parent.configElements)
-        {
-            if (configElement != null)
-            {
+        for (IConfigElement configElement : parent.configElements) {
+            if (configElement != null) {
                 if (configElement.isProperty() && configElement.showInGui()) // as opposed to being a child category entry
                 {
                     int length;
@@ -116,72 +106,55 @@
         controlWidth = resetX - controlX - 5;
         scrollBarX = this.width;
 
-        for (IConfigElement configElement : parent.configElements)
-        {
-            if (configElement != null && configElement.showInGui())
-            {
+        for (IConfigElement configElement : parent.configElements) {
+            if (configElement != null && configElement.showInGui()) {
                 if (configElement.getConfigEntryClass() != null)
-                    try
-                    {
+                    try {
                         this.listEntries.add(configElement.getConfigEntryClass()
                                 .getConstructor(GuiConfig.class, GuiConfigEntries.class, IConfigElement.class)
                                 .newInstance(this.owningScreen, this, configElement));
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         FMLLog.log.error("There was a critical error instantiating the custom IConfigEntry for config element {}.", configElement.getName(), e);
                     }
-                else if (configElement.isProperty())
-                {
+                else if (configElement.isProperty()) {
                     if (configElement.isList())
                         this.listEntries.add(new GuiConfigEntries.ArrayEntry(this.owningScreen, this, configElement));
                     else if (configElement.getType() == ConfigGuiType.BOOLEAN)
                         this.listEntries.add(new GuiConfigEntries.BooleanEntry(this.owningScreen, this, configElement));
-                    else if (configElement.getType() == ConfigGuiType.INTEGER)
-                    {
-                        if(configElement.hasSlidingControl())
-                            listEntries.add(new GuiConfigEntries.NumberSliderEntry(owningScreen,this,configElement));
+                    else if (configElement.getType() == ConfigGuiType.INTEGER) {
+                        if (configElement.hasSlidingControl())
+                            listEntries.add(new GuiConfigEntries.NumberSliderEntry(owningScreen, this, configElement));
                         else
                             this.listEntries.add(new GuiConfigEntries.IntegerEntry(this.owningScreen, this, configElement));
-                    }
-                    else if (configElement.getType() == ConfigGuiType.DOUBLE)
-                    {
-                        if(configElement.hasSlidingControl())
-                            listEntries.add(new NumberSliderEntry(owningScreen,this,configElement));
+                    } else if (configElement.getType() == ConfigGuiType.DOUBLE) {
+                        if (configElement.hasSlidingControl())
+                            listEntries.add(new NumberSliderEntry(owningScreen, this, configElement));
                         else
                             this.listEntries.add(new GuiConfigEntries.DoubleEntry(this.owningScreen, this, configElement));
-                    }
-                    else if (configElement.getType() == ConfigGuiType.COLOR)
-                    {
+                    } else if (configElement.getType() == ConfigGuiType.COLOR) {
                         if (configElement.getValidValues() != null && configElement.getValidValues().length > 0)
                             this.listEntries.add(new GuiConfigEntries.ChatColorEntry(this.owningScreen, this, configElement));
                         else
                             this.listEntries.add(new GuiConfigEntries.StringEntry(this.owningScreen, this, configElement));
-                    }
-                    else if (configElement.getType() == ConfigGuiType.MOD_ID)
-                    {
+                    } else if (configElement.getType() == ConfigGuiType.MOD_ID) {
                         Map<Object, String> values = new TreeMap<Object, String>();
                         for (ModContainer mod : Loader.instance().getActiveModList())
                             values.put(mod.getModId(), mod.getName());
                         values.put("minecraft", "Minecraft");
                         this.listEntries.add(new SelectValueEntry(this.owningScreen, this, configElement, values));
-                    }
-                    else if (configElement.getType() == ConfigGuiType.STRING)
-                    {
+                    } else if (configElement.getType() == ConfigGuiType.STRING) {
                         if (configElement.getValidValues() != null && configElement.getValidValues().length > 0)
                             this.listEntries.add(new GuiConfigEntries.CycleValueEntry(this.owningScreen, this, configElement));
                         else
                             this.listEntries.add(new GuiConfigEntries.StringEntry(this.owningScreen, this, configElement));
                     }
-                }
-                else if (configElement.getType() == ConfigGuiType.CONFIG_CATEGORY)
+                } else if (configElement.getType() == ConfigGuiType.CONFIG_CATEGORY)
                     this.listEntries.add(new CategoryEntry(this.owningScreen, this, configElement));
             }
         }
     }
 
-    protected void initGui()
-    {
+    protected void initGui() {
         this.width = owningScreen.width;
         this.height = owningScreen.height;
 
@@ -209,8 +182,7 @@
     }
 
     @Override
-    public int getSize()
-    {
+    public int getSize() {
         return this.listEntries.size();
     }
 
@@ -218,14 +190,12 @@
      * Gets the IGuiListEntry object for the given index
      */
     @Override
-    public IConfigEntry getListEntry(int index)
-    {
+    public IConfigEntry getListEntry(int index) {
         return this.listEntries.get(index);
     }
 
     @Override
-    public int getScrollBarX()
-    {
+    public int getScrollBarX() {
         return scrollBarX;
     }
 
@@ -233,16 +203,14 @@
      * Gets the width of the list
      */
     @Override
-    public int getListWidth()
-    {
+    public int getListWidth() {
         return owningScreen.width;
     }
 
     /**
      * This method is a pass-through for IConfigEntry objects that require keystrokes. Called from the parent GuiConfig screen.
      */
-    public void keyTyped(char eventChar, int eventKey)
-    {
+    public void keyTyped(char eventChar, int eventKey) {
         for (IConfigEntry entry : this.listEntries)
             entry.keyTyped(eventChar, eventKey);
     }
@@ -251,8 +219,7 @@
      * This method is a pass-through for IConfigEntry objects that contain GuiTextField elements. Called from the parent GuiConfig
      * screen.
      */
-    public void updateScreen()
-    {
+    public void updateScreen() {
         for (IConfigEntry entry : this.listEntries)
             entry.updateCursorCounter();
     }
@@ -261,8 +228,7 @@
      * This method is a pass-through for IConfigEntry objects that contain GuiTextField elements. Called from the parent GuiConfig
      * screen.
      */
-    public void mouseClickedPassThru(int mouseX, int mouseY, int mouseEvent)
-    {
+    public void mouseClickedPassThru(int mouseX, int mouseY, int mouseEvent) {
         for (IConfigEntry entry : this.listEntries)
             entry.mouseClicked(mouseX, mouseY, mouseEvent);
     }
@@ -270,8 +236,7 @@
     /**
      * This method is a pass-through for IConfigEntry objects that need to perform actions when the containing GUI is closed.
      */
-    public void onGuiClosed()
-    {
+    public void onGuiClosed() {
         for (IConfigEntry entry : this.listEntries)
             entry.onGuiClosed();
     }
@@ -280,8 +245,7 @@
      * Saves all properties on this screen / child screens. This method returns true if any elements were changed that require
      * a restart for proper handling.
      */
-    public boolean saveConfigElements()
-    {
+    public boolean saveConfigElements() {
         boolean requiresRestart = false;
         for (IConfigEntry entry : this.listEntries)
             if (entry.saveConfigElement())
@@ -294,8 +258,7 @@
      * Returns true if all IConfigEntry objects on this screen are set to default. If includeChildren is true sub-category
      * objects are checked as well.
      */
-    public boolean areAllEntriesDefault(boolean includeChildren)
-    {
+    public boolean areAllEntriesDefault(boolean includeChildren) {
         for (IConfigEntry entry : this.listEntries)
             if ((includeChildren || !(entry instanceof CategoryEntry)) && !entry.isDefault())
                 return false;
@@ -307,8 +270,7 @@
      * Sets all IConfigEntry objects on this screen to default. If includeChildren is true sub-category objects are set as
      * well.
      */
-    public void setAllToDefault(boolean includeChildren)
-    {
+    public void setAllToDefault(boolean includeChildren) {
         for (IConfigEntry entry : this.listEntries)
             if ((includeChildren || !(entry instanceof CategoryEntry)))
                 entry.setToDefault();
@@ -318,8 +280,7 @@
      * Returns true if any IConfigEntry objects on this screen are changed. If includeChildren is true sub-category objects
      * are checked as well.
      */
-    public boolean hasChangedEntry(boolean includeChildren)
-    {
+    public boolean hasChangedEntry(boolean includeChildren) {
         for (IConfigEntry entry : this.listEntries)
             if ((includeChildren || !(entry instanceof CategoryEntry)) && entry.isChanged())
                 return true;
@@ -331,8 +292,7 @@
      * Returns true if any IConfigEntry objects on this screen are enabled. If includeChildren is true sub-category objects
      * are checked as well.
      */
-    public boolean areAnyEntriesEnabled(boolean includeChildren)
-    {
+    public boolean areAnyEntriesEnabled(boolean includeChildren) {
         for (IConfigEntry entry : this.listEntries)
             if ((includeChildren || !(entry instanceof CategoryEntry)) && entry.enabled())
                 return true;
@@ -344,8 +304,7 @@
      * Reverts changes to all IConfigEntry objects on this screen. If includeChildren is true sub-category objects are
      * reverted as well.
      */
-    public void undoAllChanges(boolean includeChildren)
-    {
+    public void undoAllChanges(boolean includeChildren) {
         for (IConfigEntry entry : this.listEntries)
             if ((includeChildren || !(entry instanceof CategoryEntry)))
                 entry.undoChanges();
@@ -355,24 +314,21 @@
      * Calls the drawToolTip() method for all IConfigEntry objects on this screen. This is called from the parent GuiConfig screen
      * after drawing all other elements.
      */
-    public void drawScreenPost(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreenPost(int mouseX, int mouseY, float partialTicks) {
         for (IConfigEntry entry : this.listEntries)
             entry.drawToolTip(mouseX, mouseY);
     }
 
     /**
      * BooleanPropEntry
-     *
+     * <p>
      * Provides a GuiButton that toggles between true and false.
      */
-    public static class BooleanEntry extends ButtonEntry
-    {
+    public static class BooleanEntry extends ButtonEntry {
         protected final boolean beforeValue;
-        protected boolean       currentValue;
+        protected boolean currentValue;
 
-        private BooleanEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        private BooleanEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             this.beforeValue = Boolean.valueOf(configElement.get().toString());
             this.currentValue = beforeValue;
@@ -381,56 +337,46 @@
         }
 
         @Override
-        public void updateValueButtonText()
-        {
+        public void updateValueButtonText() {
             this.btnValue.displayString = I18n.format(String.valueOf(currentValue));
             btnValue.packedFGColour = currentValue ? GuiUtils.getColorCode('2', true) : GuiUtils.getColorCode('4', true);
         }
 
         @Override
-        public void valueButtonPressed(int slotIndex)
-        {
+        public void valueButtonPressed(int slotIndex) {
             if (enabled())
                 currentValue = !currentValue;
         }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             return currentValue == Boolean.valueOf(configElement.getDefault().toString());
         }
 
         @Override
-        public void setToDefault()
-        {
-            if (enabled())
-            {
+        public void setToDefault() {
+            if (enabled()) {
                 currentValue = Boolean.valueOf(configElement.getDefault().toString());
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             return currentValue != beforeValue;
         }
 
         @Override
-        public void undoChanges()
-        {
-            if (enabled())
-            {
+        public void undoChanges() {
+            if (enabled()) {
                 currentValue = beforeValue;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled() && isChanged())
-            {
+        public boolean saveConfigElement() {
+            if (enabled() && isChanged()) {
                 configElement.set(currentValue);
                 return configElement.requiresMcRestart();
             }
@@ -438,32 +384,28 @@
         }
 
         @Override
-        public Boolean getCurrentValue()
-        {
+        public Boolean getCurrentValue() {
             return currentValue;
         }
 
         @Override
-        public Boolean[] getCurrentValues()
-        {
-            return new Boolean[] { getCurrentValue() };
+        public Boolean[] getCurrentValues() {
+            return new Boolean[]{getCurrentValue()};
         }
     }
 
     /**
      * CycleValueEntry
-     *
+     * <p>
      * Provides a GuiButton that cycles through the prop's validValues array. If the current prop value is not a valid value, the first
      * entry replaces the current value.
      */
-    public static class CycleValueEntry extends ButtonEntry
-    {
+    public static class CycleValueEntry extends ButtonEntry {
         protected final int beforeIndex;
         protected final int defaultIndex;
-        protected int       currentIndex;
+        protected int currentIndex;
 
-        private CycleValueEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        private CycleValueEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             beforeIndex = getIndex(configElement.get().toString());
             defaultIndex = getIndex(configElement.getDefault().toString());
@@ -472,11 +414,9 @@
             updateValueButtonText();
         }
 
-        private int getIndex(String s)
-        {
+        private int getIndex(String s) {
             for (int i = 0; i < configElement.getValidValues().length; i++)
-                if (configElement.getValidValues()[i].equalsIgnoreCase(s))
-                {
+                if (configElement.getValidValues()[i].equalsIgnoreCase(s)) {
                     return i;
                 }
 
@@ -484,22 +424,18 @@
         }
 
         @Override
-        public void updateValueButtonText()
-        {
+        public void updateValueButtonText() {
             this.btnValue.displayString = I18n.format(getValidValueDisplay());
         }
 
-        protected String getValidValueDisplay()
-        {
+        protected String getValidValueDisplay() {
             String[] validValuesDisplay = configElement.getValidValuesDisplay();
             return validValuesDisplay != null && validValuesDisplay.length > 0 ? validValuesDisplay[currentIndex] : configElement.getValidValues()[currentIndex];
         }
 
         @Override
-        public void valueButtonPressed(int slotIndex)
-        {
-            if (enabled())
-            {
+        public void valueButtonPressed(int slotIndex) {
+            if (enabled()) {
                 if (++this.currentIndex >= configElement.getValidValues().length)
                     this.currentIndex = 0;
 
@@ -508,42 +444,34 @@
         }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             return currentIndex == defaultIndex;
         }
 
         @Override
-        public void setToDefault()
-        {
-            if (enabled())
-            {
+        public void setToDefault() {
+            if (enabled()) {
                 currentIndex = defaultIndex;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             return currentIndex != beforeIndex;
         }
 
         @Override
-        public void undoChanges()
-        {
-            if (enabled())
-            {
+        public void undoChanges() {
+            if (enabled()) {
                 currentIndex = beforeIndex;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled() && isChanged())
-            {
+        public boolean saveConfigElement() {
+            if (enabled() && isChanged()) {
                 configElement.set(configElement.getValidValues()[currentIndex]);
                 return configElement.requiresMcRestart();
             }
@@ -551,61 +479,53 @@
         }
 
         @Override
-        public String getCurrentValue()
-        {
+        public String getCurrentValue() {
             return configElement.getValidValues()[currentIndex];
         }
 
         @Override
-        public String[] getCurrentValues()
-        {
-            return new String[] { getCurrentValue() };
+        public String[] getCurrentValues() {
+            return new String[]{getCurrentValue()};
         }
     }
 
     /**
      * ChatColorEntry
-     *
+     * <p>
      * Provides a GuiButton that cycles through the list of chat color codes.
      */
-    public static class ChatColorEntry extends CycleValueEntry
-    {
-        ChatColorEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+    public static class ChatColorEntry extends CycleValueEntry {
+        ChatColorEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             this.btnValue.enabled = enabled();
             updateValueButtonText();
         }
 
         @Override
-        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial)
-        {
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial) {
             this.btnValue.packedFGColour = GuiUtils.getColorCode(getValidValueDisplay().charAt(0), true);
             super.drawEntry(slotIndex, x, y, listWidth, slotHeight, mouseX, mouseY, isSelected, partial);
         }
 
         @Override
-        public void updateValueButtonText()
-        {
+        public void updateValueButtonText() {
             this.btnValue.displayString = I18n.format(getValidValueDisplay()) + " - " + I18n.format("fml.configgui.sampletext");
         }
     }
 
     /**
      * SelectValueEntry
-     *
+     * <p>
      * Provides a GuiButton with the current value as the displayString. Accepts a Map of selectable values with the signature <Object,
      * String> where the key is the Object to be selected and the value is the String that will show on the selection list. EG: a map of Mod
      * ID values where the key is the Mod ID and the value is the Mod Name.
      */
-    public static class SelectValueEntry extends ButtonEntry
-    {
-        protected final String        beforeValue;
-        protected Object              currentValue;
+    public static class SelectValueEntry extends ButtonEntry {
+        protected final String beforeValue;
+        protected Object currentValue;
         protected Map<Object, String> selectableValues;
 
-        public SelectValueEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement, Map<Object, String> selectableValues)
-        {
+        public SelectValueEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement, Map<Object, String> selectableValues) {
             super(owningScreen, owningEntryList, configElement);
             beforeValue = configElement.get().toString();
             currentValue = configElement.get().toString();
@@ -614,29 +534,24 @@
         }
 
         @Override
-        public void updateValueButtonText()
-        {
+        public void updateValueButtonText() {
             this.btnValue.displayString = currentValue.toString();
         }
 
         @Override
-        public void valueButtonPressed(int slotIndex)
-        {
+        public void valueButtonPressed(int slotIndex) {
             mc.displayGuiScreen(new GuiSelectString(this.owningScreen, configElement, slotIndex, selectableValues, currentValue, enabled()));
         }
 
-        public void setValueFromChildScreen(Object newValue)
-        {
-            if (enabled() && currentValue != null ? !currentValue.equals(newValue) : newValue != null)
-            {
+        public void setValueFromChildScreen(Object newValue) {
+            if (enabled() && currentValue != null ? !currentValue.equals(newValue) : newValue != null) {
                 currentValue = newValue;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             if (configElement.getDefault() != null)
                 return configElement.getDefault().equals(currentValue);
             else
@@ -644,18 +559,15 @@
         }
 
         @Override
-        public void setToDefault()
-        {
-            if (enabled())
-            {
+        public void setToDefault() {
+            if (enabled()) {
                 this.currentValue = configElement.getDefault().toString();
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             if (beforeValue != null)
                 return !beforeValue.equals(currentValue);
             else
@@ -663,20 +575,16 @@
         }
 
         @Override
-        public void undoChanges()
-        {
-            if (enabled())
-            {
+        public void undoChanges() {
+            if (enabled()) {
                 currentValue = beforeValue;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled() && isChanged())
-            {
+        public boolean saveConfigElement() {
+            if (enabled() && isChanged()) {
                 this.configElement.set(currentValue);
                 return configElement.requiresMcRestart();
             }
@@ -684,31 +592,27 @@
         }
 
         @Override
-        public String getCurrentValue()
-        {
+        public String getCurrentValue() {
             return this.currentValue.toString();
         }
 
         @Override
-        public String[] getCurrentValues()
-        {
-            return new String[] { getCurrentValue() };
+        public String[] getCurrentValues() {
+            return new String[]{getCurrentValue()};
         }
     }
 
     /**
      * ArrayEntry
-     *
+     * <p>
      * Provides a GuiButton with the list contents as the displayString. Clicking the button navigates to a screen where the list can be
      * edited.
      */
-    public static class ArrayEntry extends ButtonEntry
-    {
+    public static class ArrayEntry extends ButtonEntry {
         protected final Object[] beforeValues;
-        protected Object[]       currentValues;
+        protected Object[] currentValues;
 
-        public ArrayEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public ArrayEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             beforeValues = configElement.getList();
             currentValues = configElement.getList();
@@ -716,8 +620,7 @@
         }
 
         @Override
-        public void updateValueButtonText()
-        {
+        public void updateValueButtonText() {
             this.btnValue.displayString = "";
             for (Object o : currentValues)
                 this.btnValue.displayString += ", [" + o + "]";
@@ -726,57 +629,46 @@
         }
 
         @Override
-        public void valueButtonPressed(int slotIndex)
-        {
+        public void valueButtonPressed(int slotIndex) {
             mc.displayGuiScreen(new GuiEditArray(this.owningScreen, configElement, slotIndex, currentValues, enabled()));
         }
 
-        public void setListFromChildScreen(Object[] newList)
-        {
-            if (enabled() && !Arrays.deepEquals(currentValues, newList))
-            {
+        public void setListFromChildScreen(Object[] newList) {
+            if (enabled() && !Arrays.deepEquals(currentValues, newList)) {
                 currentValues = newList;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             return Arrays.deepEquals(configElement.getDefaults(), currentValues);
         }
 
         @Override
-        public void setToDefault()
-        {
-            if (enabled())
-            {
+        public void setToDefault() {
+            if (enabled()) {
                 this.currentValues = configElement.getDefaults();
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             return !Arrays.deepEquals(beforeValues, currentValues);
         }
 
         @Override
-        public void undoChanges()
-        {
-            if (enabled())
-            {
+        public void undoChanges() {
+            if (enabled()) {
                 currentValues = beforeValues;
                 updateValueButtonText();
             }
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled() && isChanged())
-            {
+        public boolean saveConfigElement() {
+            if (enabled() && isChanged()) {
                 this.configElement.set(currentValues);
                 return configElement.requiresMcRestart();
             }
@@ -784,29 +676,25 @@
         }
 
         @Override
-        public Object getCurrentValue()
-        {
+        public Object getCurrentValue() {
             return this.btnValue.displayString;
         }
 
         @Override
-        public Object[] getCurrentValues()
-        {
+        public Object[] getCurrentValues() {
             return this.currentValues;
         }
     }
 
     /**
      * NumberSliderEntry
-     *
+     * <p>
      * Provides a slider for numeric properties.
      */
-    public static class NumberSliderEntry extends ButtonEntry
-    {
+    public static class NumberSliderEntry extends ButtonEntry {
         protected final double beforeValue;
 
-        public NumberSliderEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public NumberSliderEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement, new GuiSlider(0, owningEntryList.controlX, 0, owningEntryList.controlWidth, 18,
                     "", "", Double.valueOf(configElement.getMinValue().toString()), Double.valueOf(configElement.getMaxValue().toString()),
                     Double.valueOf(configElement.get().toString()), configElement.getType() == ConfigGuiType.DOUBLE, true));
@@ -818,17 +706,16 @@
         }
 
         @Override
-        public void updateValueButtonText()
-        {
+        public void updateValueButtonText() {
             ((GuiSlider) this.btnValue).updateSlider();
         }
 
         @Override
-        public void valueButtonPressed(int slotIndex) {}
+        public void valueButtonPressed(int slotIndex) {
+        }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             if (configElement.getType() == ConfigGuiType.INTEGER)
                 return ((GuiSlider) this.btnValue).getValueInt() == Integer.valueOf(configElement.getDefault().toString());
             else
@@ -836,18 +723,15 @@
         }
 
         @Override
-        public void setToDefault()
-        {
-            if (this.enabled())
-            {
+        public void setToDefault() {
+            if (this.enabled()) {
                 ((GuiSlider) this.btnValue).setValue(Double.valueOf(configElement.getDefault().toString()));
                 ((GuiSlider) this.btnValue).updateSlider();
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             if (configElement.getType() == ConfigGuiType.INTEGER)
                 return ((GuiSlider) this.btnValue).getValueInt() != (int) Math.round(beforeValue);
             else
@@ -855,20 +739,16 @@
         }
 
         @Override
-        public void undoChanges()
-        {
-            if (this.enabled())
-            {
+        public void undoChanges() {
+            if (this.enabled()) {
                 ((GuiSlider) this.btnValue).setValue(beforeValue);
                 ((GuiSlider) this.btnValue).updateSlider();
             }
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (this.enabled() && this.isChanged())
-            {
+        public boolean saveConfigElement() {
+            if (this.enabled() && this.isChanged()) {
                 if (configElement.getType() == ConfigGuiType.INTEGER)
                     configElement.set(((GuiSlider) this.btnValue).getValueInt());
                 else
@@ -879,8 +759,7 @@
         }
 
         @Override
-        public Object getCurrentValue()
-        {
+        public Object getCurrentValue() {
             if (configElement.getType() == ConfigGuiType.INTEGER)
                 return ((GuiSlider) this.btnValue).getValueInt();
             else
@@ -888,29 +767,25 @@
         }
 
         @Override
-        public Object[] getCurrentValues()
-        {
-            return new Object[] { getCurrentValue() };
+        public Object[] getCurrentValues() {
+            return new Object[]{getCurrentValue()};
         }
     }
 
     /**
      * ButtonEntry
-     *
+     * <p>
      * Provides a basic GuiButton entry to be used as a base for other entries that require a button for the value.
      */
-    public static abstract class ButtonEntry extends ListEntryBase
-    {
+    public static abstract class ButtonEntry extends ListEntryBase {
         protected final GuiButtonExt btnValue;
 
-        public ButtonEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public ButtonEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             this(owningScreen, owningEntryList, configElement, new GuiButtonExt(0, owningEntryList.controlX, 0, owningEntryList.controlWidth, 18,
                     configElement.get() != null ? I18n.format(String.valueOf(configElement.get())) : ""));
         }
 
-        public ButtonEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement, GuiButtonExt button)
-        {
+        public ButtonEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement, GuiButtonExt button) {
             super(owningScreen, owningEntryList, configElement);
             this.btnValue = button;
         }
@@ -926,8 +801,7 @@
         public abstract void valueButtonPressed(int slotIndex);
 
         @Override
-        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial)
-        {
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial) {
             super.drawEntry(slotIndex, x, y, listWidth, slotHeight, mouseX, mouseY, isSelected, partial);
             this.btnValue.width = this.owningEntryList.controlWidth;
             this.btnValue.x = this.owningScreen.entryList.controlX;
@@ -940,16 +814,13 @@
          * Returns true if the mouse has been pressed on this control.
          */
         @Override
-        public boolean mousePressed(int index, int x, int y, int mouseEvent, int relativeX, int relativeY)
-        {
-            if (this.btnValue.mousePressed(this.mc, x, y))
-            {
+        public boolean mousePressed(int index, int x, int y, int mouseEvent, int relativeX, int relativeY) {
+            if (this.btnValue.mousePressed(this.mc, x, y)) {
                 btnValue.playPressSound(mc.getSoundHandler());
                 valueButtonPressed(index);
                 updateValueButtonText();
                 return true;
-            }
-            else
+            } else
                 return super.mousePressed(index, x, y, mouseEvent, relativeX, relativeY);
         }
 
@@ -957,45 +828,40 @@
          * Fired when the mouse button is released. Arguments: index, x, y, mouseEvent, relativeX, relativeY
          */
         @Override
-        public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX, int relativeY)
-        {
+        public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX, int relativeY) {
             super.mouseReleased(index, x, y, mouseEvent, relativeX, relativeY);
             this.btnValue.mouseReleased(x, y);
         }
 
         @Override
-        public void keyTyped(char eventChar, int eventKey)
-        {}
+        public void keyTyped(char eventChar, int eventKey) {
+        }
 
         @Override
-        public void updateCursorCounter()
-        {}
+        public void updateCursorCounter() {
+        }
 
         @Override
-        public void mouseClicked(int x, int y, int mouseEvent)
-        {}
+        public void mouseClicked(int x, int y, int mouseEvent) {
+        }
     }
 
     /**
      * IntegerEntry
-     *
+     * <p>
      * Provides a GuiTextField for user input. Input is restricted to ensure the value can be parsed using Integer.parseInteger().
      */
-    public static class IntegerEntry extends StringEntry
-    {
+    public static class IntegerEntry extends StringEntry {
         protected final int beforeValue;
 
-        public IntegerEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public IntegerEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             this.beforeValue = Integer.valueOf(configElement.get().toString());
         }
 
         @Override
-        public void keyTyped(char eventChar, int eventKey)
-        {
-            if (enabled() || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END)
-            {
+        public void keyTyped(char eventChar, int eventKey) {
+            if (enabled() || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END) {
                 String validChars = "0123456789";
                 String before = this.textFieldValue.getText();
                 if (validChars.contains(String.valueOf(eventChar))
@@ -1004,74 +870,56 @@
                         || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END)
                     this.textFieldValue.textboxKeyTyped((enabled() ? eventChar : Keyboard.CHAR_NONE), eventKey);
 
-                if (!textFieldValue.getText().trim().isEmpty() && !textFieldValue.getText().trim().equals("-"))
-                {
-                    try
-                    {
+                if (!textFieldValue.getText().trim().isEmpty() && !textFieldValue.getText().trim().equals("-")) {
+                    try {
                         long value = Long.parseLong(textFieldValue.getText().trim());
                         if (value < Integer.valueOf(configElement.getMinValue().toString()) || value > Integer.valueOf(configElement.getMaxValue().toString()))
                             this.isValidValue = false;
                         else
                             this.isValidValue = true;
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         this.isValidValue = false;
                     }
-                }
-                else
+                } else
                     this.isValidValue = false;
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
-            try
-            {
+        public boolean isChanged() {
+            try {
                 return this.beforeValue != Integer.parseInt(textFieldValue.getText().trim());
-            }
-            catch (Throwable e)
-            {
+            } catch (Throwable e) {
                 return true;
             }
         }
 
         @Override
-        public void undoChanges()
-        {
+        public void undoChanges() {
             if (enabled())
                 this.textFieldValue.setText(String.valueOf(beforeValue));
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled())
-            {
+        public boolean saveConfigElement() {
+            if (enabled()) {
                 if (isChanged() && this.isValidValue)
-                    try
-                    {
+                    try {
                         int value = Integer.parseInt(textFieldValue.getText().trim());
                         this.configElement.set(value);
                         return configElement.requiresMcRestart();
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         this.configElement.setToDefault();
                     }
                 else if (isChanged() && !this.isValidValue)
-                    try
-                    {
+                    try {
                         int value = Integer.parseInt(textFieldValue.getText().trim());
                         if (value < Integer.valueOf(configElement.getMinValue().toString()))
                             this.configElement.set(configElement.getMinValue());
                         else
                             this.configElement.set(configElement.getMaxValue());
 
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         this.configElement.setToDefault();
                     }
 
@@ -1083,24 +931,20 @@
 
     /**
      * DoubleEntry
-     *
+     * <p>
      * Provides a GuiTextField for user input. Input is restricted to ensure the value can be parsed using Double.parseDouble().
      */
-    public static class DoubleEntry extends StringEntry
-    {
+    public static class DoubleEntry extends StringEntry {
         protected final double beforeValue;
 
-        public DoubleEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public DoubleEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             this.beforeValue = Double.valueOf(configElement.get().toString());
         }
 
         @Override
-        public void keyTyped(char eventChar, int eventKey)
-        {
-            if (enabled() || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END)
-            {
+        public void keyTyped(char eventChar, int eventKey) {
+            if (enabled() || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END) {
                 String validChars = "0123456789";
                 String before = this.textFieldValue.getText();
                 if (validChars.contains(String.valueOf(eventChar)) ||
@@ -1110,73 +954,55 @@
                         || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END)
                     this.textFieldValue.textboxKeyTyped((enabled() ? eventChar : Keyboard.CHAR_NONE), eventKey);
 
-                if (!textFieldValue.getText().trim().isEmpty() && !textFieldValue.getText().trim().equals("-"))
-                {
-                    try
-                    {
+                if (!textFieldValue.getText().trim().isEmpty() && !textFieldValue.getText().trim().equals("-")) {
+                    try {
                         double value = Double.parseDouble(textFieldValue.getText().trim());
                         if (value < Double.valueOf(configElement.getMinValue().toString()) || value > Double.valueOf(configElement.getMaxValue().toString()))
                             this.isValidValue = false;
                         else
                             this.isValidValue = true;
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         this.isValidValue = false;
                     }
-                }
-                else
+                } else
                     this.isValidValue = false;
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
-            try
-            {
+        public boolean isChanged() {
+            try {
                 return this.beforeValue != Double.parseDouble(textFieldValue.getText().trim());
-            }
-            catch (Throwable e)
-            {
+            } catch (Throwable e) {
                 return true;
             }
         }
 
         @Override
-        public void undoChanges()
-        {
+        public void undoChanges() {
             if (enabled())
                 this.textFieldValue.setText(String.valueOf(beforeValue));
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled())
-            {
+        public boolean saveConfigElement() {
+            if (enabled()) {
                 if (isChanged() && this.isValidValue)
-                    try
-                    {
+                    try {
                         double value = Double.parseDouble(textFieldValue.getText().trim());
                         this.configElement.set(value);
                         return configElement.requiresMcRestart();
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         this.configElement.setToDefault();
                     }
                 else if (isChanged() && !this.isValidValue)
-                    try
-                    {
+                    try {
                         double value = Double.parseDouble(textFieldValue.getText().trim());
                         if (value < Double.valueOf(configElement.getMinValue().toString()))
                             this.configElement.set(configElement.getMinValue());
                         else
                             this.configElement.set(configElement.getMaxValue());
-                    }
-                    catch (Throwable e)
-                    {
+                    } catch (Throwable e) {
                         this.configElement.setToDefault();
                     }
 
@@ -1188,16 +1014,14 @@
 
     /**
      * StringEntry
-     *
+     * <p>
      * Provides a GuiTextField for user input.
      */
-    public static class StringEntry extends ListEntryBase
-    {
+    public static class StringEntry extends ListEntryBase {
         protected final GuiTextField textFieldValue;
-        protected final String       beforeValue;
+        protected final String beforeValue;
 
-        public StringEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public StringEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
             beforeValue = configElement.get().toString();
             this.textFieldValue = new GuiTextField(10, this.mc.fontRenderer, this.owningEntryList.controlX + 1, 0, this.owningEntryList.controlWidth - 3, 16);
@@ -1206,8 +1030,7 @@
         }
 
         @Override
-        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial)
-        {
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial) {
             super.drawEntry(slotIndex, x, y, listWidth, slotHeight, mouseX, mouseY, isSelected, partial);
             this.textFieldValue.x = this.owningEntryList.controlX + 2;
             this.textFieldValue.y = y + 1;
@@ -1217,14 +1040,11 @@
         }
 
         @Override
-        public void keyTyped(char eventChar, int eventKey)
-        {
-            if (enabled() || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END)
-            {
+        public void keyTyped(char eventChar, int eventKey) {
+            if (enabled() || eventKey == Keyboard.KEY_LEFT || eventKey == Keyboard.KEY_RIGHT || eventKey == Keyboard.KEY_HOME || eventKey == Keyboard.KEY_END) {
                 this.textFieldValue.textboxKeyTyped((enabled() ? eventChar : Keyboard.CHAR_NONE), eventKey);
 
-                if (configElement.getValidationPattern() != null)
-                {
+                if (configElement.getValidationPattern() != null) {
                     if (configElement.getValidationPattern().matcher(this.textFieldValue.getText().trim()).matches())
                         isValidValue = true;
                     else
@@ -1234,59 +1054,47 @@
         }
 
         @Override
-        public void updateCursorCounter()
-        {
+        public void updateCursorCounter() {
             this.textFieldValue.updateCursorCounter();
         }
 
         @Override
-        public void mouseClicked(int x, int y, int mouseEvent)
-        {
+        public void mouseClicked(int x, int y, int mouseEvent) {
             this.textFieldValue.mouseClicked(x, y, mouseEvent);
         }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             return configElement.getDefault() != null ? configElement.getDefault().toString().equals(this.textFieldValue.getText()) :
-                this.textFieldValue.getText().trim().isEmpty();
+                    this.textFieldValue.getText().trim().isEmpty();
         }
 
         @Override
-        public void setToDefault()
-        {
-            if (enabled())
-            {
+        public void setToDefault() {
+            if (enabled()) {
                 this.textFieldValue.setText(this.configElement.getDefault().toString());
                 keyTyped((char) Keyboard.CHAR_NONE, Keyboard.KEY_HOME);
             }
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             return beforeValue != null ? !this.beforeValue.equals(textFieldValue.getText()) : this.textFieldValue.getText().trim().isEmpty();
         }
 
         @Override
-        public void undoChanges()
-        {
+        public void undoChanges() {
             if (enabled())
                 this.textFieldValue.setText(beforeValue);
         }
 
         @Override
-        public boolean saveConfigElement()
-        {
-            if (enabled())
-            {
-                if (isChanged() && this.isValidValue)
-                {
+        public boolean saveConfigElement() {
+            if (enabled()) {
+                if (isChanged() && this.isValidValue) {
                     this.configElement.set(this.textFieldValue.getText());
                     return configElement.requiresMcRestart();
-                }
-                else if (isChanged() && !this.isValidValue)
-                {
+                } else if (isChanged() && !this.isValidValue) {
                     this.configElement.setToDefault();
                     return configElement.requiresMcRestart()
                             && beforeValue != null ? beforeValue.equals(configElement.getDefault()) : configElement.getDefault() == null;
@@ -1296,30 +1104,26 @@
         }
 
         @Override
-        public Object getCurrentValue()
-        {
+        public Object getCurrentValue() {
             return this.textFieldValue.getText();
         }
 
         @Override
-        public Object[] getCurrentValues()
-        {
-            return new Object[] { getCurrentValue() };
+        public Object[] getCurrentValues() {
+            return new Object[]{getCurrentValue()};
         }
     }
 
     /**
      * CategoryEntry
-     *
+     * <p>
      * Provides an entry that consists of a GuiButton for navigating to the child category GuiConfig screen.
      */
-    public static class CategoryEntry extends ListEntryBase
-    {
+    public static class CategoryEntry extends ListEntryBase {
         protected GuiScreen childScreen;
         protected final GuiButtonExt btnSelectCategory;
 
-        public CategoryEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public CategoryEntry(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             super(owningScreen, owningEntryList, configElement);
 
             this.childScreen = this.buildChildScreen();
@@ -1333,8 +1137,7 @@
         /**
          * This method is called in the constructor and is used to set the childScreen field.
          */
-        protected GuiScreen buildChildScreen()
-        {
+        protected GuiScreen buildChildScreen() {
             return new GuiConfig(this.owningScreen, this.configElement.getChildElements(), this.owningScreen.modID,
                     owningScreen.allRequireWorldRestart || this.configElement.requiresWorldRestart(),
                     owningScreen.allRequireMcRestart || this.configElement.requiresMcRestart(), this.owningScreen.title,
@@ -1342,8 +1145,7 @@
         }
 
         @Override
-        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial)
-        {
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial) {
             this.btnSelectCategory.x = listWidth / 2 - 150;
             this.btnSelectCategory.y = y;
             this.btnSelectCategory.enabled = enabled();
@@ -1353,8 +1155,7 @@
         }
 
         @Override
-        public void drawToolTip(int mouseX, int mouseY)
-        {
+        public void drawToolTip(int mouseX, int mouseY) {
             boolean canHover = mouseY < this.owningScreen.entryList.bottom && mouseY > this.owningScreen.entryList.top;
 
             if (this.tooltipHoverChecker.checkHover(mouseX, mouseY, canHover))
@@ -1364,27 +1165,22 @@
         }
 
         @Override
-        public boolean mousePressed(int index, int x, int y, int mouseEvent, int relativeX, int relativeY)
-        {
-            if (this.btnSelectCategory.mousePressed(this.mc, x, y))
-            {
+        public boolean mousePressed(int index, int x, int y, int mouseEvent, int relativeX, int relativeY) {
+            if (this.btnSelectCategory.mousePressed(this.mc, x, y)) {
                 btnSelectCategory.playPressSound(mc.getSoundHandler());
                 Minecraft.getMinecraft().displayGuiScreen(childScreen);
                 return true;
-            }
-            else
+            } else
                 return super.mousePressed(index, x, y, mouseEvent, relativeX, relativeY);
         }
 
         @Override
-        public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX, int relativeY)
-        {
+        public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX, int relativeY) {
             this.btnSelectCategory.mouseReleased(x, y);
         }
 
         @Override
-        public boolean isDefault()
-        {
+        public boolean isDefault() {
             if (childScreen instanceof GuiConfig && ((GuiConfig) childScreen).entryList != null)
                 return ((GuiConfig) childScreen).entryList.areAllEntriesDefault(true);
 
@@ -1392,31 +1188,28 @@
         }
 
         @Override
-        public void setToDefault()
-        {
+        public void setToDefault() {
             if (childScreen instanceof GuiConfig && ((GuiConfig) childScreen).entryList != null)
                 ((GuiConfig) childScreen).entryList.setAllToDefault(true);
         }
 
         @Override
-        public void keyTyped(char eventChar, int eventKey)
-        {}
+        public void keyTyped(char eventChar, int eventKey) {
+        }
 
         @Override
-        public void updateCursorCounter()
-        {}
+        public void updateCursorCounter() {
+        }
 
         @Override
-        public void mouseClicked(int x, int y, int mouseEvent)
-        {}
+        public void mouseClicked(int x, int y, int mouseEvent) {
+        }
 
         @Override
-        public boolean saveConfigElement()
-        {
+        public boolean saveConfigElement() {
             boolean requiresRestart = false;
 
-            if (childScreen instanceof GuiConfig && ((GuiConfig) childScreen).entryList != null)
-            {
+            if (childScreen instanceof GuiConfig && ((GuiConfig) childScreen).entryList != null) {
                 requiresRestart = configElement.requiresMcRestart() && ((GuiConfig) childScreen).entryList.hasChangedEntry(true);
 
                 if (((GuiConfig) childScreen).entryList.saveConfigElements())
@@ -1427,8 +1220,7 @@
         }
 
         @Override
-        public boolean isChanged()
-        {
+        public boolean isChanged() {
             if (childScreen instanceof GuiConfig && ((GuiConfig) childScreen).entryList != null)
                 return ((GuiConfig) childScreen).entryList.hasChangedEntry(true);
             else
@@ -1436,50 +1228,43 @@
         }
 
         @Override
-        public void undoChanges()
-        {
+        public void undoChanges() {
             if (childScreen instanceof GuiConfig && ((GuiConfig) childScreen).entryList != null)
                 ((GuiConfig) childScreen).entryList.undoAllChanges(true);
         }
 
         @Override
-        public boolean enabled()
-        {
+        public boolean enabled() {
             return true;
         }
 
         @Override
-        public int getLabelWidth()
-        {
+        public int getLabelWidth() {
             return 0;
         }
 
         @Override
-        public int getEntryRightBound()
-        {
+        public int getEntryRightBound() {
             return this.owningEntryList.width / 2 + 155 + 22 + 18;
         }
 
         @Override
-        public String getCurrentValue()
-        {
+        public String getCurrentValue() {
             return "";
         }
 
         @Override
-        public String[] getCurrentValues()
-        {
-            return new String[] { getCurrentValue() };
+        public String[] getCurrentValues() {
+            return new String[]{getCurrentValue()};
         }
     }
 
     /**
      * ListEntryBase
-     *
+     * <p>
      * Provides a base entry for others to extend. Handles drawing the prop label (if drawLabel == true) and the Undo/Default buttons.
      */
-    public static abstract class ListEntryBase implements IConfigEntry
-    {
+    public static abstract class ListEntryBase implements IConfigEntry {
         protected final GuiConfig owningScreen;
         protected final GuiConfigEntries owningEntryList;
         protected final IConfigElement configElement;
@@ -1496,8 +1281,7 @@
         protected HoverChecker defaultHoverChecker;
         protected boolean drawLabel;
 
-        public ListEntryBase(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement)
-        {
+        public ListEntryBase(GuiConfig owningScreen, GuiConfigEntries owningEntryList, IConfigElement configElement) {
             this.owningScreen = owningScreen;
             this.owningEntryList = owningEntryList;
             this.configElement = configElement;
@@ -1512,8 +1296,8 @@
 
             this.undoHoverChecker = new HoverChecker(this.btnUndoChanges, 800);
             this.defaultHoverChecker = new HoverChecker(this.btnDefault, 800);
-            this.undoToolTip = Arrays.asList(new String[] { I18n.format("fml.configgui.tooltip.undoChanges") });
-            this.defaultToolTip = Arrays.asList(new String[] { I18n.format("fml.configgui.tooltip.resetToDefault") });
+            this.undoToolTip = Arrays.asList(new String[]{I18n.format("fml.configgui.tooltip.undoChanges")});
+            this.defaultToolTip = Arrays.asList(new String[]{I18n.format("fml.configgui.tooltip.resetToDefault")});
             this.toolTip = new ArrayList<String>();
 
             this.drawLabel = true;
@@ -1542,12 +1326,10 @@
         }
 
         @Override
-        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial)
-        {
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partial) {
             boolean isChanged = isChanged();
 
-            if (drawLabel)
-            {
+            if (drawLabel) {
                 String label = (!isValidValue ? TextFormatting.RED.toString() :
                         (isChanged ? TextFormatting.WHITE.toString() : TextFormatting.GRAY.toString()))
                         + (isChanged ? TextFormatting.ITALIC.toString() : "") + this.name;
@@ -1575,11 +1357,9 @@
         }
 
         @Override
-        public void drawToolTip(int mouseX, int mouseY)
-        {
+        public void drawToolTip(int mouseX, int mouseY) {
             boolean canHover = mouseY < this.owningScreen.entryList.bottom && mouseY > this.owningScreen.entryList.top;
-            if (toolTip != null && this.tooltipHoverChecker != null)
-            {
+            if (toolTip != null && this.tooltipHoverChecker != null) {
                 if (this.tooltipHoverChecker.checkHover(mouseX, mouseY, canHover))
                     this.owningScreen.drawToolTip(toolTip, mouseX, mouseY);
             }
@@ -1592,16 +1372,12 @@
         }
 
         @Override
-        public boolean mousePressed(int index, int x, int y, int mouseEvent, int relativeX, int relativeY)
-        {
-            if (this.btnDefault.mousePressed(this.mc, x, y))
-            {
+        public boolean mousePressed(int index, int x, int y, int mouseEvent, int relativeX, int relativeY) {
+            if (this.btnDefault.mousePressed(this.mc, x, y)) {
                 btnDefault.playPressSound(mc.getSoundHandler());
                 setToDefault();
                 return true;
-            }
-            else if (this.btnUndoChanges.mousePressed(this.mc, x, y))
-            {
+            } else if (this.btnUndoChanges.mousePressed(this.mc, x, y)) {
                 btnUndoChanges.playPressSound(mc.getSoundHandler());
                 undoChanges();
                 return true;
@@ -1610,8 +1386,7 @@
         }
 
         @Override
-        public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX, int relativeY)
-        {
+        public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX, int relativeY) {
             this.btnDefault.mouseReleased(x, y);
         }
 
@@ -1640,35 +1415,31 @@
         public abstract boolean saveConfigElement();
 
         @Override
-        public void updatePosition(int p_178011_1_, int p_178011_2_, int p_178011_3_, float partial){}
+        public void updatePosition(int p_178011_1_, int p_178011_2_, int p_178011_3_, float partial) {
+        }
 
         @Override
-        public boolean enabled()
-        {
+        public boolean enabled() {
             return owningScreen.isWorldRunning ? !owningScreen.allRequireWorldRestart && !configElement.requiresWorldRestart() : true;
         }
 
         @Override
-        public int getLabelWidth()
-        {
+        public int getLabelWidth() {
             return this.mc.fontRenderer.getStringWidth(this.name);
         }
 
         @Override
-        public int getEntryRightBound()
-        {
+        public int getEntryRightBound() {
             return this.owningEntryList.resetX + 40;
         }
 
         @Override
-        public IConfigElement getConfigElement()
-        {
+        public IConfigElement getConfigElement() {
             return configElement;
         }
 
         @Override
-        public String getName()
-        {
+        public String getName() {
             return configElement.getName();
         }
 
@@ -1679,14 +1450,13 @@
         public abstract Object[] getCurrentValues();
 
         @Override
-        public void onGuiClosed()
-        {}
+        public void onGuiClosed() {
+        }
 
         /**
          * Get string surrounding tagged area.
          */
-        private String removeTag(String target, String tagStart, String tagEnd)
-        {
+        private String removeTag(String target, String tagStart, String tagEnd) {
             int tagStartPosition = tagStartPosition = target.indexOf(tagStart);
             int tagEndPosition = tagEndPosition = target.indexOf(tagEnd, tagStartPosition + tagStart.length());
 
@@ -1703,10 +1473,10 @@
     /**
      * Provides an interface for defining GuiConfigEntry.listEntry objects.
      */
-    public static interface IConfigEntry extends GuiListExtended.IGuiListEntry
-    {
+    public static interface IConfigEntry extends GuiListExtended.IGuiListEntry {
         /**
          * Gets the IConfigElement object owned by this entry.
+         *
          * @return
          */
         IConfigElement getConfigElement();
