--- ../src-base/minecraft/net/minecraftforge/fml/client/SplashProgress.java
+++ ../src-work/minecraft/net/minecraftforge/fml/client/SplashProgress.java
@@ -19,55 +19,17 @@
 
 package net.minecraftforge.fml.client;
 
-import static org.lwjgl.opengl.GL11.*;
-import static org.lwjgl.opengl.GL12.*;
-
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.Reader;
-import java.io.Writer;
-import java.lang.Thread.UncaughtExceptionHandler;
-import java.nio.IntBuffer;
-import java.nio.charset.StandardCharsets;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
-import javax.imageio.ImageReader;
-import javax.imageio.stream.ImageInputStream;
-
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.texture.TextureManager;
-import net.minecraft.client.resources.DefaultResourcePack;
-import net.minecraft.client.resources.FileResourcePack;
-import net.minecraft.client.resources.FolderResourcePack;
-import net.minecraft.client.resources.IResource;
-import net.minecraft.client.resources.IResourcePack;
-import net.minecraft.client.resources.SimpleResource;
+import net.minecraft.client.resources.*;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.launchwrapper.Launch;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.common.EnhancedRuntimeException;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.ICrashCallable;
-import net.minecraftforge.fml.common.ProgressManager;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.ProgressManager.ProgressBar;
 import net.minecraftforge.fml.common.asm.FMLSanityChecker;
-
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.lwjgl.BufferUtils;
@@ -77,13 +39,32 @@
 import org.lwjgl.opengl.SharedDrawable;
 import org.lwjgl.util.glu.GLU;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import javax.imageio.ImageReader;
+import javax.imageio.stream.ImageInputStream;
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.nio.IntBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+import static org.lwjgl.opengl.GL11.*;
+import static org.lwjgl.opengl.GL12.GL_BGRA;
+import static org.lwjgl.opengl.GL12.GL_UNSIGNED_INT_8_8_8_8_REV;
+
 /**
  * Not a fully fleshed out API, may change in future MC versions.
  * However feel free to use and suggest additions.
  */
 @SuppressWarnings("serial")
-public class SplashProgress
-{
+public class SplashProgress {
     private static Drawable d;
     private static volatile boolean pause = false;
     private static volatile boolean done = false;
@@ -123,30 +104,25 @@
 
     static final Semaphore mutex = new Semaphore(1);
 
-    private static String getString(String name, String def)
-    {
+    private static String getString(String name, String def) {
         String value = config.getProperty(name, def);
         config.setProperty(name, value);
         return value;
     }
 
-    private static boolean getBool(String name, boolean def)
-    {
+    private static boolean getBool(String name, boolean def) {
         return Boolean.parseBoolean(getString(name, Boolean.toString(def)));
     }
 
-    private static int getInt(String name, int def)
-    {
+    private static int getInt(String name, int def) {
         return Integer.decode(getString(name, Integer.toString(def)));
     }
 
-    private static int getHex(String name, int def)
-    {
+    private static int getHex(String name, int def) {
         return Integer.decode(getString(name, "0x" + Integer.toString(def, 16).toUpperCase()));
     }
 
-    public static void start()
-    {
+    public static void start() {
         File configFile = new File(Minecraft.getMinecraft().mcDataDir, "config/splash.properties");
 
         File parent = configFile.getParentFile();
@@ -154,12 +130,9 @@
             parent.mkdirs();
 
         config = new Properties();
-        try (Reader r = new InputStreamReader(new FileInputStream(configFile), StandardCharsets.UTF_8))
-        {
+        try (Reader r = new InputStreamReader(new FileInputStream(configFile), StandardCharsets.UTF_8)) {
             config.load(r);
-        }
-        catch(IOException e)
-        {
+        } catch (IOException e) {
             FMLLog.log.info("Could not load splash.properties, will create a default one");
         }
 
@@ -169,18 +142,18 @@
 
         // Enable if we have the flag, and there's either no optifine, or optifine has added a key to the blackboard ("optifine.ForgeSplashCompatible")
         // Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code.
-        enabled =            getBool("enabled",      defaultEnabled) && ( (!FMLClientHandler.instance().hasOptifine()) || Launch.blackboard.containsKey("optifine.ForgeSplashCompatible"));
-        rotate =             getBool("rotate",       false);
-        showMemory =         getBool("showMemory",   true);
-        logoOffset =         getInt("logoOffset",    0);
-        backgroundColor =    getHex("background",    0xFFFFFF);
-        fontColor =          getHex("font",          0x000000);
-        barBorderColor =     getHex("barBorder",     0xC0C0C0);
-        barColor =           getHex("bar",           0xCB3D35);
+        enabled = getBool("enabled", defaultEnabled) && ((!FMLClientHandler.instance().hasOptifine()) || Launch.blackboard.containsKey("optifine.ForgeSplashCompatible"));
+        rotate = getBool("rotate", false);
+        showMemory = getBool("showMemory", true);
+        logoOffset = getInt("logoOffset", 0);
+        backgroundColor = getHex("background", 0xFFFFFF);
+        fontColor = getHex("font", 0x000000);
+        barBorderColor = getHex("barBorder", 0xC0C0C0);
+        barColor = getHex("bar", 0xCB3D35);
         barBackgroundColor = getHex("barBackground", 0xFFFFFF);
-        memoryGoodColor =    getHex("memoryGood",    0x78CB34);
-        memoryWarnColor =    getHex("memoryWarn",    0xE6E84A);
-        memoryLowColor =     getHex("memoryLow",     0xE42F2F);
+        memoryGoodColor = getHex("memoryGood", 0x78CB34);
+        memoryWarnColor = getHex("memoryWarn", 0xE6E84A);
+        memoryLowColor = getHex("memoryLow", 0xE42F2F);
 
         final ResourceLocation fontLoc = new ResourceLocation(getString("fontTexture", "textures/font/ascii.png"));
         final ResourceLocation logoLoc = new ResourceLocation("textures/gui/title/mojang.png");
@@ -189,33 +162,27 @@
 
         File miscPackFile = new File(Minecraft.getMinecraft().mcDataDir, getString("resourcePackPath", "resources"));
 
-        try (Writer w = new OutputStreamWriter(new FileOutputStream(configFile), StandardCharsets.UTF_8))
-        {
+        try (Writer w = new OutputStreamWriter(new FileOutputStream(configFile), StandardCharsets.UTF_8)) {
             config.store(w, "Splash screen properties");
-        }
-        catch(IOException e)
-        {
+        } catch (IOException e) {
             FMLLog.log.error("Could not save the splash.properties file", e);
         }
 
         miscPack = createResourcePack(miscPackFile);
 
-        if(!enabled) return;
+        if (!enabled) return;
         // getting debug info out of the way, while we still can
-        FMLCommonHandler.instance().registerCrashCallable(new ICrashCallable()
-        {
+        FMLCommonHandler.instance().registerCrashCallable(new ICrashCallable() {
             @Override
-            public String call() throws Exception
-            {
+            public String call() throws Exception {
                 return "' Vendor: '" + glGetString(GL_VENDOR) +
-                       "' Version: '" + glGetString(GL_VERSION) +
-                       "' Renderer: '" + glGetString(GL_RENDERER) +
-                       "'";
+                        "' Version: '" + glGetString(GL_VERSION) +
+                        "' Renderer: '" + glGetString(GL_RENDERER) +
+                        "'";
             }
 
             @Override
-            public String getLabel()
-            {
+            public String getLabel() {
                 return "GL info";
             }
         });
@@ -224,14 +191,11 @@
         report.getCategory().appendToStringBuilder(systemDetailsBuilder);
         FMLLog.log.info(systemDetailsBuilder.toString());
 
-        try
-        {
+        try {
             d = new SharedDrawable(Display.getDrawable());
             Display.getDrawable().releaseContext();
             d.makeCurrent();
-        }
-        catch (LWJGLException e)
-        {
+        } catch (LWJGLException e) {
             FMLLog.log.error("Error starting SplashProgress:", e);
             disableSplash(e);
         }
@@ -240,17 +204,16 @@
         getMaxTextureSize();
 
         //Thread mainThread = Thread.currentThread();
-        thread = new Thread(new Runnable()
-        {
+        thread = new Thread(new Runnable() {
             private final int barWidth = 400;
             private final int barHeight = 20;
             private final int textHeight2 = 20;
             private final int barOffset = 55;
             private long updateTiming;
             private long framecount;
+
             @Override
-            public void run()
-            {
+            public void run() {
                 setGL();
                 fontTexture = new Texture(fontLoc, null);
                 logoTexture = new Texture(logoLoc, null, false);
@@ -258,16 +221,13 @@
                 glEnable(GL_TEXTURE_2D);
                 fontRenderer = new SplashFontRenderer();
                 glDisable(GL_TEXTURE_2D);
-                while(!done)
-                {
+                while (!done) {
                     framecount++;
                     ProgressBar first = null, penult = null, last = null;
                     Iterator<ProgressBar> i = ProgressManager.barIterator();
-                    while(i.hasNext())
-                    {
-                        if(first == null) first = i.next();
-                        else
-                        {
+                    while (i.hasNext()) {
+                        if (first == null) first = i.next();
+                        else {
                             penult = last;
                             last = i.next();
                         }
@@ -281,7 +241,7 @@
                     glViewport(0, 0, w, h);
                     glMatrixMode(GL_PROJECTION);
                     glLoadIdentity();
-                    glOrtho(320 - w/2, 320 + w/2, 240 + h/2, 240 - h/2, -1, 1);
+                    glOrtho(320 - w / 2, 320 + w / 2, 240 + h / 2, 240 - h / 2, -1, 1);
                     glMatrixMode(GL_MODELVIEW);
                     glLoadIdentity();
 
@@ -302,8 +262,7 @@
                     glDisable(GL_TEXTURE_2D);
 
                     // memory usage
-                    if (showMemory)
-                    {
+                    if (showMemory) {
                         glPushMatrix();
                         glTranslatef(320 - (float) barWidth / 2, 20, 0);
                         drawMemoryBar();
@@ -311,18 +270,15 @@
                     }
 
                     // bars
-                    if(first != null)
-                    {
+                    if (first != null) {
                         glPushMatrix();
-                        glTranslatef(320 - (float)barWidth / 2, 310, 0);
+                        glTranslatef(320 - (float) barWidth / 2, 310, 0);
                         drawBar(first);
-                        if(penult != null)
-                        {
+                        if (penult != null) {
                             glTranslatef(0, barOffset, 0);
                             drawBar(penult);
                         }
-                        if(last != null)
-                        {
+                        if (last != null) {
                             glTranslatef(0, barOffset, 0);
                             drawBar(last);
                         }
@@ -333,18 +289,15 @@
 
                     // forge logo
                     glColor4f(1, 1, 1, 1);
-                    float fw = (float)forgeTexture.getWidth() / 2;
-                    float fh = (float)forgeTexture.getHeight() / 2;
-                    if(rotate)
-                    {
+                    float fw = (float) forgeTexture.getWidth() / 2;
+                    float fh = (float) forgeTexture.getHeight() / 2;
+                    if (rotate) {
                         float sh = Math.max(fw, fh);
-                        glTranslatef(320 + w/2 - sh - logoOffset, 240 + h/2 - sh - logoOffset, 0);
+                        glTranslatef(320 + w / 2 - sh - logoOffset, 240 + h / 2 - sh - logoOffset, 0);
                         glRotatef(angle, 0, 0, 1);
+                    } else {
+                        glTranslatef(320 + w / 2 - fw - logoOffset, 240 + h / 2 - fh - logoOffset, 0);
                     }
-                    else
-                    {
-                        glTranslatef(320 + w/2 - fw - logoOffset, 240 + h/2 - fh - logoOffset, 0);
-                    }
                     int f = (angle / 5) % forgeTexture.getFrames();
                     glEnable(GL_TEXTURE_2D);
                     forgeTexture.bind();
@@ -375,8 +328,7 @@
                         updateTiming += dur;
                     }
                     mutex.release();
-                    if(pause)
-                    {
+                    if (pause) {
                         clearGL();
                         setGL();
                     }
@@ -387,15 +339,16 @@
                     // 4 milliseconds is a guess - but it should be enough to trigger in most circumstances. (Maybe if
                     // 240FPS is possible, this won't fire?)
                     if (framecount >= TIMING_FRAME_COUNT && updateTiming > TIMING_FRAME_THRESHOLD) {
-                        if (!isDisplayVSyncForced)
-                        {
+                        if (!isDisplayVSyncForced) {
                             isDisplayVSyncForced = true;
                             FMLLog.log.info("Using alternative sync timing : {} frames of Display.update took {} nanos", TIMING_FRAME_COUNT, updateTiming);
                         }
-                        try { Thread.sleep(16); } catch (InterruptedException ie) {}
-                    } else
-                    {
-                        if (framecount ==TIMING_FRAME_COUNT) {
+                        try {
+                            Thread.sleep(16);
+                        } catch (InterruptedException ie) {
+                        }
+                    } else {
+                        if (framecount == TIMING_FRAME_COUNT) {
                             FMLLog.log.info("Using sync timing. {} frames of Display.update took {} nanos", TIMING_FRAME_COUNT, updateTiming);
                         }
                         Display.sync(100);
@@ -404,13 +357,11 @@
                 clearGL();
             }
 
-            private void setColor(int color)
-            {
-                glColor3ub((byte)((color >> 16) & 0xFF), (byte)((color >> 8) & 0xFF), (byte)(color & 0xFF));
+            private void setColor(int color) {
+                glColor3ub((byte) ((color >> 16) & 0xFF), (byte) ((color >> 8) & 0xFF), (byte) (color & 0xFF));
             }
 
-            private void drawBox(int w, int h)
-            {
+            private void drawBox(int w, int h) {
                 glBegin(GL_QUADS);
                 glVertex2f(0, 0);
                 glVertex2f(0, h);
@@ -419,8 +370,7 @@
                 glEnd();
             }
 
-            private void drawBar(ProgressBar b)
-            {
+            private void drawBar(ProgressBar b) {
                 glPushMatrix();
                 // title - message
                 setColor(fontColor);
@@ -443,7 +393,7 @@
                 drawBox((barWidth - 2) * (b.getStep() + 1) / (b.getSteps() + 1), barHeight - 2); // Step can sometimes be 0.
                 // progress text
                 String progress = "" + b.getStep() + "/" + b.getSteps();
-                glTranslatef(((float)barWidth - 2) / 2 - fontRenderer.getStringWidth(progress), 2, 0);
+                glTranslatef(((float) barWidth - 2) / 2 - fontRenderer.getStringWidth(progress), 2, 0);
                 setColor(fontColor);
                 glScalef(2, 2, 1);
                 glEnable(GL_TEXTURE_2D);
@@ -478,23 +428,17 @@
                 // slidy part
 
                 long time = System.currentTimeMillis();
-                if (usedMemoryPercent > memoryColorPercent || (time - memoryColorChangeTime > 1000))
-                {
+                if (usedMemoryPercent > memoryColorPercent || (time - memoryColorChangeTime > 1000)) {
                     memoryColorChangeTime = time;
                     memoryColorPercent = usedMemoryPercent;
                 }
 
                 int memoryBarColor;
-                if (memoryColorPercent < 0.75f)
-                {
+                if (memoryColorPercent < 0.75f) {
                     memoryBarColor = memoryGoodColor;
-                }
-                else if (memoryColorPercent < 0.85f)
-                {
+                } else if (memoryColorPercent < 0.85f) {
                     memoryBarColor = memoryWarnColor;
-                }
-                else
-                {
+                } else {
                     memoryBarColor = memoryLowColor;
                 }
                 setColor(memoryLowColor);
@@ -507,7 +451,7 @@
 
                 // progress text
                 String progress = getMemoryString(usedMemory) + " / " + getMemoryString(maxMemory);
-                glTranslatef(((float)barWidth - 2) / 2 - fontRenderer.getStringWidth(progress), 2, 0);
+                glTranslatef(((float) barWidth - 2) / 2 - fontRenderer.getStringWidth(progress), 2, 0);
                 setColor(fontColor);
                 glScalef(2, 2, 1);
                 glEnable(GL_TEXTURE_2D);
@@ -515,32 +459,26 @@
                 glPopMatrix();
             }
 
-            private String getMemoryString(int memory)
-            {
+            private String getMemoryString(int memory) {
                 return StringUtils.leftPad(Integer.toString(memory), 4, ' ') + " MB";
             }
 
-            private void setGL()
-            {
+            private void setGL() {
                 lock.lock();
-                try
-                {
+                try {
                     Display.getDrawable().makeCurrent();
-                }
-                catch (LWJGLException e)
-                {
+                } catch (LWJGLException e) {
                     FMLLog.log.error("Error setting GL context:", e);
                     throw new RuntimeException(e);
                 }
-                glClearColor((float)((backgroundColor >> 16) & 0xFF) / 0xFF, (float)((backgroundColor >> 8) & 0xFF) / 0xFF, (float)(backgroundColor & 0xFF) / 0xFF, 1);
+                glClearColor((float) ((backgroundColor >> 16) & 0xFF) / 0xFF, (float) ((backgroundColor >> 8) & 0xFF) / 0xFF, (float) (backgroundColor & 0xFF) / 0xFF, 1);
                 glDisable(GL_LIGHTING);
                 glDisable(GL_DEPTH_TEST);
                 glEnable(GL_BLEND);
                 glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
             }
 
-            private void clearGL()
-            {
+            private void clearGL() {
                 Minecraft mc = Minecraft.getMinecraft();
                 mc.displayWidth = Display.getWidth();
                 mc.displayHeight = Display.getHeight();
@@ -550,26 +488,19 @@
                 glDepthFunc(GL_LEQUAL);
                 glEnable(GL_ALPHA_TEST);
                 glAlphaFunc(GL_GREATER, .1f);
-                try
-                {
+                try {
                     Display.getDrawable().releaseContext();
-                }
-                catch (LWJGLException e)
-                {
+                } catch (LWJGLException e) {
                     FMLLog.log.error("Error releasing GL context:", e);
                     throw new RuntimeException(e);
-                }
-                finally
-                {
+                } finally {
                     lock.unlock();
                 }
             }
         });
-        thread.setUncaughtExceptionHandler(new UncaughtExceptionHandler()
-        {
+        thread.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {
             @Override
-            public void uncaughtException(Thread t, Throwable e)
-            {
+            public void uncaughtException(Thread t, Throwable e) {
                 FMLLog.log.error("Splash thread Exception", e);
                 threadError = e;
             }
@@ -579,14 +510,12 @@
     }
 
     private static int max_texture_size = -1;
-    public static int getMaxTextureSize()
-    {
+
+    public static int getMaxTextureSize() {
         if (max_texture_size != -1) return max_texture_size;
-        for (int i = 0x4000; i > 0; i >>= 1)
-        {
+        for (int i = 0x4000; i > 0; i >>= 1) {
             GlStateManager.glTexImage2D(GL_PROXY_TEXTURE_2D, 0, GL_RGBA, i, i, 0, GL_RGBA, GL_UNSIGNED_BYTE, null);
-            if (GlStateManager.glGetTexLevelParameteri(GL_PROXY_TEXTURE_2D, 0, GL_TEXTURE_WIDTH) != 0)
-            {
+            if (GlStateManager.glGetTexLevelParameteri(GL_PROXY_TEXTURE_2D, 0, GL_TEXTURE_WIDTH) != 0) {
                 max_texture_size = i;
                 return i;
             }
@@ -594,33 +523,29 @@
         return -1;
     }
 
-    private static void checkThreadState()
-    {
-        if(thread.getState() == Thread.State.TERMINATED || threadError != null)
-        {
+    private static void checkThreadState() {
+        if (thread.getState() == Thread.State.TERMINATED || threadError != null) {
             throw new IllegalStateException("Splash thread", threadError);
         }
     }
+
     /**
      * Call before you need to explicitly modify GL context state during loading.
      * Resource loading doesn't usually require this call.
      * Call {@link #resume()} when you're done.
+     *
      * @deprecated not a stable API, will break, don't use this yet
      */
     @Deprecated
-    public static void pause()
-    {
-        if(!enabled) return;
+    public static void pause() {
+        if (!enabled) return;
         checkThreadState();
         pause = true;
         lock.lock();
-        try
-        {
+        try {
             d.releaseContext();
             Display.getDrawable().makeCurrent();
-        }
-        catch (LWJGLException e)
-        {
+        } catch (LWJGLException e) {
             FMLLog.log.error("Error setting GL context:", e);
             throw new RuntimeException(e);
         }
@@ -630,29 +555,23 @@
      * @deprecated not a stable API, will break, don't use this yet
      */
     @Deprecated
-    public static void resume()
-    {
-        if(!enabled) return;
+    public static void resume() {
+        if (!enabled) return;
         checkThreadState();
         pause = false;
-        try
-        {
+        try {
             Display.getDrawable().releaseContext();
             d.makeCurrent();
-        }
-        catch (LWJGLException e)
-        {
+        } catch (LWJGLException e) {
             FMLLog.log.error("Error releasing GL context:", e);
             throw new RuntimeException(e);
         }
         lock.unlock();
     }
 
-    public static void finish()
-    {
-        if(!enabled) return;
-        try
-        {
+    public static void finish() {
+        if (!enabled) return;
+        try {
             checkThreadState();
             done = true;
             thread.join();
@@ -662,37 +581,27 @@
             fontTexture.delete();
             logoTexture.delete();
             forgeTexture.delete();
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             FMLLog.log.error("Error finishing SplashProgress:", e);
             disableSplash(e);
         }
     }
 
-    private static boolean disableSplash(Exception e)
-    {
-        if (disableSplash())
-        {
-            throw new EnhancedRuntimeException(e)
-            {
+    private static boolean disableSplash(Exception e) {
+        if (disableSplash()) {
+            throw new EnhancedRuntimeException(e) {
                 @Override
-                protected void printStackTrace(WrappedPrintStream stream)
-                {
+                protected void printStackTrace(WrappedPrintStream stream) {
                     stream.println("SplashProgress has detected a error loading Minecraft.");
                     stream.println("This can sometimes be caused by bad video drivers.");
                     stream.println("We have automatically disabled the new Splash Screen in config/splash.properties.");
                     stream.println("Try reloading minecraft before reporting any errors.");
                 }
             };
-        }
-        else
-        {
-            throw new EnhancedRuntimeException(e)
-            {
+        } else {
+            throw new EnhancedRuntimeException(e) {
                 @Override
-                protected void printStackTrace(WrappedPrintStream stream)
-                {
+                protected void printStackTrace(WrappedPrintStream stream) {
                     stream.println("SplashProgress has detected a error loading Minecraft.");
                     stream.println("This can sometimes be caused by bad video drivers.");
                     stream.println("Please try disabling the new Splash Screen in config/splash.properties.");
@@ -702,8 +611,7 @@
         }
     }
 
-    private static boolean disableSplash()
-    {
+    private static boolean disableSplash() {
         File configFile = new File(Minecraft.getMinecraft().mcDataDir, "config/splash.properties");
         File parent = configFile.getParentFile();
         if (!parent.exists())
@@ -712,26 +620,19 @@
         enabled = false;
         config.setProperty("enabled", "false");
 
-        try (Writer w = new OutputStreamWriter(new FileOutputStream(configFile), StandardCharsets.UTF_8))
-        {
+        try (Writer w = new OutputStreamWriter(new FileOutputStream(configFile), StandardCharsets.UTF_8)) {
             config.store(w, "Splash screen properties");
-        }
-        catch(IOException e)
-        {
+        } catch (IOException e) {
             FMLLog.log.error("Could not save the splash.properties file", e);
             return false;
         }
         return true;
     }
 
-    private static IResourcePack createResourcePack(File file)
-    {
-        if(file.isDirectory())
-        {
+    private static IResourcePack createResourcePack(File file) {
+        if (file.isDirectory()) {
             return new FolderResourcePack(file);
-        }
-        else
-        {
+        } else {
             return new FileResourcePack(file);
         }
     }
@@ -739,8 +640,7 @@
     private static final IntBuffer buf = BufferUtils.createIntBuffer(4 * 1024 * 1024);
 
     @SuppressWarnings("unused")
-    private static class Texture
-    {
+    private static class Texture {
         private final ResourceLocation location;
         private final int name;
         private final int width;
@@ -748,69 +648,58 @@
         private final int frames;
         private final int size;
 
-        public Texture(ResourceLocation location, @Nullable ResourceLocation fallback)
-        {
+        public Texture(ResourceLocation location, @Nullable ResourceLocation fallback) {
             this(location, fallback, true);
         }
 
-        public Texture(ResourceLocation location, @Nullable ResourceLocation fallback, boolean allowRP)
-        {
+        public Texture(ResourceLocation location, @Nullable ResourceLocation fallback, boolean allowRP) {
             InputStream s = null;
-            try
-            {
+            try {
                 this.location = location;
                 s = open(location, fallback, allowRP);
                 ImageInputStream stream = ImageIO.createImageInputStream(s);
                 Iterator<ImageReader> readers = ImageIO.getImageReaders(stream);
-                if(!readers.hasNext()) throw new IOException("No suitable reader found for image" + location);
+                if (!readers.hasNext()) throw new IOException("No suitable reader found for image" + location);
                 ImageReader reader = readers.next();
                 reader.setInput(stream);
                 int frames = reader.getNumImages(true);
                 BufferedImage[] images = new BufferedImage[frames];
-                for(int i = 0; i < frames; i++)
-                {
+                for (int i = 0; i < frames; i++) {
                     images[i] = reader.read(i);
                 }
                 reader.dispose();
                 width = images[0].getWidth();
                 int height = images[0].getHeight();
                 // Animation strip
-                if (height > width && height % width == 0)
-                {
+                if (height > width && height % width == 0) {
                     frames = height / width;
                     BufferedImage original = images[0];
                     height = width;
                     images = new BufferedImage[frames];
-                    for (int i = 0; i < frames; i++)
-                    {
+                    for (int i = 0; i < frames; i++) {
                         images[i] = original.getSubimage(0, i * height, width, height);
                     }
                 }
                 this.frames = frames;
                 this.height = height;
                 int size = 1;
-                while((size / width) * (size / height) < frames) size *= 2;
+                while ((size / width) * (size / height) < frames) size *= 2;
                 this.size = size;
                 glEnable(GL_TEXTURE_2D);
-                synchronized(SplashProgress.class)
-                {
+                synchronized (SplashProgress.class) {
                     name = glGenTextures();
                     glBindTexture(GL_TEXTURE_2D, name);
                 }
                 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
                 glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
-                glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, size, size, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)null);
+                glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, size, size, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer) null);
                 checkGLError("Texture creation");
-                for(int i = 0; i * (size / width) < frames; i++)
-                {
-                    for(int j = 0; i * (size / width) + j < frames && j < size / width; j++)
-                    {
+                for (int i = 0; i * (size / width) < frames; i++) {
+                    for (int j = 0; i * (size / width) + j < frames && j < size / width; j++) {
                         buf.clear();
                         BufferedImage image = images[i * (size / width) + j];
-                        for(int k = 0; k < height; k++)
-                        {
-                            for(int l = 0; l < width; l++)
-                            {
+                        for (int k = 0; k < height; k++) {
+                            for (int l = 0; l < width; l++) {
                                 buf.put(image.getRGB(l, k));
                             }
                         }
@@ -821,145 +710,113 @@
                 }
                 glBindTexture(GL_TEXTURE_2D, 0);
                 glDisable(GL_TEXTURE_2D);
-            }
-            catch(IOException e)
-            {
+            } catch (IOException e) {
                 FMLLog.log.error("Error reading texture from file: {}", location, e);
                 throw new RuntimeException(e);
-            }
-            finally
-            {
+            } finally {
                 IOUtils.closeQuietly(s);
             }
         }
 
-        public ResourceLocation getLocation()
-        {
+        public ResourceLocation getLocation() {
             return location;
         }
 
-        public int getName()
-        {
+        public int getName() {
             return name;
         }
 
-        public int getWidth()
-        {
+        public int getWidth() {
             return width;
         }
 
-        public int getHeight()
-        {
+        public int getHeight() {
             return height;
         }
 
-        public int getFrames()
-        {
+        public int getFrames() {
             return frames;
         }
 
-        public int getSize()
-        {
+        public int getSize() {
             return size;
         }
 
-        public void bind()
-        {
+        public void bind() {
             glBindTexture(GL_TEXTURE_2D, name);
         }
 
-        public void delete()
-        {
+        public void delete() {
             glDeleteTextures(name);
         }
 
-        public float getU(int frame, float u)
-        {
+        public float getU(int frame, float u) {
             return width * (frame % (size / width) + u) / size;
         }
 
-        public float getV(int frame, float v)
-        {
+        public float getV(int frame, float v) {
             return height * (frame / (size / width) + v) / size;
         }
 
-        public void texCoord(int frame, float u, float v)
-        {
+        public void texCoord(int frame, float u, float v) {
             glTexCoord2f(getU(frame, u), getV(frame, v));
         }
     }
 
-    private static class SplashFontRenderer extends FontRenderer
-    {
-        public SplashFontRenderer()
-        {
+    private static class SplashFontRenderer extends FontRenderer {
+        public SplashFontRenderer() {
             super(Minecraft.getMinecraft().gameSettings, fontTexture.getLocation(), null, false);
             super.onResourceManagerReload(null);
         }
 
         @Override
-        protected void bindTexture(@Nonnull ResourceLocation location)
-        {
-            if(location != locationFontTexture) throw new IllegalArgumentException();
+        protected void bindTexture(@Nonnull ResourceLocation location) {
+            if (location != locationFontTexture) throw new IllegalArgumentException();
             fontTexture.bind();
         }
 
         @Nonnull
         @Override
-        protected IResource getResource(@Nonnull ResourceLocation location) throws IOException
-        {
+        protected IResource getResource(@Nonnull ResourceLocation location) throws IOException {
             DefaultResourcePack pack = Minecraft.getMinecraft().mcDefaultResourcePack;
             return new SimpleResource(pack.getPackName(), location, pack.getInputStream(location), null, null);
         }
     }
 
-    public static void drawVanillaScreen(TextureManager renderEngine) throws LWJGLException
-    {
-        if(!enabled)
-        {
+    public static void drawVanillaScreen(TextureManager renderEngine) throws LWJGLException {
+        if (!enabled) {
             Minecraft.getMinecraft().drawSplashScreen(renderEngine);
         }
     }
 
-    public static void clearVanillaResources(TextureManager renderEngine, ResourceLocation mojangLogo)
-    {
-        if(!enabled)
-        {
+    public static void clearVanillaResources(TextureManager renderEngine, ResourceLocation mojangLogo) {
+        if (!enabled) {
             renderEngine.deleteTexture(mojangLogo);
         }
     }
 
-    public static void checkGLError(String where)
-    {
+    public static void checkGLError(String where) {
         int err = glGetError();
-        if (err != 0)
-        {
+        if (err != 0) {
             throw new IllegalStateException(where + ": " + GLU.gluErrorString(err));
         }
     }
 
-    private static InputStream open(ResourceLocation loc, @Nullable ResourceLocation fallback, boolean allowResourcePack) throws IOException
-    {
+    private static InputStream open(ResourceLocation loc, @Nullable ResourceLocation fallback, boolean allowResourcePack) throws IOException {
         if (!allowResourcePack)
             return mcPack.getInputStream(loc);
 
-        if(miscPack.resourceExists(loc))
-        {
+        if (miscPack.resourceExists(loc)) {
             return miscPack.getInputStream(loc);
-        }
-        else if(fmlPack.resourceExists(loc))
-        {
+        } else if (fmlPack.resourceExists(loc)) {
             return fmlPack.getInputStream(loc);
-        }
-        else if(!mcPack.resourceExists(loc) && fallback != null)
-        {
+        } else if (!mcPack.resourceExists(loc) && fallback != null) {
             return open(fallback, null, true);
         }
         return mcPack.getInputStream(loc);
     }
 
-    private static int bytesToMb(long bytes)
-    {
+    private static int bytesToMb(long bytes) {
         return (int) (bytes / 1024L / 1024L);
     }
 }
