--- ../src-base/minecraft/net/minecraftforge/fml/client/IModGuiFactory.java
+++ ../src-work/minecraft/net/minecraftforge/fml/client/IModGuiFactory.java
@@ -19,10 +19,11 @@
 
 package net.minecraftforge.fml.client;
 
-import java.util.Set;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreen;
 
+import java.util.Set;
+
 /**
  * This is the interface you need to implement if you want to provide a customized config screen.
  * {@link DefaultGuiFactory} provides a default implementation of this interface and will be used
@@ -35,13 +36,14 @@
      * @param minecraftInstance the instance
      */
     void initialize(Minecraft minecraftInstance);
-    
+
     /**
      * If this method returns false, the config button in the mod list will be disabled
+     *
      * @return true if this object provides a config gui screen, false otherwise
      */
     boolean hasConfigGui();
-    
+
     /**
      * Return an initialized {@link GuiScreen}. This screen will be displayed
      * when the "config" button is pressed in the mod list. It will
@@ -49,7 +51,7 @@
      * Minecraft GUIs. The expected behaviour is that this screen will replace the
      * "mod list" screen completely, and will return to the mod list screen through
      * the parent link, once the appropriate action is taken from the config screen.
-     *
+     * <p>
      * This config GUI is anticipated to provide configuration to the mod in a friendly
      * visual way. It should not be abused to set internals such as IDs (they're gonna
      * keep disappearing anyway), but rather, interesting behaviours. This config GUI
@@ -58,23 +60,23 @@
      * can be changed here.
      *
      * @param parentScreen The screen to which must be returned when closing the
-     * returned screen.
+     *                     returned screen.
      * @return A class that will be instantiated on clicks on the config button
-     *  or null if no GUI is desired.
+     * or null if no GUI is desired.
      */
     GuiScreen createConfigGui(GuiScreen parentScreen);
 
     /**
      * Return a list of the "runtime" categories this mod wishes to populate with
      * GUI elements.
-     *
+     * <p>
      * Runtime categories are created on demand and organized in a 'lite' tree format.
      * The parent represents the parent node in the tree. There is one special parent
      * 'Help' that will always list first, and is generally meant to provide Help type
      * content for mods. The remaining parents will sort alphabetically, though
      * this may change if there is a lot of alphabetic abuse. "AAA" is probably never a valid
      * category parent.
-     *
+     * <p>
      * Runtime configuration itself falls into two flavours: in-game help, which is
      * generally non interactive except for the text it wishes to show, and client-only
      * affecting behaviours. This would include things like toggling minimaps, or cheat modes
@@ -90,14 +92,12 @@
      * Represents an option category and entry in the runtime gui options list.
      *
      * @author cpw
-     *
      */
     public static class RuntimeOptionCategoryElement {
         public final String parent;
         public final String child;
 
-        public RuntimeOptionCategoryElement(String parent, String child)
-        {
+        public RuntimeOptionCategoryElement(String parent, String child) {
             this.parent = parent;
             this.child = child;
         }
