--- ../src-base/minecraft/net/minecraftforge/fml/client/GuiModList.java
+++ ../src-work/minecraft/net/minecraftforge/fml/client/GuiModList.java
@@ -19,37 +19,21 @@
 
 package net.minecraftforge.fml.client;
 
-import java.awt.Dimension;
-import java.awt.image.BufferedImage;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Map.Entry;
-
-import javax.annotation.Nullable;
-
+import com.google.common.base.Strings;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.gui.GuiButton;
-import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.gui.GuiTextField;
-import net.minecraft.client.gui.GuiUtilRenderComponents;
+import net.minecraft.client.gui.*;
+import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
-import net.minecraft.client.renderer.texture.TextureUtil;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.client.resources.IResourcePack;
-import net.minecraft.util.text.ITextComponent;
-import net.minecraft.util.text.TextComponentString;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
+import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.TextComponentString;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.ForgeVersion.CheckResult;
@@ -59,50 +43,65 @@
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.common.ModContainer.Disableable;
 import net.minecraftforge.fml.common.versioning.ComparableVersion;
-import static net.minecraft.util.text.TextFormatting.*;
-
 import org.lwjgl.input.Mouse;
-
-import com.google.common.base.Strings;
 import org.lwjgl.opengl.GL11;
 
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map.Entry;
+
+import static net.minecraft.util.text.TextFormatting.RED;
+import static net.minecraft.util.text.TextFormatting.WHITE;
+
 /**
  * @author cpw
- *
  */
-public class GuiModList extends GuiScreen
-{
-    private enum SortType implements Comparator<ModContainer>
-    {
+public class GuiModList extends GuiScreen {
+    private enum SortType implements Comparator<ModContainer> {
         NORMAL(24),
-        A_TO_Z(25){ @Override protected int compare(String name1, String name2){ return name1.compareTo(name2); }},
-        Z_TO_A(26){ @Override protected int compare(String name1, String name2){ return name2.compareTo(name1); }};
+        A_TO_Z(25) {
+            @Override
+            protected int compare(String name1, String name2) {
+                return name1.compareTo(name2);
+            }
+        },
+        Z_TO_A(26) {
+            @Override
+            protected int compare(String name1, String name2) {
+                return name2.compareTo(name1);
+            }
+        };
 
         private int buttonID;
 
-        private SortType(int buttonID)
-        {
+        private SortType(int buttonID) {
             this.buttonID = buttonID;
         }
 
         @Nullable
-        public static SortType getTypeForButton(GuiButton button)
-        {
-            for (SortType t : values())
-            {
-                if (t.buttonID == button.id)
-                {
+        public static SortType getTypeForButton(GuiButton button) {
+            for (SortType t : values()) {
+                if (t.buttonID == button.id) {
                     return t;
                 }
             }
             return null;
         }
 
-        protected int compare(String name1, String name2){ return 0; }
+        protected int compare(String name1, String name2) {
+            return 0;
+        }
 
         @Override
-        public int compare(ModContainer o1, ModContainer o2)
-        {
+        public int compare(ModContainer o1, ModContainer o2) {
             String name1 = StringUtils.stripControlCodes(o1.getName()).toLowerCase();
             String name2 = StringUtils.stripControlCodes(o2.getName()).toLowerCase();
             return compare(name1, name2);
@@ -131,27 +130,21 @@
     /**
      * @param mainMenu
      */
-    public GuiModList(GuiScreen mainMenu)
-    {
+    public GuiModList(GuiScreen mainMenu) {
         this.mainMenu = mainMenu;
         this.mods = new ArrayList<ModContainer>();
         FMLClientHandler.instance().addSpecialModEntries(mods);
         // Add child mods to their parent's list
-        for (ModContainer mod : Loader.instance().getModList())
-        {
-            if (mod.getMetadata() != null && mod.getMetadata().parentMod == null && !Strings.isNullOrEmpty(mod.getMetadata().parent))
-            {
+        for (ModContainer mod : Loader.instance().getModList()) {
+            if (mod.getMetadata() != null && mod.getMetadata().parentMod == null && !Strings.isNullOrEmpty(mod.getMetadata().parent)) {
                 String parentMod = mod.getMetadata().parent;
                 ModContainer parentContainer = Loader.instance().getIndexedModList().get(parentMod);
-                if (parentContainer != null)
-                {
+                if (parentContainer != null) {
                     mod.getMetadata().parentMod = parentContainer;
                     parentContainer.getMetadata().childMods.add(mod);
                     continue;
                 }
-            }
-            else if (mod.getMetadata() != null && mod.getMetadata().parentMod != null)
-            {
+            } else if (mod.getMetadata() != null && mod.getMetadata().parentMod != null) {
                 continue;
             }
             mods.add(mod);
@@ -159,13 +152,11 @@
     }
 
     @Override
-    public void initGui()
-    {
+    public void initGui() {
         int slotHeight = 35;
-        for (ModContainer mod : mods)
-        {
-            listWidth = Math.max(listWidth,getFontRenderer().getStringWidth(mod.getName()) + 10);
-            listWidth = Math.max(listWidth,getFontRenderer().getStringWidth(mod.getVersion()) + 5 + slotHeight);
+        for (ModContainer mod : mods) {
+            listWidth = Math.max(listWidth, getFontRenderer().getStringWidth(mod.getName()) + 10);
+            listWidth = Math.max(listWidth, getFontRenderer().getStringWidth(mod.getVersion()) + 5 + slotHeight);
         }
         listWidth = Math.min(listWidth, 150);
         this.modList = new GuiSlotModList(this, mods, listWidth, slotHeight);
@@ -194,8 +185,7 @@
     }
 
     @Override
-    protected void mouseClicked(int x, int y, int button) throws IOException
-    {
+    protected void mouseClicked(int x, int y, int button) throws IOException {
         super.mouseClicked(x, y, button);
         search.mouseClicked(x, y, button);
         if (button == 1 && x >= search.x && x < search.x + search.width && y >= search.y && y < search.y + search.height) {
@@ -204,26 +194,22 @@
     }
 
     @Override
-    protected void keyTyped(char c, int keyCode) throws IOException
-    {
+    protected void keyTyped(char c, int keyCode) throws IOException {
         super.keyTyped(c, keyCode);
         search.textboxKeyTyped(c, keyCode);
     }
 
     @Override
-    public void updateScreen()
-    {
+    public void updateScreen() {
         super.updateScreen();
         search.updateCursorCounter();
 
-        if (!search.getText().equals(lastFilterText))
-        {
+        if (!search.getText().equals(lastFilterText)) {
             reloadMods();
             sorted = false;
         }
 
-        if (!sorted)
-        {
+        if (!sorted) {
             reloadMods();
             Collections.sort(mods, sortType);
             selected = modList.selectedIndex = mods.indexOf(selectedMod);
@@ -231,15 +217,12 @@
         }
     }
 
-    private void reloadMods()
-    {
+    private void reloadMods() {
         ArrayList<ModContainer> mods = modList.getMods();
         mods.clear();
-        for (ModContainer m : Loader.instance().getActiveModList())
-        {
+        for (ModContainer m : Loader.instance().getActiveModList()) {
             // If it passes the filter, and is not a child mod
-            if (m.getName().toLowerCase().contains(search.getText().toLowerCase()) && m.getMetadata().parentMod == null)
-            {
+            if (m.getName().toLowerCase().contains(search.getText().toLowerCase()) && m.getMetadata().parentMod == null) {
                 mods.add(m);
             }
         }
@@ -248,18 +231,13 @@
     }
 
     @Override
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button.enabled) {
             SortType type = SortType.getTypeForButton(button);
 
-            if (type != null)
-            {
-                for (GuiButton b : buttonList)
-                {
-                    if (SortType.getTypeForButton(b) != null)
-                    {
+            if (type != null) {
+                for (GuiButton b : buttonList) {
+                    if (SortType.getTypeForButton(b) != null) {
                         b.enabled = true;
                     }
                 }
@@ -267,26 +245,18 @@
                 sorted = false;
                 sortType = type;
                 this.mods = modList.getMods();
-            }
-            else
-            {
-                switch (button.id)
-                {
-                    case 6:
-                    {
+            } else {
+                switch (button.id) {
+                    case 6: {
                         this.mc.displayGuiScreen(this.mainMenu);
                         return;
                     }
-                    case 20:
-                    {
-                        try
-                        {
+                    case 20: {
+                        try {
                             IModGuiFactory guiFactory = FMLClientHandler.instance().getGuiFactoryFor(selectedMod);
                             GuiScreen newScreen = guiFactory.createConfigGui(this);
                             this.mc.displayGuiScreen(newScreen);
-                        }
-                        catch (Exception e)
-                        {
+                        } catch (Exception e) {
                             FMLLog.log.error("There was a critical issue trying to build the config GUI for {}", selectedMod.getModId(), e);
                         }
                         return;
@@ -297,15 +267,13 @@
         super.actionPerformed(button);
     }
 
-    public int drawLine(String line, int offset, int shifty)
-    {
+    public int drawLine(String line, int offset, int shifty) {
         this.fontRenderer.drawString(line, offset, shifty, 0xd7edea);
         return shifty + 10;
     }
 
     @Override
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
         this.modList.drawScreen(mouseX, mouseY, partialTicks);
         if (this.modInfo != null)
             this.modInfo.drawScreen(mouseX, mouseY, partialTicks);
@@ -321,8 +289,7 @@
     }
 
     @Override
-    public void handleMouseInput() throws IOException
-    {
+    public void handleMouseInput() throws IOException {
         int mouseX = Mouse.getEventX() * this.width / this.mc.displayWidth;
         int mouseY = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
 
@@ -332,18 +299,15 @@
         this.modList.handleMouseInput(mouseX, mouseY);
     }
 
-    Minecraft getMinecraftInstance()
-    {
+    Minecraft getMinecraftInstance() {
         return mc;
     }
 
-    FontRenderer getFontRenderer()
-    {
+    FontRenderer getFontRenderer() {
         return fontRenderer;
     }
 
-    public void selectModIndex(int index)
-    {
+    public void selectModIndex(int index) {
         if (index == this.selected)
             return;
         this.selected = index;
@@ -352,13 +316,11 @@
         updateCache();
     }
 
-    public boolean modIndexSelected(int index)
-    {
+    public boolean modIndexSelected(int index) {
         return index == selected;
     }
 
-    private void updateCache()
-    {
+    private void updateCache() {
         configModButton.visible = false;
         disableModButton.visible = false;
         modInfo = null;
@@ -372,60 +334,48 @@
         CheckResult vercheck = ForgeVersion.getResult(selectedMod);
 
         String logoFile = selectedMod.getMetadata().logoFile;
-        if (!logoFile.isEmpty())
-        {
+        if (!logoFile.isEmpty()) {
             TextureManager tm = mc.getTextureManager();
             IResourcePack pack = FMLClientHandler.instance().getResourcePackFor(selectedMod.getModId());
-            try
-            {
+            try {
                 BufferedImage logo = null;
-                if (pack != null)
-                {
+                if (pack != null) {
                     logo = pack.getPackImage();
-                }
-                else
-                {
+                } else {
                     InputStream logoResource = getClass().getResourceAsStream(logoFile);
                     if (logoResource != null)
-                        logo = TextureUtil.readBufferedImage(logoResource);
+                        logo = ImageIO.read(logoResource);
                 }
-                if (logo != null)
-                {
+                if (logo != null) {
                     logoPath = tm.getDynamicTextureLocation("modlogo", new DynamicTexture(logo));
                     logoDims = new Dimension(logo.getWidth(), logo.getHeight());
                 }
+            } catch (IOException e) {
             }
-            catch (IOException e) { }
         }
 
-        if (!selectedMod.getMetadata().autogenerated)
-        {
+        if (!selectedMod.getMetadata().autogenerated) {
             disableModButton.visible = true;
             disableModButton.enabled = true;
             disableModButton.packedFGColour = 0;
             Disableable disableable = selectedMod.canBeDisabled();
-            if (disableable == Disableable.RESTART)
-            {
+            if (disableable == Disableable.RESTART) {
                 disableModButton.packedFGColour = 0xFF3377;
-            }
-            else if (disableable != Disableable.YES)
-            {
+            } else if (disableable != Disableable.YES) {
                 disableModButton.enabled = false;
             }
 
             IModGuiFactory guiFactory = FMLClientHandler.instance().getGuiFactoryFor(selectedMod);
             configModButton.visible = true;
             configModButton.enabled = false;
-            if (guiFactory != null)
-            {
+            if (guiFactory != null) {
                 configModButton.enabled = guiFactory.hasConfigGui();
             }
             lines.add(selectedMod.getMetadata().name);
             lines.add(String.format("Version: %s (%s)", selectedMod.getDisplayVersion(), selectedMod.getVersion()));
             lines.add(String.format("Mod ID: '%s' Mod State: %s", selectedMod.getModId(), Loader.instance().getModState(selectedMod)));
 
-            if (!selectedMod.getMetadata().credits.isEmpty())
-            {
+            if (!selectedMod.getMetadata().credits.isEmpty()) {
                 lines.add("Credits: " + selectedMod.getMetadata().credits);
             }
 
@@ -442,9 +392,7 @@
 
             lines.add(null);
             lines.add(selectedMod.getMetadata().description);
-        }
-        else
-        {
+        } else {
             lines.add(WHITE + selectedMod.getName());
             lines.add(WHITE + "Version: " + selectedMod.getVersion());
             lines.add(WHITE + "Mod State: " + Loader.instance().getModState(selectedMod));
@@ -456,12 +404,10 @@
             lines.add(RED + "Ask your mod author to provide a mod mcmod.info file");
         }
 
-        if ((vercheck.status == Status.OUTDATED || vercheck.status == Status.BETA_OUTDATED) && vercheck.changes.size() > 0)
-        {
+        if ((vercheck.status == Status.OUTDATED || vercheck.status == Status.BETA_OUTDATED) && vercheck.changes.size() > 0) {
             lines.add(null);
             lines.add("Changes:");
-            for (Entry<ComparableVersion, String> entry : vercheck.changes.entrySet())
-            {
+            for (Entry<ComparableVersion, String> entry : vercheck.changes.entrySet()) {
                 lines.add("  " + entry.getKey() + ":");
                 lines.add(entry.getValue());
                 lines.add(null);
@@ -471,105 +417,108 @@
         modInfo = new Info(this.width - this.listWidth - 30, lines, logoPath, logoDims);
     }
 
-    private class Info extends GuiScrollingList
-    {
+    private class Info extends GuiScrollingList {
         @Nullable
         private ResourceLocation logoPath;
         private Dimension logoDims;
         private List<ITextComponent> lines = null;
 
-        public Info(int width, List<String> lines, @Nullable ResourceLocation logoPath, Dimension logoDims)
-        {
+        public Info(int width, List<String> lines, @Nullable ResourceLocation logoPath, Dimension logoDims) {
             super(GuiModList.this.getMinecraftInstance(),
-                  width,
-                  GuiModList.this.height,
-                  32, GuiModList.this.height - 88 + 4,
-                  GuiModList.this.listWidth + 20, 60,
-                  GuiModList.this.width,
-                  GuiModList.this.height);
-            this.lines    = resizeContent(lines);
+                    width,
+                    GuiModList.this.height,
+                    32, GuiModList.this.height - 88 + 4,
+                    GuiModList.this.listWidth + 20, 60,
+                    GuiModList.this.width,
+                    GuiModList.this.height);
+            this.lines = resizeContent(lines);
             this.logoPath = logoPath;
             this.logoDims = logoDims;
 
             this.setHeaderInfo(true, getHeaderHeight());
         }
 
-        @Override protected int getSize() { return 0; }
-        @Override protected void elementClicked(int index, boolean doubleClick) { }
-        @Override protected boolean isSelected(int index) { return false; }
-        @Override protected void drawBackground() {}
-        @Override protected void drawSlot(int slotIdx, int entryRight, int slotTop, int slotBuffer, Tessellator tess) { }
+        @Override
+        protected int getSize() {
+            return 0;
+        }
 
-        private List<ITextComponent> resizeContent(List<String> lines)
-        {
+        @Override
+        protected void elementClicked(int index, boolean doubleClick) {
+        }
+
+        @Override
+        protected boolean isSelected(int index) {
+            return false;
+        }
+
+        @Override
+        protected void drawBackground() {
+        }
+
+        @Override
+        protected void drawSlot(int slotIdx, int entryRight, int slotTop, int slotBuffer, Tessellator tess) {
+        }
+
+        private List<ITextComponent> resizeContent(List<String> lines) {
             List<ITextComponent> ret = new ArrayList<ITextComponent>();
-            for (String line : lines)
-            {
-                if (line == null)
-                {
+            for (String line : lines) {
+                if (line == null) {
                     ret.add(null);
                     continue;
                 }
 
                 ITextComponent chat = ForgeHooks.newChatWithLinks(line, false);
                 int maxTextLength = this.listWidth - 8;
-                if (maxTextLength >= 0)
-                {
+                if (maxTextLength >= 0) {
                     ret.addAll(GuiUtilRenderComponents.splitText(chat, maxTextLength, GuiModList.this.fontRenderer, false, true));
                 }
             }
             return ret;
         }
 
-        private int getHeaderHeight()
-        {
-          int height = 0;
-          if (logoPath != null)
-          {
-              double scaleX = logoDims.width / 200.0;
-              double scaleY = logoDims.height / 65.0;
-              double scale = 1.0;
-              if (scaleX > 1 || scaleY > 1)
-              {
-                  scale = 1.0 / Math.max(scaleX, scaleY);
-              }
-              logoDims.width *= scale;
-              logoDims.height *= scale;
+        private int getHeaderHeight() {
+            int height = 0;
+            if (logoPath != null) {
+                double scaleX = logoDims.width / 200.0;
+                double scaleY = logoDims.height / 65.0;
+                double scale = 1.0;
+                if (scaleX > 1 || scaleY > 1) {
+                    scale = 1.0 / Math.max(scaleX, scaleY);
+                }
+                logoDims.width *= scale;
+                logoDims.height *= scale;
 
-              height += logoDims.height;
-              height += 10;
-          }
-          height += (lines.size() * 10);
-          if (height < this.bottom - this.top - 8) height = this.bottom - this.top - 8;
-          return height;
+                height += logoDims.height;
+                height += 10;
+            }
+            height += (lines.size() * 10);
+            if (height < this.bottom - this.top - 8) height = this.bottom - this.top - 8;
+            return height;
         }
 
 
         @Override
-        protected void drawHeader(int entryRight, int relativeY, Tessellator tess)
-        {
+        protected void drawHeader(int entryRight, int relativeY, Tessellator tess) {
             int top = relativeY;
 
-            if (logoPath != null)
-            {
+            if (logoPath != null) {
                 GlStateManager.enableBlend();
                 GuiModList.this.mc.renderEngine.bindTexture(logoPath);
                 BufferBuilder wr = tess.getBuffer();
-                int offset = (this.left + this.listWidth/2) - (logoDims.width / 2);
+                int offset = (this.left + this.listWidth / 2) - (logoDims.width / 2);
                 wr.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX);
-                wr.pos(offset,                  top + logoDims.height, zLevel).tex(0, 1).endVertex();
+                wr.pos(offset, top + logoDims.height, zLevel).tex(0, 1).endVertex();
                 wr.pos(offset + logoDims.width, top + logoDims.height, zLevel).tex(1, 1).endVertex();
-                wr.pos(offset + logoDims.width, top,                   zLevel).tex(1, 0).endVertex();
-                wr.pos(offset,                  top,                   zLevel).tex(0, 0).endVertex();
+                wr.pos(offset + logoDims.width, top, zLevel).tex(1, 0).endVertex();
+                wr.pos(offset, top, zLevel).tex(0, 0).endVertex();
                 tess.draw();
                 GlStateManager.disableBlend();
                 top += logoDims.height + 10;
             }
 
-            for (ITextComponent line : lines)
-            {
-                if (line != null)
-                {
+            for (ITextComponent line : lines) {
+                if (line != null) {
                     GlStateManager.enableBlend();
                     GuiModList.this.fontRenderer.drawStringWithShadow(line.getFormattedText(), this.left + 4, top, 0xFFFFFF);
                     GlStateManager.disableAlpha();
@@ -580,11 +529,10 @@
         }
 
         @Override
-        protected void clickHeader(int x, int y)
-        {
+        protected void clickHeader(int x, int y) {
             int offset = y;
             if (logoPath != null) {
-              offset -= logoDims.height + 10;
+                offset -= logoDims.height + 10;
             }
             if (offset <= 0)
                 return;
@@ -594,15 +542,13 @@
                 return;
 
             ITextComponent line = lines.get(lineIdx);
-            if (line != null)
-            {
+            if (line != null) {
                 int k = -4;
                 for (ITextComponent part : line) {
                     if (!(part instanceof TextComponentString))
                         continue;
-                    k += GuiModList.this.fontRenderer.getStringWidth(((TextComponentString)part).getText());
-                    if (k >= x)
-                    {
+                    k += GuiModList.this.fontRenderer.getStringWidth(((TextComponentString) part).getText());
+                    if (k >= x) {
                         GuiModList.this.handleComponentClick(part);
                         break;
                     }
