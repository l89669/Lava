--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/libraries/Artifact.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/libraries/Artifact.java
@@ -19,15 +19,14 @@
 
 package net.minecraftforge.fml.relauncher.libraries;
 
+import org.apache.maven.artifact.versioning.ComparableVersion;
+
 import java.io.File;
 import java.text.ParseException;
 import java.util.Date;
 import java.util.Locale;
 
-import org.apache.maven.artifact.versioning.ComparableVersion;
-
-public class Artifact implements Comparable<Artifact>
-{
+public class Artifact implements Comparable<Artifact> {
     private final Repository repo;
     private final String group;
     private final String artifact;
@@ -41,18 +40,15 @@
     private String filename;
     private String folder;
 
-    public Artifact(Repository repo, String value, String timestamp)
-    {
+    public Artifact(Repository repo, String value, String timestamp) {
         this.repo = repo;
         this.value = value;
 
         int idx = value.indexOf('@');
-        if (idx > 0)
-        {
+        if (idx > 0) {
             this.extension = value.substring(idx + 1);
             value = value.substring(0, idx);
-        }
-        else
+        } else
             this.extension = "jar";
 
         String[] parts = value.split(":");
@@ -61,18 +57,14 @@
         this.version = new ComparableVersion(parts[2]);
         this.classifier = parts.length > 3 ? parts[3] : null;
         this.timestamp = isSnapshot() ? timestamp : null;
-        try
-        {
+        try {
             this.date = this.timestamp == null ? null : SnapshotJson.TIMESTAMP.parse(this.timestamp);
-        }
-        catch (ParseException e)
-        {
+        } catch (ParseException e) {
             throw new RuntimeException(e); //TODO: Better logging?
         }
     }
 
-    public Artifact(Artifact other, Repository repo, String timestamp)
-    {
+    public Artifact(Artifact other, Repository repo, String timestamp) {
         this.repo = repo;
         this.group = other.group;
         this.artifact = other.artifact;
@@ -81,32 +73,25 @@
         this.value = other.value;
         this.version = other.version;
         this.timestamp = timestamp;
-        try
-        {
+        try {
             this.date = this.timestamp == null ? null : SnapshotJson.TIMESTAMP.parse(this.timestamp);
-        }
-        catch (ParseException e)
-        {
+        } catch (ParseException e) {
             throw new RuntimeException(e); //TODO: Better logging?
         }
     }
 
     @Override
-    public String toString()
-    {
+    public String toString() {
         return this.value;
     }
 
     @Override
-    public int hashCode()
-    {
+    public int hashCode() {
         return this.value.hashCode();
     }
 
-    public String getFilename()
-    {
-        if (this.filename == null)
-        {
+    public String getFilename() {
+        if (this.filename == null) {
             StringBuilder sb = new StringBuilder();
             sb.append(artifact).append('-').append(version);
             if (isSnapshot() && timestamp != null)
@@ -119,10 +104,8 @@
         return this.filename;
     }
 
-    public String getFolder()
-    {
-        if (folder == null)
-        {
+    public String getFolder() {
+        if (folder == null) {
             StringBuilder sb = new StringBuilder();
             for (String part : group.split("\\."))
                 sb.append(part).append(File.separatorChar);
@@ -133,63 +116,53 @@
         return folder;
     }
 
-    public String getPath()
-    {
+    public String getPath() {
         return getFolder() + File.separatorChar + getFilename();
     }
 
-    public File getFile()
-    {
+    public File getFile() {
         return (repo != null ? repo : LibraryManager.getDefaultRepo()).getFile(getPath());
     }
 
-    public File getSnapshotMeta()
-    {
+    public File getSnapshotMeta() {
         if (!isSnapshot())
             throw new IllegalStateException("Attempted to call date suffix on non-snapshot");
         return (repo != null ? repo : LibraryManager.getDefaultRepo()).getFile(getFolder() + File.separatorChar + SnapshotJson.META_JSON_FILE);
     }
 
-    public boolean isSnapshot()
-    {
+    public boolean isSnapshot() {
         return version.toString().toLowerCase(Locale.ENGLISH).endsWith("-snapshot");
     }
 
-    public String getTimestamp()
-    {
+    public String getTimestamp() {
         if (!isSnapshot())
             throw new IllegalStateException("Attempted to call date suffix on non-snapshot");
 
         return timestamp;
     }
 
-    public ComparableVersion getVersion()
-    {
+    public ComparableVersion getVersion() {
         return this.version;
     }
 
-    public Repository getRepository()
-    {
+    public Repository getRepository() {
         return this.repo;
     }
 
-    public boolean matchesID(Artifact o)
-    {
+    public boolean matchesID(Artifact o) {
         if (o == null)
             return false;
         return group.equals(o.group) && artifact.equals(o.artifact) && (o.classifier == null ? classifier == null : o.classifier.equals(classifier)); //TODO: Case sensitive?
     }
 
-    public int compareVersion(Artifact o)
-    {
+    public int compareVersion(Artifact o) {
         int ver = version.compareTo(o.version);
         if (ver != 0 || !isSnapshot()) return ver;
         return timestamp == null ? (o.timestamp == null ? 0 : -1) : o.timestamp == null ? 1 : date.compareTo(o.date);
     }
 
     @Override
-    public int compareTo(Artifact o)
-    {
+    public int compareTo(Artifact o) {
         if (o == null) return 1;
         if (!group.equals(o.group)) return group.compareTo(o.group);
         if (!artifact.equals(o.artifact)) return artifact.compareTo(o.artifact);
