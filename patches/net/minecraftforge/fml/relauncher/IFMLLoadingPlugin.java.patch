--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/IFMLLoadingPlugin.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/IFMLLoadingPlugin.java
@@ -31,12 +31,11 @@
  * enhance the classloading lifecycle for mods in FML
  *
  * @author cpw
- *
  */
-public interface IFMLLoadingPlugin
-{
+public interface IFMLLoadingPlugin {
     /**
      * Return a list of classes that implements the IClassTransformer interface
+     *
      * @return a list of classes that implements the IClassTransformer interface
      */
     String[] getASMTransformerClass();
@@ -76,6 +75,7 @@
     /**
      * Return an optional access transformer class for this coremod. It will be injected post-deobf
      * so ensure your ATs conform to the new srgnames scheme.
+     *
      * @return the name of an access transformer class or null if none is provided
      */
     String getAccessTransformerClass();
@@ -83,18 +83,16 @@
     /**
      * Annotate your load plugin with a list of package prefixes that will *not* be
      * processed by the ASM transformation stack.
-     *
+     * <p>
      * Your plugin, and any transformers should *definitely* be in this list, because
      * otherwise you can face problems with the classloader trying to transform classes
      * with your transformer, whilst it is *loading* your transformer. Not pretty.
      *
      * @author cpw
-     *
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.TYPE)
-    @interface TransformerExclusions
-    {
+    @interface TransformerExclusions {
         String[] value() default "";
     }
 
@@ -103,43 +101,38 @@
      * minecraft is not this exact version.
      *
      * @author cpw
-     *
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.TYPE)
-    @interface MCVersion
-    {
+    @interface MCVersion {
         String value() default "";
     }
 
     /**
      * Name this coremod something other than the "short class name"
-     * @author cpw
      *
+     * @author cpw
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.TYPE)
-    @interface Name
-    {
+    @interface Name {
         String value() default "";
     }
 
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.TYPE)
-    @interface DependsOn
-    {
+    @interface DependsOn {
         String[] value() default {};
     }
 
     /**
      * A simple sorting index, interleaved with other tweakers from other sources, as well as FML
-     * @author cpw
      *
+     * @author cpw
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.TYPE)
-    @interface SortingIndex
-    {
+    @interface SortingIndex {
         int value() default 0;
     }
 
